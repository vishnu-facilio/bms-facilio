
-- Create Organizations Table
CREATE TABLE IF NOT EXISTS Organizations (
	ORGID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGNAME VARCHAR(100),
	FACILIODOMAINNAME VARCHAR(50),
	LOGO_ID BIGINT,
	PHONE CHAR(20),
	MOBILE CHAR(20),
	FAX CHAR(50),
	STREET CHAR(255),
  	CITY CHAR(255),
  	STATE CHAR(255),
  	ZIP CHAR(255),
  	COUNTRY CHAR(255),
  	KINESIS_TOPIC varchar(50),
  	TIMEZONE CHAR(100),
  	CREATED_TIME BIGINT,
  	DELETED_TIME BIGINT DEFAULT -1
);

-- Create Users Table
CREATE TABLE IF NOT EXISTS Users (
	USERID BIGINT AUTO_INCREMENT PRIMARY KEY,
	NAME VARCHAR(255),
	COGNITO_ID VARCHAR(100),
	USER_VERIFIED BOOLEAN,
	EMAIL VARCHAR(150),
	PHOTO_ID BIGINT,
	TIMEZONE CHAR(100),
	LANGUAGE CHAR(50),
	PHONE CHAR(20),
	MOBILE CHAR(20),
	STREET VARCHAR(255),
	CITY VARCHAR(255),
	STATE VARCHAR(255),
	ZIP VARCHAR(255),
	COUNTRY VARCHAR(255),
	CONSTRAINT UNIQUE_EMAIL UNIQUE(EMAIL)
);

CREATE TABLE IF NOT EXISTS User_Mobile_Setting (
	USER_MOBILE_SETTING_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	USERID BIGINT,
	MOBILE_INSTANCE_ID VARCHAR(500),
	CONSTRAINT UNIQUE_INSTANCE_ID UNIQUE(USERID, MOBILE_INSTANCE_ID),
	CONSTRAINT USER_MOBILE_SETTING_FK_USERID FOREIGN KEY (USERID) REFERENCES Users(USERID)
);

-- Create Roles Table
CREATE TABLE IF NOT EXISTS Role (
	ROLE_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT,
	NAME VARCHAR(50),
	DESCRIPTION VARCHAR(500),
	PERMISSIONS VARCHAR(50),
	CONSTRAINT ROLE_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);


-- Create ORG_Users Table
CREATE TABLE IF NOT EXISTS ORG_Users (
	ORG_USERID BIGINT AUTO_INCREMENT PRIMARY KEY,
	USERID BIGINT,
	ORGID BIGINT,
	INVITEDTIME BIGINT,
	ISDEFAULT BOOLEAN,
	USER_STATUS BOOLEAN DEFAULT TRUE,
	INVITATION_ACCEPT_STATUS BOOLEAN,
	ROLE_ID BIGINT,
	USER_TYPE TINYINT,
	DELETED_TIME BIGINT DEFAULT -1,
	CONSTRAINT ORG_USERS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ORG_USERS_FK_USERID FOREIGN KEY (USERID) REFERENCES Users(USERID) ON UPDATE CASCADE,
	CONSTRAINT ORG_USERS_FK_ROLE_ID FOREIGN KEY (ROLE_ID) REFERENCES Role(ROLE_ID)
);

CREATE TABLE IF NOT EXISTS Global_FacilioAuthToken (
	`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	authtoken DOUBLE not null,
	ORGID BIGINT not null,
	USERID BIGINT not null,
	CONSTRAINT Global_FacilioAuthToken_USERID_FK FOREIGN KEY (USERID) REFERENCES ORG_Users (ORG_USERID),
	CONSTRAINT Global_FacilioAuthToken_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

-- Create GLobal_Domain_Index
CREATE TABLE IF NOT EXISTS Global_Domain_Index (
	DOMAINNAME VARCHAR(50),
	ORGID BIGINT 
);

-- Create Jobs Table
CREATE TABLE IF NOT EXISTS Jobs (
	JOBID BIGINT,
	ORGID BIGINT,
	JOBNAME VARCHAR(50),
	IS_ACTIVE BOOLEAN,
	TRANSACTION_TIMEOUT INT,
	IS_PERIODIC BOOLEAN,	
	PERIOD INT,
	SCHEDULE_INFO VARCHAR(1000),
	NEXT_EXECUTION_TIME BIGINT,
	EXECUTOR_NAME VARCHAR(50),
	END_EXECUTION_TIME BIGINT,
	MAX_EXECUTION INT,
	CURRENT_EXECUTION_COUNT INT,
	CONSTRAINT JOBS_PK PRIMARY KEY (JOBID, JOBNAME),
	CONSTRAINT JOBS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

-- Create Jobs Table
CREATE TABLE IF NOT EXISTS System_Jobs (
	JOBID BIGINT,
	LAST_EXECUTION_TIME BIGINT,
	CONSTRAINT SYSTEM_JOBS_FK_JOBID FOREIGN KEY (JOBID) REFERENCES Jobs(JOBID)
);

CREATE TABLE IF NOT EXISTS Groups (
	GROUPID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT,
	GROUP_NAME CHAR(255),
	GROUP_EMAIL CHAR(255),
	GROUP_DESC TEXT(1000),
	IS_ACTIVE BOOLEAN,
	CREATED_TIME BIGINT,
	CREATED_BY BIGINT,
	PARENT BIGINT,
	CONSTRAINT GROUPS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS GroupMembers (
	MEMBERID BIGINT AUTO_INCREMENT PRIMARY KEY,
	GROUPID BIGINT,
	ORG_USERID BIGINT,
	MEMBER_ROLE INT,
	CONSTRAINT GROUP_MEMBERS_FK_ORGID FOREIGN KEY (GROUPID) REFERENCES Groups(GROUPID) ON DELETE CASCADE,
	CONSTRAINT GROUP_MEMBERS_FK_USERID FOREIGN KEY (ORG_USERID) REFERENCES ORG_Users(ORG_USERID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS UtilityProviders (
	UTILITYID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT,
	USERID BIGINT,
	LOGINURL TEXT,
	USERNAME TEXT,
	PASSWORD TEXT,
	STATUS INT,
	CONSTRAINT UTILITY_PROVIDERS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT UTILITY_PROVIDERS_FK_USERID FOREIGN KEY (USERID) REFERENCES ORG_Users(USERID) 
);

CREATE TABLE IF NOT EXISTS MeasurementType (
   TYPEID BIGINT AUTO_INCREMENT PRIMARY KEY,
   TYPENAME VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS MeasurementUnit(
   UNITID BIGINT AUTO_INCREMENT PRIMARY KEY,
   TYPEID BIGINT,
   UNITNAME VARCHAR(50),
   UNITSYMBOL VARCHAR(30),
   CONSTRAINT MEASUREMENT_UNIT_FK_TYPEID FOREIGN KEY (TYPEID) REFERENCES MeasurementType(TYPEID)
);

CREATE TABLE IF NOT EXISTS MeasurementConversion (
   TYPEID BIGINT,
   FROMUNITID  BIGINT,
   TOUNITID   BIGINT,
   FROMUNITOFFSET FLOAT,
   MULTIPLICAND FLOAT,
   DIVIDEND FLOAT,
   TOUNITOFFSET FLOAT,
   CONSTRAINT MEASUREMENT_CONVERSION_PK PRIMARY KEY (TYPEID, FROMUNITID, TOUNITID),
   CONSTRAINT MEASUREMENT_CONVERSION_FK_TYPEID FOREIGN KEY (TYPEID) REFERENCES MeasurementType(TYPEID),
   CONSTRAINT MEASUREMENT_CONVERSION_FK_FROMUNITID FOREIGN KEY (FROMUNITID) REFERENCES MeasurementUnit(UNITID),
   CONSTRAINT MEASUREMENT_CONVERSION_FK_TOUNITID FOREIGN KEY (TOUNITID) REFERENCES MeasurementUnit(UNITID)
);

CREATE TABLE IF NOT EXISTS ORGCache	(
   ORGID BIGINT,
   URL VARCHAR(500),
   CONTENT TEXT,
   EXPIREAT BIGINT,
   CONSTRAINT ORG_CACHE_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS Modules (
	MODULEID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	NAME VARCHAR(25) NOT NULL,
	DISPLAY_NAME VARCHAR(50),
	TABLE_NAME VARCHAR(50) NOT NULL,
	EXTENDS_ID BIGINT,
	CONSTRAINT MODULES_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT MODULES_FK_PARENT FOREIGN KEY (EXTENDS_ID) REFERENCES Modules(MODULEID),
	CONSTRAINT MODULES_UNQIUE UNIQUE(ORGID, NAME)
);

CREATE TABLE IF NOT EXISTS SubModulesRel (
	PARENT_MODULE_ID BIGINT,
	CHILD_MODULE_ID BIGINT,
	SUB_TYPE TINYINT NOT NULL,
	PRIMARY KEY (PARENT_MODULE_ID, CHILD_MODULE_ID),
	CONSTRAINT SUB_MODULES_REL_PARENT_FK FOREIGN KEY (PARENT_MODULE_ID) REFERENCES Modules(MODULEID),
	CONSTRAINT SUB_MODULES_REL_CHILD_FK FOREIGN KEY (CHILD_MODULE_ID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS Fields (
	FIELDID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	EXTENDED_MODULEID BIGINT,
	NAME VARCHAR(50),
	DISPLAY_NAME VARCHAR(50),
	DISPLAY_TYPE TINYINT,
	COLUMN_NAME VARCHAR(50),
	SEQUENCE_NUMBER TINYINT,
	DATA_TYPE TINYINT,
	IS_DEFAULT BOOLEAN,
	IS_MAIN_FIELD BOOLEAN,
	REQUIRED BOOLEAN,
	DISABLED BOOLEAN,
	STYLE_CLASS VARCHAR(50),
	ICON VARCHAR(20),
	PLACE_HOLDER VARCHAR(50),
	CONSTRAINT FIELDS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT FIELDS_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT FIELDS_EXTENDED_MODULEID FOREIGN KEY (EXTENDED_MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT FIELDS_NAME_UNIQUE UNIQUE (ORGID, MODULEID, NAME)
);

CREATE TABLE IF NOT EXISTS LookupFields (
	FIELDID BIGINT PRIMARY KEY,
	LOOKUP_MODULE_ID BIGINT,
	SPECIAL_TYPE VARCHAR(25),
	CONSTRAINT LOOKUP_FIELDS_FK_FIELDID FOREIGN KEY (FIELDID) REFERENCES Fields(FIELDID) ON DELETE CASCADE,
	CONSTRAINT LOOKUP_FEILDS_FK_MODULE_ID FOREIGN KEY (LOOKUP_MODULE_ID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS Locations (
  ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  ORGID BIGINT NOT NULL,
  MODULEID BIGINT NOT NULL,
  NAME CHAR(255),
  STREET CHAR(255),
  CITY CHAR(255),
  STATE CHAR(255),
  ZIP CHAR(255),
  COUNTRY CHAR(255),
  LAT DECIMAL(10, 8),
  LNG DECIMAL(11, 8),
  CONTACT_ID BIGINT NULL,
  PHONE CHAR(100),
  FAX_PHONE CHAR(100),
  CONSTRAINT LOCATIONS_ORGID_FK FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
  CONSTRAINT LOCATIONS_MODULEID_FK FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
  CONSTRAINT LOCATIONS_CONTACT_FK FOREIGN KEY (CONTACT_ID) REFERENCES ORG_Users (ORG_USERID)
);

CREATE TABLE IF NOT EXISTS BusinessHours (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	CONSTRAINT BUSINESS_HOURS_ORGID_FK FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS SingleDayBusinessHours (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	PARENT_ID BIGINT NOT NULL,
	DAY_OF_WEEK TINYINT NOT NULL,
	START_TIME TIME NOT NULL,
	END_TIME TIME NOT NULL,
	CONSTRAINT SINGLE_DAY_BUSINESS_HOURS FOREIGN KEY (PARENT_ID) REFERENCES BusinessHours(ID)
);

CREATE TABLE IF NOT EXISTS File (
  FILE_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  ORGID BIGINT NOT NULL,
  FILE_NAME CHAR(255),
  FILE_PATH CHAR(255),
  FILE_SIZE BIGINT,
  CONTENT_TYPE CHAR(255),
  UPLOADED_BY BIGINT,
  UPLOADED_TIME BIGINT,
  CONSTRAINT FILE_ORGID_FK FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS ResizedFile (
  FILE_ID BIGINT PRIMARY KEY,
  ORGID BIGINT NOT NULL,
  WIDTH INT,
  HEIGHT INT,
  FILE_PATH CHAR(255),
  FILE_SIZE BIGINT,
  CONTENT_TYPE CHAR(255),
  GENERATED_TIME BIGINT,
  CONSTRAINT RESIZEDFILE_ORGID_FK FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
  CONSTRAINT RESIZEDFILE_FK_ID FOREIGN KEY (FILE_ID) REFERENCES File(FILE_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS BaseSpace (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	DISPLAY_NAME VARCHAR(50),
	DESCRIPTION VARCHAR(1000),
	PHOTO_ID BIGINT,
	AREA DOUBLE(9,3),
	SPACE_TYPE TINYINT NOT NULL, 
	OPERATION_HOURS_START FLOAT,
	OPERATION_HOURS_END FLOAT,
	MAX_OCCUPANCY INT,
	LOCAL_ID INT,
	SITE_ID BIGINT,
	BUILDING_ID BIGINT,
	FLOOR_ID BIGINT,
	CONSTRAINT BASE_SPACE_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT BASE_SPACE_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT BASE_SPACE_FK_PHOTO_ID FOREIGN KEY (PHOTO_ID) REFERENCES File (FILE_ID),
	CONSTRAINT BASE_SPACE_FK_SITE_ID FOREIGN KEY (SITE_ID) REFERENCES BaseSpace (ID),
	CONSTRAINT BASE_SPACE_FK_BUILDING_ID FOREIGN KEY (BUILDING_ID) REFERENCES BaseSpace (ID),
	CONSTRAINT BASE_SPACE_FK_FLOOR_ID FOREIGN KEY (FLOOR_ID) REFERENCES BaseSpace (ID)
);

CREATE TABLE IF NOT EXISTS Current_Occupancy_Reading (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	TTIME BIGINT NOT NULL,
	TTIME_DATE DATE NOT NULL,
	TTIME_MONTH INT NOT NULL,
	TTIME_WEEK INT NOT NULL,
	TTIME_DAY INT NOT NULL,
	TTIME_HOUR INT NOT NULL,
	PARENT_SPACE BIGINT NOT NULL,
	CURRENT_OCCUPANCY INT NOT NULL,
	CONSTRAINT CURRENT_OCCUPANCY_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT CURRENT_OCCUPANCY_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT CURRENT_OCCUPANCY_FK_PARENT_SPACE FOREIGN KEY (PARENT_SPACE) REFERENCES BaseSpace (ID)
);
-- Create indexes for Energy_Data table
CREATE INDEX CURRENT_OCCUPANCY_TIME_INDEX on Current_Occupancy_Reading (TTIME);
CREATE INDEX CURRENT_OCCUPANCY_DATE_INDEX on Current_Occupancy_Reading (TTIME_DATE);
CREATE INDEX CURRENT_OCCUPANCY_PARENT_ID_INDEX on Current_Occupancy_Reading (PARENT_SPACE);

CREATE TABLE IF NOT EXISTS Assigned_Occupancy_Reading (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	TTIME BIGINT NOT NULL,
	TTIME_DATE DATE NOT NULL,
	TTIME_MONTH INT NOT NULL,
	TTIME_WEEK INT NOT NULL,
	TTIME_DAY INT NOT NULL,
	TTIME_HOUR INT NOT NULL,
	PARENT_SPACE BIGINT NOT NULL,
	ASSIGNED_OCCUPANCY INT NOT NULL,
	CONSTRAINT ASSIGNED_OCCUPANCY_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ASSIGNED_OCCUPANCY_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT ASSIGNED_OCCUPANCY_FK_PARENT_SPACE FOREIGN KEY (PARENT_SPACE) REFERENCES BaseSpace (ID)
);
-- Create indexes for Energy_Data table
CREATE INDEX ASSIGNED_OCCUPANCY_TIME_INDEX on Assigned_Occupancy_Reading (TTIME);
CREATE INDEX ASSIGNED_OCCUPANCY_DATE_INDEX on Assigned_Occupancy_Reading (TTIME_DATE);
CREATE INDEX ASSIGNED_OCCUPANCY_PARENT_ID_INDEX on Assigned_Occupancy_Reading (PARENT_SPACE);

CREATE TABLE IF NOT EXISTS Temperature_Reading (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	TTIME BIGINT NOT NULL,
	TTIME_DATE DATE NOT NULL,
	TTIME_MONTH INT NOT NULL,
	TTIME_WEEK INT NOT NULL,
	TTIME_DAY INT NOT NULL,
	TTIME_HOUR INT NOT NULL,
	PARENT_SPACE BIGINT NOT NULL,
	TEMPERATURE DOUBLE(9,3) NOT NULL,
	CONSTRAINT TEMPERATURE_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT TEMPERATURE_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT TEMPERATURE_FK_PARENT_SPACE FOREIGN KEY (PARENT_SPACE) REFERENCES BaseSpace (ID)
);
-- Create indexes for Energy_Data table
CREATE INDEX TEMPERATURE_TIME_INDEX on Temperature_Reading (TTIME);
CREATE INDEX TEMPERATURE_DATE_INDEX on Temperature_Reading (TTIME_DATE);
CREATE INDEX TEMPERATURE_PARENT_ID_INDEX on Temperature_Reading (PARENT_SPACE);

CREATE TABLE IF NOT EXISTS Humidity_Reading (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	TTIME BIGINT NOT NULL,
	TTIME_DATE DATE NOT NULL,
	TTIME_MONTH INT NOT NULL,
	TTIME_WEEK INT NOT NULL,
	TTIME_DAY INT NOT NULL,
	TTIME_HOUR INT NOT NULL,
	PARENT_SPACE BIGINT NOT NULL,
	HUMIDITY INT NOT NULL,
	CONSTRAINT HUMIDITY_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT HUMIDITY_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT HUMIDITY_FK_PARENT_SPACE FOREIGN KEY (PARENT_SPACE) REFERENCES BaseSpace (ID)
);
-- Create indexes for Energy_Data table
CREATE INDEX HUMIDITY_TIME_INDEX on Humidity_Reading (TTIME);
CREATE INDEX HUMIDITY_DATE_INDEX on Humidity_Reading (TTIME_DATE);
CREATE INDEX HUMIDITY_PARENT_ID_INDEX on Humidity_Reading (PARENT_SPACE);

CREATE TABLE IF NOT EXISTS CO2_Reading (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	TTIME BIGINT NOT NULL,
	TTIME_DATE DATE NOT NULL,
	TTIME_MONTH INT NOT NULL,
	TTIME_WEEK INT NOT NULL,
	TTIME_DAY INT NOT NULL,
	TTIME_HOUR INT NOT NULL,
	PARENT_SPACE BIGINT NOT NULL,
	CO2 DOUBLE(9,3) NOT NULL,
	CONSTRAINT CO2_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT CO2_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT CO2_FK_PARENT_SPACE FOREIGN KEY (PARENT_SPACE) REFERENCES BaseSpace (ID)
);
-- Create indexes for Energy_Data table
CREATE INDEX CO2_TIME_INDEX on CO2_Reading (TTIME);
CREATE INDEX CO2_DATE_INDEX on CO2_Reading (TTIME_DATE);
CREATE INDEX CO2_PARENT_ID_INDEX on CO2_Reading (PARENT_SPACE);

CREATE TABLE IF NOT EXISTS Set_Point_Reading (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	TTIME BIGINT NOT NULL,
	TTIME_DATE DATE NOT NULL,
	TTIME_MONTH INT NOT NULL,
	TTIME_WEEK INT NOT NULL,
	TTIME_DAY INT NOT NULL,
	TTIME_HOUR INT NOT NULL,
	PARENT_SPACE BIGINT NOT NULL,
	SET_POINT DOUBLE(9,3) NOT NULL,
	CONSTRAINT SET_POINT_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT SET_POINT_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT SET_POINT_FK_PARENT_SPACE FOREIGN KEY (PARENT_SPACE) REFERENCES BaseSpace (ID)
);
-- Create indexes for Energy_Data table
CREATE INDEX SET_POINT_TIME_INDEX on Set_Point_Reading (TTIME);
CREATE INDEX SET_POINT_DATE_INDEX on Set_Point_Reading (TTIME_DATE);
CREATE INDEX SET_POINT_PARENT_ID_INDEX on Set_Point_Reading (PARENT_SPACE);

CREATE TABLE IF NOT EXISTS BaseSpace_Photos (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	PARENT_SPACE BIGINT NOT NULL,
	TTIME BIGINT NOT NULL,
	PHOTO_ID BIGINT NOT NULL,
	CONSTRAINT BASESPACE_PHOTOS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT BASESPACE_PHOTOS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT BASESPACE_PHOTOS_FK_PARENT_SPACE FOREIGN KEY (PARENT_SPACE) REFERENCES BaseSpace (ID),
	CONSTRAINT BASESPACE_PHOTOS_FK_PHOTO_ID FOREIGN KEY (PHOTO_ID) REFERENCES File (FILE_ID)
);

CREATE TABLE IF NOT EXISTS BaseSpace_Attachments (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	PARENT_SPACE BIGINT NOT NULL,
	CREATED_TIME BIGINT NOT NULL,
	FILE_ID BIGINT NOT NULL,
	CONSTRAINT BASESPACE_ATTACHEMENTS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT BASESPACE_ATTACHEMENTS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT BASESPACE_ATTACHEMENTS_FK_PARENT_SPACE FOREIGN KEY (PARENT_SPACE) REFERENCES BaseSpace (ID),
	CONSTRAINT BASESPACE_ATTACHEMENTS_FK_FILE_ID FOREIGN KEY (FILE_ID) REFERENCES File (FILE_ID)
);

CREATE TABLE IF NOT EXISTS BaseSpace_Notes (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT,
	MODULEID BIGINT NOT NULL,
	CREATED_BY BIGINT,
	CREATED_TIME BIGINT,
	PARENT_ID BIGINT NOT NULL,
	TITLE VARCHAR(50),
	BODY VARCHAR(1000) NOT NULL,
	CONSTRAINT BASESPACE_NOTES_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT BASESPACE_NOTES_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT BASESPACE_NOTES_FK_CREATED_BY_ID FOREIGN KEY (CREATED_BY) REFERENCES ORG_Users(ORG_USERID),
	CONSTRAINT BASESPACE_NOTES_FK_PARENT_ID FOREIGN KEY (PARENT_ID) REFERENCES BaseSpace (ID)
);

CREATE TABLE IF NOT EXISTS Site (
	ID BIGINT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	LOCATION_ID BIGINT,
	MANAGED_BY BIGINT,
	NO_OF_BUILDINGS INT,
	GROSS_FLOOR_AREA DOUBLE(9,3),
	SITE_TYPE INT,
	STRING_CF1 VARCHAR(50),
	STRING_CF2 VARCHAR(50),
	STRING_CF3 VARCHAR(50),
	STRING_CF4 VARCHAR(50),
	STRING_CF5 VARCHAR(50),
	NUMBER_CF1 BIGINT,
	NUMBER_CF2 BIGINT,
	NUMBER_CF3 BIGINT,
	NUMBER_CF4 BIGINT,
	NUMBER_CF5 BIGINT,
	DECIMAL_CF1 DOUBLE(9,3),
	DECIMAL_CF2 DOUBLE(9,3),
	DECIMAL_CF3 DOUBLE(9,3),
	DECIMAL_CF4 DOUBLE(9,3),
	DECIMAL_CF5 DOUBLE(9,3),
	BOOLEAN_CF1 BOOLEAN,
	BOOLEAN_CF2 BOOLEAN,
	BOOLEAN_CF3 BOOLEAN,
	BOOLEAN_CF4 BOOLEAN,
	BOOLEAN_CF5 BOOLEAN,
	DATE_CF1 BIGINT,
	DATE_CF2 BIGINT,
	DATE_CF3 BIGINT,
	DATE_CF4 BIGINT,
	DATE_CF5 BIGINT,
	DATETIME_CF1 BIGINT,
	DATETIME_CF2 BIGINT,
	DATETIME_CF3 BIGINT,
	DATETIME_CF4 BIGINT,
	DATETIME_CF5 BIGINT,
	CONSTRAINT SITE_FK_ID FOREIGN KEY (ID) REFERENCES BaseSpace(ID),
	CONSTRAINT SITE_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT SITE_FK_MANAGED_BY FOREIGN KEY (MANAGED_BY) REFERENCES ORG_Users (ORG_USERID),
	CONSTRAINT SITE_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT SITE_FK_LOCATION_ID FOREIGN KEY (LOCATION_ID) REFERENCES Locations(ID)
);

CREATE TABLE IF NOT EXISTS Building (
	ID BIGINT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	LOCATION_ID BIGINT,
	MANAGED_BY BIGINT,
	GROSS_FLOOR_AREA DOUBLE(9,3),
	NO_OF_FLOORS INT,
	STRING_CF1 VARCHAR(50),
	STRING_CF2 VARCHAR(50),
	STRING_CF3 VARCHAR(50),
	STRING_CF4 VARCHAR(50),
	STRING_CF5 VARCHAR(50),
	NUMBER_CF1 BIGINT,
	NUMBER_CF2 BIGINT,
	NUMBER_CF3 BIGINT,
	NUMBER_CF4 BIGINT,
	NUMBER_CF5 BIGINT,
	DECIMAL_CF1 DOUBLE(9,3),
	DECIMAL_CF2 DOUBLE(9,3),
	DECIMAL_CF3 DOUBLE(9,3),
	DECIMAL_CF4 DOUBLE(9,3),
	DECIMAL_CF5 DOUBLE(9,3),
	BOOLEAN_CF1 BOOLEAN,
	BOOLEAN_CF2 BOOLEAN,
	BOOLEAN_CF3 BOOLEAN,
	BOOLEAN_CF4 BOOLEAN,
	BOOLEAN_CF5 BOOLEAN,
	DATE_CF1 BIGINT,
	DATE_CF2 BIGINT,
	DATE_CF3 BIGINT,
	DATE_CF4 BIGINT,
	DATE_CF5 BIGINT,
	DATETIME_CF1 BIGINT,
	DATETIME_CF2 BIGINT,
	DATETIME_CF3 BIGINT,
	DATETIME_CF4 BIGINT,
	DATETIME_CF5 BIGINT,
	CONSTRAINT BUILDING_FK_ID FOREIGN KEY (ID) REFERENCES BaseSpace(ID),
	CONSTRAINT BUILDING_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT BUILDING_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT BUILDING_FK_LOCATION_ID FOREIGN KEY (LOCATION_ID) REFERENCES Locations(ID),
	CONSTRAINT BUILDING_FK_MANAGED_BY FOREIGN KEY (MANAGED_BY) REFERENCES ORG_Users (ORG_USERID)
);

CREATE TABLE IF NOT EXISTS Floor (
	ID BIGINT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	STRING_CF1 VARCHAR(50),
	STRING_CF2 VARCHAR(50),
	STRING_CF3 VARCHAR(50),
	STRING_CF4 VARCHAR(50),
	STRING_CF5 VARCHAR(50),
	NUMBER_CF1 BIGINT,
	NUMBER_CF2 BIGINT,
	NUMBER_CF3 BIGINT,
	NUMBER_CF4 BIGINT,
	NUMBER_CF5 BIGINT,
	DECIMAL_CF1 DOUBLE(9,3),
	DECIMAL_CF2 DOUBLE(9,3),
	DECIMAL_CF3 DOUBLE(9,3),
	DECIMAL_CF4 DOUBLE(9,3),
	DECIMAL_CF5 DOUBLE(9,3),
	BOOLEAN_CF1 BOOLEAN,
	BOOLEAN_CF2 BOOLEAN,
	BOOLEAN_CF3 BOOLEAN,
	BOOLEAN_CF4 BOOLEAN,
	BOOLEAN_CF5 BOOLEAN,
	DATE_CF1 BIGINT,
	DATE_CF2 BIGINT,
	DATE_CF3 BIGINT,
	DATE_CF4 BIGINT,
	DATE_CF5 BIGINT,
	DATETIME_CF1 BIGINT,
	DATETIME_CF2 BIGINT,
	DATETIME_CF3 BIGINT,
	DATETIME_CF4 BIGINT,
	DATETIME_CF5 BIGINT,
	CONSTRAINT FLOOR_FK_ID FOREIGN KEY (ID) REFERENCES BaseSpace(ID),
	CONSTRAINT FLOOR_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT FLOOR_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS Space_Category (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	NAME VARCHAR(50),
	DESCRIPTION VARCHAR(1000),
	IS_COMMON_AREA BOOLEAN,
	CONSTRAINT SPACE_CATEGORY_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT SPACE_CATEGORY_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS Space_Category_Readings (
	PARENT_CATEGORY_ID BIGINT,
	READING_MODULE_ID BIGINT,
	PRIMARY KEY (PARENT_CATEGORY_ID, READING_MODULE_ID),
	CONSTRAINT SPACE_CATEGORY_READINGS_PARENT_FK FOREIGN KEY (PARENT_CATEGORY_ID) REFERENCES Space_Category(ID),
	CONSTRAINT SPACE_CATEGORY_READINGS_CHILD_FK FOREIGN KEY (READING_MODULE_ID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS Space (
	ID BIGINT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	SPACE_CATEGORY_ID BIGINT,
	STRING_CF1 VARCHAR(50),
	STRING_CF2 VARCHAR(50),
	STRING_CF3 VARCHAR(50),
	STRING_CF4 VARCHAR(50),
	STRING_CF5 VARCHAR(50),
	NUMBER_CF1 BIGINT,
	NUMBER_CF2 BIGINT,
	NUMBER_CF3 BIGINT,
	NUMBER_CF4 BIGINT,
	NUMBER_CF5 BIGINT,
	DECIMAL_CF1 DOUBLE(9,3),
	DECIMAL_CF2 DOUBLE(9,3),
	DECIMAL_CF3 DOUBLE(9,3),
	DECIMAL_CF4 DOUBLE(9,3),
	DECIMAL_CF5 DOUBLE(9,3),
	BOOLEAN_CF1 BOOLEAN,
	BOOLEAN_CF2 BOOLEAN,
	BOOLEAN_CF3 BOOLEAN,
	BOOLEAN_CF4 BOOLEAN,
	BOOLEAN_CF5 BOOLEAN,
	DATE_CF1 BIGINT,
	DATE_CF2 BIGINT,
	DATE_CF3 BIGINT,
	DATE_CF4 BIGINT,
	DATE_CF5 BIGINT,
	DATETIME_CF1 BIGINT,
	DATETIME_CF2 BIGINT,
	DATETIME_CF3 BIGINT,
	DATETIME_CF4 BIGINT,
	DATETIME_CF5 BIGINT,
	CONSTRAINT SPACE_FK_ID FOREIGN KEY (ID) REFERENCES BaseSpace(ID),
	CONSTRAINT SPACE_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT SPACE_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT SPACE_FK_CATEGORY_ID FOREIGN KEY (SPACE_CATEGORY_ID) REFERENCES Space_Category(ID)
);

CREATE TABLE IF NOT EXISTS Zone (
	ID BIGINT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	CONSTRAINT ZONE_FK_ID FOREIGN KEY (ID) REFERENCES BaseSpace(ID),
	CONSTRAINT ZONE_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ZONE_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS Zone_Space (
	ZONE_ID BIGINT,
	BASE_SPACE_ID BIGINT,
	CONSTRAINT ZONE_SPACE_FK_ZONE_ID FOREIGN KEY (ZONE_ID) REFERENCES Zone(ID),
	CONSTRAINT ZONE_SPACE_FK_BASE_SPACE_ID FOREIGN KEY (BASE_SPACE_ID) REFERENCES BaseSpace(ID)
);

CREATE TABLE IF NOT EXISTS Asset_Types (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	NAME VARCHAR(50),
	IS_MOVABLE BOOLEAN,
	CONSTRAINT ASSET_TYPES_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ASSET_TYPES_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS Asset_Categories (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	NAME VARCHAR(50),
	CATEGORY_TYPE TINYINT,
	PARENT_CATEGORY_ID BIGINT,
	CONSTRAINT ASSET_CATEGORIES_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ASSET_CATEGORIES_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT ASSET_CATEGORIES_FK_PARENT_CATEGORY_ID FOREIGN KEY (PARENT_CATEGORY_ID) REFERENCES Asset_Categories(ID)
);

CREATE TABLE IF NOT EXISTS Asset_Category_Readings (
	PARENT_CATEGORY_ID BIGINT,
	READING_MODULE_ID BIGINT,
	PRIMARY KEY (PARENT_CATEGORY_ID, READING_MODULE_ID),
	CONSTRAINT ASSET_CATEGORY_READINGS_PARENT_FK FOREIGN KEY (PARENT_CATEGORY_ID) REFERENCES Asset_Categories(ID),
	CONSTRAINT ASSET_CATEGORY_READINGS_CHILD_FK FOREIGN KEY (READING_MODULE_ID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS Asset_Departments (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	NAME VARCHAR(50),
	CONSTRAINT ASSET_DEPARTMENTS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ASSET_DEPARTMENTS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS Assets (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	NAME VARCHAR(50),
	STATE TINYINT,
	ASSET_TYPE BIGINT,
	CATEGORY BIGINT,
	DESCRIPTION VARCHAR(1000),
	PHOTO_ID BIGINT,
	PARENT_ASSET_ID BIGINT,
	SPACE_ID BIGINT,
	DEPARTMENT_ID BIGINT,
	MANUFACTURER VARCHAR(100),
	MODEL VARCHAR(100),
	SERIAL_NUMBER VARCHAR(100),
	TAG_NUMBER VARCHAR(100),
	PART_NUMBER VARCHAR(100),
	UNIT_PRICE INT,
	SUPPLIER VARCHAR(100),
	PURCHASED_DATE BIGINT,
	RETIRE_DATE BIGINT,
	WARRANTY_EXPIRY_DATE BIGINT,
	LOCAL_ID INT,
	CONSTRAINT ASSET_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ASSET_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT ASSET_FK_ASSET_TYPE FOREIGN KEY (ASSET_TYPE) REFERENCES Asset_Types(ID),
	CONSTRAINT ASSET_FK_CATEGORY FOREIGN KEY (CATEGORY) REFERENCES Asset_Categories(ID),
	CONSTRAINT ASSET_FK_PARENT_ASSET_ID FOREIGN KEY (PARENT_ASSET_ID) REFERENCES Assets(ID),
	CONSTRAINT ASSET_FK_SPACE_ID FOREIGN KEY (SPACE_ID) REFERENCES BaseSpace(ID),
	CONSTRAINT ASSET_FK_DEPARTMENT_ID FOREIGN KEY (DEPARTMENT_ID) REFERENCES Asset_Departments(ID),
	CONSTRAINT ASSET_FK_PHOTO_ID FOREIGN KEY (PHOTO_ID) REFERENCES File (FILE_ID)
);

CREATE TABLE IF NOT EXISTS Energy_Meter_Purpose (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	NAME VARCHAR(50) NOT NULL,
	CONSTRAINT ENERGY_METER_PURPOSE_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ENERGY_METER_PURPOSE_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS Energy_Meter (
	ID BIGINT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	PURPOSE_ID BIGINT,
	IS_ROOT BOOLEAN,
	PURPOSE_SPACE_ID BIGINT,
	IS_VIRTUAL BOOLEAN,
	CHILD_METER_EXPRESSION VARCHAR(100),
	CONSTRAINT ENERGY_METER_FK_ID FOREIGN KEY (ID) REFERENCES Assets(ID),
	CONSTRAINT ENERGY_METER_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ENERGY_METER_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT ENERGY_METER_FK_PURPOSE_ID FOREIGN KEY (PURPOSE_ID) REFERENCES Energy_Meter_Purpose(ID),
	CONSTRAINT ENERGY_METER_FK_PURPOSE_SPACE_ID FOREIGN KEY (PURPOSE_SPACE_ID) REFERENCES BaseSpace(ID)
);

CREATE TABLE IF NOT EXISTS Virtual_Energy_Meter_Rel (
	VIRTUAL_METER_ID BIGINT,
	CHILD_METER_ID BIGINT,
	PRIMARY KEY (VIRTUAL_METER_ID, CHILD_METER_ID),
	CONSTRAINT VIRTUAL_ENERGY_METER_REL_METER_ID FOREIGN KEY (VIRTUAL_METER_ID) REFERENCES Energy_Meter(ID) ON DELETE CASCADE,
	CONSTRAINT VIRTUAL_ENERGY_METER_REL_CHILD_ID FOREIGN KEY (CHILD_METER_ID) REFERENCES Energy_Meter(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Asset_Photos (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	PARENT_ASSET BIGINT NOT NULL,
	TTIME BIGINT NOT NULL,
	PHOTO_ID BIGINT NOT NULL,
	CONSTRAINT ASSET_PHOTOS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ASSET_PHOTOS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT ASSET_PHOTOS_FK_PARENT_SPACE FOREIGN KEY (PARENT_ASSET) REFERENCES Assets (ID),
	CONSTRAINT ASSET_PHOTOS_FK_PHOTO_ID FOREIGN KEY (PHOTO_ID) REFERENCES File (FILE_ID)
);

CREATE TABLE IF NOT EXISTS Asset_Attachments (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	PARENT_ASSET BIGINT NOT NULL,
	CREATED_TIME BIGINT NOT NULL,
	FILE_ID BIGINT NOT NULL,
	CONSTRAINT ASSET_ATTACHEMENTS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ASSET_ATTACHEMENTS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT ASSET_ATTACHEMENTS_FK_PARENT_ASSET FOREIGN KEY (PARENT_ASSET) REFERENCES Assets (ID),
	CONSTRAINT ASSET_ATTACHEMENTS_FK_FILE_ID FOREIGN KEY (FILE_ID) REFERENCES File (FILE_ID)
);

CREATE TABLE IF NOT EXISTS Asset_Notes (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT,
	MODULEID BIGINT NOT NULL,
	CREATED_BY BIGINT,
	CREATED_TIME BIGINT,
	PARENT_ID BIGINT NOT NULL,
	TITLE VARCHAR(50),
	BODY VARCHAR(1000) NOT NULL,
	CONSTRAINT ASSET_NOTES_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ASSET_NOTES_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT ASSET_NOTES_FK_CREATED_BY_ID FOREIGN KEY (CREATED_BY) REFERENCES ORG_Users(ORG_USERID),
	CONSTRAINT ASSET_NOTES_FK_PARENT_ID FOREIGN KEY (PARENT_ID) REFERENCES Assets(ID)
);

-- Create Tickets Tables
CREATE TABLE IF NOT EXISTS TicketStatus (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	STATUS VARCHAR(20) NOT NULL,
	STATUS_TYPE TINYINT NOT NULL,
	CONSTRAINT TICKET_STATUS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT TICKET_STATUS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT TICKET_STATUS_UNIQUE UNIQUE (ORGID, STATUS)
);

CREATE TABLE IF NOT EXISTS TicketStateFlow (
	ACTIVITY_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ACTIVITY_NAME VARCHAR(20) NOT NULL,
	STATE_ID BIGINT NOT NULL,
	NEXT_STATE_ID BIGINT NOT NULL,
	CONSTRAINT TICKET_STATEFLOW_FK_STATE FOREIGN KEY (STATE_ID) REFERENCES TicketStatus(ID),
	CONSTRAINT TICKET_STATEFLOW_FK_NEXT_STATE FOREIGN KEY (STATE_ID) REFERENCES TicketStatus(ID),
	CONSTRAINT TICKET_STATEFLOW_UNIQUE UNIQUE (STATE_ID, NEXT_STATE_ID)
);


CREATE TABLE IF NOT EXISTS TicketPriority (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	PRIORITY VARCHAR(20) NOT NULL,
	SEQUENCE_NUMBER TINYINT NOT NULL,
	CONSTRAINT TICKET_PRIORITY_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT TICKET_PRIORITY_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT TICKET_PRIORITY_UNIQUE UNIQUE (ORGID, PRIORITY)
);

CREATE TABLE IF NOT EXISTS TicketCategory (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	NAME VARCHAR(50),
	DESCRIPTION VARCHAR(1000),
	CONSTRAINT TICKET_CATEGORY_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT TICKET_CATEGORY_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS Tickets (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	SUBJECT VARCHAR(50),
	DESCRIPTION VARCHAR(1000),
	STATUS_ID BIGINT,
	PRIORITY_ID BIGINT,
	CATEGORY_ID BIGINT,
	SOURCE_TYPE TINYINT,
	ASSIGNMENT_GROUP_ID BIGINT,
	ASSIGNED_TO_ID BIGINT,
	ASSET_ID BIGINT,
	SPACE_ID BIGINT,
	DUE_DATE BIGINT,
	SERIAL_NUMBER BIGINT,
	NO_OF_NOTES INT,
	NO_OF_ATTACHMENTS INT,
	NO_OF_TASKS INT,
	NO_OF_CLOSED_TASKS INT,
	SCHEDULED_START BIGINT,
	ESTIMATED_END BIGINT,
	ACTUAL_WORK_START BIGINT,
	ACTUAL_WORK_END BIGINT,
	CONSTRAINT TICKETS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT TICKETS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT TICKETS_FK_STATUS_ID FOREIGN KEY (STATUS_ID) REFERENCES TicketStatus(ID),
	CONSTRAINT TICKETS_FK_PRIORITY_ID FOREIGN KEY (PRIORITY_ID) REFERENCES TicketPriority(ID),
	CONSTRAINT TICKETS_FK_CATEGORY_ID FOREIGN KEY (CATEGORY_ID) REFERENCES TicketCategory(ID),
	CONSTRAINT TICKETS_FK_ASSIGNMENT_GROUP FOREIGN KEY (ASSIGNMENT_GROUP_ID) REFERENCES Groups(GROUPID),
	CONSTRAINT TICKETS_FK_ASSIGNED_TO_ID FOREIGN KEY (ASSIGNED_TO_ID) REFERENCES ORG_Users(ORG_USERID),
	CONSTRAINT TICKETS_FK_ASSETID FOREIGN KEY (ASSET_ID) REFERENCES Assets(ID),
	CONSTRAINT TICKETS_FK_SPACE_ID FOREIGN KEY (SPACE_ID) REFERENCES BaseSpace(ID)
);

CREATE TABLE IF NOT EXISTS Ticket_Attachments (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	PARENT_TICKET BIGINT NOT NULL,
	CREATED_TIME BIGINT NOT NULL,
	FILE_ID BIGINT NOT NULL,
	ATTACHMENT_TYPE TINYINT,
	CONSTRAINT TICKET_ATTACHEMENTS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT TICKET_ATTACHEMENTS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT TICKET_ATTACHEMENTS_FK_PARENT_TICKET FOREIGN KEY (PARENT_TICKET) REFERENCES Tickets (ID),
	CONSTRAINT TICKET_ATTACHEMENTS_FK_FILE_ID FOREIGN KEY (FILE_ID) REFERENCES File (FILE_ID)
);

CREATE TABLE IF NOT EXISTS Ticket_Notes (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT,
	MODULEID BIGINT NOT NULL,
	CREATED_BY BIGINT,
	CREATED_TIME BIGINT,
	PARENT_ID BIGINT NOT NULL,
	TITLE VARCHAR(50),
	BODY VARCHAR(1000) NOT NULL,
	CONSTRAINT TICKET_NOTES_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT TICKET_NOTES_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT TICKET_NOTES_FK_CREATED_BY_ID FOREIGN KEY (CREATED_BY) REFERENCES ORG_Users(ORG_USERID),
	CONSTRAINT TICKET_NOTES_FK_PARENT_ID FOREIGN KEY (PARENT_ID) REFERENCES Tickets(ID)
);

CREATE TABLE IF NOT EXISTS WorkOrders (
	ID BIGINT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	REQUESTER_ID BIGINT,
	CREATED_TIME BIGINT,
	STRING_CF1 VARCHAR(50),
	STRING_CF2 VARCHAR(50),
	STRING_CF3 VARCHAR(50),
	STRING_CF4 VARCHAR(50),
	STRING_CF5 VARCHAR(50),
	NUMBER_CF1 BIGINT,
	NUMBER_CF2 BIGINT,
	NUMBER_CF3 BIGINT,
	NUMBER_CF4 BIGINT,
	NUMBER_CF5 BIGINT,
	DECIMAL_CF1 DOUBLE(9,3),
	DECIMAL_CF2 DOUBLE(9,3),
	DECIMAL_CF3 DOUBLE(9,3),
	DECIMAL_CF4 DOUBLE(9,3),
	DECIMAL_CF5 DOUBLE(9,3),
	BOOLEAN_CF1 BOOLEAN,
	BOOLEAN_CF2 BOOLEAN,
	BOOLEAN_CF3 BOOLEAN,
	BOOLEAN_CF4 BOOLEAN,
	BOOLEAN_CF5 BOOLEAN,
	DATE_CF1 BIGINT,
	DATE_CF2 BIGINT,
	DATE_CF3 BIGINT,
	DATE_CF4 BIGINT,
	DATE_CF5 BIGINT,
	DATETIME_CF1 BIGINT,
	DATETIME_CF2 BIGINT,
	DATETIME_CF3 BIGINT,
	DATETIME_CF4 BIGINT,
	DATETIME_CF5 BIGINT,
	CONSTRAINT WORK_ORDERS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT WORK_ORDERS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT WORK_ORDERS_FK_ID FOREIGN KEY (ID) REFERENCES Tickets(ID) ON DELETE CASCADE,
	CONSTRAINT WORK_ORDERS_FK_REQUESTER_ID FOREIGN KEY (REQUESTER_ID) REFERENCES ORG_Users(ORG_USERID)
);

CREATE TABLE IF NOT EXISTS WorkOrderRequests (
	ID BIGINT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	REQUESTER_ID BIGINT,
	STATUS TINYINT,
	URGENCY TINYINT,
	CREATED_TIME BIGINT,
	STRING_CF1 VARCHAR(50),
	STRING_CF2 VARCHAR(50),
	STRING_CF3 VARCHAR(50),
	STRING_CF4 VARCHAR(50),
	STRING_CF5 VARCHAR(50),
	NUMBER_CF1 BIGINT,
	NUMBER_CF2 BIGINT,
	NUMBER_CF3 BIGINT,
	NUMBER_CF4 BIGINT,
	NUMBER_CF5 BIGINT,
	DECIMAL_CF1 DOUBLE(9,3),
	DECIMAL_CF2 DOUBLE(9,3),
	DECIMAL_CF3 DOUBLE(9,3),
	DECIMAL_CF4 DOUBLE(9,3),
	DECIMAL_CF5 DOUBLE(9,3),
	BOOLEAN_CF1 BOOLEAN,
	BOOLEAN_CF2 BOOLEAN,
	BOOLEAN_CF3 BOOLEAN,
	BOOLEAN_CF4 BOOLEAN,
	BOOLEAN_CF5 BOOLEAN,
	DATE_CF1 BIGINT,
	DATE_CF2 BIGINT,
	DATE_CF3 BIGINT,
	DATE_CF4 BIGINT,
	DATE_CF5 BIGINT,
	DATETIME_CF1 BIGINT,
	DATETIME_CF2 BIGINT,
	DATETIME_CF3 BIGINT,
	DATETIME_CF4 BIGINT,
	DATETIME_CF5 BIGINT,
	CONSTRAINT WORK_ORDER_REQUESTS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT WORK_ORDER_REQUESTS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT WORK_ORDER_REQUESTS_FK_ID FOREIGN KEY (ID) REFERENCES Tickets(ID) ON DELETE CASCADE,
	CONSTRAINT WORK_ORDER_REQUESTS_FK_REQUESTER_ID FOREIGN KEY (REQUESTER_ID) REFERENCES ORG_Users(ORG_USERID)
);

-- Create table for WorkOrderRequests creation from Email
CREATE TABLE IF NOT EXISTS WorkOrderRequest_EMail (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	S3_MESSAGE_ID VARCHAR(100) NOT NULL,
	IS_PROCESSED BOOLEAN
);

CREATE TABLE IF NOT EXISTS Tasks (
	ID BIGINT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	PARENT_TICKET_ID BIGINT,
	CREATED_TIME BIGINT,
	IS_READING_TASK BOOLEAN,
	READING_ID BIGINT,
	READING_DATA_ID BIGINT,
	STRING_CF1 VARCHAR(50),
	STRING_CF2 VARCHAR(50),
	STRING_CF3 VARCHAR(50),
	STRING_CF4 VARCHAR(50),
	STRING_CF5 VARCHAR(50),
	NUMBER_CF1 BIGINT,
	NUMBER_CF2 BIGINT,
	NUMBER_CF3 BIGINT,
	NUMBER_CF4 BIGINT,
	NUMBER_CF5 BIGINT,
	DECIMAL_CF1 DOUBLE(9,3),
	DECIMAL_CF2 DOUBLE(9,3),
	DECIMAL_CF3 DOUBLE(9,3),
	DECIMAL_CF4 DOUBLE(9,3),
	DECIMAL_CF5 DOUBLE(9,3),
	BOOLEAN_CF1 BOOLEAN,
	BOOLEAN_CF2 BOOLEAN,
	BOOLEAN_CF3 BOOLEAN,
	BOOLEAN_CF4 BOOLEAN,
	BOOLEAN_CF5 BOOLEAN,
	DATE_CF1 BIGINT,
	DATE_CF2 BIGINT,
	DATE_CF3 BIGINT,
	DATE_CF4 BIGINT,
	DATE_CF5 BIGINT,
	DATETIME_CF1 BIGINT,
	DATETIME_CF2 BIGINT,
	DATETIME_CF3 BIGINT,
	DATETIME_CF4 BIGINT,
	DATETIME_CF5 BIGINT,
	CONSTRAINT TASKS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT TASKS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT TASKS_FK_PARENT_TICKET_ID FOREIGN KEY (PARENT_TICKET_ID) REFERENCES Tickets(ID),
	CONSTRAINT TASKS_FK_ID FOREIGN KEY (ID) REFERENCES Tickets(ID) ON DELETE CASCADE,
	CONSTRAINT TASKS_FK_READING_ID FOREIGN KEY (READING_ID) REFERENCES Fields(FIELDID)
);

CREATE TABLE IF NOT EXISTS UserLocationCoverage (
  USER_LOCATION_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  ORG_USERID BIGINT,
  LOCATION_ID BIGINT,
  CONSTRAINT USERLOCATIONS_USERID_FK FOREIGN KEY (ORG_USERID) REFERENCES ORG_Users(ORG_USERID) ON DELETE CASCADE,
  CONSTRAINT USERLOCATIONS_LOCATION_FK FOREIGN KEY (LOCATION_ID) REFERENCES Locations (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS GroupLocationCoverage (
  GROUP_LOCATION_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  GROUPID BIGINT,
  LOCATION_ID BIGINT,
  CONSTRAINT GLC_GROUPID_FK FOREIGN KEY (GROUPID) REFERENCES Groups(GROUPID) ON DELETE CASCADE,
  CONSTRAINT GLC_LOCATION_FK FOREIGN KEY (LOCATION_ID) REFERENCES Locations (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Skills (
  ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  ORGID BIGINT NOT NULL,
  MODULEID BIGINT NOT NULL,
  NAME VARCHAR(255),
  ACTIVE BOOLEAN,
  DESCRIPTION VARCHAR(1000),
  CONSTRAINT SKILLS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
  CONSTRAINT SKILLS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS UserSkills (
  USER_SKILL_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  ORG_USERID BIGINT,
  SKILL_ID BIGINT,
  CONSTRAINT USERSKILLS_USERID_FK FOREIGN KEY (ORG_USERID) REFERENCES ORG_Users(ORG_USERID) ON DELETE CASCADE,
  CONSTRAINT USERSKILLS_SKILL_FK FOREIGN KEY (SKILL_ID) REFERENCES Skills (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS GroupSkills (
  GROUP_SKILL_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  GROUPID BIGINT,
  SKILL_ID BIGINT,
  CONSTRAINT GROUPSKILLS_GROUPID_FK FOREIGN KEY (GROUPID) REFERENCES Groups(GROUPID) ON DELETE CASCADE,
  CONSTRAINT GROUPSKILLS_SKILL_FK FOREIGN KEY (SKILL_ID) REFERENCES Skills (ID) ON DELETE CASCADE
);

-- Device Table

CREATE TABLE IF NOT EXISTS Service (
	SERVICE_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	NAME VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS Controller (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	SPACE_ID BIGINT,
	MAC_ADDR VARCHAR(100),
	CONSTRAINT CONTROLLER_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT CONTROLLER_FK_SPACE_ID FOREIGN KEY (SPACE_ID) REFERENCES BaseSpace(ID)
);

CREATE TABLE IF NOT EXISTS Alarm_Severity (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	SEVERITY VARCHAR(50) NOT NULL,
	CARDINALITY TINYINT NOT NULL,
	CONSTRAINT ALARM_SEVERITY_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ALARM_SEVERITY_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS Alarms (
	ID BIGINT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	SOURCE VARCHAR(100),
	NODE VARCHAR(100),
	IS_ACKNOWLEDGED BOOLEAN,
	ACKNOWLEDGED_BY BIGINT,
	ACKNOWLEDGED_TIME BIGINT,
	ALARM_TYPE TINYINT,
	CREATED_TIME BIGINT NOT NULL,
	MODIFIED_TIME BIGINT NOT NULL,
	CLEARED_TIME BIGINT,
	CLEARED_BY BIGINT,
	PREVIOUS_SEVERITY BIGINT,
	SEVERITY BIGINT NOT NULL,
	ALARM_PRIORITY VARCHAR(100),
	ALARM_CLASS VARCHAR(100),
	STATE VARCHAR(100),
	ADDITIONAL_INFO VARCHAR(5000),
	NO_OF_EVENTS INT,
	IS_WO_CREATED BOOLEAN,
	STRING_CF1 VARCHAR(50),
	STRING_CF2 VARCHAR(50),
	STRING_CF3 VARCHAR(50),
	STRING_CF4 VARCHAR(50),
	STRING_CF5 VARCHAR(50),
	NUMBER_CF1 BIGINT,
	NUMBER_CF2 BIGINT,
	NUMBER_CF3 BIGINT,
	NUMBER_CF4 BIGINT,
	NUMBER_CF5 BIGINT,
	DECIMAL_CF1 DOUBLE(9,3),
	DECIMAL_CF2 DOUBLE(9,3),
	DECIMAL_CF3 DOUBLE(9,3),
	DECIMAL_CF4 DOUBLE(9,3),
	DECIMAL_CF5 DOUBLE(9,3),
	BOOLEAN_CF1 BOOLEAN,
	BOOLEAN_CF2 BOOLEAN,
	BOOLEAN_CF3 BOOLEAN,
	BOOLEAN_CF4 BOOLEAN,
	BOOLEAN_CF5 BOOLEAN,
	DATE_CF1 BIGINT,
	DATE_CF2 BIGINT,
	DATE_CF3 BIGINT,
	DATE_CF4 BIGINT,
	DATE_CF5 BIGINT,
	DATETIME_CF1 BIGINT,
	DATETIME_CF2 BIGINT,
	DATETIME_CF3 BIGINT,
	DATETIME_CF4 BIGINT,
	DATETIME_CF5 BIGINT,
	CONSTRAINT ALARMS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ALARMS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT ALARMS_FK_ID FOREIGN KEY (ID) REFERENCES Tickets(ID) ON DELETE CASCADE,
	CONSTRAINT ALARMS_FK_PREVIOUS_SEVERITY FOREIGN KEY (PREVIOUS_SEVERITY) REFERENCES Alarm_Severity(ID),
	CONSTRAINT ALARMS_FK_SEVERITY FOREIGN KEY (SEVERITY) REFERENCES Alarm_Severity(ID),
	CONSTRAINT ALARMS_FK_ASSIGNED_TO_ID FOREIGN KEY (ACKNOWLEDGED_BY) REFERENCES ORG_Users(ORG_USERID),
	CONSTRAINT ALARMS_FK_CLEARED_BY_ID FOREIGN KEY (CLEARED_BY) REFERENCES ORG_Users(ORG_USERID)
);

CREATE TABLE IF NOT EXISTS AlarmFollowers (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ALARM_ID BIGINT NOT NULL,
	FOLLOWER_TYPE VARCHAR(50),
	FOLLOWER VARCHAR(255),
	CONSTRAINT ALARM_FOLLOWERS_FK_ALARMID FOREIGN KEY (ALARM_ID) REFERENCES Alarms(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Readings (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	TTIME BIGINT NOT NULL,
	TTIME_DATE DATE NOT NULL,
	TTIME_MONTH INT NOT NULL,
	TTIME_WEEK INT NOT NULL,
	TTIME_DAY INT NOT NULL,
	TTIME_HOUR INT NOT NULL,
	PARENT_ID BIGINT NOT NULL,
	STRING_CF1 VARCHAR(50),
	STRING_CF2 VARCHAR(50),
	STRING_CF3 VARCHAR(50),
	STRING_CF4 VARCHAR(50),
	STRING_CF5 VARCHAR(50),
	NUMBER_CF1 BIGINT,
	NUMBER_CF2 BIGINT,
	NUMBER_CF3 BIGINT,
	NUMBER_CF4 BIGINT,
	NUMBER_CF5 BIGINT,
	DECIMAL_CF1 DOUBLE(9,3),
	DECIMAL_CF2 DOUBLE(9,3),
	DECIMAL_CF3 DOUBLE(9,3),
	DECIMAL_CF4 DOUBLE(9,3),
	DECIMAL_CF5 DOUBLE(9,3),
	BOOLEAN_CF1 BOOLEAN,
	BOOLEAN_CF2 BOOLEAN,
	BOOLEAN_CF3 BOOLEAN,
	BOOLEAN_CF4 BOOLEAN,
	BOOLEAN_CF5 BOOLEAN,
	CONSTRAINT READINGS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT READINGS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID)
);
-- Create indexes for Readings table
CREATE INDEX READINGS_TIME_INDEX on Readings (TTIME);
CREATE INDEX READINGS_DATE_INDEX on Readings (TTIME_DATE);
CREATE INDEX READINGS_PARENT_ID_INDEX on Readings (PARENT_ID);

CREATE TABLE IF NOT EXISTS CustomModuleData (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	STRING_CF1 VARCHAR(50),
	STRING_CF2 VARCHAR(50),
	STRING_CF3 VARCHAR(50),
	STRING_CF4 VARCHAR(50),
	STRING_CF5 VARCHAR(50),
	NUMBER_CF1 BIGINT,
	NUMBER_CF2 BIGINT,
	NUMBER_CF3 BIGINT,
	NUMBER_CF4 BIGINT,
	NUMBER_CF5 BIGINT,
	DECIMAL_CF1 DOUBLE(9,3),
	DECIMAL_CF2 DOUBLE(9,3),
	DECIMAL_CF3 DOUBLE(9,3),
	DECIMAL_CF4 DOUBLE(9,3),
	DECIMAL_CF5 DOUBLE(9,3),
	BOOLEAN_CF1 BOOLEAN,
	BOOLEAN_CF2 BOOLEAN,
	BOOLEAN_CF3 BOOLEAN,
	BOOLEAN_CF4 BOOLEAN,
	BOOLEAN_CF5 BOOLEAN,
	DATE_CF1 BIGINT,
	DATE_CF2 BIGINT,
	DATE_CF3 BIGINT,
	DATE_CF4 BIGINT,
	DATE_CF5 BIGINT,
	DATETIME_CF1 BIGINT,
	DATETIME_CF2 BIGINT,
	DATETIME_CF3 BIGINT,
	DATETIME_CF4 BIGINT,
	DATETIME_CF5 BIGINT,
	CONSTRAINT CM_DATA_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT CM_DATA_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS Attachments (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	PARENT_ID BIGINT NOT NULL,
	CREATED_TIME BIGINT NOT NULL,
	FILE_ID BIGINT NOT NULL,
	CONSTRAINT ATTACHEMENTS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ATTACHEMENTS_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT ATTACHEMENTS_FK_FILE_ID FOREIGN KEY (FILE_ID) REFERENCES File (FILE_ID)
);

-- Create Notes Table
CREATE TABLE IF NOT EXISTS Notes (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT,
	MODULEID BIGINT NOT NULL,
	CREATED_BY BIGINT,
	CREATED_TIME BIGINT,
	PARENT_ID BIGINT NOT NULL,
	TITLE VARCHAR(50),
	BODY VARCHAR(1000) NOT NULL,
	CONSTRAINT NOTES_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT NOTES_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT NOTES_FK_CREATED_BY_ID FOREIGN KEY (CREATED_BY) REFERENCES ORG_Users(ORG_USERID)
);

CREATE TABLE IF NOT EXISTS Energy_Data (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	TTIME BIGINT NOT NULL,
	TTIME_DATE DATE NOT NULL,
	TTIME_MONTH INT NOT NULL,
	TTIME_WEEK INT NOT NULL,
	TTIME_DAY INT NOT NULL,
	TTIME_HOUR INT NOT NULL,
	PARENT_METER_ID BIGINT NOT NULL,
	TOTAL_ENERGY_CONSUMPTION DOUBLE,
	TOTAL_ENERGY_CONSUMPTION_DELTA DOUBLE DEFAULT 0,
	LINE_VOLTAGE_R DOUBLE,
	LINE_VOLTAGE_Y DOUBLE,
	LINE_VOLTAGE_B DOUBLE,
	PHASE_VOLTAGE_R DOUBLE,
	PHASE_VOLTAGE_Y DOUBLE,
	PHASE_VOLTAGE_B DOUBLE,
	LINE_CURRENT_R DOUBLE,
	LINE_CURRENT_Y DOUBLE,
	LINE_CURRENT_B DOUBLE,
	POWER_FACTOR_R DOUBLE,
	POWER_FACTOR_Y DOUBLE,
	POWER_FACTOR_B DOUBLE,
	FREQUENCY_R DOUBLE,
	FREQUENCY_Y DOUBLE,
	FREQUENCY_B DOUBLE,
	ACTIVE_POWER_R DOUBLE,
	ACTIVE_POWER_Y DOUBLE,
	ACTIVE_POWER_B DOUBLE,
	REACTIVE_POWER_R DOUBLE,
	REACTIVE_POWER_Y DOUBLE,
	REACTIVE_POWER_B DOUBLE,
	APPARENT_POWER_R DOUBLE,
	APPARENT_POWER_Y DOUBLE,
	APPARENT_POWER_B DOUBLE,
	PHASE_ENERGY_R DOUBLE,
	PHASE_ENERGY_R_DELTA DOUBLE,
	PHASE_ENERGY_Y DOUBLE,
	PHASE_ENERGY_Y_DELTA DOUBLE,
	PHASE_ENERGY_B DOUBLE,
	PHASE_ENERGY_B_DELTA DOUBLE,
	CONSTRAINT ENERGY_DATA_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ENERGY_DATA_FK_MODULEID FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT ENERGY_DATA_FK_PARENT_DEVICE_ID FOREIGN KEY (PARENT_METER_ID) REFERENCES Energy_Meter(ID)
);
-- Create indexes for Energy_Data table
CREATE INDEX Energy_Data_speed_index on Energy_Data (ORGID,PARENT_METER_ID,TTIME,TTIME_HOUR,TTIME_DAY,TTIME_DATE,TTIME_MONTH,TOTAL_ENERGY_CONSUMPTION_DELTA);
CREATE INDEX ENERGY_DATA_PARENT_ID_INDEX on Energy_Data (PARENT_METER_ID);

-- Trigger change starts..
-- Create trigger for calculating TOTAL_ENERGY_CONSUMPTION_DELTA in Energy_Data table
DELIMITER $$
CREATE TRIGGER calculate_delta BEFORE INSERT ON Energy_Data FOR EACH ROW
BEGIN
DECLARE PREV_ENERGY_CONSUMPTION DOUBLE;
DECLARE PREV_PHASE_ENERGY_R DOUBLE;
DECLARE PREV_PHASE_ENERGY_Y DOUBLE;
DECLARE PREV_PHASE_ENERGY_B DOUBLE;
SELECT TOTAL_ENERGY_CONSUMPTION, PHASE_ENERGY_R , PHASE_ENERGY_Y , PHASE_ENERGY_B INTO PREV_ENERGY_CONSUMPTION, PREV_PHASE_ENERGY_R, PREV_PHASE_ENERGY_Y , 
PREV_PHASE_ENERGY_B FROM Energy_Data WHERE PARENT_METER_ID = NEW.PARENT_METER_ID ORDER BY TTIME DESC LIMIT 1;
IF PREV_ENERGY_CONSUMPTION IS NOT NULL THEN 
SET NEW.TOTAL_ENERGY_CONSUMPTION_DELTA = NEW.TOTAL_ENERGY_CONSUMPTION - PREV_ENERGY_CONSUMPTION, 
NEW.PHASE_ENERGY_R_DELTA = NEW.PHASE_ENERGY_R - PREV_PHASE_ENERGY_R, NEW.PHASE_ENERGY_Y_DELTA = NEW.PHASE_ENERGY_Y - PREV_PHASE_ENERGY_Y, 
NEW.PHASE_ENERGY_B_DELTA = NEW.PHASE_ENERGY_B - PREV_PHASE_ENERGY_B;
END IF;
END; $$
DELIMITER ;
-- Trigger change Ends..

CREATE TABLE IF NOT EXISTS Criteria (
	CRITERIAID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	PATTERN VARCHAR(100),
	CONSTRAINT CRITERIA_ORGID_FK FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS Conditions (
	CONDITIONID BIGINT AUTO_INCREMENT PRIMARY KEY,
	PARENT_CRITERIA_ID BIGINT NOT NULL,
	SEQUENCE TINYINT NOT NULL,
	FIELD_NAME VARCHAR(50) NOT NULL,
	COLUMN_NAME VARCHAR(50) NOT NULL,
	OPERATOR INT NOT NULL,
	VAL VARCHAR(50),
	CRITERIA_VAL_ID  BIGINT,
	COMPUTED_WHERE_CLAUSE VARCHAR(2000),
	CONSTRAINT CONDITIONS_PARENT_CRITERIA_ID_FK FOREIGN KEY (PARENT_CRITERIA_ID) REFERENCES Criteria(CRITERIAID) ON DELETE CASCADE,
	CONSTRAINT CONDITIONS_CRITERIA_VAL_ID_FK FOREIGN KEY (CRITERIA_VAL_ID) REFERENCES Criteria(CRITERIAID)
);

CREATE TABLE IF NOT EXISTS Views (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	NAME VARCHAR(50) NOT NULL,
	DISPLAY_NAME VARCHAR(50),
	VIEW_TYPE TINYINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	CRITERIAID BIGINT,
	CONSTRAINT VIEWS_ORGID_FK FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT VIEWS_MODULEID_FK FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID),
	CONSTRAINT VIEWS_CRITERIAID_FK FOREIGN KEY (CRITERIAID) REFERENCES Criteria(CRITERIAID),
	CONSTRAINT VIEWS_NAME_UNIQUE UNIQUE(ORGID, MODULEID, NAME)
);

CREATE TABLE IF NOT EXISTS ImportProcess (
	IMPORTID_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORG_USERID BIGINT,
	INSTANCE_ID INT,
	STATUS INT,
	COLUMN_HEADING VARCHAR(5000),
	FILE_PATH VARCHAR(100),
	FILEID BIGINT,
	FILE_PATH_FAILED VARCHAR(100),
	FIELD_MAPPING VARCHAR(5000),
	IMPORT_TIME BIGINT,
	IMPORT_TYPE INT,
	CONSTRAINT IMPORT_ORGUSERS_FK_ORGID FOREIGN KEY (ORG_USERID) REFERENCES ORG_Users(ORG_USERID),
	CONSTRAINT IMPORT_ORGFILE_FK_ORGID FOREIGN KEY (FILEID) REFERENCES File(FILE_ID)
);

CREATE TABLE IF NOT EXISTS Workflow_Event (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	MODULEID BIGINT NOT NULL,
	ACTIVITY_TYPE INT NOT NULL,
	CONSTRAINT WORKFLOW_EVENT_ORGID_FK FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT WORKFLOW_EVENT_MODULEID_FK FOREIGN KEY (MODULEID) REFERENCES Modules(MODULEID)
);

CREATE TABLE IF NOT EXISTS Templates (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	NAME VARCHAR(100),
	TEMPLATE_TYPE INT,
	CONSTRAINT TEMPLATES_ORGID_FK FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS EMail_Templates (
	ID BIGINT PRIMARY KEY,
	FROM_ADDR VARCHAR(50) NOT NULL,
	TO_ADDR VARCHAR(100) NOT NULL,
	SUBJECT VARCHAR(100),
	BODY_ID BIGINT NOT NULL,
	CONSTRAINT EMAIL_TEMPLATES_ID_FK FOREIGN KEY (ID) REFERENCES Templates(ID) ON DELETE CASCADE,
	CONSTRAINT EMAIL_TEMPLATES_BODY_FK FOREIGN KEY (BODY_ID) REFERENCES File(FILE_ID)
);

CREATE TABLE IF NOT EXISTS SMS_Templates (
	ID BIGINT PRIMARY KEY,
	FROM_NUM VARCHAR(50),
	TO_NUM VARCHAR(100) NOT NULL,
	MSG VARCHAR(250) NOT NULL,
	CONSTRAINT SMS_TEMPLATES_ID_FK FOREIGN KEY (ID) REFERENCES Templates(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS JSON_Template (
  	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  	CONTENT_ID BIGINT NOT NULL,
  	CONSTRAINT JSON_TEMPLATE_ID_FK FOREIGN KEY (ID) REFERENCES Templates(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Action (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	ACTION_TYPE INT NOT NULL,
	DEFAULT_TEMPLATE_ID INT,
	TEMPLATE_ID BIGINT,
	CONSTRAINT ACTION_ORGID_FK FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT ACTION_TEMPLATE_FK FOREIGN KEY (TEMPLATE_ID) REFERENCES Templates(ID)
);

CREATE TABLE IF NOT EXISTS Workflow_Rule (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	NAME VARCHAR(100),
	DESCRIPTION VARCHAR(1000),
	EVENT_ID BIGINT NOT NULL,
	CRITERIAID BIGINT,
	EXECUTION_ORDER INT,
	STATUS BOOLEAN,
	RULE_TYPE INT,
	CONSTRAINT WORKFLOW_RULE_ORGID_FK FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT WORKFLOW_RULE_EVENT_ID_FK FOREIGN KEY (EVENT_ID) REFERENCES Workflow_Event(ID) ON DELETE CASCADE,
	CONSTRAINT WORKFLOW_RULE_CRITERIAID_FK FOREIGN KEY (CRITERIAID) REFERENCES Criteria(CRITERIAID)
);

CREATE TABLE IF NOT EXISTS Workflow_Rule_Action (
	WORKFLOW_RULE_ACTION_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	WORKFLOW_RULE_ID BIGINT NOT NULL,
	ACTION_ID BIGINT NOT NULL,
	CONSTRAINT WORKFLOW_ACTION_RULE_WORKFLOW_ID_FK FOREIGN KEY (WORKFLOW_RULE_ID) REFERENCES Workflow_Rule(ID) ON DELETE CASCADE,
	CONSTRAINT WORKFLOW_ACTION_RULE_ACTION_ID_FK FOREIGN KEY (ACTION_ID) REFERENCES Action(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Preventive_Maintenance (
  	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  	ORGID BIGINT NOT NULL,
  	TITLE VARCHAR(100) NOT NULL,
  	PM_TYPE TINYINT,
  	STATUS BOOLEAN,
	CREATED_BY BIGINT NOT NULL,
	MODIFIED_BY BIGINT,
	CREATION_TIME BIGINT NOT NULL,
	LAST_MODIFIED_TIME BIGINT,
	TEMPLATE_ID BIGINT,
	SPACE_ID BIGINT,
	ASSET_ID BIGINT,
	START_TIME BIGINT,
	CONSTRAINT PREVENTIVE_MAINTENANCE_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT PREVENTIVE_MAINTENANCE_FK_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES ORG_Users(ORG_USERID),
	CONSTRAINT PREVENTIVE_MAINTENANCE_FK_MODIFIED_BY FOREIGN KEY (MODIFIED_BY) REFERENCES ORG_Users(ORG_USERID),
	CONSTRAINT PREVENTIVE_MAINTENANCE_FK_TEMPLATE_ID FOREIGN KEY (TEMPLATE_ID) REFERENCES Templates(ID),
	CONSTRAINT PREVENTIVE_MAINTENANCE_FK_SPACE_ID FOREIGN KEY (SPACE_ID) REFERENCES BaseSpace(ID),
	CONSTRAINT PREVENTIVE_MAINTENANCE_FK_ASSET_ID FOREIGN KEY (ASSET_ID) REFERENCES Assets(ID)
);

CREATE TABLE IF NOT EXISTS PM_To_WO (
	PM_ID BIGINT,
	WO_ID BIGINT,
	PRIMARY KEY (PM_ID, WO_ID),
	CONSTRAINT PM_TO_WO_FK_PM_ID FOREIGN KEY (PM_ID) REFERENCES Preventive_Maintenance(ID),
	CONSTRAINT PM_TO_WO_FK_WO_ID FOREIGN KEY (WO_ID) REFERENCES WorkOrders(ID)
);

CREATE TABLE PM_Reminders (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	PM_ID BIGINT NOT NULL,
	REMINDER_TYPE TINYINT NOT NULL,
	DURATION BIGINT NOT NULL,
	ACTION_ID BIGINT NOT NULL,
	CONSTRAINT PM_REMINDER_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT PM_REMINDER_FK_PM_ID FOREIGN KEY (PM_ID) REFERENCES Preventive_Maintenance(ID),
	CONSTRAINT PM_REMINDER_FK_ACTION_ID FOREIGN KEY (ACTION_ID) REFERENCES Action(ID)
);

CREATE TABLE IF NOT EXISTS SupportEmails (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	REPLY_NAME VARCHAR(50),
	ACTUAL_EMAIL VARCHAR(50) UNIQUE NOT NULL,
	FWD_EMAIL VARCHAR(50) UNIQUE NOT NULL,
	AUTO_ASSIGN_GROUP_ID BIGINT,
	VERIFIED BOOLEAN,
	PRIMARY_SUPPORT_EMAIL BOOLEAN,
	CONSTRAINT SUPPORT_EMAILS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT SUPPORT_EMAILS_FK_AUTO_ASSIGN_GROUP FOREIGN KEY (AUTO_ASSIGN_GROUP_ID) REFERENCES Groups(GROUPID)
);

CREATE TABLE IF NOT EXISTS EmailSettings (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT UNIQUE NOT NULL,
	BCC_EMAIL VARCHAR(50),
	FLAGS TINYINT,
	CONSTRAINT EMAIL_SETTINGS_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

-- service portal --
CREATE TABLE IF NOT EXISTS PortalInfo (
	PORTALID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT,
	PORTALTYPE INT DEFAULT 0,
	SIGNUP_ALLOWED BOOLEAN,
	GMAILLOGIN_ALLOWED BOOLEAN,
	IS_PUBLIC_CREATE_ALLOWED BOOLEAN,
	IS_ANYDOMAIN_ALLOWED BOOLEAN,
	WHITELISTED_DOMAINS VARCHAR(255),
	SAML_ENABLED BOOLEAN,
	LOGIN_URL VARCHAR(50),
	LOGOUT_URL VARCHAR(50),
	PASSWORD_URL VARCHAR(50),
	UNIQUE KEY PortalInfo_type (ORGID,PORTALTYPE),
	CONSTRAINT PortalInfo_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS Ticket_Activity (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	TICKET_ID BIGINT NOT NULL,
	MODIFIED_TIME BIGINT NOT NULL,
	MODIFIED_BY BIGINT NOT NULL,
	ACTIVITY_TYPE INT NOT NULL,
	INFO VARCHAR(5000),
	CONSTRAINT Ticket_Activity_FK_TICKET_ID FOREIGN KEY (TICKET_ID) REFERENCES Tickets(ID) ON DELETE CASCADE,
	CONSTRAINT Ticket_Activity_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT Ticket_Activity_FK_MODIFIED_BY FOREIGN KEY (MODIFIED_BY) REFERENCES ORG_Users(ORG_USERID)
);

CREATE TABLE IF NOT EXISTS Connected_App (
	CONNECTED_APP_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT,
	NAME VARCHAR(100),
	LINK_NAME VARCHAR(100),
	DESCRIPTION VARCHAR(500),
	BASEURL VARCHAR(500),
	CONSTRAINT CONNECTED_APP_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS Tab_Widget (
	TAB_WIDGET_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT,
	MODULE_LINK_NAME VARCHAR(100),
	TAB_NAME VARCHAR(100),
	TAB_LINK_NAME VARCHAR(100),
	WIDGET_NAME VARCHAR(100),
	CONNECTED_APP_ID BIGINT,
	RESOURCE_PATH VARCHAR(500),
	CONSTRAINT TAB_WIDGET_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT TAB_WIDGET_FK_CONNECTED_APP_ID FOREIGN KEY (CONNECTED_APP_ID) REFERENCES Connected_App(CONNECTED_APP_ID)
);

CREATE TABLE IF NOT EXISTS Notification (
	ID BIGINT AUTO_INCREMENT PRIMARY KEY,
	ORGID BIGINT NOT NULL,
	USERID BIGINT NOT NULL,
	NOTIFICATION_TYPE INT NOT NULL,
	ACTOR_ID BIGINT,
	INFO VARCHAR(5000),
	IS_READ BOOLEAN DEFAULT FALSE,
	READ_AT BIGINT,
	IS_SEEN BOOLEAN DEFAULT FALSE,
	SEEN_AT BIGINT,
	CREATED_TIME BIGINT,
	CONSTRAINT NOTIFICATION_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
	CONSTRAINT NOTIFICATION_FK_USERID FOREIGN KEY (USERID) REFERENCES ORG_Users(ORG_USERID),
	CONSTRAINT NOTIFICATION_FK_ACTORID FOREIGN KEY (ACTOR_ID) REFERENCES ORG_Users(ORG_USERID)
);

CREATE TABLE IF NOT EXISTS Dashboard (
  ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  ORG_ID BIGINT DEFAULT NULL,
  MODULE_ID BIGINT DEFAULT NULL,
  DASHBOARD_NAME VARCHAR(45) NOT NULL,
  CREATED_BY_USER_ID BIGINT DEFAULT NULL,
  PUBLISH_STATUS INT DEFAULT NULL,
  CONSTRAINT DASHBOARD_MODULE_ID FOREIGN KEY (MODULE_ID) REFERENCES Modules (MODULEID),
  CONSTRAINT DASHBOARD_ORG_ID FOREIGN KEY (ORG_ID) REFERENCES Organizations (ORGID),
  CONSTRAINT DASHBOARD_CREATED_BY_USER_ID FOREIGN KEY (CREATED_BY_USER_ID) REFERENCES ORG_Users (ORG_USERID)
);

CREATE TABLE IF NOT EXISTS Widget (
  ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  ORG_ID BIGINT DEFAULT NULL,
  MODULE_ID BIGINT DEFAULT NULL,
  WIDGET_NAME VARCHAR(45) DEFAULT NULL,
  TYPE VARCHAR(45) DEFAULT NULL,
  HEADER_TITLE VARCHAR(45) DEFAULT NULL,
  HEADER_SUBTITLE VARCHAR(45) DEFAULT NULL,
  HEADER_IS_EXPORT TINYINT DEFAULT NULL,
  DATA_OPTION_TYPE VARCHAR(45) DEFAULT NULL,
  DATA_OPTION_NAME VARCHAR(45) DEFAULT NULL,
  DATA_OPTION_DATA_URL VARCHAR(500) DEFAULT NULL,
  DATA_OPTION_REFRESH_INTERVAL INT(11) DEFAULT NULL,
  CONSTRAINT WIDGET_MODULE_ID FOREIGN KEY (MODULE_ID) REFERENCES Modules (MODULEID),
  CONSTRAINT WIDGET_ORG_ID FOREIGN KEY (ORG_ID) REFERENCES Organizations (ORGID)
);

CREATE TABLE IF NOT EXISTS Dashboard_vs_Widget (
  ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  DASHBOARD_ID BIGINT DEFAULT NULL,
  WIDGET_ID BIGINT DEFAULT NULL,
  LAYOUT_WIDTH INT DEFAULT NULL,
  LAYOUT_HEIGHT INT DEFAULT NULL,
  LAYOUT_POSITION INT DEFAULT NULL,
  CONSTRAINT dashboard_vs_widget_dashboard_id FOREIGN KEY (DASHBOARD_ID) REFERENCES Dashboard (ID),
  CONSTRAINT dashboard_vs_widget_widget_id FOREIGN KEY (WIDGET_ID) REFERENCES Widget (ID)
);

CREATE TABLE IF NOT EXISTS Widget_Period (
  ID BIGINT(20) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  WIDGET_ID BIGINT(20) DEFAULT NULL,
  PERIOD_LABEL VARCHAR(45) DEFAULT NULL,
  PERIOD_VALUE VARCHAR(45) DEFAULT NULL,
  CONSTRAINT WIDGET_PERIOD_WIDGET_ID FOREIGN KEY (WIDGET_ID) REFERENCES Widget (ID)
);

CREATE TABLE IF NOT EXISTS Report (
  ID BIGINT AUTO_INCREMENT PRIMARY KEY,
  MODULEID BIGINT DEFAULT NULL,
  X_AXIS BIGINT NOT NULL,
  Y1_AXIS VARCHAR(50) DEFAULT NULL,
  Y2_AXIS VARCHAR(50) DEFAULT NULL,
  Y3_AXIS VARCHAR(50) DEFAULT NULL,
  TIME_SERIES_FIELD BIGINT DEFAULT NULL,
  CRITERIA_ID BIGINT DEFAULT NULL,
  IS_COMPARISION_REPORT tinyint(4) DEFAULT NULL,
  CONSTRAINT REPORT_CRITERIA_ID FOREIGN KEY (CRITERIA_ID) REFERENCES Criteria (CRITERIAID),
  CONSTRAINT REPORT_MODULE_ID FOREIGN KEY (MODULEID) REFERENCES Modules (MODULEID),
  CONSTRAINT REPORT_TIME_SERIES_FIELD FOREIGN KEY (TIME_SERIES_FIELD) REFERENCES Fields (FIELDID),
  CONSTRAINT REPORT_XAXIS FOREIGN KEY (X_AXIS) REFERENCES Fields (FIELDID)
) 


CREATE TABLE IF NOT EXISTS Unmodeled_Instance (
  ID BIGINT(20) AUTO_INCREMENT PRIMARY KEY, 
  ORGID BIGINT(20) NOT NULL,
  NAME VARCHAR(250) NOT NULL, 
  CONSTRAINT Unmodeled_Instance_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);

CREATE TABLE IF NOT EXISTS Unmodeled_Data (
  ID BIGINT(20) AUTO_INCREMENT PRIMARY KEY,
  INSTANCE_ID BIGINT(20) NOT NULL,
  TTIME BIGINT(20), 
  VALUE VARCHAR(1000), 
  CONSTRAINT UNMODELED_DATA_FK_INSTANCEID FOREIGN KEY (INSTANCE_ID) REFERENCES Unmodeled_Instance(ID)
 );
 
 CREATE TABLE IF NOT EXISTS Instance_To_Energy_Data_Mapping (
   ID BIGINT AUTO_INCREMENT PRIMARY KEY, 
   ORGID BIGINT NOT NULL, 
   INSTANCE_NAME VARCHAR(1000),
   ENERGY_METER_ID BIGINT(20), 
   FIELD_ID BIGINT(20),
   CONSTRAINT INSTANCE_TO_ENERGY_DATA_MAPPING_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID),
   CONSTRAINT INSTANCE_TO_ENERGY_DATA_MAPPING_FK_FIELDID FOREIGN KEY (FIELD_ID) REFERENCES Fields(FIELDID),
   CONSTRAINT INSTANCE_TO_ENERGY_DATA_MAPPING_FK_METERID FOREIGN KEY (ENERGY_METER_ID) REFERENCES Energy_Meter(ID)
 );
 
CREATE TABLE IF NOT EXISTS IOT_Reading_Property (
  ID BIGINT AUTO_INCREMENT PRIMARY KEY, 
  ORGID BIGINT NOT NULL,
  READING_INTERVAL BIGINT(20),
  READING_TOPIC VARCHAR(250),
  LAST_FETCH_TIME BIGINT(20),
  CONSTRAINT IOT_READING_PROPERTY_FK_ORGID FOREIGN KEY (ORGID) REFERENCES Organizations(ORGID)
);
 
-- Triggers
DELIMITER $$
CREATE TRIGGER generateTicketSerialNumber BEFORE INSERT
ON Tickets FOR EACH ROW
BEGIN
DECLARE MAX_SERIAL_NUMBER INT;
SELECT COALESCE(MAX(SERIAL_NUMBER),0) INTO MAX_SERIAL_NUMBER FROM Tickets WHERE ORGID = NEW.ORGID;
SET NEW.SERIAL_NUMBER = MAX_SERIAL_NUMBER + 1;
END; $$

CREATE TRIGGER generateBaseSpaceLocalId BEFORE INSERT
ON BaseSpace FOR EACH ROW
BEGIN
DECLARE MAX_LOCAL_ID INT;
SELECT COALESCE(MAX(LOCAL_ID),0) INTO MAX_LOCAL_ID FROM BaseSpace WHERE ORGID = NEW.ORGID AND SPACE_TYPE = NEW.SPACE_TYPE;
SET NEW.LOCAL_ID = MAX_LOCAL_ID + 1;
END; $$

CREATE TRIGGER generateAssetLocalId BEFORE INSERT
ON Assets FOR EACH ROW
BEGIN
DECLARE MAX_LOCAL_ID INT;
SELECT COALESCE(MAX(LOCAL_ID),0) INTO MAX_LOCAL_ID FROM Assets WHERE ORGID = NEW.ORGID;
SET NEW.LOCAL_ID = MAX_LOCAL_ID + 1;
END; $$

CREATE TRIGGER incrementTicketNoteCount AFTER INSERT
ON Ticket_Notes FOR EACH ROW
BEGIN
UPDATE Tickets SET NO_OF_NOTES = COALESCE(NO_OF_NOTES,0)+1 WHERE ID = NEW.PARENT_ID;		
END; $$

CREATE TRIGGER decrementTicketNoteCount AFTER DELETE
ON Ticket_Notes FOR EACH ROW
BEGIN
UPDATE Tickets SET NO_OF_NOTES = NO_OF_NOTES-1 WHERE ID = OLD.PARENT_ID;		
END; $$

CREATE TRIGGER incrementTicketAttachmentCount AFTER INSERT
ON Ticket_Attachments FOR EACH ROW
BEGIN
UPDATE Tickets SET NO_OF_ATTACHMENTS = COALESCE(NO_OF_ATTACHMENTS,0)+1 WHERE ID = NEW.PARENT_TICKET;		
END; $$

CREATE TRIGGER ticketAttachmentCascadeDelete BEFORE DELETE
ON File FOR EACH ROW
BEGIN
DELETE FROM Ticket_Attachments WHERE FILE_ID = OLD.FILE_ID;		
END; $$

CREATE TRIGGER decrementTicketAttachmentCount AFTER DELETE
ON Ticket_Attachments FOR EACH ROW 
BEGIN
UPDATE Tickets SET NO_OF_ATTACHMENTS = NO_OF_ATTACHMENTS-1 WHERE ID = OLD.PARENT_TICKET;		
END; $$

CREATE TRIGGER incrementTaskCount AFTER INSERT
ON Tasks FOR EACH ROW
BEGIN
DECLARE TICKET_STATUS_TYPE TINYINT;
UPDATE Tickets SET NO_OF_TASKS = COALESCE(NO_OF_TASKS,0)+1 WHERE ID = NEW.PARENT_TICKET_ID;
SELECT STATUS_TYPE INTO TICKET_STATUS_TYPE FROM TicketStatus INNER JOIN Tickets ON TicketStatus.ID = Tickets.STATUS_ID WHERE Tickets.ID = NEW.ID;
IF TICKET_STATUS_TYPE = 2 THEN
UPDATE Tickets SET NO_OF_CLOSED_TASKS = COALESCE(NO_OF_CLOSED_TASKS,0)+1 WHERE ID = NEW.PARENT_TICKET_ID;
END IF;
END; $$

CREATE TRIGGER decrementTaskCount AFTER DELETE
ON Tasks FOR EACH ROW
BEGIN
DECLARE TICKET_STATUS_TYPE TINYINT;
UPDATE Tickets SET NO_OF_TASKS = NO_OF_TASKS-1 WHERE ID = OLD.PARENT_TICKET_ID;
SELECT STATUS_TYPE INTO TICKET_STATUS_TYPE FROM TicketStatus INNER JOIN Tickets ON TicketStatus.ID = Tickets.STATUS_ID WHERE Tickets.ID = OLD.ID;
IF TICKET_STATUS_TYPE = 2 THEN
UPDATE Tickets SET NO_OF_CLOSED_TASKS = NO_OF_CLOSED_TASKS-1 WHERE ID = OLD.PARENT_TICKET_ID;
END IF;
END; $$

DELIMITER ;

-- Insert Queries
-- Add entry in Jobs for workorderemail parser
INSERT INTO Jobs (JOBID, JOBNAME, IS_ACTIVE, IS_PERIODIC, PERIOD, NEXT_EXECUTION_TIME, EXECUTOR_NAME) VALUES (1, 'WorkOrderRequestEmailParser', true, true, 60, UNIX_TIMESTAMP()+30,'priority');
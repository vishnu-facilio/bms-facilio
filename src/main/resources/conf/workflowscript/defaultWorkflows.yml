'0':
  description: 'sample'
  usage: 'test'
  workflow: 'Number getCubeOf(Number i)
                   {
                   		return i * i * i;
                   }'
'1': 
   description: 'woAverageResponseTime'
   usage: 'pmSummary'
   workflow: 'Map test(Number pmId) 
     			  	{ 
     			  		woModule = Module("workorder"); 
     			  		res = woModule.fetch([pm == pmId && actualWorkStart > 0]); 
     			  		if (res == null) 
     			  		{ 
     			  			return null; 
     			  		} 
							date = NameSpace("date");
 						temp = date.getPreviousMonthEndDate();
							previousMonthRes = woModule.fetch([pm == pmId && actualWorkStart > 0 && createdTime <= temp]);
							previousMonthresponseTime = 0; 
							if (previousMonthRes != null) {	
	        			  		b = previousMonthRes.size(); 
	                            for each index,value in previousMonthRes { 
	        			  			wd =  (value.actualWorkStart - value.createdTime); 
	        			  			previousMonthresponseTime = (previousMonthresponseTime + wd);
	        			  		}
                             previousMonthresponseTime = previousMonthresponseTime/b; 
                         }
     			  		responseTime = 0; 
     			  		a = res.size(); 
     			  		for each index,value in res { 
     			  			wd =  (value.actualWorkStart - value.createdTime); 
     			  			responseTime = (responseTime + wd);
     			  		} 
     			  		responseTime = responseTime/a; 
                         resMap = {};
                         resMap["responseTime"] = responseTime;
                         resMap["previousMonthresponseTime"] = previousMonthresponseTime;
      					return resMap; 
     			  	}'
'54':
  description: 'energy star score average'
  usage: 'energy star main summary'
  workflow: 'Number scoreAvg() {
              db = {
                criteria : [score != null],
                field : "score",
                aggregation : "avg",
              };
              return Module("energyStarPropertyData").fetch(db);
            }'
'55':
  description: 'energy star energy consumption card'
  usage: 'energy star property summary'
  workflow: 'Map energyCons(Number meterId,Number lastDataRecivedTime,Number baseline){
  
                 st = NameSpace("date").getMonthStartTime(lastDataRecivedTime);
                 et = NameSpace("date").getMonthEndTime(lastDataRecivedTime);
                 
                 max = 0;
                 db = {
                   	criteria : [parentId == meterId && ttime >= st && ttime <=et],
                   	field : "totalEnergyConsumptionDelta",
                   	aggregation : "sum",
                 };
                 
                 current = Module("energydata").fetch(db);
                 
                 if(current > max) {
                   max = current;
                 }
                 
                 if(baseline != null) {
                   st = NameSpace("date").getMonthStartTime(baseline);
                   et = NameSpace("date").getMonthEndTime(baseline);
                 
                  db = {
                   	criteria : [parentId == meterId && ttime >= st && ttime <=et],
                   	field : "totalEnergyConsumptionDelta",
                   	aggregation : "sum",
                  };
                 
                   baseline = Module("energydata").fetch(db);
                   if(baseline > max) {
                   	max = baseline;
                   }
                 }
                 res = {};
                 res.current = current;
                 res.baseline = baseline;
                 res.maxValue = max;
                 return res;
               }'

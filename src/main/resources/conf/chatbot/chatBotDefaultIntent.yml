- 
   name: "system_greet_intent"
   displayName: "System Greeting Intent"
   type: 1
   localId : 1
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "hi"
    -
        sampleLocalId : 2
        sample: "hello"
    -
        sampleLocalId : 3
        sample: "Hai"
        
- 
   name: "system_greet_question_1_intent"
   displayName: "System Greeting Question Intent"
   type: 1
   localId : 2
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "how are you"
    -
        sampleLocalId : 2
        sample: "Whatâ€™s up"
    -
        sampleLocalId : 3
        sample: "How are you doing"
    -
        sampleLocalId : 4
        sample: "How do you do"
    -
        sampleLocalId : 5
        sample: "Whazzup"
        
        
- 
   name: "system_name_query_intent"
   displayName: "System Name Query Intent"
   type: 1
   localId : 3
   withParams : true
   params:
   -
      name : 'myname'
      askAs : "I don't have a name, can you suggest a name for me?"
      dataType : 1
      mlType : 1
      localId : 1
      typeConfig : 1
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "what is your name"
    -
        sampleLocalId : 2
        sample: "What do you call yourself"
    -
        sampleLocalId : 3
        sample: "What are you named"
    -
        sampleLocalId : 4
        sample: "may i have your name"
    -
        sampleLocalId : 5
        sample: "How may I address you"
         
- 
   name: "system_intent_not_fount_intent"
   displayName: "System Intent not Fount Intent"
   type: 3
   localId : 4
   actions:
      - 
        action: 
            actionType: 29
            status: 1
            
- 
   name: "system_terminate_session_intent"
   displayName: "System Terminate Session Intent"
   type: 1
   localId : 5
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "exit"
    -
        sampleLocalId : 2
        sample: "stop it"
    -
        sampleLocalId : 3
        sample: "terminate"
       
- 
   name: "system_create_wo_intent"
   displayName: "Create service request"
   type: 1
   localId : 7
   withParams : true
   confirmationNeeded : true
   childIntentNames:
   - "system_update_wo_note_intent"
   - "system_show_open_workorder_count_intent"
   params:
   -
      name : 'subject'
      displayName : "Subject"
      askAs : 'Enter the Subject?'
      dataType : 1
      mlType : 1
      localId : 1
      editable : true
      typeConfig : 1
      updateParamTriggerText : 'Edit Subject'
   -
      name : 'description'
      displayName : "Description"
      askAs : 'Tell us something more about the problem'
      dataType : 1
      mlType : 1
      localId : 2
      typeConfig : 2
      addParamTriggerText : 'Add Description'
   -
      name : 'woId'
      dataType : 2
      localId : 3
      typeConfig : 3
   actions:
    - 
        action: 
            actionType: 30
            status: 1
            templateJson: 
                type: 18
                resultWorkflowContext :
                   isV2Script : true
                   workflowV2String : 'Map test(Map data){
    
                                         wo = {};
                                         wo.subject = data.subject;
                                         if(data.description != null) {
                                            wo.description = data.description;
                                         }
                                         wo.sourceType = 7; 
                                           
                                         cri = {
                                           criteria : [id != 0],
                                           limit : 1,
                                           orderBy : "id" asc,
                                         };
                                         
                                         site = Module("site").fetch(cri)[0];
                                         wo.siteId = site.id;
                                         wo.site = site.id;
                                         
                                         WorkOrder().add(wo);
                                         
                                         resultMap = {};
                                         
                                         resultMap.put("returnText","Workorder created Successfully __[#"+wo.id+"](https://app.facilio.com/app/wo/orders/summary/"+wo.id+")__.");
                                         extraParmas = {};
                                         extraParmas.put("woId",wo.id);
                                         resultMap.put("extraParams",extraParmas);
                                         return resultMap;
                                       }'   
   invokeSamples:
    -
       sampleLocalId : 1
       sample: "I need to raise a complaint"
    -
       sampleLocalId : 2
       sample: "I need to submit a work order"
    -
       sampleLocalId : 3
       sample: "I have a complaint"
    -
       sampleLocalId : 4
       sample: "I want to report something"
    -
       sampleLocalId : 5
       sample: "I want to report a leak"
    -
       sampleLocalId : 6
       sample: "I want to raise an issue"
    -
       sampleLocalId : 7
       sample: "I want to notify about a problem"
    -
       sampleLocalId : 8
       sample: "I want to notify the FM team"
    -
       sampleLocalId : 9
       sample: "Can I report  a problem"
    -
       sampleLocalId : 10
       sample: "Do you accept service requests"
    -
       sampleLocalId : 11
       sample: "I have a problem to report"
    -
       sampleLocalId : 12
       sample: "Can service request be submitted through you"
    -
       sampleLocalId : 13
       sample: "I need to put in a work order"
    -
       sampleLocalId : 14
       sample: "How do I report compaints"
    -
       sampleLocalId : 15
       sample: "Report problem"
    -
       sampleLocalId : 16
       sample: "Report issue"
    -
       sampleLocalId : 17
       sample: "Raise complaint"
    -
       sampleLocalId : 18
       sample: "Create work order"
    -
       sampleLocalId : 19
       sample: "Create service request"
    -
       sampleLocalId : 20
       sample: "Create complaint"
    -
       sampleLocalId : 21
       sample: "I want to put in a work order"
    -
       sampleLocalId : 22
       sample: "report a problem"
    -
       sampleLocalId : 23
       sample: "I want to notify the FM team"
    -
       sampleLocalId : 24
       sample: "I have a problem"
       
- 
   name: "system_what_is_workorder_question_intent"
   displayName: "System what is workorder question Intent"
   type: 1
   localId : 8
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "what is workorder"
    -
        sampleLocalId : 2
        sample: "what is wo"
        
- 
   name: "system_vm_create_page_direction_intent"
   displayName: "System vm create page direction Intent"
   type: 1
   localId : 9
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "where can i create a vm"
    -
        sampleLocalId : 2
        sample: "where can i create a virtual meter"
    -
        sampleLocalId : 3
        sample: "how can i create a virtual meter"
    -
        sampleLocalId : 4
        sample: "how can i create a vm"
    -
        sampleLocalId : 5
        sample: "how to create a vm"
    -
        sampleLocalId : 6
        sample: "how to create a virtual meter"
    -
        sampleLocalId : 7
        sample: "where to create a virtual meter"
    -
        sampleLocalId : 8
        sample: "where to create a vm"
        
- 
   name: "system_facilio_blog_page_query_intent"
   displayName: "System facilio blog page query Intent"
   type: 1
   localId : 10
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "where can i find your blog"
    -
        sampleLocalId : 2
        sample: "where can i find blog posts"
    -
        sampleLocalId : 3
        sample: "how to view facilio blog"
    -
        sampleLocalId : 4
        sample: "how to view blog"
    -
        sampleLocalId : 5
        sample: "give me your blog address"
    -
        sampleLocalId : 6
        sample: "where to find your blog"
    -
        sampleLocalId : 7
        sample: "where to find your facilio blog"
        
- 
   name: "system_what_is_your_age_intent"
   displayName: "System what is your age Intent"
   type: 1
   localId : 12
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "what is your age"
    -
        sampleLocalId : 2
        sample: "how old are you"
    -
        sampleLocalId : 3
        sample: "may i have your age"
        
- 
   name: "system_what_is_your_gender_intent"
   displayName: "System what is your age Intent"
   type: 1
   localId : 12
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "what is your gender"
    -
        sampleLocalId : 2
        sample: "may i have your gender"
        
- 
   name: "system_update_wo_note_intent"
   displayName: "add note to workorder"
   type: 1
   localId : 13
   withParams : true
   params:
   -
      name : 'woId'
      askAs : "Select your workrequest"
      dataType : 2
      mlType : 1
      localId : 1
      typeConfig : 1
      fillableByParent : true
   -
      name : 'note'
      askAs : "Enter your note"
      dataType : 1
      mlType : 1
      localId : 2
      typeConfig : 1
   contextWorkflow :
       isV2Script : true
       workflowV2String : 'ChatBotAction test(Map data){
                             if(data.woId == null) {
                             
                                db = {
								    criteria : [sourceType != 7],
								    limit : 10,
								    orderBy: "createdTime" desc
							    };
                                
                              	wos = WorkOrder().fetch(db);
                                
                                woMapList = [];
                               
                                for each index,wo in wos {
                                    woMap = {};
                                    woMap.id = wo.id;
                                    woMap.label = wo.subject;
                                    
                                    woMapList.add(woMap);
                                }
                                
                                return chatBot().param("woId","Select your workrequest",woMapList);
                             }
                             if(data.woId != null && data.note == null) {
                                return chatBot().param("note","Enter your note");
                             }
                             if(data.woId != null && data.note != null) {
                             
                                return chatBot().execute();
                             }
                           }' 
   actions:
    - 
        action: 
            actionType: 30
            status: 1
            templateJson: 
                type: 18
                resultWorkflowContext :
                   isV2Script : true
                   workflowV2String : 'Map test(Map data){
    
                                         WorkOrder().addNote(data.woId,data.note);
                                         
                                         resultMap = {};
                                         
                                         resultMap.put("returnText","Note updated Successfully.");
                                         
                                         return resultMap;
                                         
                                       }'  
   invokeSamples:
    -
       sampleLocalId : 1
       sample: "add note to wo"
    -
       sampleLocalId : 2
       sample: "add note to a wo"
    -
       sampleLocalId : 3
       sample: "add note workorder"
    -
       sampleLocalId : 4
       sample: "add note to workorder"

- 
   name: "system_show_open_workorder_count_intent"
   displayName: "System show open workorder count Intent"
   type: 1
   localId : 14
   withParams : false
   actions:
    - 
        responseType : 2
        action: 
            actionType: 30
            status: 1
            templateJson: 
                type: 18
                resultWorkflowContext :
                   isV2Script : true
                   workflowV2String : 'Map test(Map data){
                   
                                         db = {
								             criteria : [id != null],
								             field : "subject",
								             aggregation : "count",
							             };
    
                                         wos = WorkOrder().fetch(db);
                                         
                                         count = 0;
                                         if(wos != null) {
                                            count = wos;
                                         }
                                         resMap = {};
                                         resMap.label = "My Open Workorder";
                                         resMap.value = count;
                                         resMap.subLabel = "This Year";
                                         return resMap;
                                       }'  
   invokeSamples:
    -
       sampleLocalId : 1
       sample: "show open wo count"
    -
       sampleLocalId : 2
       sample: "give me open wo count"
       
- 
   name: "system_add_invite_intent"
   displayName: "Add invite"
   type: 1
   localId : 15
   withParams : true
   editable : true
   params:
   -
      name : 'visitorType'
      askAs : "Select visitor type"
      dataType : 2
      mlType : 1
      localId : 1
      typeConfig : 1
   -
      name : 'name'
      askAs : "Enter name"
      dataType : 1
      mlType : 1
      localId : 2
      typeConfig : 1
   -
      name : 'phone'
      askAs : "Enter phone number"
      dataType : 1
      mlType : 1
      localId : 3
      typeConfig : 1
   -
      name : 'email'
      askAs : "Enter email"
      dataType : 1
      mlType : 1
      localId : 4
      typeConfig : 1
      editable : true
      updateParamTriggerText : 'Edit email'
   -
      name : 'host'
      askAs : "Select host"
      dataType : 2
      mlType : 1
      localId : 5
      typeConfig : 1
      editable : true
      updateParamTriggerText : 'Edit host'
      
   contextWorkflow :
       isV2Script : true
       workflowV2String : 'ChatBotAction test(Map data){
                             if(data.visitorType == null) {
                             
                                db = {
								    criteria : [id > 0]
							    };
                                
                              	types = Module("visitorType").fetch(db);
                                
                                typeList = [];
                                
                                for each index,type in types {
                                    typeMap = {};
                                    typeMap.id = type.id;
                                    typeMap.label = type.name;
                                    
                                    typeList.add(typeMap);
                                }
                                
                                return chatBot().param("visitorType","Select visitor type",typeList);
                             }
                             else if(data.name == null) {
                                return chatBot().param("name","Enter name");
                             }
                             else if(data.phone == null) {
                                return chatBot().param("phone","Enter phone number");
                             }
                             else if(data.email == null) {
                                return chatBot().param("email","Enter email");
                             }
                             else if(data.host == null) {
                                
								criteria1 = [id > 0];
                                
                                return chatBot().param("host","Select host",criteria1,"contact");
                             }
                             else{
                             
                                return chatBot().execute();
                             }
                           }' 
   actions:
    - 
        action: 
            actionType: 30
            status: 1
            templateJson: 
                type: 18
                resultWorkflowContext :
                   isV2Script : true
                   workflowV2String : 'Map test(Map data){
    
                                         invite = {};
                                         invite.visitorType.id = data.visitorType;
                                         invite.visitorPhone = data.phone;
                                         invite.visitorName = data.name;
                                         invite.visitorEmail = data.email;
                                         invite.host.id= data.host;		
                                         invite.purposeOfVisit = 3;	
                                         invite.isPreregistered = true;
                                         
                                         VisitorLogging().add(invite);
                                         
                                         resultMap = {};
                                         
                                         resultMap.put("returnText","Invited successfully.");
                                        
                                         return resultMap;
                                       }'  
   invokeSamples:
    -
       sampleLocalId : 1
       sample: "add invite"
    -
       sampleLocalId : 2
       sample: "create invite"
    -
       sampleLocalId : 3
       sample: "invite user"
    -
       sampleLocalId : 4
       sample: "invite people"
       
- 
   name: "system_what_can_you_do_intent"
   displayName: "System what can yo do Intent"
   type: 1
   localId : 16
   childIntentNames:
      - "system_create_wo_intent"
      - "system_add_invite_intent"
   actions:
    - 
        responseType : 8
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "what can you do"
    -
        sampleLocalId : 2
        sample: "how can you help me"
    -
        sampleLocalId : 3
        sample: "help me"
- 
   name: "system_greet_intent"
   displayName: "System Greeting Intent"
   type: 1
   localId : 1
   childIntentNames:
      - "system_create_wo_intent"
      - "system_get_my_work_request_intent"
      - "system_add_invite_intent"
      - "system_get_my_visitor_intent"
   actions:
    - 
        responseType : 8
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "Hola"
    -
        sampleLocalId : 2
        sample: "Namaste"
    -
        sampleLocalId : 3
        sample: "Howdy"
    -
        sampleLocalId : 4
        sample: "Whats up"
    -
        sampleLocalId : 5
        sample: "Hi"
    -
        sampleLocalId : 6
        sample: "Hello"
    -
        sampleLocalId : 7
        sample: "What can you do"
    -
        sampleLocalId : 8
        sample: "how can you help"
    -
        sampleLocalId : 9
        sample: "what are you useful for"
    -
        sampleLocalId : 10
        sample: "what is your capability"
    -
        sampleLocalId : 11
        sample: "can you help me"
    -
        sampleLocalId : 12
        sample: "I need help"
    -
        sampleLocalId : 13
        sample: "what do I do"
        
- 
   name: "system_intent_not_fount_intent"
   displayName: "System Intent not Fount Intent"
   type: 3
   localId : 4
   childIntentNames:
      - "system_create_wo_intent"
      - "system_get_my_work_request_intent"
      - "system_add_invite_intent"
      - "system_get_my_visitor_intent"
   actions:
      - 
        action: 
            actionType: 29
            status: 1
        
- 
   name: "system_greet_question_1_intent"
   displayName: "System Greeting Question Intent"
   type: 1
   localId : 2
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "how are you"
    -
        sampleLocalId : 2
        sample: "Whatâ€™s up"
    -
        sampleLocalId : 3
        sample: "How are you doing"
    -
        sampleLocalId : 4
        sample: "How do you do"
    -
        sampleLocalId : 5
        sample: "Whazzup"
        
        
        
        
        
        
       
- 
   name: "system_create_wo_intent"
   displayName: "Raise a service request"
   type: 1
   localId : 7
   withParams : true
   confirmationNeeded : true
   confirmationText : "Thanks for providing me with the information. I have created a service request for you."
   childIntentNames:
   - "system_update_wo_note_intent"
   - "system_update_wo_photo_intent"
   params:
   -
      name : 'subject'
      dataType : 1
      mlType : 19
      localId : 1
      editable : true
      typeConfig : 1
      updateParamTriggerText : 'Edit subject'
   -
      name : 'attachment'
      dataType : 9
      localId : 2
      typeConfig : 2
      addParamTriggerText : 'Add attachment'
   -
      name : 'description'
      displayName : "aditional information"
      dataType : 1
      localId : 3
      typeConfig : 2
      addParamTriggerText : 'Add more information'
   -
      name : 'urgency'
      dataType : 2
      localId : 4
      typeConfig : 2
      editable : true
      addParamTriggerText : 'Add urgency'
      updateParamTriggerText : 'Edit urgency'
   -
      name : 'woId'
      dataType : 2
      localId : 5
      typeConfig : 3
   contextWorkflow :
       isV2Script : true
       workflowV2String : 'ChatBotAction test(Map data){
                             if(data.subject == null) {
                                if(data.client_message != null && data.client_message == "Edit subject") {
                                   return chatBot().param("subject","please edit your message for the request");
                                }
                                else {
                                   return chatBot().param("subject","I will help you submit a service request. Can you provide me with some details?");
                                }
                             }
                             if(data.client_message != null && data.client_message == "Add attachment") {
                                
                                return chatBot().param("attachment","Add your attachment");
                             
                             }
                             if(data.client_message != null && (data.client_message == "Add urgency" || data.client_message == "Edit urgency")) {
                             
                                woUrgencyList = [];
                                
                                 woMap = {};
                                 woMap.id = 1;
                                 woMap.label = "Not Urgent";
                                 woUrgencyList.add(woMap);
                                 
                                 woMap = {};
                                 woMap.id = 2;
                                 woMap.label = "Urgent";
                                 woUrgencyList.add(woMap);
                                 
                                 woMap = {};
                                 woMap.id = 3;
                                 woMap.label = "Emergency";
                                 woUrgencyList.add(woMap);
                                
                                return chatBot().param("urgency","Select urgency",woUrgencyList);
                             
                             }
                             if(data.client_message != null && data.client_message == "Add more information") {
                                
                                return chatBot().param("description","What more would you like to add to this request?\nYou can add information such as location of the problem or add something specific");
                             
                             }
                             if(data.subject != null) {
                             
                                if(data.isConfirmed == true) {
                                   return chatBot().execute();
                                }
                                else {
                                   
                                   confirmation = {};
                                   
                                   confirmation.mainField = "subject";
                                   
                                   fields = {};
                                   fields.put("Subject",data.subject);
                                   if(data.description != null) { fields.put("More Information",data.description); }
                                   if(data.urgency != null) { 
                                   
                                      urgencyString = "Not Urgent";
                                      if(data.urgency == 2) {
                                         urgencyString = "Urgent";
                                      }
                                      else if (data.urgency == 3) {
                                         urgencyString = "Emergency";
                                      }
                                      fields.put("Urgency",urgencyString); 
                                      
                                   }
                                   
                                   confirmation.fields = fields;
                                   
                                   return chatBot().confirm(confirmation);
                                }
                             }
                           }'
   actions:
    - 
        action: 
            actionType: 30
            status: 1
            templateJson: 
                type: 18
                resultWorkflowContext :
                   isV2Script : true
                   workflowV2String : 'Map test(Map data){
    
                                         wo = {};
                                         wo.subject = data.subject;
                                         if(data.urgency != null) {
                                            wo.urgency = data.urgency;
                                         }
                                         if(data.description != null) {
                                            wo.description = data.description;
                                         }
                                         wo.sourceType = 7;
                                         wo.requester.id = currentUser.id; 
                                           
                                         cri = {
                                           criteria : [id != 0],
                                           limit : 1,
                                           orderBy : "id" asc,
                                         };
                                         
                                         site = Module("site").fetch(cri)[0];
                                         wo.siteId = site.id;
                                         wo.site = site.id;
                                         
                                         WorkOrder().add(wo);
                                         
                                         if(data.attachment != null) {
                                            photoIds = data.attachment; 
       
                                            WorkOrder().addAttachements(wo.id,photoIds);
                                         }
                                         
                                         resultMap = {};
                                         
                                         resultMap.put("returnText","Your service request has been submitted successfully with ID __[#"+wo.id+"](/tenant/workorder/summary/"+wo.id+")__.You can ask me to check on the status or add more details to this request at any time");
                                         extraParmas = {};
                                         extraParmas.put("woId",wo.id);
                                         resultMap.put("extraParams",extraParmas);
                                         return resultMap;
                                       }'   
   invokeSamples:
   
    -
       sampleLocalId : 1
       sample: "Raise Service request"
    -
       sampleLocalId : 2
       sample: "I need to submit a work order"
    -
       sampleLocalId : 3
       sample: "I have a complaint"
    -
       sampleLocalId : 4
       sample: "I want to report something"
    -
       sampleLocalId : 5
       sample: "I want to report a leak"
    -
       sampleLocalId : 6
       sample: "I want to raise an issue"
    -
       sampleLocalId : 7
       sample: "I want to notify about a problem"
    -
       sampleLocalId : 8
       sample: "I want to notify the FM team"
    -
       sampleLocalId : 9
       sample: "Can I report  a problem"
    -
       sampleLocalId : 10
       sample: "Do you accept service requests"
    -
       sampleLocalId : 11
       sample: "I have a problem to report"
    -
       sampleLocalId : 12
       sample: "Can service request be submitted through you"
    -
       sampleLocalId : 13
       sample: "I need to put in a work order"
    -
       sampleLocalId : 14
       sample: "How do I report compaints"
    -
       sampleLocalId : 15
       sample: "Report problem"
    -
       sampleLocalId : 16
       sample: "Report issue"
    -
       sampleLocalId : 17
       sample: "Raise complaint"
    -
       sampleLocalId : 18
       sample: "Create work order"
    -
       sampleLocalId : 19
       sample: "Create service request"
    -
       sampleLocalId : 20
       sample: "Create complaint"
    -
       sampleLocalId : 21
       sample: "I want to put in a work order"
    -
       sampleLocalId : 22
       sample: "report a problem"
    -
       sampleLocalId : 23
       sample: "I want to notify the FM team"
    -
       sampleLocalId : 24
       sample: "I have a problem"
    -
       sampleLocalId : 25
       sample: "create a work order with problem [Tap not working](message_subject)"
    -
       sampleLocalId : 26
       sample: "I need to raise a complaint"
        
- 
   name: "system_update_wo_note_intent"
   displayName: "Add Comment"
   type: 1
   localId : 13
   withParams : true
   params:
   -
      name : 'woId'
      askAs : "Select the work request to add the comment to"
      dataType : 2
      localId : 1
      typeConfig : 1
      fillableByParent : true
   -
      name : 'comment'
      askAs : "Enter your comment"
      dataType : 1
      localId : 2
      typeConfig : 1
   contextWorkflow :
       isV2Script : true
       workflowV2String : 'ChatBotAction test(Map data){
                             if(data.woId == null) {
                             
                                module = Module("workorder").asMap();
                                
                                db = {
   	                                    criteria : [parentModuleId == module.moduleId && typeCode == 1],
                                    	field : "id"
                                     };
                                     
                                openStatusIds = Module("ticketstatus").fetch(db);
                                
                                criteria1 = [requester == currentUser.id && status == openStatusIds];
                                
                                return chatBot().param("woId","Select the work request to add the comment to",criteria1,"workorder");
                               
                             }
                             if(data.woId != null && data.comment == null) {
                                return chatBot().param("comment","Please enter the comment to be added to the service request __[#"+data.woId+"](/tenant/workorder/summary/"+data.woId+")__");
                             }
                             if(data.woId != null && data.comment != null) {
                             
                                return chatBot().execute();
                             }
                           }' 
   actions:
    - 
        action: 
            actionType: 30
            status: 1
            templateJson: 
                type: 18
                resultWorkflowContext :
                   isV2Script : true
                   workflowV2String : 'Map test(Map data){
    
                                         WorkOrder().addNote(data.woId,data.comment);
                                         
                                         resultMap = {};
                                         
                                         resultMap.put("returnText","Your comment has been successfully added to Service Request __[#"+data.woId+"](/tenant/workorder/summary/"+data.woId+")__");
                                         
                                         return resultMap;
                                         
                                       }'  
   invokeSamples:
    -
       sampleLocalId : 1
       sample: "Add Comment"
    -
       sampleLocalId : 2
       sample: "add note to a wo"
    -
       sampleLocalId : 3
       sample: "add note workorder"
    -
       sampleLocalId : 4
       sample: "add note to workorder"
    -
       sampleLocalId : 5
       sample: "I want to add a comment"
    -
       sampleLocalId : 6
       sample: "I want to add information to my complaint"
    -
       sampleLocalId : 7
       sample: "I want to post to the FM team"
    -
       sampleLocalId : 8
       sample: "Add a comment to the service request"
       
- 
   name: "system_update_wo_photo_intent"
   displayName: "Add Attachment"
   type: 1
   localId : 13
   withParams : true
   params:
   -
      name : 'woId'
      askAs : "Select the work request to add the attachment to"
      dataType : 2
      localId : 1
      typeConfig : 1
      fillableByParent : true
   -
      name : 'attachment'
      askAs : "Add your attachment"
      dataType : 9
      multipleAllowed : true
      localId : 2
      typeConfig : 1
   contextWorkflow :
       isV2Script : true
       workflowV2String : 'ChatBotAction test(Map data){
                             if(data.woId == null) {
                             
                                module = Module("workorder").asMap();
                                
                                db = {
   	                                    criteria : [parentModuleId == module.moduleId && typeCode == 1],
                                    	field : "id"
                                     };
                                     
                                openStatusIds = Module("ticketstatus").fetch(db);
                                
                                criteria1 = [requester == currentUser.id && status == openStatusIds];
                                
                                return chatBot().param("woId","Select the work request to add the attachment to",criteria1,"workorder");
                               
                             }
                             if(data.woId != null && data.attachment == null) {
                                return chatBot().param("attachment","Please add the attachment to be added to the service request __[#"+data.woId+"](/tenant/workorder/summary/"+data.woId+")__");
                             }
                             if(data.woId != null && data.attachment != null) {
                             
                                return chatBot().execute();
                             }
                           }' 
   actions:
    - 
        action: 
            actionType: 30
            status: 1
            templateJson: 
                type: 18
                resultWorkflowContext :
                   isV2Script : true
                   workflowV2String : 'Map test(Map data){
                   
                                         photoIds = data.attachment; 
    
                                         WorkOrder().addAttachements(data.woId,photoIds);
                                         
                                         resultMap = {};
                                         
                                         resultMap.put("returnText","Your attachment has been successfully added to Service Request __[#"+data.woId+"](/tenant/workorder/summary/"+data.woId+")__");
                                         
                                         return resultMap;
                                         
                                       }'  
   invokeSamples:
    -
       sampleLocalId : 1
       sample: "Add Attachment"
    -
       sampleLocalId : 2
       sample: "Add photo"
    -
       sampleLocalId : 3
       sample: "update photo"
    -
       sampleLocalId : 4
       sample: "Can I add a photo to my work order"
    -
       sampleLocalId : 5
       sample: "I forgot to add a photo to the service request"
    -
       sampleLocalId : 6
       sample: "Can you attach a photo to the service request"
       
       
       
- 
   name: "system_get_my_work_request_intent"
   displayName: "Manage service requests"
   type: 1
   localId : 17
   withParams : true
   childIntentNames:
      - "system_update_wo_note_intent"
      - "system_update_wo_photo_intent"
   params:
   -
      name : 'woId'
      askAs : "Select the work request"
      dataType : 2
      localId : 1
      typeConfig : 1
   contextWorkflow :
       isV2Script : true
       workflowV2String : 'ChatBotAction test(Map data) {
                             if(data.woId == null) {
                             
                                module = Module("workorder").asMap();
                                
                                db = {
   	                                    criteria : [parentModuleId == module.moduleId && typeCode == 1],
                                    	field : "id"
                                     };
                                     
                                openStatusIds = Module("ticketstatus").fetch(db);
                                
                                criteria1 = [requester == currentUser.id && status == openStatusIds];
                                
                                woList = Module("workorder").fetch(criteria1);
                                
                                if(woList != null && woList.size() == 1) {
                                   
                                   wo = woList[0];
                                   data.woId = wo.id;
                                   
                                   return chatBot().execute();
                                } 
                                
                                return chatBot().param("woId","Select the work request",criteria1,"workorder");
                               
                             }
                             if(data.woId != null) {
                             
                                return chatBot().execute();
                             }
                           }' 
   
   actions:
    - 
        action: 
            actionType: 30
            status: 1
            templateJson: 
                type: 18
                resultWorkflowContext :
                   isV2Script : true
                   workflowV2String : 'Map test(Map data){
                   
                                         wo = WorkOrder().fetch([id == data.woId])[0];
                                       	
                                         status = Module("ticketstatus").fetch([id == wo.status.id])[0];
                                         
                                         resString = "This service request __[#"+wo.id+"](/tenant/workorder/summary/"+wo.id+")__ is currently "+status.status;
                                         
                                         if(wo.assignedTo != null && wo.assignedTo.id != null) {
                                             users = Module("users").fetch([ouid == wo.assignedTo.id]);
                                          	 user = users[0];
                                            resString = resString + " and is assigned to "+user.name+".";
                                         }
                                         resultMap = {};
                                         
                                         resultMap.put("returnText",resString);
                                         
                                         extraParmas = {};
                                         extraParmas.put("woId",wo.id);
                                         resultMap.put("extraParams",extraParmas);
                                         
                                         return resultMap;
                                       }' 
        
   invokeSamples:
    -
       sampleLocalId : 1
       sample: "Manage service request"
    -
       sampleLocalId : 2
       sample: "What is happening on the issue I raised?"
    -
       sampleLocalId : 3
       sample: "Is the work done?"
    -
       sampleLocalId : 4
       sample: "Why is taking it so long?"
    -
       sampleLocalId : 5
       sample: "What is the situation now?"
    -
       sampleLocalId : 6
       sample: "Is it done yet?"
    -
       sampleLocalId : 7
       sample: "Is it over?"
    -
       sampleLocalId : 8
       sample: "Is it completed?"
    -
       sampleLocalId : 9
       sample: "How long will it take?"
    -
       sampleLocalId : 10
       sample: "What stage is the work order in?"
    -
       sampleLocalId : 11
       sample: "Has the work started?"
    -
       sampleLocalId : 12
       sample: "What is being done so far?"
    -
       sampleLocalId : 13
       sample: "When can I expect it to be done?"
    -
       sampleLocalId : 14
       sample: "What is the next step?"
    -
       sampleLocalId : 15
       sample: "When will it be resolved?"
    -
       sampleLocalId : 16
       sample: "When will it be completed?"
    -
       sampleLocalId : 17
       sample: "How long will I have to wait?"
    -
       sampleLocalId : 18
       sample: "whats the situation of my work request"
    -
       sampleLocalId : 19
       sample: "what has done so far?"
    -
       sampleLocalId : 20
       sample: "what are the steps taken for my complaint"
    -
       sampleLocalId : 21
       sample: "What are the steps taken for my request"
    -
       sampleLocalId : 22
       sample: "Whats the situation of my work order"
    -
       sampleLocalId : 23
       sample: "what is the latest update"
    -
       sampleLocalId : 24
       sample: "what is the latest on my request"
    -
       sampleLocalId : 25
       sample: "do you have any updates"
    -
       sampleLocalId : 26
       sample: "are there any updates"
    -
       sampleLocalId : 27
       sample: "what is the progress now"
    -
       sampleLocalId : 28
       sample: "What is the status of my complaint?"

       
       
       
       
       
       
       
       
       
       
       
       
- 
   name: "system_add_invite_intent"
   displayName: "Invite Visitors"
   type: 1
   localId : 15
   withParams : true
   editable : true
   params:
   -
      name : 'names'
      dataType : 1
      mlType : 1
      localId : 1
      typeConfig : 1
      multipleAllowed : true
      editable : true
      updateParamTriggerText : 'Add people'
   -
      name : 'visitorType'
      dataType : 2
      localId : 2
      typeConfig : 1
      editable : true
      updateParamTriggerText : 'Edit type'
   -
      name : 'phone'
      dataType : 1
      # mlType : 1 will be added later
      localId : 3
      typeConfig : 1
      editable : true
      updateParamTriggerText : 'Edit phone number'
   -
      name : 'email'
      dataType : 1
     #mlType : 1 will be added later
      localId : 4
      typeConfig : 1
      editable : true
      updateParamTriggerText : 'Edit email'
   -
      name : 'host'
      dataType : 2
      localId : 5
      typeConfig : 1
      editable : true
      updateParamTriggerText : 'Edit host'
   -
      name : 'editableName'
      dataType : 1
      localId : 6
      typeConfig : 1
      editable : true
      updateParamTriggerText : 'Edit Visitor Name'
   -
      name : 'name'
      dataType : 1
      localId : 6
      typeConfig : 3
      
   contextWorkflow :
       isV2Script : true
       workflowV2String : 'ChatBotAction test(Map data){
                                
                                log "data --- "+data;
                                if(data.client_message != null) {
                                   data.client_message_local = data.client_message;
                                }
                                if(data.client_message_local != null) {
                                  
                                  if(data.client_message_local == "Edit host") {
                                    if(data.names.size() == 1) {
                                       data.client_message_local = null;
                                       return chatBot().param("host","Select host",[id > 0],"contact");
                                    }
                                    else {
                                       if(data.name != null) {
                                          data.client_message_local = null;
                                          return chatBot().param("host","Select host",[id > 0],"contact");
                                       }
                                       else {
                                          askName = true;
                                       }
                                    }
                                  }
                                  if(data.client_message_local == "Edit Visitor Name") {
                                    if(data.names.size() == 1) {
                                       data.client_message_local = null;
                                       return chatBot().param("editableName","Enter the name");
                                    }
                                    else {
                                       if(data.name != null) {
                                          data.client_message_local = null;
                                          return chatBot().param("editableName","Enter the name");
                                       }
                                       else {
                                          askName = true;
                                       }
                                    }
                                  }
                                  if(data.client_message_local == "Edit type") {
                              
                                    if(data.names.size() == 1) {
                                       data.client_message_local = null;
                                       return chatBot().param("visitorType","Select visitor Type",[id > 0],"visitorType");
                                    }
                                    else {
                                       if(data.name != null) {
                                          data.client_message_local = null;
                                          return chatBot().param("visitorType","Select visitor Type",[id > 0],"visitorType");
                                       }
                                       else {
                                          askName = true;
                                       }
                                    }
                                  }
                                  if(data.client_message_local == "Edit email") {
                              
                                    if(data.names.size() == 1) {
                                       data.client_message_local = null;
                                       return chatBot().param("email","Enter the email");
                                    }
                                    else {
                                       if(data.name != null) {
                                          data.client_message_local = null;
                                          return chatBot().param("email","Enter the email");
                                       }
                                       else {
                                          askName = true;
                                       }
                                    }
                                  }
                                  if(data.client_message_local == "Edit phone number") {
                              
                                    if(data.names.size() == 1) {
                                       data.client_message_local = null;
                                       return chatBot().param("phone","Enter the phone number");
                                    }
                                    else {
                                       if(data.name != null) {
                                          data.client_message_local = null;
                                          return chatBot().param("phone","Enter the phone number");
                                       }
                                       else {
                                          askName = true;
                                       }
                                    }
                                  }
                                  if(data.client_message_local == "Add people") {
                                    
                                       data.client_message_local = null;
                                       return chatBot().param("names","What is the name of the person?");
                                  }
                                }
                                
                                if(askName == true) {
                              
                                  nameList = [];
                              
                                  for each index,name in data.names {
                                    nameMap = {};
                                    nameMap.label = name;
                              
                                    nameList.add(nameMap);
                                  }
                                  nameMap = {};
                                  nameMap.label = "All";
                              
                                  nameList.add(nameMap);
                              
                                  return chatBot().param("name","For whome you want to apply this.",nameList);
                                }
                                
                                fillOneOrManyParam = null;
                                if(data.host != null) {
                                   fillOneOrManyParam = "host";
                                }
                                else if(data.visitorType != null) {
                                   fillOneOrManyParam = "visitorType";
                                }
                                else if(data.email != null) {
                                   fillOneOrManyParam = "email";
                                }
                                else if(data.phone != null) {
                                  fillOneOrManyParam = "phone";
                                }
                                else if(data.editableName != null) {
                                   if(data.names.size() == 1) {
                                      data.name = data.names[0];
                                   }
                                   for each index,name in data.names {
                                      if(name == data.name) {
                                         data.names.set(index,data.editableName);
                                      }
                                   }
                                   editPerson = data.get(data.name);
                                   data.remove(data.name);
                                   data.put(data.editableName,editPerson);
                                   data.editableName = null;
                                   data.name = null;
                                }
                                
                                if(fillOneOrManyParam != null) {
                                   if(data.names.size() == 1) {
                                    data.get(data.names[0]).put(fillOneOrManyParam, data.get(fillOneOrManyParam));
                                    data.put(fillOneOrManyParam,null);
                                  }
                                  else {
                              
                                    if(data.name != null) {
                                      if(data.name == "All") {
                                        for each index,name in data.names {
                                          data.get(name).put(fillOneOrManyParam, data.get(fillOneOrManyParam));
                                        }
                                      }
                                      else {
                                        data.get(data.name).put(fillOneOrManyParam,data.get(fillOneOrManyParam));
                                      }
                                      data.name = null;
                                      data.put(fillOneOrManyParam,null);
                                    }
                                  }
                                  fillOneOrManyParam = null;
                                }
                              
                                if(data.names == null) {
                                  return chatBot().param("names","What is the name of the person?");
                                }
                                else {
                                  for each index,name in data.names {
                              
                                    if(data.get(name) == null) {
                                      newMap = {};
                                      types = Module("visitorType").fetch([name == "Guest"]);
                                      if(types != null) {
                                        type = types[0];
                                        newMap.visitorType = type.id;
                                      }
                                      newMap.host = currentUser.id;
                                      data.put(name,newMap);
                                    }
                                  }
                                }
                              
                                for each index,name in data.names {
                              
                                  if(data.get(name).phone == null) {
                                    if(data.phone != null) {
                                      data.get(name).put("phone",data.phone);
                                      data.phone = null;
                                    }
                                    else {
                                      return chatBot().param("phone","What is "+name+"''s phone number?");
                                    }
                                  }
                              
                                  if(data.get(name).email == null) {
                                    if(data.email != null) {
                                      data.get(name).put("email",data.email);
                                      data.email = null;
                                    }
                                    else {
                                      return chatBot().param("email","What is "+name+"''s email?");
                                    }
                                  }
                                }
                              
                                if(data.isConfirmed == true) {
                                  return chatBot().execute();
                                }
                                else {
                              
                                  confirmation = {};
                                  confirmation.mainField = "Name";
                              
                                 fieldList = [];
                                 for each index,name in data.names {
                           
                                   fields = {};
                                   fields.put("Name",name);
                                   fields.put("Phone",data.get(name).phone);
                                   fields.put("Email",data.get(name).email);
                           
                                   host = Module("contact").fetch([id == data.get(name).host])[0];
                           
                                   fields.put("Host",host.name);
                           
                                   visitorType = Module("visitorType").fetch([id == data.get(name).visitorType])[0];
                                   fields.put("Vistor type",visitorType.name);
                                   fieldList.add(fields);
                           
                                 }
                                 if(fieldList.size() == 1) {
                                    confirmation.fields = fieldList[0];
                                 }
                                 else {
                                    confirmation.fields = fieldList;
                                 }
                                  return chatBot().confirm(confirmation);
                                }
                              }' 
   actions:
    - 
        action: 
            actionType: 30
            status: 1
            templateJson: 
                type: 18
                resultWorkflowContext :
                   isV2Script : true
                   workflowV2String : 'Map test(Map data){
    
                                         resultMap = {};
                                         
                                         for each index,name in data.names {
                                            
                                             invitePerson = data.get(name);
                                             invite = {};
                                             invite.visitorType.id = invitePerson.visitorType;
                                             invite.visitorPhone = invitePerson.phone;
                                             invite.visitorName = name;
                                             invite.visitorEmail = invitePerson.email;
                                             invite.host.id= invitePerson.host;		
                                             invite.purposeOfVisit = 3;	
                                             invite.isPreregistered = true;
                                             
                                             VisitorLogging().add(invite);
                                         }
                                         
                                         
                                         resultMap.put("returnText","Invited successfully.");
                                        
                                         return resultMap;
                                       }'  
   invokeSamples:
    -
       sampleLocalId : 1
       sample: "Invite Visitors"
    -
       sampleLocalId : 2
       sample: "I want to invite guests"
    -
       sampleLocalId : 3
       sample: "invite user"
    -
       sampleLocalId : 4
       sample: "invite people"
    -
       sampleLocalId : 5
       sample: "[san](person) and [john](person) are coming tomorrow"
    -
       sampleLocalId : 6
       sample: "I want to invite guests"
       
- 
   name: "system_get_my_visitor_intent"
   displayName: "Manage visitors"
   type: 1
   localId : 17
   actions:
    - 
        responseType : 3
        moduleName : 'visitorlogging'
        viewName : 'upcoming'
        action: 
            actionType: 29
            status: 1
        
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "Manage visitors list"
    -
        sampleLocalId : 2
        sample: "get my visitors list"
        
        
        
        
        
        
        
        
        
- 
   name: "system_show_open_workorder_count_intent"
   displayName: "System show open workorder count Intent"
   type: 1
   localId : 14
   withParams : false
   actions:
    - 
        responseType : 2
        action: 
            actionType: 30
            status: 1
            templateJson: 
                type: 18
                resultWorkflowContext :
                   isV2Script : true
                   workflowV2String : 'Map test(Map data){
                   
                                         db = {
								             criteria : [id != null],
								             field : "subject",
								             aggregation : "count",
							             };
    
                                         wos = WorkOrder().fetch(db);
                                         
                                         count = 0;
                                         if(wos != null) {
                                            count = wos;
                                         }
                                         resMap = {};
                                         resMap.label = "My Open Workorder";
                                         resMap.value = count;
                                         resMap.subLabel = "This Year";
                                         return resMap;
                                       }'  
   invokeSamples:
    -
       sampleLocalId : 1
       sample: "show open wo count"
    -
       sampleLocalId : 2
       sample: "give me open wo count"
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
- 
   name: "system_terminate_session_intent"
   displayName: "System Terminate Session Intent"
   type: 1
   localId : 5
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "exit"
    -
        sampleLocalId : 2
        sample: "stop it"
    -
        sampleLocalId : 3
        sample: "terminate"
        
- 
   name: "system_what_is_workorder_question_intent"
   displayName: "System what is workorder question Intent"
   type: 1
   localId : 8
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "what is workorder"
    -
        sampleLocalId : 2
        sample: "what is wo"
        
- 
   name: "system_vm_create_page_direction_intent"
   displayName: "System vm create page direction Intent"
   type: 1
   localId : 9
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "where can i create a vm"
    -
        sampleLocalId : 2
        sample: "where can i create a virtual meter"
    -
        sampleLocalId : 3
        sample: "how can i create a virtual meter"
    -
        sampleLocalId : 4
        sample: "how can i create a vm"
    -
        sampleLocalId : 5
        sample: "how to create a vm"
    -
        sampleLocalId : 6
        sample: "how to create a virtual meter"
    -
        sampleLocalId : 7
        sample: "where to create a virtual meter"
    -
        sampleLocalId : 8
        sample: "where to create a vm"
        
- 
   name: "system_facilio_blog_page_query_intent"
   displayName: "System facilio blog page query Intent"
   type: 1
   localId : 10
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "where can i find your blog"
    -
        sampleLocalId : 2
        sample: "where can i find blog posts"
    -
        sampleLocalId : 3
        sample: "how to view facilio blog"
    -
        sampleLocalId : 4
        sample: "how to view blog"
    -
        sampleLocalId : 5
        sample: "give me your blog address"
    -
        sampleLocalId : 6
        sample: "where to find your blog"
    -
        sampleLocalId : 7
        sample: "where to find your facilio blog"
        
- 
   name: "system_what_is_your_age_intent"
   displayName: "System what is your age Intent"
   type: 1
   localId : 12
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "what is your age"
    -
        sampleLocalId : 2
        sample: "how old are you"
    -
        sampleLocalId : 3
        sample: "may i have your age"
        
- 
   name: "system_what_is_your_gender_intent"
   displayName: "System what is your age Intent"
   type: 1
   localId : 12
   actions:
    - 
        action: 
            actionType: 29
            status: 1
   invokeSamples:
    -
        sampleLocalId : 1
        sample: "what is your gender"
    -
        sampleLocalId : 2
        sample: "may i have your gender"
        
        
        
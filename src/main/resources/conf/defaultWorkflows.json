{
   "0": {
        "description" : "sample",
        "usage" : "test",
        "workflow" : "Number getSquareOf(Number i)
                      {
                      		return i * i;
                      }"
        },
   "1": {
    	"description" : "woAverageResponseTime",
        "usage" : "pmSummary",
        "workflow" : "Map test(Number pmId) 
        			  	{ 
        			  		woModule = Module(\"workorder\"); 
        			  		res = woModule.fetch([pm == pmId && actualWorkStart > 0]); 
        			  		if (res == null) 
        			  		{ 
        			  			return 0; 
        			  		} 
  							date = NameSpace(\"date\");
    						temp = date.getPreviousMonthEndDate();
  							previousMonthRes = woModule.fetch([pm == pmId && actualWorkStart > 0 && createdTime <= temp]);
  							previousMonthresponseTime = 0; 
  							if (previousMonthRes != null) {	
	        			  		b = previousMonthRes.size(); 
	                              for each index,value in previousMonthRes { 
	        			  			wd =  (value.actualWorkStart - value.createdTime); 
	        			  			previousMonthresponseTime = (previousMonthresponseTime + wd);
	        			  		}
                                previousMonthresponseTime = previousMonthresponseTime/b; 
                            }
        			  		responseTime = 0; 
        			  		a = res.size(); 
        			  		for each index,value in res { 
        			  			wd =  (value.actualWorkStart - value.createdTime); 
        			  			responseTime = (responseTime + wd);
        			  		} 
        			  		responseTime = responseTime/a; 
                            resMap = {};
                            resMap[\"responseTime\"] = responseTime;
                            resMap[\"previousMonthresponseTime\"] = previousMonthresponseTime;
         					return resMap; 
        			  	}"
        },
		"2": {
			"description" : "fetchGraphicsData",
			"usage" : "graphics",
			"workflow" : "Map fetchGraphicsData(List variables) 
							  {
								  resultMap = {};
								  if (variables == null) {
									  return resultMap;
								  }
								  for each index, variableObj in variables {
									  if (variableObj.fetchType == \"record\") {
										  fetchModule = Module(variableObj.module);
										  recordObj = fetchModule.fetch([id == (variableObj.id)]);
										  
										  if (recordObj != null && recordObj.size() > 0) {
											  resultMap[variableObj.key] = recordObj[0];
										  }
									  }
									  else if (variableObj.fetchType == \"liveValue\") {
										  fetchModule = Module(variableObj.module);
										  
										  db = {
											criteria : [parentId == (variableObj.parentId)],
											field : variableObj.select,
											aggregation : \"lastValue\"
										  };
										  
										  res = fetchModule.fetch(db);
										  
										  resultMap[variableObj.key] = res;
									  }
									  else if (variableObj.fetchType == \"aggrValue\") {
										  fetchModule = Module(variableObj.module);
										  
										  date = NameSpace(\"date\");
										month = date.getDateRange(variableObj.dateRange);
										db = {
											criteria : [parentId == (variableObj.parentId) && ttime == month],
											field : variableObj.select,
											aggregation : variableObj.aggr
										};
										
										res = fetchModule.fetch(db);
										
										resultMap[variableObj.key] = res;
									  }
								  }
									  
								return resultMap; 
				}"
		},
        "101": {
        	"description" : "meanTimeBetweenTriggers",
        	"usage" : "rulesSummary",
        	"workflow": "Map test(Number ruleId) 
		    { 
		            cri = {
						criteria : [ruleId == ruleId && clearedTime > 0 ],
		        		orderBy : \"createdTime\" asc
					};
		            date = NameSpace(\"date\");
		            ranges = date.getDateRange(\"Last Month\");
		        	readingAlarmModule = Module(\"readingalarm\"); 
		        	res = readingAlarmModule.fetch(cri);
		            previousMonthDetails = readingAlarmModule.fetch([ruleId == ruleId  && createdTime == ranges]);
		            meanTimeBetweenTigger = 0;
		            timeToClear = 0;
		            meanTimeToClear = 0;
		            if (res != null) {
		                firstRes =res[0];
		                previousClearedTime = firstRes.clearedTime;
		                for each index,value in res {
							if(index > 0) {
		                        if (value != null) {
		                            createdTime = value.createdTime;
		      						meanTimeBetweenTigger = meanTimeBetweenTigger + (createdTime -previousClearedTime); 
		       						previousClearedTime = value.clearedTime;
		                        }                                
							}
		                }
					    meanTimeBetweenTigger = meanTimeBetweenTigger / res.size();	
		                for each index,value in res {
					        if(index > 0) {
		                        if (value != null) {
		      				        timeToClear = timeToClear + (value.clearedTime - value.createdTime); 
		                        }                                
					        }
		                } 
		                 meanTimeToClear =   timeToClear / res.size();
		            }
		            previousMonthMeanTimeBetweenTigger = 0;
		            previousMonthTimeToClear = 0;
		            previousMonthmeanTimeToClear = 0;
		            if (previousMonthDetails != null ) {
		                previousRes =previousMonthDetails[0];
		                previousMonthClearedTime = previousRes.clearedTime;
		               
		                for each index,value in previousMonthDetails {
						    if(index > 0) {
		                        if (value != null) {
		                            createdTime = value.createdTime;
		      						previousMonthMeanTimeBetweenTigger = previousMonthMeanTimeBetweenTigger + (createdTime -previousClearedTime); 
		       						previousMonthClearedTime = value.clearedTime;
		                        }                                
							}
		                }
						previousMonthMeanTimeBetweenTigger = previousMonthMeanTimeBetweenTigger / previousMonthDetails.size();
		                for each index,value in previousMonthDetails {
							if(index > 0) {
		                        if (value != null) {
		      						previousMonthTimeToClear = previousMonthTimeToClear + (value.clearedTime - value.createdTime); 
		                        }                                
							}
		                } 
		                previousMonthmeanTimeToClear =   previousMonthTimeToClear / previousMonthDetails.size();
		            }
					resMap = {};
		            resMap[\"mtbt\"] = meanTimeBetweenTigger;
		            resMap[\"timeToClear\"] = timeToClear;
		            resMap[\"mttc\"] = meanTimeToClear;
		            resMap[\"pmtbt\"] = previousMonthMeanTimeBetweenTigger;
		            resMap[\"previousMonthTimeToClear\"] = previousMonthTimeToClear;
		            resMap[\"pmttc\"] = previousMonthmeanTimeToClear;
		         	return resMap;
		        
		    }"
        },
        "102" : {
        	"description" : "meanTimeBetweenTriggers",
        	"usage" : "rulesSummary",
        	"workflow": "Map test(ruleId)
		    	{
		     		activeAssetcri = {
					criteria : [ruleId == ruleId && clearedTime == null ]
				};
            	date = NameSpace(\"date\");
            	ranges = date.getDateRange(\"Current Week\");
		    	alarmsCurrWeekCri = {
              		criteria : [ruleId == ruleId && createdTime == ranges ]
            	};
		        readingAlarmModule = Module(\"readingalarm\");
		        activeRecord = readingAlarmModule.fetch(activeAssetcri);
              	activeAlarms = 0;
              	if (activeRecord != null) {
                      activeAlarms = res.size();
                 }
              	currWeekAlarmRec = readingAlarmModule.fetch(alarmsCurrWeekCri);
              	currWeekAlarms = 0;
              	if (currWeekAlarms != null) {
                	currWeekAlarms = currWeekAlarms.size();
             	}
              	resultMap = {};
              	resultMap[\"activeAlarms\"] = activeAlarms;
		    }"
        }
        
}
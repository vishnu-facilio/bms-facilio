{
   "0": {
        "description" : "sample",
        "usage" : "test",
        "workflow" : "Number getSquareOf(Number i)
                      {
                      		return i * i;
                      }"
        },
   "1": {
    	"description" : "woAverageResponseTime",
        "usage" : "pmSummary",
        "workflow" : "Number test(Number pmId) 
        			  	{ 
        			  		woModule = Module(\"workorder\"); 
        			  		res = woModule.fetch([pm == pmId && actualWorkStart > 0]); 
        			  		if (res == null) 
        			  		{ 
        			  			return 0; 
        			  		} 
  							date = NameSpace(\"date\");
    						temp = date.getPreviousMonthEndDate();
  							previousMonthRes = woModule.fetch([pm == pmId && actualWorkStart > 0 && createdTime <= temp]);
  							previousMonthresponseTime = 0; 
  							if (previousMonthRes != null) {	
	        			  		b = previousMonthRes.size(); 
	                              for each index,value in previousMonthRes { 
	        			  			wd =  (value.actualWorkStart - value.createdTime); 
	        			  			previousMonthresponseTime = (previousMonthresponseTime + wd);
	        			  		}
                                previousMonthresponseTime = previousMonthresponseTime/b; 
                            }
        			  		responseTime = 0; 
        			  		a = res.size(); 
        			  		for each index,value in res { 
        			  			wd =  (value.actualWorkStart - value.createdTime); 
        			  			responseTime = (responseTime + wd);
        			  		} 
        			  		responseTime = responseTime/a; 
                            resMap = {};
                            resMap[\"responseTime\"] = responseTime;
                            resMap[\"previousMonthresponseTime\"] = previousMonthresponseTime;
         					return resMap; 
        			  	}"
        },
        "101": {
        	"description" : "meanTimeBetweenTriggers",
        	"usage" : "rulesSummary",
        	"workflow": "Map test(Number ruleId) 
        			  	{ 
        			  		{ 
                          cri = {
							criteria : [ruleId == 36 && clearedTime > 0 ],
        					orderBy : \"createdTime\" asc
						}
        			  		readingAlarmModule = Module(\"readingalarm\"); 
        			  		res = readingAlarmModule.fetch(cri);
                           firstRes =res[0];
                          previousClearedTime = firstRes.clearedTime;
                          meanTimeBetweenTigger = 0;
                          for each index,value in res {
							if(index > 0) {
                              if (value != null) {
                                 createdTime = value.createdTime;
      						     meanTimeBetweenTigger = meanTimeBetweenTigger + (createdTime -previousClearedTime); 
       						     previousClearedTime = value.clearedTime;
                              }                                
						    }
                          }
						meanTimeBetweenTigger = meanTimeBetweenTigger / res.size();
						
						
						 timeToClear = 0;
                          for each index,value in res {
							if(index > 0) {
                              if (value != null) {
      						     timeToClear = timeToClear + (value.clearedTime - value.createdTime); 
                              }                                
						    }
                          }
                        meanTimeToClear =   timeToClear / res.size();
						resMap = {};
                            resMap[\"meanTimeBetweenTigger\"] = meanTimeBetweenTigger;
                            resMap[\"timeToClear\"] = timeToClear;
                              resMap[\"meanTimeToClear\"] = meanTimeToClear;
         					return resMap; 
        			  	}"
        }
        
}
{
   "0": {
        "description" : "sample",
        "usage" : "test",
        "workflow" : "Number getSquareOf(Number i)
                      {
                      		return i * i;
                      }"
        },
   "1": {
    	"description" : "woAverageResponseTime",
        "usage" : "pmSummary",
        "workflow" : "Map test(Number pmId) 
        			  	{ 
        			  		woModule = Module(\"workorder\"); 
        			  		res = woModule.fetch([pm == pmId && actualWorkStart > 0]); 
        			  		if (res == null) 
        			  		{ 
        			  			return 0; 
        			  		} 
  							date = NameSpace(\"date\");
    						temp = date.getPreviousMonthEndDate();
  							previousMonthRes = woModule.fetch([pm == pmId && actualWorkStart > 0 && createdTime <= temp]);
  							previousMonthresponseTime = 0; 
  							if (previousMonthRes != null) {	
	        			  		b = previousMonthRes.size(); 
	                              for each index,value in previousMonthRes { 
	        			  			wd =  (value.actualWorkStart - value.createdTime); 
	        			  			previousMonthresponseTime = (previousMonthresponseTime + wd);
	        			  		}
                                previousMonthresponseTime = previousMonthresponseTime/b; 
                            }
        			  		responseTime = 0; 
        			  		a = res.size(); 
        			  		for each index,value in res { 
        			  			wd =  (value.actualWorkStart - value.createdTime); 
        			  			responseTime = (responseTime + wd);
        			  		} 
        			  		responseTime = responseTime/a; 
                            resMap = {};
                            resMap[\"responseTime\"] = responseTime;
                            resMap[\"previousMonthresponseTime\"] = previousMonthresponseTime;
         					return resMap; 
        			  	}"
        },
		"2": {
			"description" : "fetchGraphicsData",
			"usage" : "graphics",
			"workflow" : "Map fetchGraphicsData(List variables) 
							  {
								  resultMap = {};
								  if (variables == null) {
									  return resultMap;
								  }
								  recordMap = {};
								  for each index, variableObj in variables {
								  	  variableParentId = variableObj.parentId;
								  	  if (variableObj.fetchType == \"field\") {
									  	  recordKey = variableObj.module + \"_\" + variableParentId;
									  	  recordObj = {};
									  	  if (recordMap.get(recordKey) != null) {
									  	  	  recordObj = recordMap.get(recordKey);
									  	  }
									  	  else {
									  	      fetchModule = Module(variableObj.module);
									  	      recordObj = fetchModule.fetch([id == (variableParentId)]);
									  	      recordMap[recordKey] = recordObj;
									  	  }
									  	  
									  	  valueStr = null;
									  	  if (recordObj != null && recordObj.size() > 0) {
									  	  	  rec = recordObj[0];
									  	  	  valueStr = rec.get(variableObj.select);
									  	  }
									  	  	  
								  	  	  valueMap = {};
										  valueMap[\"value\"] = valueStr;
                                          
                                          resultMap[variableObj.key] = valueMap;
									  }
									  else if (variableObj.fetchType == \"liveValue\") {
									  	  fieldObj = NameSpace(\"module\").getField(variableObj.select, variableObj.module);
									  	  if (fieldObj != null) {
										  	  fieldid = fieldObj.id();
										  	  fieldMapInfo = fieldObj.asMap();
										  	  
										  	  lastVal = Reading(fieldid, variableParentId).getLastValue();
										  	  enumMap = Reading(fieldid, variableParentId).getEnumMap();
											  
											  valueMap = {};
											  valueMap[\"value\"] = lastVal;
											  valueMap[\"fieldid\"] = fieldid;
											  if (enumMap != null) {
											      valueMap[\"enumMap\"] = enumMap;
											  }
											  if (fieldMapInfo != null) {
											  	valueMap[\"unit\"] = fieldMapInfo.get(\"unit\");
											  }
											  
											  resultMap[variableObj.key] = valueMap;
									     }
									     else {
									     	  valueMap = {};
											  valueMap[\"value\"] = null;
									          resultMap[variableObj.key] = valueMap;
									     }
									  }
									  else if (variableObj.fetchType == \"aggrValue\") {
									  	fieldObj = NameSpace(\"module\").getField(variableObj.select, variableObj.module);
									  	if (fieldObj != null) {
									  	  fetchModule = Module(variableObj.module);
										  
										  date = NameSpace(\"date\");
										  month = date.getDateRange(variableObj.dateRange);
										  db = {
											criteria : [parentId == (variableParentId) && ttime == month],
											field : variableObj.select,
											aggregation : variableObj.aggr
										  };
										
										  res = fetchModule.fetch(db);
										
										  valueMap = {};
										  valueMap[\"value\"] = res;
										
										  fieldid = fieldObj.id();
										  enumMap = Reading(fieldid, variableParentId).getEnumMap();
                                        
                                          valueMap[\"fieldid\"] = fieldid;
                                          if (enumMap != null) {
                                            valueMap[\"enumMap\"] = enumMap;
                                          }
                                        
                                         fieldMapInfo = fieldObj.asMap();
                                         valueMap[\"unit\"] = fieldMapInfo.get(\"unit\");
                                         
                                         resultMap[variableObj.key] = valueMap;
                                       }
                                       else {
								     	  valueMap = {};
										  valueMap[\"value\"] = null;
								          resultMap[variableObj.key] = valueMap;
								        }
									  }
								  }
									  
								return resultMap; 
				}"
		},
		"3": {
			"description" : "fetchConsumptionDetailsForMVSummary",
			"usage" : "total consumption,baseline consumption,carbon saved for MV summary",
			"workflow" : "Map test(Number projectId) 
							{ 
							  resultMap = {};
							  carbonConstant = 0.41;
							  costConstant = 0.44;
							  mvProject = Module(\"mvproject\").fetch([id == projectId])[0];
							  baseline = Module(\"mvbaseline\").fetch([project == projectId])[0];
							  formulaFieldWithAdj = Module(\"formulaField\").fetch([id == (baseline.formulaFieldWithAjustment.id)])[0];
							  lastMonthEndTime = NameSpace(\"date\").getDateRange(\"Last Month\").getEndTime();
							  db = {
							    criteria : [parentId == (mvProject.meter.id) && ttime >= (mvProject.reportingPeriodStartTime) && ttime < lastMonthEndTime],
							    field : \"totalEnergyConsumptionDelta\",
							    aggregation : \"sum\"
							  }
							  thisMonthActualConsumption = Module(\"energydata\").fetch(db);
							  if(thisMonthActualConsumption == null) {
							    thisMonthActualConsumption = 0;
							  }
							  resultMap[\"thisMonthActualConsumption\"] = thisMonthActualConsumption;
							  db = {
							    criteria : [parentId == (mvProject.meter.id) && ttime >= (mvProject.reportingPeriodStartTime) && ttime < lastMonthEndTime],
							    field : (formulaFieldWithAdj.readingField.name),
							    aggregation : \"sum\"
							  }
							  thisMonthBaselineConsumption = Module(formulaFieldWithAdj.moduleName).fetch(db);
							  if(thisMonthBaselineConsumption == null) {
							    thisMonthBaselineConsumption = 0;
							  }
							  resultMap[\"thisMonthBaselineConsumption\"] = thisMonthBaselineConsumption;
							
							  savedConsumption = thisMonthBaselineConsumption - thisMonthActualConsumption;
							  carbonEmissionSaved = savedConsumption * carbonConstant;
							  resultMap[\"carbonEmissionSaved\"] = carbonEmissionSaved;
							
							  costSaved = savedConsumption * costConstant;
							  resultMap[\"costSaved\"] = costSaved;
							
							  if(mvProject.saveGoal != null) {
							    targetSavedConsumption =  (thisMonthBaselineConsumption*(mvProject.saveGoal)/100);
							  }
							  else {
							    saveGoalFormulaField = Module(\"formulaField\").fetch([id == (mvProject.saveGoalFormulaField.id)])[0];
							    db = {
							    	criteria : [parentId == (mvProject.meter.id) && ttime >= (mvProject.reportingPeriodStartTime) && ttime < lastMonthEndTime],
							    	field : (saveGoalFormulaField.readingField.name),
							    	aggregation : \"sum\"
							  	}
							    thisMonthTargetConsumption = Module(saveGoalFormulaField.moduleName).fetch(db);
							    targetSavedConsumption = thisMonthBaselineConsumption - thisMonthTargetConsumption;
							  }
							  targetCost = targetSavedConsumption * costConstant;
							  resultMap[\"targetCost\"] = targetCost;
							  return resultMap;
							}"
		},
        "101": {
        	"description" : "meanTimeBetweenTriggers",
        	"usage" : "rulesSummary",
        	"workflow": "Map getRuleTriggerDetials(Number ruleId) 
		    { 
		            cri = {
						criteria : [ruleId == ruleId && clearedTime > 0 ],
		        		orderBy : \"createdTime\" asc
					};
		            date = NameSpace(\"date\");
		            ranges = date.getDateRange(\"Last Month\");
		        	readingAlarmModule = Module(\"readingalarm\"); 
		        	res = readingAlarmModule.fetch(cri);
		            previousMonthDetails = readingAlarmModule.fetch([ruleId == ruleId  && createdTime == ranges]);
		            meanTimeBetweenTigger = 0;
		            timeToClear = 0;
		            meanTimeToClear = 0;
		            if (res != null) {
		                firstRes =res[0];
		                previousClearedTime = 0 
		                if (firstRes.clearedTime != null ) {
		                  previousClearedTime = firstRes.clearedTime;
		                }
		                for each index,value in res {
							if(index > 0) {
		                        if (value != null) {
		                            createdTime = value.createdTime;
		      						meanTimeBetweenTigger = meanTimeBetweenTigger + (createdTime -previousClearedTime); 
		      						if (value.clearedTime != null) {
		      							previousClearedTime = value.clearedTime ;
		      						
		      						}
		                        }                                
							}
		                }
					    meanTimeBetweenTigger = meanTimeBetweenTigger / res.size();	
		                for each index,value in res {
					        if(index > 0) {
		                        if (value != null) {
		      				        timeToClear = timeToClear + (value.clearedTime - value.createdTime); 
		                        }                                
					        }
		                } 
		                 meanTimeToClear =   timeToClear / res.size();
		            }
		            previousMonthMeanTimeBetweenTigger = 0;
		            previousMonthTimeToClear = 0;
		            previousMonthmeanTimeToClear = 0;
                	previousMonthClearedTime = 0;
		            if (previousMonthDetails != null ) {
		                previousRes =previousMonthDetails[0];
                      if (previousRes.clearedTime != null ) {
                        previousMonthClearedTime = previousRes.clearedTime
                      }
		                for each index,value in previousMonthDetails {
						    if(index > 0) {
		                        if (value != null) {
		                            createdTime = value.createdTime;
		      						previousMonthMeanTimeBetweenTigger = previousMonthMeanTimeBetweenTigger + (createdTime -previousMonthClearedTime); 
                                  if (value.clearedTime  != null ) {
                                    previousMonthClearedTime = value.clearedTime ;
                                  }
		                        }                                
							}
		                }
						previousMonthMeanTimeBetweenTigger = previousMonthMeanTimeBetweenTigger / previousMonthDetails.size();
		                for each index,value in previousMonthDetails {
							if(index > 0) {
		                        if (value != null) {
                                  previousCreatedTime = 0;
                                  previousClearedTime = 0;
                                  if (value.clearedTime != null) {
                                    previousClearedTime = value.clearedTime
                                  } 
                                  if (value.createdTime != null) {
                                    previousCreatedTime = value.createdTime

                                  }
		      						previousMonthTimeToClear = previousMonthTimeToClear + (previousClearedTime - previousCreatedTime); 
		                        }                                
							}
		                } 
		                previousMonthmeanTimeToClear =   previousMonthTimeToClear / previousMonthDetails.size();
		            }
					resMap = {};
		            resMap[\"mtbt\"] = meanTimeBetweenTigger;
		            resMap[\"timeToClear\"] = timeToClear;
		            resMap[\"mttc\"] = meanTimeToClear;
		            resMap[\"pmtbt\"] = previousMonthMeanTimeBetweenTigger;
		            resMap[\"previousMonthTimeToClear\"] = previousMonthTimeToClear;
		            resMap[\"pmttc\"] = previousMonthmeanTimeToClear;
		         	return resMap;
		        
		    }"
        },
        "102" : {
        	"description" : "ruleAlarmsDetails",
        	"usage" : "rulesSummary",
        	"workflow": "Map alarmDetails(Number ruleId)
		    	{
                  clearCondition = {
                    criteria :[severity == \"Clear\" ]
                  }
            	date = NameSpace(\"date\");
            	ranges = date.getDateRange(\"Current Week\");
                monthRanges = date.getDateRange(\"Current Month\");
		    	alarmsCurrWeekCri = {
              		criteria : [ruleId == ruleId && createdTime == ranges ]
            	};
                  alarmSevrityModule = Module(\"alarmseverity\");
                  AlarmSeverityContext clearSeverityContext = alarmSevrityModule.fetch(clearCondition);
                  clearId = clearSeverityContext.get(0).get(\"id\");
                  activeAssetcri = {
					criteria : [ruleId == ruleId && severity != clearId  ]
				};
		        readingAlarmModule = Module(\"readingalarm\");
                workOrderModule = Module(\"ticket\");
		        activeRecord = readingAlarmModule.fetch(activeAssetcri);
              	activeAlarms = 0;
                  activeAlarmResources = [];
              	if (activeRecord != null) {
                  for each index,value in activeRecord {
		                        if (value != null) {
                                  if (value.get(\"resource\") != null) {
                                    activeAlarmResources.add(value.get(\"resource\").get(\"id\"));
                                  }
		                        }                                
		                }
                      activeAlarms = activeRecord.size();
                 }
              	currWeekAlarmRec = readingAlarmModule.fetch(alarmsCurrWeekCri);
              	currWeekAlarms = 0;
              	alarmThisWeekResources = [];
              	if (currWeekAlarmRec != null) {
              		for each index,value in currWeekAlarmRec {
		                        if (value != null) {
                                  if (value.get(\"resource\") != null) {
                                    alarmThisWeekResources.add(value.get(\"resource\").get(\"id\"));
                                  }
		                        }                                
		                }
                	currWeekAlarms = currWeekAlarmRec.size();
             	}
                  resultMap = {};
                  resultMap[\"activeAlarms\"] = activeAlarms;
                  resultMap[\"alarmRuleThisWeek\"] = currWeekAlarms;
                  resultMap[\"activeAlarmResources\"] = activeAlarmResources;
                  resultMap[\"alarmThisWeekResources\"] = alarmThisWeekResources;
                  return resultMap;
		    }"
        },
          "103" : {
        	"description" : "ruleWoDetails",
        	"usage" : "rulesSummary",
        	"workflow": "Map ruleWoDetails(Number ruleId) {
		    date = NameSpace(\"date\");
		        ranges = date.getDateRange(\"Current Week\");
		          monthRanges = date.getDateRange(\"Current Month\");
		            alarmsCurrWeekCri = {
		              criteria: [ruleId == ruleId && createdTime == ranges]
		            }; readingAlarmModule = Module(\"readingalarm\");
		              workOrderModule = Module(\"workorder\");
		                woThisWeek = {
		                  criteria: [ruleId == ruleId && createdTime == ranges && woId != null]
		                };
		
		                currWeekWo = readingAlarmModule.fetch(woThisWeek); currentWeekWo = 0 currentWeekWoId = []
		                if (currWeekWo != null) {
		                  currentWeekWo = currWeekWo.size();
		                  for each index, value in currWeekWo {
		                    if (value != null) {
		                      currentWeekWoId.add(value.get(\"woId\"));
		                     }
		                  }
		                }
		               woThisMonth = {
		                 criteria: [ruleId == ruleId && createdTime == monthRanges && woId != null]
		               };
                      monthWO = readingAlarmModule.fetch(woThisMonth);
                      currentMonthWo = 0;
                      currentMonthWoID = [];
                      if (monthWO != null) {
                        currentMonthWo = monthWO.size();
                        for each index, value in monthWO {
                            if (value != null) {
                              currentMonthWoID.add(value.get(\"woId\"));
                                }
                              }
                            }
                            ticketContextRespondTime = {
                              criteria: [id == currentMonthWoID && actualWorkStart > 0 ]
                            };
                            ticketContextResolutionTime = {
                              criteria: [id == currentMonthWoID && actualWorkDuration > 0 ]
                            };
                            ticketsResponse = workOrderModule.fetch(ticketContextRespondTime);
                            ticketsResolution = workOrderModule.fetch(ticketContextResolutionTime);
                            previousMonthresponseTime = 0;
                            previousMonthresolutionTime = 0;
                            if (ticketsResponse != null) {
                              b = ticketsResponse.size();
                              for each index, value in ticketsResponse {
                                      wd = (value.actualWorkStart - value.createdTime); previousMonthresponseTime = (previousMonthresponseTime + wd);
                                    }
                                    previousMonthresponseTime = previousMonthresponseTime / b;
                                  }
                                   if (ticketsResolution != null) {
                             		 c = ticketsResolution.size();
                             	    for each index, value in ticketsResolution {
                             	        pd = value.actualWorkDuration;
                                        previousMonthresolutionTime = (previousMonthresolutionTime + pd);

                                    }
                                    previousMonthresolutionTime = previousMonthresolutionTime / c;
                                  }
                                  resultMap = {};
                                  resultMap[\"currentMonthWo\"] = currentMonthWo;
                                  resultMap[\"currentWeekWo\"] = currentWeekWo;
                                  resultMap[\"currentWeekWoId\"] = currentWeekWoId;
                                  resultMap[\"currentMonthWoID\"] = currentMonthWoID;
                                  resultMap[\"previousMonthresponseTime\"] = previousMonthresponseTime;
                                  resultMap[\"previousMonthresolutionTime\"] = previousMonthresolutionTime;
                                  log resultMap;
                                  return resultMap;
			}"
        },
         "104" : {
        	"description" : "ruleRank",
        	"usage" : "ruleRank",
        	"workflow": "Map rankWorkflow (Number ruleId){
				  date = NameSpace(\"date\");
				   monthRanges = date.getDateRange(\"Current Year\");
				  db = {
						criteria : [createdTime == monthRanges],
					    field : \"ruleId\",
				    	aggregation : \"count, ruleId\",
				    	groupBy: \"ruleId\",
				    	orderBy : \"ruleId\" desc
					};
				    readingAlarmModule = Module(\"readingalarm\");
				    activeRecord = readingAlarmModule.fetch(db);
  					let ranking = 0;
  					if (activeRecord != null ) {
                       for each index,value in activeRecord { 
							temp = value.result;
                         temp = value.result+0;
                         if(temp == ruleId) {
        					ranking = index + 1;
                           log \"test -- \"+index;
                         }
                         
                         
                       }
                    }
          			resultMap = {};
          			if (activeRecord != null) {
          				resultMap[\"ranks\"] = activeRecord;
  						resultMap[\"ranking\"] = ranking;
						resultMap[\"outOfRule\"] = activeRecord.size();
          			}
				   	return resultMap;
				}"
        }
        
}
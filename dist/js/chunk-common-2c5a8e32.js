(self["webpackChunkfacilio_web"]=self["webpackChunkfacilio_web"]||[]).push([[84290],{
/***/294468:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */xb:function(){/* binding */return isEmpty}
/* harmony export */});
/* unused harmony exports areValuesEmpty, isNullOrUndefined, isNull, isArray, isObject, isFunction, isNumber, isFileObject, isFloat, isInteger, isUndefined, isBoolean, validateEmail */
/**
 * Checks whether the given Value is Empty or Not
 * @function isEmpty
 * @param {any} value
 * @example
 * isEmpty(value)
 * //returns true if value is Empty or False
 * @returns {Boolean} True or False
 */
const isEmpty=value=>void 0===value||null===value||-1===Number(value)||"object"===typeof value&&!(value instanceof Blob)&&0===Object.keys(value).length||"string"===typeof value&&0===value.trim().length
/**
 * Checks whether the given Object has Empty Values or Not
 * @function areValuesEmpty
 * @param {Object} value
 * @example
 * areValuesEmpty(value)
 * //returns true if the given object has empty values or False
 * @returns {Boolean} True or False
 */},
/***/895966:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";
// EXPORTS
__webpack_require__.d(__webpack_exports__,{Z:function(){/* binding */return esm_browser_v4}});// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/uuid/dist/esm-browser/native.js
const randomUUID="undefined"!==typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);
/* harmony default export */var esm_browser_native={randomUUID:randomUUID};// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/uuid/dist/esm-browser/rng.js
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;const rnds8=new Uint8Array(16);function rng(){
// lazy load so that environments that need to polyfill have a chance to do so
if(!getRandomValues&&(
// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
getRandomValues="undefined"!==typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!getRandomValues))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/uuid/dist/esm-browser/stringify.js
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex=[];for(let i=0;i<256;++i)byteToHex.push((i+256).toString(16).slice(1));function unsafeStringify(arr,offset=0){
// Note: Be careful editing this code!  It's been tuned for performance
// and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
return byteToHex[arr[offset+0]]+byteToHex[arr[offset+1]]+byteToHex[arr[offset+2]]+byteToHex[arr[offset+3]]+"-"+byteToHex[arr[offset+4]]+byteToHex[arr[offset+5]]+"-"+byteToHex[arr[offset+6]]+byteToHex[arr[offset+7]]+"-"+byteToHex[arr[offset+8]]+byteToHex[arr[offset+9]]+"-"+byteToHex[arr[offset+10]]+byteToHex[arr[offset+11]]+byteToHex[arr[offset+12]]+byteToHex[arr[offset+13]]+byteToHex[arr[offset+14]]+byteToHex[arr[offset+15]]}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/uuid/dist/esm-browser/v4.js
function v4(options,buf,offset){if(esm_browser_native.randomUUID&&!buf&&!options)return esm_browser_native.randomUUID();options=options||{};const rnds=options.random||(options.rng||rng)();// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
// Copy bytes to buffer, if provided
if(rnds[6]=15&rnds[6]|64,rnds[8]=63&rnds[8]|128,buf){offset=offset||0;for(let i=0;i<16;++i)buf[offset+i]=rnds[i];return buf}return unsafeStringify(rnds)}
/* harmony default export */var esm_browser_v4=v4;
/***/},
/***/436656:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";
/* harmony import */var dayjs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(727484),dayjs__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_0__),dayjs_esm_plugin_advancedFormat__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(798615);
/* harmony import */dayjs__WEBPACK_IMPORTED_MODULE_0___default().extend(dayjs_esm_plugin_advancedFormat__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */.Z),
/* harmony default export */__webpack_exports__.Z={methods:{newGetDateFormat(date,dateRangeObj,index,perDate,hour){let mdate=dayjs__WEBPACK_IMPORTED_MODULE_0___default()(date),rangeType=dateRangeObj.rangeType,period=dateRangeObj.period;if(rangeType&&period){if("yearly"===period)return mdate.format("YYYY");if("D"===rangeType){if("hourly"===period)return hour}else if("W"===rangeType){if("hourly"===period)return date.getHours()?mdate.format("hh a"):date.getDate()&&"00"===hour?mdate.format("ddd"):"";if("daily"===period)return mdate.format("ddd");if("dayofweek"===period)return mdate.format("ddd")}else if("M"===rangeType)if("hourly"===period){
// if (date.getHours()) {
//   return mdate.format("hh a");
// }
if(date.getDate())return void 0!==index&&0===index||1===date.getDate()&&"00"===hour?mdate.format("D")+"\n"+mdate.format("MMM"):(date.getDate()-1)%4===0&&"00"===hour?mdate.format("D"):""}else{if("daily"===period)return void 0!==index&&0===index||1===date.getDate()?mdate.format("D")+"\n"+mdate.format("MMM"):mdate.format("D");if("weekly"===period)return"W"+mdate.format("ww YYYY");if("dayofweek"===period)return mdate.format("ddd");if("dayofmonth"===period)return mdate.format("DD");if("weekofyear"===period)return"W"+mdate.format("WW");if("monthofyear"===period)return mdate.format("MMM")}else if("Y"===rangeType)if("hourly"===period){if(date.getHours())return mdate.format("hh a");if(date.getDay()&&1!==date.getDate())return void 0!==index&&0===index?mdate.format("D")+"\n"+mdate.format("MMM"):mdate.format("D");if(1!==date.getDate())return void 0!==index&&0===index?mdate.format("D")+"\n"+mdate.format("MMM"):mdate.format("D");if(date.getMonth())return mdate.format("MMM");if(date.getYear())return mdate.format("MMM YYYY")}else if("daily"===period){if(null!=date.getDay()&&1!==date.getDate())return void 0!==index&&0===index?mdate.format("D")+"\n"+mdate.format("MMM"):"";if(1!==date.getDate())return mdate.format("D")+"\n"+mdate.format("MMM");if(date.getMonth())return mdate.format("MMM");if(date.getYear())return mdate.format("MMM YYYY")}else{if("weekly"===period){let currentYear=new Date(dateRangeObj.range.min);return date.getDate()-date.getDay()>=0&&date.getDate()-date.getDay()<8?date.getMonth()&&currentYear.getYear()===date.getYear()?mdate.format("MMM"):date.getYear()&&currentYear.getYear()===date.getYear()?mdate.format("MMM YYYY"):"":""}if("quarterly"===period)return mdate.format("[Q]Q YYYY");if("monthly"===period){if(date.getMonth())return mdate.format("MMM");if(date.getYear())return mdate.format("MMM YYYY")}else{if("dayofweek"===period)return mdate.format("ddd");if("dayofmonth"===period)return mdate.format("DD");if("weekofyear"===period)return"W"+mdate.format("WW");if("monthofyear"===period)return mdate.format("MMM")}}else if("Q"===rangeType){if("hourly"===period)return date.getDay()?"":date.getMonth()%2==0&&date.getDate()<=7&&"00"===hour?mdate.format("D")+"\n"+mdate.format("MMM"):"00"===hour?mdate.format("D"):"";if("daily"===period)return date.getDay()?"":date.getMonth()%2==0&&date.getDate()<=7?mdate.format("D")+"\n"+mdate.format("MMM"):mdate.format("D");if("weekly"===period)return index%2==0?"W"+mdate.format("ww YYYY"):"";if("quarterly"===period)return mdate.format("[Q]Q YYYY");if("monthly"===period)return mdate.format("MMM YYYY");if("dayofweek"===period)return mdate.format("ddd");if("dayofmonth"===period)return mdate.format("DD");if("weekofyear"===period)return"W"+mdate.format("WW");if("monthofyear"===period)return mdate.format("MMM YYYY")}}if(date.getMilliseconds())return mdate.format(".SSS");if(date.getSeconds())return mdate.format(":ss");if(date.getMinutes()&&"D"!=rangeType&&"W"!=rangeType&&"M"!=rangeType)return mdate.format("hh:mm");if(date.getHours()&&"D"!=rangeType&&"W"!=rangeType&&"M"!=rangeType)return mdate.format("hh a");if(date.getHours()&&"D"===rangeType)return date.getHours()%3!==0||date.getMinutes()?"":mdate.format("hh a");if("W"===rangeType){if(date.getMinutes())return"00:00"===date.getHours()?mdate.format("hh a"):"";if(date.getHours())return""}return"M"===rangeType?0===index&&void 0!==typeof index?mdate.format("D")+"\n"+mdate.format("MMM"):date.getDay()||date.getHours()||date.getMinutes()?"":mdate.format("D")+"\n"+mdate.format("MMM"):date.getDay()&&1!==date.getDate()&&void 0!==typeof index&&0===index?mdate.format("D")+"\n"+mdate.format("MMM"):date.getDay()&&1===date.getDate()?"monthly"===period?mdate.format("MMM"):"D"===rangeType&&date.getMinutes()?"":mdate.format("D")+"\n"+mdate.format("MMM"):date.getDay()&&1!==date.getDate()&&perDate&&perDate!==date||0===date.getDay()&&1!==date.getDate()&&void 0!==typeof index&&index>0&&"D"===rangeType?mdate.format("D"):1!==date.getDate()&&"D"!=rangeType?mdate.format("D")+"\n"+mdate.format("MMM"):1!==date.getDate()&&"D"===rangeType?"":date.getMonth()&&rangeType&&"D"===rangeType?mdate.format("D")+"\n"+mdate.format("MMM"):date.getMonth()?mdate.format("MMM"):date.getYear()?mdate.format("MMM YYYY"):mdate.format("MMM D, YYYY")}}}},
/***/29278:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */Av:function(){/* reexport safe */return _components_scatter_chart_FScatterChart_vue__WEBPACK_IMPORTED_MODULE_4__.Z},
/* harmony export */CT:function(){/* reexport safe */return _components_analytics_line_chart_FAnalyticsLineChart_vue__WEBPACK_IMPORTED_MODULE_13__.Z},
/* harmony export */GS:function(){/* reexport safe */return _components_tree_map_FTreeMap_vue__WEBPACK_IMPORTED_MODULE_8__.Z},
/* harmony export */If:function(){/* reexport safe */return _components_analytics_area_chart_FAnalyticsAreaChart_vue__WEBPACK_IMPORTED_MODULE_12__.Z},
/* harmony export */LK:function(){/* reexport safe */return _components_area_chart_FAreaChart_vue__WEBPACK_IMPORTED_MODULE_6__.Z},
/* harmony export */T7:function(){/* reexport safe */return _components_heat_map_FHeatMap_vue__WEBPACK_IMPORTED_MODULE_7__.Z},
/* harmony export */VH:function(){/* reexport safe */return _components_line_chart_FLineChart_vue__WEBPACK_IMPORTED_MODULE_1__.Z},
/* harmony export */ZS:function(){/* reexport safe */return _components_analytics_bar_chart_FAnalyticsBarChart_vue__WEBPACK_IMPORTED_MODULE_11__.Z},
/* harmony export */cx:function(){/* reexport safe */return _components_analytics_scatter_chart_FAnalyticsScatterChart_vue__WEBPACK_IMPORTED_MODULE_14__.Z},
/* harmony export */pI:function(){/* reexport safe */return _components_bar_chart_FBarChart_vue__WEBPACK_IMPORTED_MODULE_0__.Z},
/* harmony export */r_:function(){/* reexport safe */return _components_pie_chart_FPieChart_vue__WEBPACK_IMPORTED_MODULE_2__.Z}
/* harmony export */});
/* harmony import */var _components_bar_chart_FBarChart_vue__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(135999),_components_line_chart_FLineChart_vue__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(208283),_components_pie_chart_FPieChart_vue__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(42517),_components_scatter_chart_FScatterChart_vue__WEBPACK_IMPORTED_MODULE_4__=(__webpack_require__(552592),__webpack_require__(453552)),_components_area_chart_FAreaChart_vue__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__(197692),__webpack_require__(690459)),_components_heat_map_FHeatMap_vue__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(32417),_components_tree_map_FTreeMap_vue__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(976648),_components_analytics_bar_chart_FAnalyticsBarChart_vue__WEBPACK_IMPORTED_MODULE_11__=(__webpack_require__(982738),__webpack_require__(615440),__webpack_require__(122580)),_components_analytics_area_chart_FAnalyticsAreaChart_vue__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(314476),_components_analytics_line_chart_FAnalyticsLineChart_vue__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(228086),_components_analytics_scatter_chart_FAnalyticsScatterChart_vue__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(788452);
/* harmony import */},
/***/114931:
/***/function(__unused_webpack_module,__webpack_exports__){"use strict";
/* harmony default export */__webpack_exports__.Z={methods:{getFormattedLabel(value){return value.slice(0,1).toUpperCase()+value.slice(1).toLowerCase()},getTextWidth(){let{maxValue:maxValue}=this,value=new Intl.NumberFormat("en-US",{notation:"compact"}).format(maxValue),canvas=document.createElement("canvas"),context=canvas.getContext("2d");context.font="7.5pt Roboto";let metrics=context.measureText(value);return metrics.width-18}}}},
/***/722145:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */d:function(){/* binding */return CHART_TYPE},
/* harmony export */j:function(){/* binding */return CHART_TYPE_SERIES}
/* harmony export */});
/* harmony import */var echarts_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(574438);const CHART_TYPE={line:"line",area:"line",bar:"bar",scatter:"scatter"},CHART_TYPE_SERIES={line(chartOptions){let{step:step,spline:spline}=chartOptions||{},options={};return step?options={...options,step:step}:spline&&(options={...options,smooth:spline}),options},bar(chartOptions){let{stacked:stacked}=chartOptions||{},{measures:measures}=this||{},{length:length}=measures||{},barWidth=Math.round(70/length);return stacked?{stack:"bar",itemStyle:{borderRadius:[0,0,0,0]},barWidth:"70%"}:{itemStyle:{borderRadius:[2,2,0,0]},barGap:.01,barWidth:`${barWidth}%`}},area(chartOptions,measure){let{step:step,spline:spline}=chartOptions||{},{color:color}=measure||{},options={areaStyle:{color:new echarts_core__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */.Z(0,0,0,1,[{offset:0,color:color},{offset:1,color:"#ffffff"}]),opacity:.2}};return step?options={...options,step:step}:spline&&(options={...options,smooth:spline}),options},scatter(){return{}}}},
/***/58180:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";
// EXPORTS
__webpack_require__.d(__webpack_exports__,{Z:function(){/* binding */return esm_browser_v4}});// CONCATENATED MODULE: ./node_modules/@facilio/criteria/node_modules/uuid/dist/esm-browser/native.js
const randomUUID="undefined"!==typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);
/* harmony default export */var esm_browser_native={randomUUID:randomUUID};// CONCATENATED MODULE: ./node_modules/@facilio/criteria/node_modules/uuid/dist/esm-browser/rng.js
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;const rnds8=new Uint8Array(16);function rng(){
// lazy load so that environments that need to polyfill have a chance to do so
if(!getRandomValues&&(
// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
getRandomValues="undefined"!==typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!getRandomValues))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}// CONCATENATED MODULE: ./node_modules/@facilio/criteria/node_modules/uuid/dist/esm-browser/stringify.js
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex=[];for(let i=0;i<256;++i)byteToHex.push((i+256).toString(16).slice(1));function unsafeStringify(arr,offset=0){
// Note: Be careful editing this code!  It's been tuned for performance
// and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
return byteToHex[arr[offset+0]]+byteToHex[arr[offset+1]]+byteToHex[arr[offset+2]]+byteToHex[arr[offset+3]]+"-"+byteToHex[arr[offset+4]]+byteToHex[arr[offset+5]]+"-"+byteToHex[arr[offset+6]]+byteToHex[arr[offset+7]]+"-"+byteToHex[arr[offset+8]]+byteToHex[arr[offset+9]]+"-"+byteToHex[arr[offset+10]]+byteToHex[arr[offset+11]]+byteToHex[arr[offset+12]]+byteToHex[arr[offset+13]]+byteToHex[arr[offset+14]]+byteToHex[arr[offset+15]]}// CONCATENATED MODULE: ./node_modules/@facilio/criteria/node_modules/uuid/dist/esm-browser/v4.js
function v4(options,buf,offset){if(esm_browser_native.randomUUID&&!buf&&!options)return esm_browser_native.randomUUID();options=options||{};const rnds=options.random||(options.rng||rng)();// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
// Copy bytes to buffer, if provided
if(rnds[6]=15&rnds[6]|64,rnds[8]=63&rnds[8]|128,buf){offset=offset||0;for(let i=0;i<16;++i)buf[offset+i]=rnds[i];return buf}return unsafeStringify(rnds)}
/* harmony default export */var esm_browser_v4=v4;
/***/},
/***/478551:
/***/function(__unused_webpack_module,exports){"use strict";
/**
 * dd-base-impl.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDBaseImplement=void 0;class DDBaseImplement{constructor(){
/** @internal */
this._eventRegister={}}
/** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */get disabled(){return this._disabled}on(event,callback){this._eventRegister[event]=callback}off(event){delete this._eventRegister[event]}enable(){this._disabled=!1}disable(){this._disabled=!0}destroy(){delete this._eventRegister}triggerEvent(eventName,event){if(!this.disabled&&this._eventRegister&&this._eventRegister[eventName])return this._eventRegister[eventName](event)}}exports.DDBaseImplement=DDBaseImplement},
/***/638176:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-draggable.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDDraggable=void 0;const dd_manager_1=__webpack_require__(879041),utils_1=__webpack_require__(985395),dd_base_impl_1=__webpack_require__(478551),dd_touch_1=__webpack_require__(460358);
// let count = 0; // TEST
class DDDraggable extends dd_base_impl_1.DDBaseImplement{constructor(el,option={}){super(),this.el=el,this.option=option;
// get the element that is actually supposed to be dragged by
let handleName=option.handle.substring(1);this.dragEl=el.classList.contains(handleName)?el:el.querySelector(option.handle)||el,
// create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)
this._mouseDown=this._mouseDown.bind(this),this._mouseMove=this._mouseMove.bind(this),this._mouseUp=this._mouseUp.bind(this),this.enable()}on(event,callback){super.on(event,callback)}off(event){super.off(event)}enable(){!1!==this.disabled&&(super.enable(),this.dragEl.addEventListener("mousedown",this._mouseDown),dd_touch_1.isTouch&&(this.dragEl.addEventListener("touchstart",dd_touch_1.touchstart),this.dragEl.addEventListener("pointerdown",dd_touch_1.pointerdown)),this.el.classList.remove("ui-draggable-disabled"),this.el.classList.add("ui-draggable"))}disable(forDestroy=!1){!0!==this.disabled&&(super.disable(),this.dragEl.removeEventListener("mousedown",this._mouseDown),dd_touch_1.isTouch&&(this.dragEl.removeEventListener("touchstart",dd_touch_1.touchstart),this.dragEl.removeEventListener("pointerdown",dd_touch_1.pointerdown)),this.el.classList.remove("ui-draggable"),forDestroy||this.el.classList.add("ui-draggable-disabled"))}destroy(){this.dragTimeout&&window.clearTimeout(this.dragTimeout),delete this.dragTimeout,this.dragging&&this._mouseUp(this.mouseDownEvent),this.disable(!0),delete this.el,delete this.helper,delete this.option,super.destroy()}updateOption(opts){return Object.keys(opts).forEach((key=>this.option[key]=opts[key])),this}
/** @internal call when mouse goes down before a dragstart happens */_mouseDown(e){
// don't let more than one widget handle mouseStart
if(dd_manager_1.DDManager.mouseHandled)return;if(0!==e.button)return!0;// only left click
// make sure we are not clicking on known object that handles mouseDown (TODO: make this extensible ?) #2054
const skipMouseDown=["input","textarea","button","select","option"],name=e.target.nodeName.toLowerCase();return skipMouseDown.find((skip=>skip===name))||e.target.closest('[contenteditable="true"]')||(
// also check for content editable
// REMOVE: why would we get the event if it wasn't for us or child ?
// make sure we are clicking on a drag handle or child of it...
// Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)
// let className = this.option.handle.substring(1);
// let el = e.target as HTMLElement;
// while (el && !el.classList.contains(className)) { el = el.parentElement; }
// if (!el) return;
this.mouseDownEvent=e,delete this.dragging,delete dd_manager_1.DDManager.dragElement,delete dd_manager_1.DDManager.dropElement,
// document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack
document.addEventListener("mousemove",this._mouseMove,!0),// true=capture, not bubble
document.addEventListener("mouseup",this._mouseUp,!0),dd_touch_1.isTouch&&(this.dragEl.addEventListener("touchmove",dd_touch_1.touchmove),this.dragEl.addEventListener("touchend",dd_touch_1.touchend)),e.preventDefault(),
// preventDefault() prevents blur event which occurs just after mousedown event.
// if an editable content has focus, then blur must be call
document.activeElement&&document.activeElement.blur(),dd_manager_1.DDManager.mouseHandled=!0),!0}
/** @internal method to call actual drag event */_callDrag(e){if(!this.dragging)return;const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"drag"});this.option.drag&&this.option.drag(ev,this.ui()),this.triggerEvent("drag",ev)}
/** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */_mouseMove(e){var _a;
// console.log(`${count++} move ${e.x},${e.y}`)
let s=this.mouseDownEvent;if(this.dragging)
// delay actual grid handling drag until we pause for a while if set
if(this._dragFollow(e),dd_manager_1.DDManager.pauseDrag){const pause=Number.isInteger(dd_manager_1.DDManager.pauseDrag)?dd_manager_1.DDManager.pauseDrag:100;this.dragTimeout&&window.clearTimeout(this.dragTimeout),this.dragTimeout=window.setTimeout((()=>this._callDrag(e)),pause)}else this._callDrag(e);else if(Math.abs(e.x-s.x)+Math.abs(e.y-s.y)>3){
/**
             * don't start unless we've moved at least 3 pixels
             */
this.dragging=!0,dd_manager_1.DDManager.dragElement=this;
// if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)
let grid=null===(_a=this.el.gridstackNode)||void 0===_a?void 0:_a.grid;grid?dd_manager_1.DDManager.dropElement=grid.el.ddElement.ddDroppable:delete dd_manager_1.DDManager.dropElement,this.helper=this._createHelper(e),this._setupHelperContainmentStyle(),this.dragOffset=this._getDragOffset(e,this.el,this.helperContainment);const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"dragstart"});this._setupHelperStyle(e),this.option.start&&this.option.start(ev,this.ui()),this.triggerEvent("dragstart",ev)}// needed otherwise we get text sweep text selection as we drag around
return e.preventDefault(),!0}
/** @internal call when the mouse gets released to drop the item at current location */_mouseUp(e){var _a;if(document.removeEventListener("mousemove",this._mouseMove,!0),document.removeEventListener("mouseup",this._mouseUp,!0),dd_touch_1.isTouch&&(this.dragEl.removeEventListener("touchmove",dd_touch_1.touchmove,!0),this.dragEl.removeEventListener("touchend",dd_touch_1.touchend,!0)),this.dragging){delete this.dragging,
// reset the drop target if dragging over ourself (already parented, just moving during stop callback below)
(null===(_a=dd_manager_1.DDManager.dropElement)||void 0===_a?void 0:_a.el)===this.el.parentElement&&delete dd_manager_1.DDManager.dropElement,this.helperContainment.style.position=this.parentOriginStylePosition||null,this.helper===this.el?this._removeHelperStyle():this.helper.remove();const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"dragstop"});this.option.stop&&this.option.stop(ev),this.triggerEvent("dragstop",ev),
// call the droppable method to receive the item
dd_manager_1.DDManager.dropElement&&dd_manager_1.DDManager.dropElement.drop(e)}delete this.helper,delete this.mouseDownEvent,delete dd_manager_1.DDManager.dragElement,delete dd_manager_1.DDManager.dropElement,delete dd_manager_1.DDManager.mouseHandled,e.preventDefault()}
/** @internal create a clone copy (or user defined method) of the original drag item if set */_createHelper(event){let helper=this.el;return"function"===typeof this.option.helper?helper=this.option.helper(event):"clone"===this.option.helper&&(helper=utils_1.Utils.cloneNode(this.el)),document.body.contains(helper)||utils_1.Utils.appendTo(helper,"parent"===this.option.appendTo?this.el.parentNode:this.option.appendTo),helper===this.el&&(this.dragElementOriginStyle=DDDraggable.originStyleProp.map((prop=>this.el.style[prop]))),helper}
/** @internal set the fix position of the dragged item */_setupHelperStyle(e){this.helper.classList.add("ui-draggable-dragging");
// TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593
const style=this.helper.style;return style.pointerEvents="none",// needed for over items to get enter/leave
// style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)
style["min-width"]=0,// since we no longer relative to our parent and we don't resize anyway (normally 100/#column %)
style.width=this.dragOffset.width+"px",style.height=this.dragOffset.height+"px",style.willChange="left, top",style.position="fixed",// let us drag between grids by not clipping as parent .grid-stack is position: 'relative'
this._dragFollow(e),// now position it
style.transition="none",// show up instantly
setTimeout((()=>{this.helper&&(style.transition=null)}),0),this}
/** @internal restore back the original style before dragging */_removeHelperStyle(){var _a;this.helper.classList.remove("ui-draggable-dragging");let node=null===(_a=this.helper)||void 0===_a?void 0:_a.gridstackNode;
// don't bother restoring styles if we're gonna remove anyway...
if(!(null===node||void 0===node?void 0:node._isAboutToRemove)&&this.dragElementOriginStyle){let helper=this.helper,transition=this.dragElementOriginStyle["transition"]||null;
// don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.
// TODO: this also removes resizing animation which doesn't have this issue, but others.
// Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,
// then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'
// is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)
helper.style.transition=this.dragElementOriginStyle["transition"]="none",// can't be NULL #1973
DDDraggable.originStyleProp.forEach((prop=>helper.style[prop]=this.dragElementOriginStyle[prop]||null)),setTimeout((()=>helper.style.transition=transition),50)}return delete this.dragElementOriginStyle,this}
/** @internal updates the top/left position to follow the mouse */_dragFollow(e){let containmentRect={left:0,top:0};
// if (this.helper.style.position === 'absolute') { // we use 'fixed'
//   const { left, top } = this.helperContainment.getBoundingClientRect();
//   containmentRect = { left, top };
// }
const style=this.helper.style,offset=this.dragOffset;style.left=e.clientX+offset.offsetLeft-containmentRect.left+"px",style.top=e.clientY+offset.offsetTop-containmentRect.top+"px"}
/** @internal */_setupHelperContainmentStyle(){return this.helperContainment=this.helper.parentElement,"fixed"!==this.helper.style.position&&(this.parentOriginStylePosition=this.helperContainment.style.position,window.getComputedStyle(this.helperContainment).position.match(/static/)&&(this.helperContainment.style.position="relative")),this}
/** @internal */_getDragOffset(event,el,parent){
// in case ancestor has transform/perspective css properties that change the viewpoint
let xformOffsetX=0,xformOffsetY=0;if(parent){const testEl=document.createElement("div");utils_1.Utils.addElStyles(testEl,{opacity:"0",position:"fixed",top:"0px",left:"0px",width:"1px",height:"1px",zIndex:"-999999"}),parent.appendChild(testEl);const testElPosition=testEl.getBoundingClientRect();parent.removeChild(testEl),xformOffsetX=testElPosition.left,xformOffsetY=testElPosition.top}const targetOffset=el.getBoundingClientRect();return{left:targetOffset.left,top:targetOffset.top,offsetLeft:-event.clientX+targetOffset.left-xformOffsetX,offsetTop:-event.clientY+targetOffset.top-xformOffsetY,width:targetOffset.width,height:targetOffset.height}}
/** @internal TODO: set to public as called by DDDroppable! */ui(){const containmentEl=this.el.parentElement,containmentRect=containmentEl.getBoundingClientRect(),offset=this.helper.getBoundingClientRect();return{position:{top:offset.top-containmentRect.top,left:offset.left-containmentRect.left}
/* not used by GridStack for now...
            helper: [this.helper], //The object arr representing the helper that's being dragged.
            offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.
            */}}}exports.DDDraggable=DDDraggable,
/** @internal properties we change during dragging, and restore back */
DDDraggable.originStyleProp=["transition","pointerEvents","position","left","top","minWidth","willChange"]},
/***/848175:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-droppable.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDDroppable=void 0;const dd_manager_1=__webpack_require__(879041),dd_base_impl_1=__webpack_require__(478551),utils_1=__webpack_require__(985395),dd_touch_1=__webpack_require__(460358);
// let count = 0; // TEST
class DDDroppable extends dd_base_impl_1.DDBaseImplement{constructor(el,opts={}){super(),this.el=el,this.option=opts,
// create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)
this._mouseEnter=this._mouseEnter.bind(this),this._mouseLeave=this._mouseLeave.bind(this),this.enable(),this._setupAccept()}on(event,callback){super.on(event,callback)}off(event){super.off(event)}enable(){!1!==this.disabled&&(super.enable(),this.el.classList.add("ui-droppable"),this.el.classList.remove("ui-droppable-disabled"),this.el.addEventListener("mouseenter",this._mouseEnter),this.el.addEventListener("mouseleave",this._mouseLeave),dd_touch_1.isTouch&&(this.el.addEventListener("pointerenter",dd_touch_1.pointerenter),this.el.addEventListener("pointerleave",dd_touch_1.pointerleave)))}disable(forDestroy=!1){!0!==this.disabled&&(super.disable(),this.el.classList.remove("ui-droppable"),forDestroy||this.el.classList.add("ui-droppable-disabled"),this.el.removeEventListener("mouseenter",this._mouseEnter),this.el.removeEventListener("mouseleave",this._mouseLeave),dd_touch_1.isTouch&&(this.el.removeEventListener("pointerenter",dd_touch_1.pointerenter),this.el.removeEventListener("pointerleave",dd_touch_1.pointerleave)))}destroy(){this.disable(!0),this.el.classList.remove("ui-droppable"),this.el.classList.remove("ui-droppable-disabled"),super.destroy()}updateOption(opts){return Object.keys(opts).forEach((key=>this.option[key]=opts[key])),this._setupAccept(),this}
/** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */_mouseEnter(e){
// console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST
if(!dd_manager_1.DDManager.dragElement)return;if(!this._canDrop(dd_manager_1.DDManager.dragElement.el))return;e.preventDefault(),e.stopPropagation(),
// make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do
dd_manager_1.DDManager.dropElement&&dd_manager_1.DDManager.dropElement!==this&&dd_manager_1.DDManager.dropElement._mouseLeave(e),dd_manager_1.DDManager.dropElement=this;const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"dropover"});this.option.over&&this.option.over(ev,this._ui(dd_manager_1.DDManager.dragElement)),this.triggerEvent("dropover",ev),this.el.classList.add("ui-droppable-over")}
/** @internal called when the item is leaving our area, stop tracking if we had moving item */_mouseLeave(e){var _a;
// console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST
if(!dd_manager_1.DDManager.dragElement||dd_manager_1.DDManager.dropElement!==this)return;e.preventDefault(),e.stopPropagation();const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"dropout"});if(this.option.out&&this.option.out(ev,this._ui(dd_manager_1.DDManager.dragElement)),this.triggerEvent("dropout",ev),dd_manager_1.DDManager.dropElement===this){
// console.log('not tracking'); // TEST
// if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children
let parentDrop;delete dd_manager_1.DDManager.dropElement;let parent=this.el.parentElement;while(!parentDrop&&parent)parentDrop=null===(_a=parent.ddElement)||void 0===_a?void 0:_a.ddDroppable,parent=parent.parentElement;parentDrop&&parentDrop._mouseEnter(e)}}
/** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */drop(e){e.preventDefault();const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"drop"});this.option.drop&&this.option.drop(ev,this._ui(dd_manager_1.DDManager.dragElement)),this.triggerEvent("drop",ev)}
/** @internal true if element matches the string/method accept option */_canDrop(el){return el&&(!this.accept||this.accept(el))}
/** @internal */_setupAccept(){return this.option.accept?("string"===typeof this.option.accept?this.accept=el=>el.matches(this.option.accept):this.accept=this.option.accept,this):this}
/** @internal */_ui(drag){return Object.assign({draggable:drag.el},drag.ui())}}exports.DDDroppable=DDDroppable},
/***/496533:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-elements.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDElement=void 0;const dd_resizable_1=__webpack_require__(296850),dd_draggable_1=__webpack_require__(638176),dd_droppable_1=__webpack_require__(848175);class DDElement{constructor(el){this.el=el}static init(el){return el.ddElement||(el.ddElement=new DDElement(el)),el.ddElement}on(eventName,callback){return this.ddDraggable&&["drag","dragstart","dragstop"].indexOf(eventName)>-1?this.ddDraggable.on(eventName,callback):this.ddDroppable&&["drop","dropover","dropout"].indexOf(eventName)>-1?this.ddDroppable.on(eventName,callback):this.ddResizable&&["resizestart","resize","resizestop"].indexOf(eventName)>-1&&this.ddResizable.on(eventName,callback),this}off(eventName){return this.ddDraggable&&["drag","dragstart","dragstop"].indexOf(eventName)>-1?this.ddDraggable.off(eventName):this.ddDroppable&&["drop","dropover","dropout"].indexOf(eventName)>-1?this.ddDroppable.off(eventName):this.ddResizable&&["resizestart","resize","resizestop"].indexOf(eventName)>-1&&this.ddResizable.off(eventName),this}setupDraggable(opts){return this.ddDraggable?this.ddDraggable.updateOption(opts):this.ddDraggable=new dd_draggable_1.DDDraggable(this.el,opts),this}cleanDraggable(){return this.ddDraggable&&(this.ddDraggable.destroy(),delete this.ddDraggable),this}setupResizable(opts){return this.ddResizable?this.ddResizable.updateOption(opts):this.ddResizable=new dd_resizable_1.DDResizable(this.el,opts),this}cleanResizable(){return this.ddResizable&&(this.ddResizable.destroy(),delete this.ddResizable),this}setupDroppable(opts){return this.ddDroppable?this.ddDroppable.updateOption(opts):this.ddDroppable=new dd_droppable_1.DDDroppable(this.el,opts),this}cleanDroppable(){return this.ddDroppable&&(this.ddDroppable.destroy(),delete this.ddDroppable),this}}exports.DDElement=DDElement},
/***/364192:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-gridstack.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDGridStack=void 0;const utils_1=__webpack_require__(985395),dd_manager_1=__webpack_require__(879041),dd_element_1=__webpack_require__(496533);
// let count = 0; // TEST
/**
 * HTML Native Mouse and Touch Events Drag and Drop functionality.
 */
class DDGridStack{resizable(el,opts,key,value){return this._getDDElements(el).forEach((dEl=>{if("disable"===opts||"enable"===opts)dEl.ddResizable&&dEl.ddResizable[opts]();// can't create DD as it requires options for setupResizable()
else if("destroy"===opts)dEl.ddResizable&&dEl.cleanResizable();else if("option"===opts)dEl.setupResizable({[key]:value});else{const grid=dEl.el.gridstackNode.grid;let handles=dEl.el.getAttribute("gs-resize-handles")?dEl.el.getAttribute("gs-resize-handles"):grid.opts.resizable.handles,autoHide=!grid.opts.alwaysShowResizeHandle;dEl.setupResizable(Object.assign(Object.assign(Object.assign({},grid.opts.resizable),{handles:handles,autoHide:autoHide}),{start:opts.start,stop:opts.stop,resize:opts.resize}))}})),this}draggable(el,opts,key,value){return this._getDDElements(el).forEach((dEl=>{if("disable"===opts||"enable"===opts)dEl.ddDraggable&&dEl.ddDraggable[opts]();// can't create DD as it requires options for setupDraggable()
else if("destroy"===opts)dEl.ddDraggable&&dEl.cleanDraggable();else if("option"===opts)dEl.setupDraggable({[key]:value});else{const grid=dEl.el.gridstackNode.grid;dEl.setupDraggable(Object.assign(Object.assign({},grid.opts.draggable),{
// containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),
start:opts.start,stop:opts.stop,drag:opts.drag}))}})),this}dragIn(el,opts){return this._getDDElements(el).forEach((dEl=>dEl.setupDraggable(opts))),this}droppable(el,opts,key,value){return"function"!==typeof opts.accept||opts._accept||(opts._accept=opts.accept,opts.accept=el=>opts._accept(el)),this._getDDElements(el).forEach((dEl=>{"disable"===opts||"enable"===opts?dEl.ddDroppable&&dEl.ddDroppable[opts]():"destroy"===opts?dEl.ddDroppable&&// error to call destroy if not there
dEl.cleanDroppable():"option"===opts?dEl.setupDroppable({[key]:value}):dEl.setupDroppable(opts)})),this}
/** true if element is droppable */isDroppable(el){return!(!(el&&el.ddElement&&el.ddElement.ddDroppable)||el.ddElement.ddDroppable.disabled)}
/** true if element is draggable */isDraggable(el){return!(!(el&&el.ddElement&&el.ddElement.ddDraggable)||el.ddElement.ddDraggable.disabled)}
/** true if element is draggable */isResizable(el){return!(!(el&&el.ddElement&&el.ddElement.ddResizable)||el.ddElement.ddResizable.disabled)}on(el,name,callback){return this._getDDElements(el).forEach((dEl=>dEl.on(name,(event=>{callback(event,dd_manager_1.DDManager.dragElement?dd_manager_1.DDManager.dragElement.el:event.target,dd_manager_1.DDManager.dragElement?dd_manager_1.DDManager.dragElement.helper:null)})))),this}off(el,name){return this._getDDElements(el).forEach((dEl=>dEl.off(name))),this}
/** @internal returns a list of DD elements, creating them on the fly by default */_getDDElements(els,create=!0){let hosts=utils_1.Utils.getElements(els);if(!hosts.length)return[];let list=hosts.map((e=>e.ddElement||(create?dd_element_1.DDElement.init(e):null)));// remove nulls
return create||list.filter((d=>d)),list}}exports.DDGridStack=DDGridStack},
/***/879041:
/***/function(__unused_webpack_module,exports){"use strict";
/**
 * dd-manager.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDManager=void 0;
/**
 * globals that are shared across Drag & Drop instances
 */
class DDManager{}exports.DDManager=DDManager},
/***/392053:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-resizable-handle.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDResizableHandle=void 0;const dd_touch_1=__webpack_require__(460358);class DDResizableHandle{constructor(host,direction,option){
/** @internal true after we've moved enough pixels to start a resize */
this.moving=!1,this.host=host,this.dir=direction,this.option=option,
// create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)
this._mouseDown=this._mouseDown.bind(this),this._mouseMove=this._mouseMove.bind(this),this._mouseUp=this._mouseUp.bind(this),this._init()}
/** @internal */_init(){const el=document.createElement("div");return el.classList.add("ui-resizable-handle"),el.classList.add(`${DDResizableHandle.prefix}${this.dir}`),el.style.zIndex="100",el.style.userSelect="none",this.el=el,this.host.appendChild(this.el),this.el.addEventListener("mousedown",this._mouseDown),dd_touch_1.isTouch&&(this.el.addEventListener("touchstart",dd_touch_1.touchstart),this.el.addEventListener("pointerdown",dd_touch_1.pointerdown)),this}
/** call this when resize handle needs to be removed and cleaned up */destroy(){return this.moving&&this._mouseUp(this.mouseDownEvent),this.el.removeEventListener("mousedown",this._mouseDown),dd_touch_1.isTouch&&(this.el.removeEventListener("touchstart",dd_touch_1.touchstart),this.el.removeEventListener("pointerdown",dd_touch_1.pointerdown)),this.host.removeChild(this.el),delete this.el,delete this.host,this}
/** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */_mouseDown(e){this.mouseDownEvent=e,document.addEventListener("mousemove",this._mouseMove,!0),// capture, not bubble
document.addEventListener("mouseup",this._mouseUp,!0),dd_touch_1.isTouch&&(this.el.addEventListener("touchmove",dd_touch_1.touchmove),this.el.addEventListener("touchend",dd_touch_1.touchend)),e.stopPropagation(),e.preventDefault()}
/** @internal */_mouseMove(e){let s=this.mouseDownEvent;this.moving?this._triggerEvent("move",e):Math.abs(e.x-s.x)+Math.abs(e.y-s.y)>2&&(
// don't start unless we've moved at least 3 pixels
this.moving=!0,this._triggerEvent("start",this.mouseDownEvent),this._triggerEvent("move",e)),e.stopPropagation(),e.preventDefault()}
/** @internal */_mouseUp(e){this.moving&&this._triggerEvent("stop",e),document.removeEventListener("mousemove",this._mouseMove,!0),document.removeEventListener("mouseup",this._mouseUp,!0),dd_touch_1.isTouch&&(this.el.removeEventListener("touchmove",dd_touch_1.touchmove),this.el.removeEventListener("touchend",dd_touch_1.touchend)),delete this.moving,delete this.mouseDownEvent,e.stopPropagation(),e.preventDefault()}
/** @internal */_triggerEvent(name,event){return this.option[name]&&this.option[name](event),this}}exports.DDResizableHandle=DDResizableHandle,
/** @internal */
DDResizableHandle.prefix="ui-resizable-"},
/***/296850:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-resizable.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDResizable=void 0;const dd_resizable_handle_1=__webpack_require__(392053),dd_base_impl_1=__webpack_require__(478551),utils_1=__webpack_require__(985395),dd_manager_1=__webpack_require__(879041);class DDResizable extends dd_base_impl_1.DDBaseImplement{constructor(el,opts={}){super(),
/** @internal */
this._ui=()=>{const containmentEl=this.el.parentElement,containmentRect=containmentEl.getBoundingClientRect(),newRect={width:this.originalRect.width,height:this.originalRect.height+this.scrolled,left:this.originalRect.left,top:this.originalRect.top-this.scrolled},rect=this.temporalRect||newRect;return{position:{left:rect.left-containmentRect.left,top:rect.top-containmentRect.top},size:{width:rect.width,height:rect.height}
/* Gridstack ONLY needs position set above... keep around in case.
                element: [this.el], // The object representing the element to be resized
                helper: [], // TODO: not support yet - The object representing the helper that's being resized
                originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped
                originalPosition: { // The position represented as { left, top } before the resizable is resized
                  left: this.originalRect.left - containmentRect.left,
                  top: this.originalRect.top - containmentRect.top
                },
                originalSize: { // The size represented as { width, height } before the resizable is resized
                  width: this.originalRect.width,
                  height: this.originalRect.height
                }
                */}},this.el=el,this.option=opts,
// create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)
this._mouseOver=this._mouseOver.bind(this),this._mouseOut=this._mouseOut.bind(this),this.enable(),this._setupAutoHide(this.option.autoHide),this._setupHandlers()}on(event,callback){super.on(event,callback)}off(event){super.off(event)}enable(){super.enable(),this.el.classList.add("ui-resizable"),this.el.classList.remove("ui-resizable-disabled"),this._setupAutoHide(this.option.autoHide)}disable(){super.disable(),this.el.classList.add("ui-resizable-disabled"),this.el.classList.remove("ui-resizable"),this._setupAutoHide(!1)}destroy(){this._removeHandlers(),this._setupAutoHide(!1),this.el.classList.remove("ui-resizable"),delete this.el,super.destroy()}updateOption(opts){let updateHandles=opts.handles&&opts.handles!==this.option.handles,updateAutoHide=opts.autoHide&&opts.autoHide!==this.option.autoHide;return Object.keys(opts).forEach((key=>this.option[key]=opts[key])),updateHandles&&(this._removeHandlers(),this._setupHandlers()),updateAutoHide&&this._setupAutoHide(this.option.autoHide),this}
/** @internal turns auto hide on/off */_setupAutoHide(auto){return auto?(this.el.classList.add("ui-resizable-autohide"),
// use mouseover and not mouseenter to get better performance and track for nested cases
this.el.addEventListener("mouseover",this._mouseOver),this.el.addEventListener("mouseout",this._mouseOut)):(this.el.classList.remove("ui-resizable-autohide"),this.el.removeEventListener("mouseover",this._mouseOver),this.el.removeEventListener("mouseout",this._mouseOut),dd_manager_1.DDManager.overResizeElement===this&&delete dd_manager_1.DDManager.overResizeElement),this}
/** @internal */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
_mouseOver(e){
// console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)
// already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018
dd_manager_1.DDManager.overResizeElement||dd_manager_1.DDManager.dragElement||(dd_manager_1.DDManager.overResizeElement=this,
// console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)
this.el.classList.remove("ui-resizable-autohide"))}
/** @internal */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
_mouseOut(e){
// console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)
dd_manager_1.DDManager.overResizeElement===this&&(delete dd_manager_1.DDManager.overResizeElement,
// console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)
this.el.classList.add("ui-resizable-autohide"))}
/** @internal */_setupHandlers(){let handlerDirection=this.option.handles||"e,s,se";return"all"===handlerDirection&&(handlerDirection="n,e,s,w,se,sw,ne,nw"),this.handlers=handlerDirection.split(",").map((dir=>dir.trim())).map((dir=>new dd_resizable_handle_1.DDResizableHandle(this.el,dir,{start:event=>{this._resizeStart(event)},stop:event=>{this._resizeStop(event)},move:event=>{this._resizing(event,dir)}}))),this}
/** @internal */_resizeStart(event){this.originalRect=this.el.getBoundingClientRect(),this.scrollEl=utils_1.Utils.getScrollElement(this.el),this.scrollY=this.scrollEl.scrollTop,this.scrolled=0,this.startEvent=event,this._setupHelper(),this._applyChange();const ev=utils_1.Utils.initEvent(event,{type:"resizestart",target:this.el});return this.option.start&&this.option.start(ev,this._ui()),this.el.classList.add("ui-resizable-resizing"),this.triggerEvent("resizestart",ev),this}
/** @internal */_resizing(event,dir){this.scrolled=this.scrollEl.scrollTop-this.scrollY,this.temporalRect=this._getChange(event,dir),this._applyChange();const ev=utils_1.Utils.initEvent(event,{type:"resize",target:this.el});return this.option.resize&&this.option.resize(ev,this._ui()),this.triggerEvent("resize",ev),this}
/** @internal */_resizeStop(event){const ev=utils_1.Utils.initEvent(event,{type:"resizestop",target:this.el});return this.option.stop&&this.option.stop(ev),this.el.classList.remove("ui-resizable-resizing"),this.triggerEvent("resizestop",ev),this._cleanHelper(),delete this.startEvent,delete this.originalRect,delete this.temporalRect,delete this.scrollY,delete this.scrolled,this}
/** @internal */_setupHelper(){return this.elOriginStyleVal=DDResizable._originStyleProp.map((prop=>this.el.style[prop])),this.parentOriginStylePosition=this.el.parentElement.style.position,window.getComputedStyle(this.el.parentElement).position.match(/static/)&&(this.el.parentElement.style.position="relative"),this.el.style.position="absolute",this.el.style.opacity="0.8",this}
/** @internal */_cleanHelper(){return DDResizable._originStyleProp.forEach(((prop,i)=>{this.el.style[prop]=this.elOriginStyleVal[i]||null})),this.el.parentElement.style.position=this.parentOriginStylePosition||null,this}
/** @internal */_getChange(event,dir){const oEvent=this.startEvent,newRect={width:this.originalRect.width,height:this.originalRect.height+this.scrolled,left:this.originalRect.left,top:this.originalRect.top-this.scrolled},offsetX=event.clientX-oEvent.clientX,offsetY=event.clientY-oEvent.clientY;dir.indexOf("e")>-1?newRect.width+=offsetX:dir.indexOf("w")>-1&&(newRect.width-=offsetX,newRect.left+=offsetX),dir.indexOf("s")>-1?newRect.height+=offsetY:dir.indexOf("n")>-1&&(newRect.height-=offsetY,newRect.top+=offsetY);const constrain=this._constrainSize(newRect.width,newRect.height);return Math.round(newRect.width)!==Math.round(constrain.width)&&(// round to ignore slight round-off errors
dir.indexOf("w")>-1&&(newRect.left+=newRect.width-constrain.width),newRect.width=constrain.width),Math.round(newRect.height)!==Math.round(constrain.height)&&(dir.indexOf("n")>-1&&(newRect.top+=newRect.height-constrain.height),newRect.height=constrain.height),newRect}
/** @internal constrain the size to the set min/max values */_constrainSize(oWidth,oHeight){const maxWidth=this.option.maxWidth||Number.MAX_SAFE_INTEGER,minWidth=this.option.minWidth||oWidth,maxHeight=this.option.maxHeight||Number.MAX_SAFE_INTEGER,minHeight=this.option.minHeight||oHeight,width=Math.min(maxWidth,Math.max(minWidth,oWidth)),height=Math.min(maxHeight,Math.max(minHeight,oHeight));return{width:width,height:height}}
/** @internal */_applyChange(){let containmentRect={left:0,top:0,width:0,height:0};if("absolute"===this.el.style.position){const containmentEl=this.el.parentElement,{left:left,top:top}=containmentEl.getBoundingClientRect();containmentRect={left:left,top:top,width:0,height:0}}return this.temporalRect?(Object.keys(this.temporalRect).forEach((key=>{const value=this.temporalRect[key];this.el.style[key]=value-containmentRect[key]+"px"})),this):this}
/** @internal */_removeHandlers(){return this.handlers.forEach((handle=>handle.destroy())),delete this.handlers,this}}exports.DDResizable=DDResizable,
/** @internal */
DDResizable._originStyleProp=["width","height","position","left","top","opacity","zIndex"]},
/***/460358:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * touch.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.pointerleave=exports.pointerenter=exports.pointerdown=exports.touchend=exports.touchmove=exports.touchstart=exports.isTouch=void 0;const dd_manager_1=__webpack_require__(879041);
/**
 * Detect touch support - Windows Surface devices and other touch devices
 * should we use this instead ? (what we had for always showing resize handles)
 * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
 */exports.isTouch="undefined"!==typeof window&&"undefined"!==typeof document&&("ontouchstart"in document||"ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0);
// interface TouchCoord {x: number, y: number};
class DDTouch{}
/**
* Get the x,y position of a touch event
*/
// function getTouchCoords(e: TouchEvent): TouchCoord {
//   return {
//     x: e.changedTouches[0].pageX,
//     y: e.changedTouches[0].pageY
//   };
// }
/**
 * Simulate a mouse event based on a corresponding touch event
 * @param {Object} e A touch event
 * @param {String} simulatedType The corresponding mouse event
 */function simulateMouseEvent(e,simulatedType){
// Ignore multi-touch events
if(e.touches.length>1)return;
// Prevent "Ignored attempt to cancel a touchmove event with cancelable=false" errors
e.cancelable&&e.preventDefault();const touch=e.changedTouches[0],simulatedEvent=document.createEvent("MouseEvents");
// Initialize the simulated mouse event using the touch event's coordinates
simulatedEvent.initMouseEvent(simulatedType,// type
!0,// bubbles
!0,// cancelable
window,// view
1,// detail
touch.screenX,// screenX
touch.screenY,// screenY
touch.clientX,// clientX
touch.clientY,// clientY
!1,// ctrlKey
!1,// altKey
!1,// shiftKey
!1,// metaKey
0,// button
null),
// Dispatch the simulated event to the target element
e.target.dispatchEvent(simulatedEvent)}
/**
 * Simulate a mouse event based on a corresponding Pointer event
 * @param {Object} e A pointer event
 * @param {String} simulatedType The corresponding mouse event
 */function simulatePointerMouseEvent(e,simulatedType){
// Prevent "Ignored attempt to cancel a touchmove event with cancelable=false" errors
e.cancelable&&e.preventDefault();const simulatedEvent=document.createEvent("MouseEvents");
// Initialize the simulated mouse event using the touch event's coordinates
simulatedEvent.initMouseEvent(simulatedType,// type
!0,// bubbles
!0,// cancelable
window,// view
1,// detail
e.screenX,// screenX
e.screenY,// screenY
e.clientX,// clientX
e.clientY,// clientY
!1,// ctrlKey
!1,// altKey
!1,// shiftKey
!1,// metaKey
0,// button
null),
// Dispatch the simulated event to the target element
e.target.dispatchEvent(simulatedEvent)}
/**
 * Handle the touchstart events
 * @param {Object} e The widget element's touchstart event
 */function touchstart(e){
// Ignore the event if another widget is already being handled
DDTouch.touchHandled||(DDTouch.touchHandled=!0,
// Simulate the mouse events
// simulateMouseEvent(e, 'mouseover');
// simulateMouseEvent(e, 'mousemove');
simulateMouseEvent(e,"mousedown"))}
/**
 * Handle the touchmove events
 * @param {Object} e The document's touchmove event
 */
function touchmove(e){
// Ignore event if not handled by us
DDTouch.touchHandled&&simulateMouseEvent(e,"mousemove")}
/**
 * Handle the touchend events
 * @param {Object} e The document's touchend event
 */
function touchend(e){
// Ignore event if not handled
if(!DDTouch.touchHandled)return;
// cancel delayed leave event when we release on ourself which happens BEFORE we get this!
DDTouch.pointerLeaveTimeout&&(window.clearTimeout(DDTouch.pointerLeaveTimeout),delete DDTouch.pointerLeaveTimeout);const wasDragging=!!dd_manager_1.DDManager.dragElement;
// Simulate the mouseup event
simulateMouseEvent(e,"mouseup"),
// simulateMouseEvent(event, 'mouseout');
// If the touch interaction did not move, it should trigger a click
wasDragging||simulateMouseEvent(e,"click"),
// Unset the flag to allow other widgets to inherit the touch event
DDTouch.touchHandled=!1}
/**
 * Note we don't get touchenter/touchleave (which are deprecated)
 * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter
 * so instead of PointerEvent to still get enter/leave and send the matching mouse event.
 */
function pointerdown(e){
// console.log("pointer down")
e.target.releasePointerCapture(e.pointerId);// <- Important!
}function pointerenter(e){
// ignore the initial one we get on pointerdown on ourself
dd_manager_1.DDManager.dragElement&&
// console.log('pointerenter');
simulatePointerMouseEvent(e,"mouseenter")}function pointerleave(e){
// ignore the leave on ourself we get before releasing the mouse over ourself
// by delaying sending the event and having the up event cancel us
dd_manager_1.DDManager.dragElement&&(DDTouch.pointerLeaveTimeout=window.setTimeout((()=>{delete DDTouch.pointerLeaveTimeout,
// console.log('pointerleave delayed');
simulatePointerMouseEvent(e,"mouseleave")}),10))}exports.touchstart=touchstart,exports.touchmove=touchmove,exports.touchend=touchend,exports.pointerdown=pointerdown,exports.pointerenter=pointerenter,exports.pointerleave=pointerleave},
/***/522255:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * gridstack-engine.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.GridStackEngine=void 0;const utils_1=__webpack_require__(985395);
/**
 * Defines the GridStack engine that does most no DOM grid manipulation.
 * See GridStack methods and vars for descriptions.
 *
 * NOTE: values should not be modified directly - call the main GridStack API instead
 */class GridStackEngine{constructor(opts={}){this.addedNodes=[],this.removedNodes=[],this.column=opts.column||12,this.maxRow=opts.maxRow,this._float=opts.float,this.nodes=opts.nodes||[],this.onChange=opts.onChange}batchUpdate(flag=!0){return!!this.batchMode===flag||(this.batchMode=flag,flag?(this._prevFloat=this._float,this._float=!0,// let things go anywhere for now... will restore and possibly reposition later
this.saveInitial()):(this._float=this._prevFloat,delete this._prevFloat,this._packNodes()._notify())),this}
// use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip
_useEntireRowArea(node,nn){return(!this.float||this.batchMode&&!this._prevFloat)&&!this._hasLocked&&(!node._moving||node._skipDown||nn.y<=node.y)}
/** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.
     * return true if we moved. */_fixCollisions(node,nn=node,collide,opt={}){// REAL area collide for swap and skip if none...
if(this.sortNodes(-1),// from last to first, so recursive collision move items in the right order
collide=collide||this.collide(node,nn),!collide)return!1;
// swap check: if we're actively moving in gravity mode, see if we collide with an object the same size
if(node._moving&&!opt.nested&&!this.float&&this.swap(node,collide))return!0;
// during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)
let area=nn;this._useEntireRowArea(node,nn)&&(area={x:0,w:this.column,y:nn.y,h:nn.h},collide=this.collide(node,area,opt.skip));let didMove=!1,newOpt={nested:!0,pack:!1};while(collide=collide||this.collide(node,area,opt.skip)){// could collide with more than 1 item... so repeat for each
let moved;
// if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,
// but remember that skip down so we only do this once (and push others otherwise).
if(collide.locked||node._moving&&!node._skipDown&&nn.y>node.y&&!this.float&&(
// can take space we had, or before where we're going
!this.collide(collide,Object.assign(Object.assign({},collide),{y:node.y}),node)||!this.collide(collide,Object.assign(Object.assign({},collide),{y:nn.y-collide.h}),node))?(node._skipDown=node._skipDown||nn.y>node.y,moved=this.moveNode(node,Object.assign(Object.assign(Object.assign({},nn),{y:collide.y+collide.h}),newOpt)),collide.locked&&moved?utils_1.Utils.copyPos(nn,node):!collide.locked&&moved&&opt.pack&&(
// we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way
this._packNodes(),nn.y=collide.y+collide.h,utils_1.Utils.copyPos(node,nn)),didMove=didMove||moved):
// move collide down *after* where we will be, ignoring where we are now (don't collide with us)
moved=this.moveNode(collide,Object.assign(Object.assign(Object.assign({},collide),{y:nn.y+nn.h,skip:node}),newOpt)),!moved)return didMove;// break inf loop if we couldn't move after all (ex: maxRow, fixed)
collide=void 0}return didMove}
/** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */collide(skip,area=skip,skip2){return this.nodes.find((n=>n!==skip&&n!==skip2&&utils_1.Utils.isIntercepted(n,area)))}collideAll(skip,area=skip,skip2){return this.nodes.filter((n=>n!==skip&&n!==skip2&&utils_1.Utils.isIntercepted(n,area)))}
/** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */directionCollideCoverage(node,o,collides){if(!o.rect||!node._rect)return;let collide,r0=node._rect,r=Object.assign({},o.rect);// where started
// save it so we don't have to find it again
// where we are
// update dragged rect to show where it's coming from (above or below, etc...)
return r.y>r0.y?(r.h+=r.y-r0.y,r.y=r0.y):r.h+=r0.y-r.y,r.x>r0.x?(r.w+=r.x-r0.x,r.x=r0.x):r.w+=r0.x-r.x,collides.forEach((n=>{if(n.locked||!n._rect)return;let r2=n._rect,yOver=Number.MAX_VALUE,xOver=Number.MAX_VALUE,overMax=.5;// overlapping target
// need >50%
// depending on which side we started from, compute the overlap % of coverage
// (ex: from above/below we only compute the max horizontal line coverage)
r0.y<r2.y?// from above
yOver=(r.y+r.h-r2.y)/r2.h:r0.y+r0.h>r2.y+r2.h&&(// from below
yOver=(r2.y+r2.h-r.y)/r2.h),r0.x<r2.x?// from the left
xOver=(r.x+r.w-r2.x)/r2.w:r0.x+r0.w>r2.x+r2.w&&(// from the right
xOver=(r2.x+r2.w-r.x)/r2.w);let over=Math.min(xOver,yOver);over>overMax&&(overMax=over,collide=n)})),o.collide=collide,collide}
/** does a pixel coverage returning the node that has the most coverage by area */
/*
    protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {
      let collide: GridStackNode;
      let overMax = 0;
      collides.forEach(n => {
        if (n.locked || !n._rect) return;
        let over = Utils.areaIntercept(r, n._rect);
        if (over > overMax) {
          overMax = over;
          collide = n;
        }
      });
      return {collide, over: overMax};
    }
    */
/** called to cache the nodes pixel rectangles used for collision detection during drag */cacheRects(w,h,top,right,bottom,left){return this.nodes.forEach((n=>n._rect={y:n.y*h+top,x:n.x*w+left,w:n.w*w-left-right,h:n.h*h-top-bottom})),this}
/** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */swap(a,b){if(!b||b.locked||!a||a.locked)return!1;function _doSwap(){let x=b.x,y=b.y;return b.x=a.x,b.y=a.y,// b -> a position
a.h!=b.h?(a.x=x,a.y=b.y+b.h):a.w!=b.w?(a.x=b.x+b.w,a.y=y):(a.x=x,a.y=y),a._dirty=b._dirty=!0,!0}let touching;// remember if we called it (vs undefined)
// same size and same row or column, and touching
if(a.w===b.w&&a.h===b.h&&(a.x===b.x||a.y===b.y)&&(touching=utils_1.Utils.isTouching(a,b)))return _doSwap();if(!1!==touching){// IFF ran test and fail, bail out
// check for taking same columns (but different height) and touching
if(a.w===b.w&&a.x===b.x&&(touching||(touching=utils_1.Utils.isTouching(a,b)))){if(b.y<a.y){let t=a;a=b,b=t}// swap a <-> b vars so a is first
return _doSwap()}if(!1!==touching){
// check if taking same row (but different width) and touching
if(a.h===b.h&&a.y===b.y&&(touching||(touching=utils_1.Utils.isTouching(a,b)))){if(b.x<a.x){let t=a;a=b,b=t}// swap a <-> b vars so a is first
return _doSwap()}return!1}}}isAreaEmpty(x,y,w,h){let nn={x:x||0,y:y||0,w:w||1,h:h||1};return!this.collide(nn)}
/** re-layout grid items to reclaim any empty space */compact(){if(0===this.nodes.length)return this;this.batchUpdate().sortNodes();let copyNodes=this.nodes;return this.nodes=[],// pretend we have no nodes to conflict layout to start with...
copyNodes.forEach((node=>{node.locked||(node.autoPosition=!0),this.addNode(node,!1),// 'false' for add event trigger
node._dirty=!0}// will force attr update
)),this.batchUpdate(!1)}
/** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */set float(val){this._float!==val&&(this._float=val||!1,val||this._packNodes()._notify())}
/** float getter method */get float(){return this._float||!1}
/** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */sortNodes(dir){return this.nodes=utils_1.Utils.sort(this.nodes,dir,this.column),this}
/** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */_packNodes(){return this.batchMode||(this.sortNodes(),// first to last
this.float?
// restore original Y pos
this.nodes.forEach((n=>{if(n._updating||void 0===n._orig||n.y===n._orig.y)return;let newY=n.y;while(newY>n._orig.y){--newY;let collide=this.collide(n,{x:n.x,y:newY,w:n.w,h:n.h});collide||(n._dirty=!0,n.y=newY)}})):
// top gravity pack
this.nodes.forEach(((n,i)=>{if(!n.locked)while(n.y>0){let newY=0===i?0:n.y-1,canBeMoved=0===i||!this.collide(n,{x:n.x,y:newY,w:n.w,h:n.h});if(!canBeMoved)break;
// Note: must be dirty (from last position) for GridStack::OnChange CB to update positions
// and move items back. The user 'change' CB should detect changes from the original
// starting position instead.
n._dirty=n.y!==newY,n.y=newY}}))),this}
/**
     * given a random node, makes sure it's coordinates/values are valid in the current grid
     * @param node to adjust
     * @param resizing if out of bound, resize down or move into the grid to fit ?
     */prepareNode(node,resizing){node=node||{},node._id=node._id||GridStackEngine._idSeq++,
// if we're missing position, have the grid position us automatically (before we set them to 0,0)
void 0!==node.x&&void 0!==node.y&&null!==node.x&&null!==node.y||(node.autoPosition=!0);
// assign defaults for missing required fields
let defaults={x:0,y:0,w:1,h:1};return utils_1.Utils.defaults(node,defaults),node.autoPosition||delete node.autoPosition,node.noResize||delete node.noResize,node.noMove||delete node.noMove,
// check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)
"string"==typeof node.x&&(node.x=Number(node.x)),"string"==typeof node.y&&(node.y=Number(node.y)),"string"==typeof node.w&&(node.w=Number(node.w)),"string"==typeof node.h&&(node.h=Number(node.h)),isNaN(node.x)&&(node.x=defaults.x,node.autoPosition=!0),isNaN(node.y)&&(node.y=defaults.y,node.autoPosition=!0),isNaN(node.w)&&(node.w=defaults.w),isNaN(node.h)&&(node.h=defaults.h),this.nodeBoundFix(node,resizing)}
/** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */nodeBoundFix(node,resizing){let before=node._orig||utils_1.Utils.copyPos({},node);node.maxW&&(node.w=Math.min(node.w,node.maxW)),node.maxH&&(node.h=Math.min(node.h,node.maxH)),node.minW&&node.minW<=this.column&&(node.w=Math.max(node.w,node.minW)),node.minH&&(node.h=Math.max(node.h,node.minH));
// if user loaded a larger than allowed widget for current # of columns (or force 1 column mode),
// remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985
// IFF we're not in the middle of column resizing!
const saveOrig=1===this.column||node.x+node.w>this.column;if(saveOrig&&this.column<12&&!this._inColumnResize&&node._id&&-1===this.findCacheLayout(node,12)){let copy=Object.assign({},node);// need _id + positions
copy.autoPosition?(delete copy.x,delete copy.y):copy.x=Math.min(11,copy.x),copy.w=Math.min(12,copy.w),this.cacheOneLayout(copy,12)}return node.w>this.column?node.w=this.column:node.w<1&&(node.w=1),this.maxRow&&node.h>this.maxRow?node.h=this.maxRow:node.h<1&&(node.h=1),node.x<0&&(node.x=0),node.y<0&&(node.y=0),node.x+node.w>this.column&&(resizing?node.w=this.column-node.x:node.x=this.column-node.w),this.maxRow&&node.y+node.h>this.maxRow&&(resizing?node.h=this.maxRow-node.y:node.y=this.maxRow-node.h),utils_1.Utils.samePos(node,before)||(node._dirty=!0),node}
/** returns a list of modified nodes from their original values */getDirtyNodes(verify){
// compare original x,y,w,h instead as _dirty can be a temporary state
return verify?this.nodes.filter((n=>n._dirty&&!utils_1.Utils.samePos(n,n._orig))):this.nodes.filter((n=>n._dirty))}
/** @internal call this to call onChange callback with dirty nodes so DOM can be updated */_notify(removedNodes){if(this.batchMode||!this.onChange)return this;let dirtyNodes=(removedNodes||[]).concat(this.getDirtyNodes());return this.onChange(dirtyNodes),this}
/** @internal remove dirty and last tried info */cleanNodes(){return this.batchMode||this.nodes.forEach((n=>{delete n._dirty,delete n._lastTried})),this}
/** @internal called to save initial position/size to track real dirty state.
     * Note: should be called right after we call change event (so next API is can detect changes)
     * as well as right before we start move/resize/enter (so we can restore items to prev values) */saveInitial(){return this.nodes.forEach((n=>{n._orig=utils_1.Utils.copyPos({},n),delete n._dirty})),this._hasLocked=this.nodes.some((n=>n.locked)),this}
/** @internal restore all the nodes back to initial values (called when we leave) */restoreInitial(){return this.nodes.forEach((n=>{utils_1.Utils.samePos(n,n._orig)||(utils_1.Utils.copyPos(n,n._orig),n._dirty=!0)})),this._notify(),this}
/** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.
     * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.
     */findEmptyPosition(node,nodeList=this.nodes,column=this.column){nodeList=utils_1.Utils.sort(nodeList,-1,column);let found=!1;for(let i=0;!found;++i){let x=i%column,y=Math.floor(i/column);if(x+node.w>column)continue;let box={x:x,y:y,w:node.w,h:node.h};nodeList.find((n=>utils_1.Utils.isIntercepted(box,n)))||(node.x=x,node.y=y,delete node.autoPosition,found=!0)}return found}
/** call to add the given node to our list, fixing collision and re-packing */addNode(node,triggerAddEvent=!1){let dup=this.nodes.find((n=>n._id===node._id));return dup||(// prevent inserting twice! return it instead.
// skip prepareNode if we're in middle of column resize (not new) but do check for bounds!
node=this._inColumnResize?this.nodeBoundFix(node):this.prepareNode(node),delete node._temporaryRemoved,delete node._removeDOM,node.autoPosition&&this.findEmptyPosition(node)&&delete node.autoPosition,this.nodes.push(node),triggerAddEvent&&this.addedNodes.push(node),this._fixCollisions(node),this.batchMode||this._packNodes()._notify(),node)}removeNode(node,removeDOM=!0,triggerEvent=!1){return this.nodes.find((n=>n===node))?(triggerEvent&&// we wait until final drop to manually track removed items (rather than during drag)
this.removedNodes.push(node),removeDOM&&(node._removeDOM=!0),// let CB remove actual HTML (used to set _id to null, but then we loose layout info)
// don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.
this.nodes=this.nodes.filter((n=>n!==node)),this._packNodes()._notify([node])):this}removeAll(removeDOM=!0){return delete this._layouts,0===this.nodes.length?this:(removeDOM&&this.nodes.forEach((n=>n._removeDOM=!0)),// let CB remove actual HTML (used to set _id to null, but then we loose layout info)
this.removedNodes=this.nodes,this.nodes=[],this._notify(this.removedNodes))}
/** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.
     * In more complicated cases (maxRow) it will attempt at moving the item and fixing
     * others in a clone first, then apply those changes if still within specs. */moveNodeCheck(node,o){
// if (node.locked) return false;
if(!this.changedPosConstrain(node,o))return!1;
// simpler case: move item directly...
if(o.pack=!0,!this.maxRow)return this.moveNode(node,o);
// complex case: create a clone with NO maxRow (will check for out of bounds at the end)
let clonedNode,clone=new GridStackEngine({column:this.column,float:this.float,nodes:this.nodes.map((n=>n===node?(clonedNode=Object.assign({},n),clonedNode):Object.assign({},n)))});if(!clonedNode)return!1;
// check if we're covering 50% collision and could move
let canMove=clone.moveNode(clonedNode,o)&&clone.getRow()<=this.maxRow;
// else check if we can force a swap (float=true, or different shapes) on non-resize
if(!canMove&&!o.resizing&&o.collide){let collide=o.collide.el.gridstackNode;// find the source node the clone collided with at 50%
if(this.swap(node,collide))// swaps and mark dirty
return this._notify(),!0}return!!canMove&&(
// if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!
// Note: we can't use the list directly as elements and other parts point to actual node, so copy content
clone.nodes.filter((n=>n._dirty)).forEach((c=>{let n=this.nodes.find((a=>a._id===c._id));n&&(utils_1.Utils.copyPos(n,c),n._dirty=!0)})),this._notify(),!0)}
/** return true if can fit in grid height constrain only (always true if no maxRow) */willItFit(node){if(delete node._willFitPos,!this.maxRow)return!0;
// create a clone with NO maxRow and check if still within size
let clone=new GridStackEngine({column:this.column,float:this.float,nodes:this.nodes.map((n=>Object.assign({},n)))}),n=Object.assign({},node);// clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687
return this.cleanupNode(n),delete n.el,delete n._id,delete n.content,delete n.grid,clone.addNode(n),clone.getRow()<=this.maxRow&&(node._willFitPos=utils_1.Utils.copyPos({},n),!0)}
/** true if x,y or w,h are different after clamping to min/max */changedPosConstrain(node,p){
// first make sure w,h are set for caller
return p.w=p.w||node.w,p.h=p.h||node.h,node.x!==p.x||node.y!==p.y||(
// check constrained w,h
node.maxW&&(p.w=Math.min(p.w,node.maxW)),node.maxH&&(p.h=Math.min(p.h,node.maxH)),node.minW&&(p.w=Math.max(p.w,node.minW)),node.minH&&(p.h=Math.max(p.h,node.minH)),node.w!==p.w||node.h!==p.h)}
/** return true if the passed in node was actually moved (checks for no-op and locked) */moveNode(node,o){var _a,_b;if(!node||/*node.locked ||*/!o)return!1;let wasUndefinedPack;void 0===o.pack&&(wasUndefinedPack=o.pack=!0),
// constrain the passed in values and check if we're still changing our node
"number"!==typeof o.x&&(o.x=node.x),"number"!==typeof o.y&&(o.y=node.y),"number"!==typeof o.w&&(o.w=node.w),"number"!==typeof o.h&&(o.h=node.h);let resizing=node.w!==o.w||node.h!==o.h,nn=utils_1.Utils.copyPos({},node,!0);if(// get min/max out first, then opt positions next
utils_1.Utils.copyPos(nn,o),nn=this.nodeBoundFix(nn,resizing),utils_1.Utils.copyPos(o,nn),utils_1.Utils.samePos(node,o))return!1;let prevPos=utils_1.Utils.copyPos({},node),collides=this.collideAll(node,nn,o.skip),needToMove=!0;
// check if we will need to fix collision at our new location
if(collides.length){let activeDrag=node._moving&&!o.nested,collide=activeDrag?this.directionCollideCoverage(node,o,collides):collides[0];
// check to make sure we actually collided over 50% surface area while dragging
// if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that
if(activeDrag&&collide&&(null===(_b=null===(_a=node.grid)||void 0===_a?void 0:_a.opts)||void 0===_b?void 0:_b.subGridDynamic)&&!node.grid._isTemp){let over=utils_1.Utils.areaIntercept(o.rect,collide._rect),a1=utils_1.Utils.area(o.rect),a2=utils_1.Utils.area(collide._rect),perc=over/(a1<a2?a1:a2);perc>.8&&(collide.grid.makeSubGrid(collide.el,void 0,node),collide=void 0)}collide?needToMove=!this._fixCollisions(node,nn,collide,o):(needToMove=!1,// we didn't cover >50% for a move, skip...
wasUndefinedPack&&delete o.pack)}
// now move (to the original ask vs the collision version which might differ) and repack things
return needToMove&&(node._dirty=!0,utils_1.Utils.copyPos(node,nn)),o.pack&&this._packNodes()._notify(),!utils_1.Utils.samePos(node,prevPos);// pack might have moved things back
}getRow(){return this.nodes.reduce(((row,n)=>Math.max(row,n.y+n.h)),0)}beginUpdate(node){return node._updating||(node._updating=!0,delete node._skipDown,this.batchMode||this.saveInitial()),this}endUpdate(){let n=this.nodes.find((n=>n._updating));return n&&(delete n._updating,delete n._skipDown),this}
/** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,
     * returning a list of widgets for serialization */save(saveElement=!0){var _a;
// use the highest layout for any saved info so we can have full detail on reload #1849
let len=null===(_a=this._layouts)||void 0===_a?void 0:_a.length,layout=len&&this.column!==len-1?this._layouts[len-1]:null,list=[];return this.sortNodes(),this.nodes.forEach((n=>{let wl=null===layout||void 0===layout?void 0:layout.find((l=>l._id===n._id)),w=Object.assign({},n);
// use layout info instead if set
wl&&(w.x=wl.x,w.y=wl.y,w.w=wl.w),utils_1.Utils.removeInternalForSave(w,!saveElement),list.push(w)})),list}
/** @internal called whenever a node is added or moved - updates the cached layouts */layoutsNodesChange(nodes){return!this._layouts||this._inColumnResize||
// remove smaller layouts - we will re-generate those on the fly... larger ones need to update
this._layouts.forEach(((layout,column)=>{if(!layout||column===this.column)return this;if(column<this.column)this._layouts[column]=void 0;else{
// we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.
// NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785
let ratio=column/this.column;nodes.forEach((node=>{if(!node._orig)return;// didn't change (newly added ?)
let n=layout.find((l=>l._id===node._id));n&&(// no cache for new nodes. Will use those values.
// Y changed, push down same amount
// TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)
node.y!==node._orig.y&&(n.y+=node.y-node._orig.y),
// X changed, scale from new position
node.x!==node._orig.x&&(n.x=Math.round(node.x*ratio)),
// width changed, scale from new width
node.w!==node._orig.w&&(n.w=Math.round(node.w*ratio)))}
// ...height always carries over from cache
))}})),this}
/**
     * @internal Called to scale the widget width & position up/down based on the column change.
     * Note we store previous layouts (especially original ones) to make it possible to go
     * from say 12 -> 1 -> 12 and get back to where we were.
     *
     * @param prevColumn previous number of columns
     * @param column  new column number
     * @param nodes different sorted list (ex: DOM order) instead of current list
     * @param layout specify the type of re-layout that will happen (position, size, etc...).
     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column
     */updateNodeWidths(prevColumn,column,nodes,layout="moveScale"){var _a;if(!this.nodes.length||!column||prevColumn===column)return this;
// cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data
this.cacheLayout(this.nodes,prevColumn),this.batchUpdate();// do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision
let newNodes=[],domOrder=!1;
// if we're going to 1 column and using DOM order rather than default sorting, then generate that layout
if(1===column&&(null===nodes||void 0===nodes?void 0:nodes.length)){domOrder=!0;let top=0;nodes.forEach((n=>{n.x=0,n.w=1,n.y=Math.max(n.y,top),top=n.y+n.h})),newNodes=nodes,nodes=[]}else nodes=utils_1.Utils.sort(this.nodes,-1,prevColumn);// current column reverse sorting so we can insert last to front (limit collision)
// see if we have cached previous layout IFF we are going up in size (restore) otherwise always
// generate next size down from where we are (looks more natural as you gradually size down).
let cacheNodes=[];if(column>prevColumn){cacheNodes=this._layouts[column]||[];
// ...if not, start with the largest layout (if not already there) as down-scaling is more accurate
// by pretending we came from that larger column by assigning those values as starting point
let lastIndex=this._layouts.length-1;!cacheNodes.length&&prevColumn!==lastIndex&&(null===(_a=this._layouts[lastIndex])||void 0===_a?void 0:_a.length)&&(prevColumn=lastIndex,this._layouts[lastIndex].forEach((cacheNode=>{let n=nodes.find((n=>n._id===cacheNode._id));n&&(
// still current, use cache info positions
n.x=cacheNode.x,n.y=cacheNode.y,n.w=cacheNode.w)})))}
// if we found cache re-use those nodes that are still current
// ...and add any extra non-cached ones
if(cacheNodes.forEach((cacheNode=>{let j=nodes.findIndex((n=>n._id===cacheNode._id));-1!==j&&(
// still current, use cache info positions
(cacheNode.autoPosition||isNaN(cacheNode.x)||isNaN(cacheNode.y))&&this.findEmptyPosition(cacheNode,newNodes),cacheNode.autoPosition||(nodes[j].x=cacheNode.x,nodes[j].y=cacheNode.y,nodes[j].w=cacheNode.w,newNodes.push(nodes[j])),nodes.splice(j,1))})),nodes.length)if("function"===typeof layout)layout(column,prevColumn,newNodes,nodes);else if(!domOrder){let ratio=column/prevColumn,move="move"===layout||"moveScale"===layout,scale="scale"===layout||"moveScale"===layout;nodes.forEach((node=>{
// NOTE: x + w could be outside of the grid, but addNode() below will handle that
node.x=1===column?0:move?Math.round(node.x*ratio):Math.min(node.x,column-1),node.w=1===column||1===prevColumn?1:scale?Math.round(node.w*ratio)||1:Math.min(node.w,column),newNodes.push(node)})),nodes=[]}
// finally re-layout them in reverse order (to get correct placement)
return domOrder||(newNodes=utils_1.Utils.sort(newNodes,-1,column)),this._inColumnResize=!0,// prevent cache update
this.nodes=[],// pretend we have no nodes to start with (add() will use same structures) to simplify layout
newNodes.forEach((node=>{this.addNode(node,!1),// 'false' for add event trigger
delete node._orig}// make sure the commit doesn't try to restore things back to original
)),this.batchUpdate(!1),delete this._inColumnResize,this}
/**
     * call to cache the given layout internally to the given location so we can restore back when column changes size
     * @param nodes list of nodes
     * @param column corresponding column index to save it under
     * @param clear if true, will force other caches to be removed (default false)
     */cacheLayout(nodes,column,clear=!1){let copy=[];return nodes.forEach(((n,i)=>{n._id=n._id||GridStackEngine._idSeq++,// make sure we have an id in case this is new layout, else re-use id already set
copy[i]={x:n.x,y:n.y,w:n.w,_id:n._id}}// only thing we change is x,y,w and id to find it back
)),this._layouts=clear?[]:this._layouts||[],// use array to find larger quick
this._layouts[column]=copy,this}
/**
     * call to cache the given node layout internally to the given location so we can restore back when column changes size
     * @param node single node to cache
     * @param column corresponding column index to save it under
     */cacheOneLayout(n,column){n._id=n._id||GridStackEngine._idSeq++;let l={x:n.x,y:n.y,w:n.w,_id:n._id};n.autoPosition&&(delete l.x,delete l.y,l.autoPosition=!0),this._layouts=this._layouts||[],this._layouts[column]=this._layouts[column]||[];let index=this.findCacheLayout(n,column);return-1===index?this._layouts[column].push(l):this._layouts[column][index]=l,this}findCacheLayout(n,column){var _a,_b,_c;return null!==(_c=null===(_b=null===(_a=this._layouts)||void 0===_a?void 0:_a[column])||void 0===_b?void 0:_b.findIndex((l=>l._id===n._id)))&&void 0!==_c?_c:-1}
/** called to remove all internal values but the _id */cleanupNode(node){for(let prop in node)"_"===prop[0]&&"_id"!==prop&&delete node[prop];return this}}exports.GridStackEngine=GridStackEngine,
/** @internal unique global internal _id counter NOT starting at 0 */
GridStackEngine._idSeq=1},
/***/458075:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k),Object.defineProperty(o,k2,{enumerable:!0,get:function(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__exportStar=this&&this.__exportStar||function(m,exports){for(var p in m)"default"===p||exports.hasOwnProperty(p)||__createBinding(exports,m,p)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.GridStack=void 0;
/*!
 * GridStack 7.3.0
 * https://gridstackjs.com/
 *
 * Copyright (c) 2021-2022 Alain Dumesny
 * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE
 */
const gridstack_engine_1=__webpack_require__(522255),utils_1=__webpack_require__(985395),types_1=__webpack_require__(327817),dd_gridstack_1=__webpack_require__(364192),dd_touch_1=__webpack_require__(460358),dd_manager_1=__webpack_require__(879041),dd=new dd_gridstack_1.DDGridStack;
// export all dependent file as well to make it easier for users to just import the main file
__exportStar(__webpack_require__(327817),exports),__exportStar(__webpack_require__(985395),exports),__exportStar(__webpack_require__(522255),exports),__exportStar(__webpack_require__(364192),exports);
/**
 * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.
 * Note: your grid elements MUST have the following classes for the CSS layout to work:
 * @example
 * <div class="grid-stack">
 *   <div class="grid-stack-item">
 *     <div class="grid-stack-item-content">Item 1</div>
 *   </div>
 * </div>
 */
class GridStack{
/**
     * Construct a grid item from the given element and options
     * @param el
     * @param opts
     */
constructor(el,opts={}){var _a,_b;
/** @internal */this._gsEventHandler={},
/** @internal extra row added when dragging at the bottom of the grid */
this._extraDragRow=0,this.el=el,// exposed HTML element to the user
opts=opts||{},// handles null/undefined/0
el.classList.contains("grid-stack")||this.el.classList.add("grid-stack"),
// if row property exists, replace minRow and maxRow instead
opts.row&&(opts.minRow=opts.maxRow=opts.row,delete opts.row);let rowAttr=utils_1.Utils.toNumber(el.getAttribute("gs-row"));
// flag only valid in sub-grids (handled by parent, not here)
"auto"===opts.column&&delete opts.column;
// 'minWidth' legacy support in 5.1
/* eslint-disable-next-line @typescript-eslint/no-explicit-any */let anyOpts=opts;void 0!==anyOpts.minWidth&&(opts.oneColumnSize=opts.oneColumnSize||anyOpts.minWidth,delete anyOpts.minWidth),
// save original setting so we can restore on save
void 0!==opts.alwaysShowResizeHandle&&(opts._alwaysShowResizeHandle=opts.alwaysShowResizeHandle);
// elements DOM attributes override any passed options (like CSS style) - merge the two together
let defaults=Object.assign(Object.assign({},utils_1.Utils.cloneDeep(types_1.gridDefaults)),{column:utils_1.Utils.toNumber(el.getAttribute("gs-column"))||types_1.gridDefaults.column,minRow:rowAttr||(utils_1.Utils.toNumber(el.getAttribute("gs-min-row"))||types_1.gridDefaults.minRow),maxRow:rowAttr||(utils_1.Utils.toNumber(el.getAttribute("gs-max-row"))||types_1.gridDefaults.maxRow),staticGrid:utils_1.Utils.toBool(el.getAttribute("gs-static"))||types_1.gridDefaults.staticGrid,draggable:{handle:(opts.handleClass?"."+opts.handleClass:opts.handle?opts.handle:"")||types_1.gridDefaults.draggable.handle},removableOptions:{accept:opts.itemClass?"."+opts.itemClass:types_1.gridDefaults.removableOptions.accept}});el.getAttribute("gs-animate")&&(// default to true, but if set to false use that instead
defaults.animate=utils_1.Utils.toBool(el.getAttribute("gs-animate"))),this.opts=utils_1.Utils.defaults(opts,defaults),opts=null,// make sure we use this.opts instead
this._initMargin(),// part of settings defaults...
// Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)
1!==this.opts.column&&!this.opts.disableOneColumnMode&&this._widthOrContainer()<=this.opts.oneColumnSize&&(this._prevColumn=this.getColumn(),this.opts.column=1),"auto"===this.opts.rtl&&(this.opts.rtl="rtl"===el.style.direction),this.opts.rtl&&this.el.classList.add("grid-stack-rtl");
// check if we're been nested, and if so update our style and keep pointer around (used during save)
let parentGridItem=null===(_a=utils_1.Utils.closestUpByClass(this.el,types_1.gridDefaults.itemClass))||void 0===_a?void 0:_a.gridstackNode;parentGridItem&&(parentGridItem.subGrid=this,this.parentGridItem=parentGridItem,this.el.classList.add("grid-stack-nested"),parentGridItem.el.classList.add("grid-stack-sub-grid")),this._isAutoCellHeight="auto"===this.opts.cellHeight,this._isAutoCellHeight||"initial"===this.opts.cellHeight?
// make the cell content square initially (will use resize/column event to keep it square)
this.cellHeight(void 0,!1):(
// append unit if any are set
"number"==typeof this.opts.cellHeight&&this.opts.cellHeightUnit&&this.opts.cellHeightUnit!==types_1.gridDefaults.cellHeightUnit&&(this.opts.cellHeight=this.opts.cellHeight+this.opts.cellHeightUnit,delete this.opts.cellHeightUnit),this.cellHeight(this.opts.cellHeight,!1)),
// see if we need to adjust auto-hide
"mobile"===this.opts.alwaysShowResizeHandle&&(this.opts.alwaysShowResizeHandle=dd_touch_1.isTouch),this._styleSheetClass="grid-stack-instance-"+gridstack_engine_1.GridStackEngine._idSeq++,this.el.classList.add(this._styleSheetClass),this._setStaticClass();let engineClass=this.opts.engineClass||GridStack.engineClass||gridstack_engine_1.GridStackEngine;
// load any passed in children as well, which overrides any DOM layout done above
if(this.engine=new engineClass({column:this.getColumn(),float:this.opts.float,maxRow:this.opts.maxRow,onChange:cbNodes=>{let maxH=0;this.engine.nodes.forEach((n=>{maxH=Math.max(maxH,n.y+n.h)})),cbNodes.forEach((n=>{let el=n.el;el&&(n._removeDOM?(el&&el.remove(),delete n._removeDOM):this._writePosAttr(el,n))})),this._updateStyles(!1,maxH)}// false = don't recreate, just append if need be
}),this.opts.auto&&(this.batchUpdate(),// prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...
this.getGridItems().forEach((el=>this._prepareElement(el))),this.batchUpdate(!1)),this.opts.children){let children=this.opts.children;delete this.opts.children,children.length&&this.load(children)}this.setAnimation(this.opts.animate),this._updateStyles(),12!=this.opts.column&&this.el.classList.add("grid-stack-"+this.opts.column),
// legacy support to appear 'per grid` options when really global.
this.opts.dragIn&&GridStack.setupDragIn(this.opts.dragIn,this.opts.dragInOptions),delete this.opts.dragIn,delete this.opts.dragInOptions,
// dynamic grids require pausing during drag to detect over to nest vs push
this.opts.subGridDynamic&&!dd_manager_1.DDManager.pauseDrag&&(dd_manager_1.DDManager.pauseDrag=!0),void 0!==(null===(_b=this.opts.draggable)||void 0===_b?void 0:_b.pause)&&(dd_manager_1.DDManager.pauseDrag=this.opts.draggable.pause),this._setupRemoveDrop(),this._setupAcceptWidget(),this._updateWindowResizeEvent()}
/**
     * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will
     * simply return the existing instance (ignore any passed options). There is also an initAll() version that support
     * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.
     * @param options grid options (optional)
     * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)
     *
     * @example
     * let grid = GridStack.init();
     *
     * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later
     * let grid = document.querySelector('.grid-stack').gridstack;
     */static init(options={},elOrString=".grid-stack"){let el=GridStack.getGridElement(elOrString);return el?(el.gridstack||(el.gridstack=new GridStack(el,utils_1.Utils.cloneDeep(options))),el.gridstack):null}
/**
     * Will initialize a list of elements (given a selector) and return an array of grids.
     * @param options grid options (optional)
     * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)
     *
     * @example
     * let grids = GridStack.initAll();
     * grids.forEach(...)
     */static initAll(options={},selector=".grid-stack"){let grids=[];return GridStack.getGridElements(selector).forEach((el=>{el.gridstack||(el.gridstack=new GridStack(el,utils_1.Utils.cloneDeep(options)),delete options.dragIn,delete options.dragInOptions),grids.push(el.gridstack)})),grids.length,grids}
/**
     * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then
     * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from
     * JSON serialized data, including options.
     * @param parent HTML element parent to the grid
     * @param opt grids options used to initialize the grid, and list of children
     */static addGrid(parent,opt={}){if(!parent)return null;
// create the grid element, but check if the passed 'parent' already has grid styling and should be used instead
let el=parent;const parentIsGrid=parent.classList.contains("grid-stack");if(!parentIsGrid||opt.addRemoveCB)if(opt.addRemoveCB)el=opt.addRemoveCB(parent,opt,!0,!0);else{let doc=document.implementation.createHTMLDocument("");// IE needs a param
doc.body.innerHTML=`<div class="grid-stack ${opt.class||""}"></div>`,el=doc.body.children[0],parent.appendChild(el)}
// create grid class and load any children
let grid=GridStack.init(opt,el);return grid}
/** call this method to register your engine instead of the default one.
     * See instead `GridStackOptions.engineClass` if you only need to
     * replace just one instance.
     */static registerEngine(engineClass){GridStack.engineClass=engineClass}
/** @internal create placeholder DIV as needed */get placeholder(){if(!this._placeholder){let placeholderChild=document.createElement("div");// child so padding match item-content
placeholderChild.className="placeholder-content",this.opts.placeholderText&&(placeholderChild.innerHTML=this.opts.placeholderText),this._placeholder=document.createElement("div"),this._placeholder.classList.add(this.opts.placeholderClass,types_1.gridDefaults.itemClass,this.opts.itemClass),this.placeholder.appendChild(placeholderChild)}return this._placeholder}
/**
     * add a new widget and returns it.
     *
     * Widget will be always placed even if result height is more than actual grid height.
     * You need to use `willItFit()` before calling addWidget for additional check.
     * See also `makeWidget()`.
     *
     * @example
     * let grid = GridStack.init();
     * grid.addWidget({w: 3, content: 'hello'});
     * grid.addWidget('<div class="grid-stack-item"><div class="grid-stack-item-content">hello</div></div>', {w: 3});
     *
     * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add
     * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget
     */addWidget(els,options){function isGridStackWidget(w){return void 0!==w.el||void 0!==w.x||void 0!==w.y||void 0!==w.w||void 0!==w.h||void 0!==w.content}let el,node;if("string"===typeof els){let doc=document.implementation.createHTMLDocument("");// IE needs a param
doc.body.innerHTML=els,el=doc.body.children[0]}else if(0===arguments.length||1===arguments.length&&isGridStackWidget(els))if(node=options=els,null===node||void 0===node?void 0:node.el)el=node.el;// re-use element stored in the node
else if(this.opts.addRemoveCB)el=this.opts.addRemoveCB(this.el,options,!0,!1);else{let content=(null===options||void 0===options?void 0:options.content)||"",doc=document.implementation.createHTMLDocument("");// IE needs a param
doc.body.innerHTML=`<div class="grid-stack-item ${this.opts.itemClass||""}"><div class="grid-stack-item-content">${content}</div></div>`,el=doc.body.children[0]}else el=els;if(!el)return;
// Tempting to initialize the passed in opt with default and valid values, but this break knockout demos
// as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.
// So make sure we load any DOM attributes that are not specified in passed in options (which override)
let domAttr=this._readAttr(el);return options=utils_1.Utils.cloneDeep(options)||{},// make a copy before we modify in case caller re-uses it
utils_1.Utils.defaults(options,domAttr),node=this.engine.prepareNode(options),this._writeAttr(el,options),this._insertNotAppend?this.el.prepend(el):this.el.appendChild(el),
// similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id
this._prepareElement(el,!0,options),this._updateContainerHeight(),
// see if there is a sub-grid to create
node.subGrid&&this.makeSubGrid(node.el,void 0,void 0,!1),
// if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure
// we don't override the larger 12 column layout that was already saved. #1985
this._prevColumn&&1===this.opts.column&&(this._ignoreLayoutsNodeChange=!0),this._triggerAddEvent(),this._triggerChangeEvent(),delete this._ignoreLayoutsNodeChange,el}
/**
     * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them
     * from the parent's subGrid options.
     * @param el gridItem element to convert
     * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults
     * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)
     * @returns newly created grid
     */makeSubGrid(el,ops,nodeToAdd,saveContent=!0){var _a,_b,_c;let subGridTemplate,node=el.gridstackNode;if(node||(node=this.makeWidget(el).gridstackNode),null===(_a=node.subGrid)||void 0===_a?void 0:_a.el)return node.subGrid;// already done
// find the template subGrid stored on a parent as fallback...
// eslint-disable-next-line @typescript-eslint/no-this-alias
let autoColumn,grid=this;while(grid&&!subGridTemplate)subGridTemplate=null===(_b=grid.opts)||void 0===_b?void 0:_b.subGrid,grid=null===(_c=grid.parentGridItem)||void 0===_c?void 0:_c.grid;
//... and set the create options
ops=utils_1.Utils.cloneDeep(Object.assign(Object.assign(Object.assign({},subGridTemplate||{}),{children:void 0}),ops||node.subGrid)),node.subGrid=ops,"auto"===ops.column&&(autoColumn=!0,ops.column=Math.max(node.w||1,(null===nodeToAdd||void 0===nodeToAdd?void 0:nodeToAdd.w)||1),ops.disableOneColumnMode=!0);
// if we're converting an existing full item, move over the content to be the first sub item in the new grid
let newItem,newItemOpt,content=node.el.querySelector(".grid-stack-item-content");if(saveContent){if(this._removeDD(node.el),// remove D&D since it's set on content div
newItemOpt=Object.assign(Object.assign({},node),{x:0,y:0}),utils_1.Utils.removeInternalForSave(newItemOpt),delete newItemOpt.subGrid,node.content&&(newItemOpt.content=node.content,delete node.content),this.opts.addRemoveCB)newItem=this.opts.addRemoveCB(this.el,newItemOpt,!0,!1);else{let doc=document.implementation.createHTMLDocument("");// IE needs a param
doc.body.innerHTML='<div class="grid-stack-item"></div>',newItem=doc.body.children[0],newItem.appendChild(content),doc.body.innerHTML='<div class="grid-stack-item-content"></div>',content=doc.body.children[0],node.el.appendChild(content)}this._prepareDragDropByNode(node)}
// if we're adding an additional item, make the container large enough to have them both
if(nodeToAdd){let w=autoColumn?ops.column:node.w,h=node.h+nodeToAdd.h,style=node.el.style;style.transition="none",// show up instantly so we don't see scrollbar with nodeToAdd
this.update(node.el,{w:w,h:h}),setTimeout((()=>style.transition=null))}this.opts.addRemoveCB&&(ops.addRemoveCB=ops.addRemoveCB||this.opts.addRemoveCB);let subGrid=node.subGrid=GridStack.addGrid(content,ops);return(null===nodeToAdd||void 0===nodeToAdd?void 0:nodeToAdd._moving)&&(subGrid._isTemp=!0),// prevent re-nesting as we add over
autoColumn&&(subGrid._autoColumn=!0),
// add the original content back as a child of hte newly created grid
saveContent&&subGrid.addWidget(newItem,newItemOpt),
// now add any additional node
nodeToAdd&&(nodeToAdd._moving?
// create an artificial event even for the just created grid to receive this item
window.setTimeout((()=>utils_1.Utils.simulateMouseEvent(nodeToAdd._event,"mouseenter",subGrid.el)),0):subGrid.addWidget(node.el,node)),subGrid}
/**
     * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back
     * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)
     */removeAsSubGrid(nodeThatRemoved){var _a;let pGrid=null===(_a=this.parentGridItem)||void 0===_a?void 0:_a.grid;pGrid&&(pGrid.batchUpdate(),pGrid.removeWidget(this.parentGridItem.el,!0,!0),this.engine.nodes.forEach((n=>{
// migrate any children over and offsetting by our location
n.x+=this.parentGridItem.x,n.y+=this.parentGridItem.y,pGrid.addWidget(n.el,n)})),pGrid.batchUpdate(!1),this.parentGridItem&&delete this.parentGridItem.subGrid,delete this.parentGridItem,
// create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)
nodeThatRemoved&&window.setTimeout((()=>utils_1.Utils.simulateMouseEvent(nodeThatRemoved._event,"mouseenter",pGrid.el)),0))}
/**
    /**
     * saves the current layout returning a list of widgets for serialization which might include any nested grids.
     * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will
     * be removed.
     * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()
     * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.
     * @returns list of widgets or full grid option, including .children list of widgets
     */save(saveContent=!0,saveGridOpt=!1){
// return copied nodes we can modify at will...
let list=this.engine.save(saveContent);
// check for HTML content and nested grids
// check if save entire grid options (needed for recursive) + children...
if(list.forEach((n=>{var _a;if(saveContent&&n.el&&!n.subGrid){// sub-grid are saved differently, not plain content
let sub=n.el.querySelector(".grid-stack-item-content");n.content=sub?sub.innerHTML:void 0,n.content||delete n.content}else
// check for nested grid
if(saveContent||delete n.content,null===(_a=n.subGrid)||void 0===_a?void 0:_a.el){const listOrOpt=n.subGrid.save(saveContent,saveGridOpt);n.subGrid=saveGridOpt?listOrOpt:{children:listOrOpt}}delete n.el})),saveGridOpt){let o=utils_1.Utils.cloneDeep(this.opts);
// delete default values that will be recreated on launch
o.marginBottom===o.marginTop&&o.marginRight===o.marginLeft&&o.marginTop===o.marginRight&&(o.margin=o.marginTop,delete o.marginTop,delete o.marginRight,delete o.marginBottom,delete o.marginLeft),o.rtl===("rtl"===this.el.style.direction)&&(o.rtl="auto"),this._isAutoCellHeight&&(o.cellHeight="auto"),this._autoColumn&&(o.column="auto",delete o.disableOneColumnMode);const origShow=o._alwaysShowResizeHandle;return delete o._alwaysShowResizeHandle,void 0!==origShow?o.alwaysShowResizeHandle=origShow:delete o.alwaysShowResizeHandle,utils_1.Utils.removeInternalAndSame(o,types_1.gridDefaults),o.children=list,o}return list}
/**
     * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.
     *
     * @param layout list of widgets definition to update/create
     * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving
     * the user control of insertion.
     *
     * @example
     * see http://gridstackjs.com/demo/serialization.html
     **/load(layout,addRemove=this.opts.addRemoveCB||!0){let items=GridStack.Utils.sort([...layout],-1,this._prevColumn||this.getColumn());// make copy before we mod/sort
this._insertNotAppend=!0,// since create in reverse order...
// if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save
// the original wanted layout so we can scale back up correctly #1471
this._prevColumn&&this._prevColumn!==this.opts.column&&items.some((n=>n.x+n.w>this.opts.column))&&(this._ignoreLayoutsNodeChange=!0,// skip layout update
this.engine.cacheLayout(items,this._prevColumn,!0));
// if given a different callback, temporally set it as global option to creating will use it
const prevCB=this.opts.addRemoveCB;"function"===typeof addRemove&&(this.opts.addRemoveCB=addRemove);let removed=[];
// see if any items are missing from new layout and need to be removed first
if(this.batchUpdate(),addRemove){let copyNodes=[...this.engine.nodes];// don't loop through array you modify
copyNodes.forEach((n=>{let item=items.find((w=>n.id===w.id));item||(this.opts.addRemoveCB&&this.opts.addRemoveCB(this.el,n,!1,!1),removed.push(n),// batch keep track
this.removeWidget(n.el,!0,!1))}))}
// now add/update the widgets
return items.forEach((w=>{let item=w.id||0===w.id?this.engine.nodes.find((n=>n.id===w.id)):void 0;if(item){if(this.update(item.el,w),w.subGrid&&w.subGrid.children){// update any sub grid as well
let sub=item.el.querySelector(".grid-stack");sub&&sub.gridstack&&(sub.gridstack.load(w.subGrid.children),// TODO: support updating grid options ?
this._insertNotAppend=!0)}}else addRemove&&this.addWidget(w)})),this.engine.removedNodes=removed,this.batchUpdate(!1),
// after commit, clear that flag
delete this._ignoreLayoutsNodeChange,delete this._insertNotAppend,prevCB?this.opts.addRemoveCB=prevCB:delete this.opts.addRemoveCB,this}
/**
     * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)
     * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.
     */batchUpdate(flag=!0){return this.engine.batchUpdate(flag),flag||(this._triggerRemoveEvent(),this._triggerAddEvent(),this._triggerChangeEvent()),this}
/**
     * Gets current cell height.
     */getCellHeight(forcePixel=!1){if(this.opts.cellHeight&&"auto"!==this.opts.cellHeight&&(!forcePixel||!this.opts.cellHeightUnit||"px"===this.opts.cellHeightUnit))return this.opts.cellHeight;
// else get first cell height
let el=this.el.querySelector("."+this.opts.itemClass);if(el){let height=utils_1.Utils.toNumber(el.getAttribute("gs-h"));return Math.round(el.offsetHeight/height)}
// else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)
let rows=parseInt(this.el.getAttribute("gs-current-row"));return rows?Math.round(this.el.getBoundingClientRect().height/rows):this.opts.cellHeight}
/**
     * Update current cell height - see `GridStackOptions.cellHeight` for format.
     * This method rebuilds an internal CSS style sheet.
     * Note: You can expect performance issues if call this method too often.
     *
     * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),
     * if pass 0 the CSS will be generated by the application instead.
     * @param update (Optional) if false, styles will not be updated
     *
     * @example
     * grid.cellHeight(100); // same as 100px
     * grid.cellHeight('70px');
     * grid.cellHeight(grid.cellWidth() * 1.2);
     */cellHeight(val,update=!0){
// make item content be square
if(
// if not called internally, check if we're changing mode
update&&void 0!==val&&this._isAutoCellHeight!==("auto"===val)&&(this._isAutoCellHeight="auto"===val,this._updateWindowResizeEvent()),"initial"!==val&&"auto"!==val||(val=void 0),void 0===val){let marginDiff=-this.opts.marginRight-this.opts.marginLeft+this.opts.marginTop+this.opts.marginBottom;val=this.cellWidth()+marginDiff}let data=utils_1.Utils.parseHeight(val);return this.opts.cellHeightUnit===data.unit&&this.opts.cellHeight===data.h||(this.opts.cellHeightUnit=data.unit,this.opts.cellHeight=data.h,update&&this._updateStyles(!0)),this}
/** Gets current cell width. */cellWidth(){return this._widthOrContainer()/this.getColumn()}
/** return our expected width (or parent) for 1 column check */_widthOrContainer(){
// use `offsetWidth` or `clientWidth` (no scrollbar) ?
// https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively
return this.el.clientWidth||this.el.parentElement.clientWidth||window.innerWidth}
/** re-layout grid items to reclaim any empty space */compact(){return this.engine.compact(),this._triggerChangeEvent(),this}
/**
     * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,
     * as well as cache the original layout so you can revert back to previous positions without loss.
     * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],
     * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)
     * @param column - Integer > 0 (default 12).
     * @param layout specify the type of re-layout that will happen (position, size, etc...).
     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column
     */column(column,layout="moveScale"){if(column<1||this.opts.column===column)return this;let domNodes,oldColumn=this.getColumn();
// if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)
// then remember the original columns so we can restore.
return 1===column?this._prevColumn=oldColumn:delete this._prevColumn,this.el.classList.remove("grid-stack-"+oldColumn),this.el.classList.add("grid-stack-"+column),this.opts.column=this.engine.column=column,1===column&&this.opts.oneColumnModeDomSort&&(domNodes=[],this.getGridItems().forEach((el=>{el.gridstackNode&&domNodes.push(el.gridstackNode)})),domNodes.length||(domNodes=void 0)),this.engine.updateNodeWidths(oldColumn,column,domNodes,layout),this._isAutoCellHeight&&this.cellHeight(),
// and trigger our event last...
this._ignoreLayoutsNodeChange=!0,// skip layout update
this._triggerChangeEvent(),delete this._ignoreLayoutsNodeChange,this}
/**
     * get the number of columns in the grid (default 12)
     */getColumn(){return this.opts.column}
/** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */getGridItems(){return Array.from(this.el.children).filter((el=>el.matches("."+this.opts.itemClass)&&!el.matches("."+this.opts.placeholderClass)))}
/**
     * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.
     * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).
     */destroy(removeDOM=!0){if(this.el)// prevent multiple calls
return this._updateWindowResizeEvent(!0),this.setStatic(!0,!1),// permanently removes DD but don't set CSS class (we're going away)
this.setAnimation(!1),removeDOM?this.el.parentNode.removeChild(this.el):(this.removeAll(removeDOM),this.el.classList.remove(this._styleSheetClass)),this._removeStylesheet(),this.el.removeAttribute("gs-current-row"),this.parentGridItem&&delete this.parentGridItem.subGrid,delete this.parentGridItem,delete this.opts,delete this._placeholder,delete this.engine,delete this.el.gridstack,// remove circular dependency that would prevent a freeing
delete this.el,this}
/**
     * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)
     */float(val){return this.opts.float!==val&&(this.opts.float=this.engine.float=val,this._triggerChangeEvent()),this}
/**
     * get the current float mode
     */getFloat(){return this.engine.float}
/**
     * Get the position of the cell under a pixel on screen.
     * @param position the position of the pixel to resolve in
     * absolute coordinates, as an object with top and left properties
     * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).
     * Useful when grid is within `position: relative` element
     *
     * Returns an object with properties `x` and `y` i.e. the column and row in the grid.
     */getCellFromPixel(position,useDocRelative=!1){let containerPos,box=this.el.getBoundingClientRect();
// console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)
containerPos=useDocRelative?{top:box.top+document.documentElement.scrollTop,left:box.left}:{top:this.el.offsetTop,left:this.el.offsetLeft};let relativeLeft=position.left-containerPos.left,relativeTop=position.top-containerPos.top,columnWidth=box.width/this.getColumn(),rowHeight=box.height/parseInt(this.el.getAttribute("gs-current-row"));return{x:Math.floor(relativeLeft/columnWidth),y:Math.floor(relativeTop/rowHeight)}}
/** returns the current number of rows, which will be at least `minRow` if set */getRow(){return Math.max(this.engine.getRow(),this.opts.minRow)}
/**
     * Checks if specified area is empty.
     * @param x the position x.
     * @param y the position y.
     * @param w the width of to check
     * @param h the height of to check
     */isAreaEmpty(x,y,w,h){return this.engine.isAreaEmpty(x,y,w,h)}
/**
     * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.
     * If you want gridstack to add the elements for you, use `addWidget()` instead.
     * Makes the given element a widget and returns it.
     * @param els widget or single selector to convert.
     *
     * @example
     * let grid = GridStack.init();
     * grid.el.appendChild('<div id="gsi-1" gs-w="3"></div>');
     * grid.makeWidget('#gsi-1');
     */makeWidget(els){let el=GridStack.getElement(els);return this._prepareElement(el,!0),this._updateContainerHeight(),this._triggerAddEvent(),this._triggerChangeEvent(),el}
/**
     * Event handler that extracts our CustomEvent data out automatically for receiving custom
     * notifications (see doc for supported events)
     * @param name of the event (see possible values) or list of names space separated
     * @param callback function called with event and optional second/third param
     * (see README documentation for each signature).
     *
     * @example
     * grid.on('added', function(e, items) { log('added ', items)} );
     * or
     * grid.on('added removed change', function(e, items) { log(e.type, items)} );
     *
     * Note: in some cases it is the same as calling native handler and parsing the event.
     * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );
     *
     */on(name,callback){
// check for array of names being passed instead
if(-1!==name.indexOf(" ")){let names=name.split(" ");return names.forEach((name=>this.on(name,callback))),this}if("change"===name||"added"===name||"removed"===name||"enable"===name||"disable"===name){
// native CustomEvent handlers - cash the generic handlers so we can easily remove
let noData="enable"===name||"disable"===name;this._gsEventHandler[name]=noData?event=>callback(event):event=>callback(event,event.detail),this.el.addEventListener(name,this._gsEventHandler[name])}else"drag"!==name&&"dragstart"!==name&&"dragstop"!==name&&"resizestart"!==name&&"resize"!==name&&"resizestop"!==name&&"dropped"!==name||(
// drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.
// do same for start event to make it easier...
this._gsEventHandler[name]=callback);return this}
/**
     * unsubscribe from the 'on' event below
     * @param name of the event (see possible values)
     */off(name){
// check for array of names being passed instead
if(-1!==name.indexOf(" ")){let names=name.split(" ");return names.forEach((name=>this.off(name))),this}return"change"!==name&&"added"!==name&&"removed"!==name&&"enable"!==name&&"disable"!==name||
// remove native CustomEvent handlers
this._gsEventHandler[name]&&this.el.removeEventListener(name,this._gsEventHandler[name]),delete this._gsEventHandler[name],this}
/**
     * Removes widget from the grid.
     * @param el  widget or selector to modify
     * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).
     * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).
     */removeWidget(els,removeDOM=!0,triggerEvent=!0){return GridStack.getElements(els).forEach((el=>{if(el.parentElement&&el.parentElement!==this.el)return;// not our child!
let node=el.gridstackNode;
// For Meteor support: https://github.com/gridstack/gridstack.js/pull/272
node||(node=this.engine.nodes.find((n=>el===n.el))),node&&(
// remove our DOM data (circular link) and drag&drop permanently
delete el.gridstackNode,this._removeDD(el),this.engine.removeNode(node,removeDOM,triggerEvent),removeDOM&&el.parentElement&&el.remove())})),triggerEvent&&(this._triggerRemoveEvent(),this._triggerChangeEvent()),this}
/**
     * Removes all widgets from the grid.
     * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).
     */removeAll(removeDOM=!0){
// always remove our DOM data (circular link) before list gets emptied and drag&drop permanently
return this.engine.nodes.forEach((n=>{delete n.el.gridstackNode,this._removeDD(n.el)})),this.engine.removeAll(removeDOM),this._triggerRemoveEvent(),this}
/**
     * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.
     * @param doAnimate if true the grid will animate.
     */setAnimation(doAnimate){return doAnimate?this.el.classList.add("grid-stack-animate"):this.el.classList.remove("grid-stack-animate"),this}
/**
     * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.
     * Also toggle the grid-stack-static class.
     * @param val if true the grid become static.
     * @param updateClass true (default) if css class gets updated
     * @param recurse true (default) if sub-grids also get updated
     */setStatic(val,updateClass=!0,recurse=!0){return this.opts.staticGrid===val||(this.opts.staticGrid=val,this._setupRemoveDrop(),this._setupAcceptWidget(),this.engine.nodes.forEach((n=>{this._prepareDragDropByNode(n),// either delete or init Drag&drop
n.subGrid&&recurse&&n.subGrid.setStatic(val,updateClass,recurse)})),updateClass&&this._setStaticClass()),this}
/**
     * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.
     * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)
     * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.
     */update(els,opt){
// support legacy call for now ?
if(arguments.length>2){
// eslint-disable-next-line prefer-rest-params
let a=arguments,i=1;return opt={x:a[i++],y:a[i++],w:a[i++],h:a[i++]},this.update(els,opt)}return GridStack.getElements(els).forEach((el=>{if(!el||!el.gridstackNode)return;let n=el.gridstackNode,w=utils_1.Utils.cloneDeep(opt);// make a copy we can modify in case they re-use it or multiple items
delete w.autoPosition;
// move/resize widget if anything changed
let m,keys=["x","y","w","h"];
// check for content changing
if(keys.some((k=>void 0!==w[k]&&w[k]!==n[k]))&&(m={},keys.forEach((k=>{m[k]=void 0!==w[k]?w[k]:n[k],delete w[k]}))),
// for a move as well IFF there is any min/max fields set
!m&&(w.minW||w.minH||w.maxW||w.maxH)&&(m={}),w.content){let sub=el.querySelector(".grid-stack-item-content");sub&&sub.innerHTML!==w.content&&(sub.innerHTML=w.content),delete w.content}
// any remaining fields are assigned, but check for dragging changes, resize constrain
let changed=!1,ddChanged=!1;for(const key in w)"_"!==key[0]&&n[key]!==w[key]&&(n[key]=w[key],changed=!0,ddChanged=ddChanged||!this.opts.staticGrid&&("noResize"===key||"noMove"===key||"locked"===key));
// finally move the widget
m&&(this.engine.cleanNodes().beginUpdate(n).moveNode(n,m),this._updateContainerHeight(),this._triggerChangeEvent(),this.engine.endUpdate()),changed&&// move will only update x,y,w,h so update the rest too
this._writeAttr(el,n),ddChanged&&this._prepareDragDropByNode(n)})),this}
/**
     * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).
     * @param value margin value
     */margin(value){let isMultiValue="string"===typeof value&&value.split(" ").length>1;
// check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)
if(!isMultiValue){let data=utils_1.Utils.parseHeight(value);if(this.opts.marginUnit===data.unit&&this.opts.margin===data.h)return}
// re-use existing margin handling
// true = force re-create
return this.opts.margin=value,this.opts.marginTop=this.opts.marginBottom=this.opts.marginLeft=this.opts.marginRight=void 0,this._initMargin(),this._updateStyles(!0),this}
/** returns current margin number value (undefined if 4 sides don't match) */getMargin(){return this.opts.margin}
/**
     * Returns true if the height of the grid will be less than the vertical
     * constraint. Always returns true if grid doesn't have height constraint.
     * @param node contains x,y,w,h,auto-position options
     *
     * @example
     * if (grid.willItFit(newWidget)) {
     *   grid.addWidget(newWidget);
     * } else {
     *   alert('Not enough free space to place the widget');
     * }
     */willItFit(node){
// support legacy call for now
if(arguments.length>1){
// eslint-disable-next-line prefer-rest-params
let a=arguments,i=0,w={x:a[i++],y:a[i++],w:a[i++],h:a[i++],autoPosition:a[i++]};return this.willItFit(w)}return this.engine.willItFit(node)}
/** @internal */_triggerChangeEvent(){if(this.engine.batchMode)return this;let elements=this.engine.getDirtyNodes(!0);// verify they really changed
// we called, now reset initial values & dirty flags
return elements&&elements.length&&(this._ignoreLayoutsNodeChange||this.engine.layoutsNodesChange(elements),this._triggerEvent("change",elements)),this.engine.saveInitial(),this}
/** @internal */_triggerAddEvent(){return this.engine.batchMode||this.engine.addedNodes&&this.engine.addedNodes.length>0&&(this._ignoreLayoutsNodeChange||this.engine.layoutsNodesChange(this.engine.addedNodes),
// prevent added nodes from also triggering 'change' event (which is called next)
this.engine.addedNodes.forEach((n=>{delete n._dirty})),this._triggerEvent("added",this.engine.addedNodes),this.engine.addedNodes=[]),this}
/** @internal */_triggerRemoveEvent(){return this.engine.batchMode||this.engine.removedNodes&&this.engine.removedNodes.length>0&&(this._triggerEvent("removed",this.engine.removedNodes),this.engine.removedNodes=[]),this}
/** @internal */_triggerEvent(type,data){let event=data?new CustomEvent(type,{bubbles:!1,detail:data}):new Event(type);return this.el.dispatchEvent(event),this}
/** @internal called to delete the current dynamic style sheet used for our layout */_removeStylesheet(){return this._styles&&(utils_1.Utils.removeStylesheet(this._styleSheetClass),delete this._styles),this}
/** @internal updated/create the CSS styles for row based layout and initial margin setting */_updateStyles(forceUpdate=!1,maxH){
// if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??
if(
// call to delete existing one if we change cellHeight / margin
forceUpdate&&this._removeStylesheet(),maxH||(maxH=this.getRow()),this._updateContainerHeight(),0===this.opts.cellHeight)return this;let cellHeight=this.opts.cellHeight,cellHeightUnit=this.opts.cellHeightUnit,prefix=`.${this._styleSheetClass} > .${this.opts.itemClass}`;
// create one as needed
if(!this._styles){
// insert style to parent (instead of 'head' by default) to support WebComponent
let styleLocation=this.opts.styleInHead?void 0:this.el.parentNode;if(this._styles=utils_1.Utils.createStylesheet(this._styleSheetClass,styleLocation,{nonce:this.opts.nonce}),!this._styles)return this;this._styles._max=0,
// these are done once only
utils_1.Utils.addCSSRule(this._styles,prefix,`min-height: ${cellHeight}${cellHeightUnit}`);
// content margins
let top=this.opts.marginTop+this.opts.marginUnit,bottom=this.opts.marginBottom+this.opts.marginUnit,right=this.opts.marginRight+this.opts.marginUnit,left=this.opts.marginLeft+this.opts.marginUnit,content=`${prefix} > .grid-stack-item-content`,placeholder=`.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;utils_1.Utils.addCSSRule(this._styles,content,`top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`),utils_1.Utils.addCSSRule(this._styles,placeholder,`top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`),
// resize handles offset (to match margin)
utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-ne`,`right: ${right}`),utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-e`,`right: ${right}`),utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-se`,`right: ${right}; bottom: ${bottom}`),utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-nw`,`left: ${left}`),utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-w`,`left: ${left}`),utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-sw`,`left: ${left}; bottom: ${bottom}`)}
// now update the height specific fields
if(maxH=maxH||this._styles._max,maxH>this._styles._max){let getHeight=rows=>cellHeight*rows+cellHeightUnit;for(let i=this._styles._max+1;i<=maxH;i++){// start at 1
let h=getHeight(i);utils_1.Utils.addCSSRule(this._styles,`${prefix}[gs-y="${i-1}"]`,`top: ${getHeight(i-1)}`),// start at 0
utils_1.Utils.addCSSRule(this._styles,`${prefix}[gs-h="${i}"]`,`height: ${h}`),utils_1.Utils.addCSSRule(this._styles,`${prefix}[gs-min-h="${i}"]`,`min-height: ${h}`),utils_1.Utils.addCSSRule(this._styles,`${prefix}[gs-max-h="${i}"]`,`max-height: ${h}`)}this._styles._max=maxH}return this}
/** @internal */_updateContainerHeight(){if(!this.engine||this.engine.batchMode)return this;let row=this.getRow()+this._extraDragRow;// checks for minRow already
// check for css min height
// Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary
// rows as the CSS will make us bigger than our set height if needed... not sure why we had this.
// let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);
// if (cssMinHeight > 0) {
//   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));
//   if (row < minRow) {
//     row = minRow;
//   }
// }
if(this.el.setAttribute("gs-current-row",String(row)),0===row)return this.el.style.removeProperty("min-height"),this;let cellHeight=this.opts.cellHeight,unit=this.opts.cellHeightUnit;return cellHeight?(this.el.style.minHeight=row*cellHeight+unit,this):this}
/** @internal */_prepareElement(el,triggerAddEvent=!1,node){el.classList.add(this.opts.itemClass),node=node||this._readAttr(el),el.gridstackNode=node,node.el=el,node.grid=this;let copy=Object.assign({},node);return node=this.engine.addNode(node,triggerAddEvent),
// write node attr back in case there was collision or we have to fix bad values during addNode()
utils_1.Utils.same(node,copy)||this._writeAttr(el,node),this._prepareDragDropByNode(node),this}
/** @internal call to write position x,y,w,h attributes back to element */_writePosAttr(el,n){return void 0!==n.x&&null!==n.x&&el.setAttribute("gs-x",String(n.x)),void 0!==n.y&&null!==n.y&&el.setAttribute("gs-y",String(n.y)),n.w&&el.setAttribute("gs-w",String(n.w)),n.h&&el.setAttribute("gs-h",String(n.h)),this}
/** @internal call to write any default attributes back to element */_writeAttr(el,node){if(!node)return this;this._writePosAttr(el,node);let attrs/*: GridStackWidget but strings */={autoPosition:"gs-auto-position",minW:"gs-min-w",minH:"gs-min-h",maxW:"gs-max-w",maxH:"gs-max-h",noResize:"gs-no-resize",noMove:"gs-no-move",locked:"gs-locked",id:"gs-id"};for(const key in attrs)node[key]?// 0 is valid for x,y only but done above already and not in list anyway
el.setAttribute(attrs[key],String(node[key])):el.removeAttribute(attrs[key]);return this}
/** @internal call to read any default attributes from element */_readAttr(el){let node={};node.x=utils_1.Utils.toNumber(el.getAttribute("gs-x")),node.y=utils_1.Utils.toNumber(el.getAttribute("gs-y")),node.w=utils_1.Utils.toNumber(el.getAttribute("gs-w")),node.h=utils_1.Utils.toNumber(el.getAttribute("gs-h")),node.maxW=utils_1.Utils.toNumber(el.getAttribute("gs-max-w")),node.minW=utils_1.Utils.toNumber(el.getAttribute("gs-min-w")),node.maxH=utils_1.Utils.toNumber(el.getAttribute("gs-max-h")),node.minH=utils_1.Utils.toNumber(el.getAttribute("gs-min-h")),node.autoPosition=utils_1.Utils.toBool(el.getAttribute("gs-auto-position")),node.noResize=utils_1.Utils.toBool(el.getAttribute("gs-no-resize")),node.noMove=utils_1.Utils.toBool(el.getAttribute("gs-no-move")),node.locked=utils_1.Utils.toBool(el.getAttribute("gs-locked")),node.id=el.getAttribute("gs-id");
// remove any key not found (null or false which is default)
for(const key in node){if(!node.hasOwnProperty(key))return;node[key]||0===node[key]||// 0 can be valid value (x,y only really)
delete node[key]}return node}
/** @internal */_setStaticClass(){let classes=["grid-stack-static"];return this.opts.staticGrid?(this.el.classList.add(...classes),this.el.setAttribute("gs-static","true")):(this.el.classList.remove(...classes),this.el.removeAttribute("gs-static")),this}
/**
     * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off
     * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)
     */onParentResize(){if(!this.el||!this.el.clientWidth)return;// return if we're gone or no size yet (will get called again)
let changedColumn=!1;
// see if we're nested and take our column count from our parent....
if(this._autoColumn&&this.parentGridItem)this.opts.column!==this.parentGridItem.w&&(changedColumn=!0,this.column(this.parentGridItem.w,"none"));else{
// else check for 1 column in/out behavior
let oneColumn=!this.opts.disableOneColumnMode&&this.el.clientWidth<=this.opts.oneColumnSize;1===this.opts.column!==oneColumn&&(changedColumn=!0,this.opts.animate&&this.setAnimation(!1),// 1 <-> 12 is too radical, turn off animation
this.column(oneColumn?1:this._prevColumn),this.opts.animate&&this.setAnimation(!0))}
// make the cells content square again
return this._isAutoCellHeight&&(!changedColumn&&this.opts.cellHeightThrottle?(this._cellHeightThrottle||(this._cellHeightThrottle=utils_1.Utils.throttle((()=>this.cellHeight()),this.opts.cellHeightThrottle)),this._cellHeightThrottle()):
// immediate update if we've changed column count or have no threshold
this.cellHeight()),
// finally update any nested grids
this.engine.nodes.forEach((n=>{n.subGrid&&n.subGrid.onParentResize()})),this}
/** add or remove the window size event handler */_updateWindowResizeEvent(forceRemove=!1){
// only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)
const workTodo=(this._isAutoCellHeight||!this.opts.disableOneColumnMode)&&!this.parentGridItem;return forceRemove||!workTodo||this._windowResizeBind?!forceRemove&&workTodo||!this._windowResizeBind||(window.removeEventListener("resize",this._windowResizeBind),delete this._windowResizeBind):(this._windowResizeBind=this.onParentResize.bind(this),// so we can properly remove later
window.addEventListener("resize",this._windowResizeBind)),this}
/** @internal convert a potential selector into actual element */static getElement(els=".grid-stack-item"){return utils_1.Utils.getElement(els)}
/** @internal */static getElements(els=".grid-stack-item"){return utils_1.Utils.getElements(els)}
/** @internal */static getGridElement(els){return GridStack.getElement(els)}
/** @internal */static getGridElements(els){return utils_1.Utils.getElements(els)}
/** @internal initialize margin top/bottom/left/right and units */_initMargin(){let data,margin=0,margins=[];return"string"===typeof this.opts.margin&&(margins=this.opts.margin.split(" ")),2===margins.length?(// top/bot, left/right like CSS
this.opts.marginTop=this.opts.marginBottom=margins[0],this.opts.marginLeft=this.opts.marginRight=margins[1]):4===margins.length?(// Clockwise like CSS
this.opts.marginTop=margins[0],this.opts.marginRight=margins[1],this.opts.marginBottom=margins[2],this.opts.marginLeft=margins[3]):(data=utils_1.Utils.parseHeight(this.opts.margin),this.opts.marginUnit=data.unit,margin=this.opts.margin=data.h),
// see if top/bottom/left/right need to be set as well
void 0===this.opts.marginTop?this.opts.marginTop=margin:(data=utils_1.Utils.parseHeight(this.opts.marginTop),this.opts.marginTop=data.h,delete this.opts.margin),void 0===this.opts.marginBottom?this.opts.marginBottom=margin:(data=utils_1.Utils.parseHeight(this.opts.marginBottom),this.opts.marginBottom=data.h,delete this.opts.margin),void 0===this.opts.marginRight?this.opts.marginRight=margin:(data=utils_1.Utils.parseHeight(this.opts.marginRight),this.opts.marginRight=data.h,delete this.opts.margin),void 0===this.opts.marginLeft?this.opts.marginLeft=margin:(data=utils_1.Utils.parseHeight(this.opts.marginLeft),this.opts.marginLeft=data.h,delete this.opts.margin),this.opts.marginUnit=data.unit,// in case side were spelled out, use those units instead...
this.opts.marginTop===this.opts.marginBottom&&this.opts.marginLeft===this.opts.marginRight&&this.opts.marginTop===this.opts.marginRight&&(this.opts.margin=this.opts.marginTop),this}
/* ===========================================================================================
     * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts
     * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039
     * ===========================================================================================
     */
/** get the global (but static to this code) DD implementation */static getDD(){return dd}
/**
     * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.
     * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar
     * is dynamically create and needs to be set later.
     * @param dragIn string selector (ex: '.sidebar .grid-stack-item')
     * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}
     **/static setupDragIn(dragIn,dragInOptions){void 0!==(null===dragInOptions||void 0===dragInOptions?void 0:dragInOptions.pause)&&(dd_manager_1.DDManager.pauseDrag=dragInOptions.pause),"string"===typeof dragIn&&(dragInOptions=Object.assign(Object.assign({},types_1.dragInDefaultOptions),dragInOptions||{}),utils_1.Utils.getElements(dragIn).forEach((el=>{dd.isDraggable(el)||dd.dragIn(el,dragInOptions)})))}
/**
     * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.
     * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.
     * @param els widget or selector to modify.
     * @param val if true widget will be draggable.
     */movable(els,val){return this.opts.staticGrid||// can't move a static grid!
GridStack.getElements(els).forEach((el=>{let node=el.gridstackNode;node&&(val?delete node.noMove:node.noMove=!0,this._prepareDragDropByNode(node))}// init DD if need be, and adjust
)),this}
/**
     * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.
     * @param els  widget or selector to modify
     * @param val  if true widget will be resizable.
     */resizable(els,val){return this.opts.staticGrid||// can't resize a static grid!
GridStack.getElements(els).forEach((el=>{let node=el.gridstackNode;node&&(val?delete node.noResize:node.noResize=!0,this._prepareDragDropByNode(node))}// init DD if need be, and adjust
)),this}
/**
     * Temporarily disables widgets moving/resizing.
     * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.
     * Note: no-op for static grid
     * This is a shortcut for:
     * @example
     *  grid.enableMove(false);
     *  grid.enableResize(false);
     * @param recurse true (default) if sub-grids also get updated
     */disable(recurse=!0){if(!this.opts.staticGrid)return this.enableMove(!1,recurse),this.enableResize(!1,recurse),// @ts-ignore
this._triggerEvent("disable"),this}
/**
     * Re-enables widgets moving/resizing - see disable().
     * Note: no-op for static grid.
     * This is a shortcut for:
     * @example
     *  grid.enableMove(true);
     *  grid.enableResize(true);
     * @param recurse true (default) if sub-grids also get updated
     */enable(recurse=!0){if(!this.opts.staticGrid)return this.enableMove(!0,recurse),this.enableResize(!0,recurse),// @ts-ignore
this._triggerEvent("enable"),this}
/**
     * Enables/disables widget moving. No-op for static grids.
     * @param recurse true (default) if sub-grids also get updated
     */enableMove(doEnable,recurse=!0){return this.opts.staticGrid||(// can't move a static grid!
this.opts.disableDrag=!doEnable,// FIRST before we update children as grid overrides #1658
this.engine.nodes.forEach((n=>{this.movable(n.el,doEnable),n.subGrid&&recurse&&n.subGrid.enableMove(doEnable,recurse)}))),this}
/**
     * Enables/disables widget resizing. No-op for static grids.
     * @param recurse true (default) if sub-grids also get updated
     */enableResize(doEnable,recurse=!0){return this.opts.staticGrid||(// can't size a static grid!
this.opts.disableResize=!doEnable,// FIRST before we update children as grid overrides #1658
this.engine.nodes.forEach((n=>{this.resizable(n.el,doEnable),n.subGrid&&recurse&&n.subGrid.enableResize(doEnable,recurse)}))),this}
/** @internal removes any drag&drop present (called during destroy) */_removeDD(el){return dd.draggable(el,"destroy").resizable(el,"destroy"),el.gridstackNode&&delete el.gridstackNode._initDD,delete el.ddElement,this}
/** @internal called to add drag over to support widgets being added externally */_setupAcceptWidget(){
// check if we need to disable things
if(this.opts.staticGrid||!this.opts.acceptWidgets&&!this.opts.removable)return dd.droppable(this.el,"destroy"),this;
// vars shared across all methods
let cellHeight,cellWidth,onDrag=(event,el,helper)=>{let node=el.gridstackNode;if(!node)return;helper=helper||el;let parent=this.el.getBoundingClientRect(),{top:top,left:left}=helper.getBoundingClientRect();left-=parent.left,top-=parent.top;let ui={position:{top:top,left:left}};if(node._temporaryRemoved){
// don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere
if(node.x=Math.max(0,Math.round(left/cellWidth)),node.y=Math.max(0,Math.round(top/cellHeight)),delete node.autoPosition,this.engine.nodeBoundFix(node),!this.engine.willItFit(node)){// ignore x,y and try for any slot...
if(node.autoPosition=!0,!this.engine.willItFit(node))// stop calling us
return void dd.off(el,"drag");// full grid or can't grow
node._willFitPos&&(
// use the auto position instead #1687
utils_1.Utils.copyPos(node,node._willFitPos),delete node._willFitPos)}
// re-use the existing node dragging method
this._onStartMoving(helper,event,ui,node,cellWidth,cellHeight)}else
// re-use the existing node dragging that does so much of the collision detection
this._dragOrResize(helper,event,ui,node,cellWidth,cellHeight)};return dd.droppable(this.el,{accept:el=>{let node=el.gridstackNode;
// set accept drop to true on ourself (which we ignore) so we don't get "can't drop" icon in HTML5 mode while moving
if((null===node||void 0===node?void 0:node.grid)===this)return!0;if(!this.opts.acceptWidgets)return!1;
// check for accept method or class matching
let canAccept=!0;if("function"===typeof this.opts.acceptWidgets)canAccept=this.opts.acceptWidgets(el);else{let selector=!0===this.opts.acceptWidgets?".grid-stack-item":this.opts.acceptWidgets;canAccept=el.matches(selector)}
// finally check to make sure we actually have space left #1571
if(canAccept&&node&&this.opts.maxRow){let n={w:node.w,h:node.h,minW:node.minW,minH:node.minH};// only width/height matters and autoPosition
canAccept=this.engine.willItFit(n)}return canAccept}})
/**
             * entering our grid area
             */.on(this.el,"dropover",((event,el,helper)=>{
// console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST
let node=el.gridstackNode;
// ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item
if((null===node||void 0===node?void 0:node.grid)===this&&!node._temporaryRemoved)
// delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)
return!1;// prevent parent from receiving msg (which may be a grid as well)
// fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now
if((null===node||void 0===node?void 0:node.grid)&&node.grid!==this&&!node._temporaryRemoved){
// console.log('dropover without leave'); // TEST
let otherGrid=node.grid;otherGrid._leave(el,helper)}
// cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...
cellWidth=this.cellWidth(),cellHeight=this.getCellHeight(!0),
// load any element attributes if we don't have a node
node||(// @ts-ignore private read only on ourself
node=this._readAttr(el)),node.grid||(node._isExternal=!0,el.gridstackNode=node),
// calculate the grid size based on element outer size
helper=helper||el;let w=node.w||Math.round(helper.offsetWidth/cellWidth)||1,h=node.h||Math.round(helper.offsetHeight/cellHeight)||1;
// if the item came from another grid, make a copy and save the original info in case we go back there
return node.grid&&node.grid!==this?(
// copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific
// console.log('dropover cloning node'); // TEST
el._gridstackNodeOrig||(el._gridstackNodeOrig=node),// shouldn't have multiple nested!
el.gridstackNode=node=Object.assign(Object.assign({},node),{w:w,h:h,grid:this}),this.engine.cleanupNode(node).nodeBoundFix(node),
// restore some internal fields we need after clearing them all
node._initDD=node._isExternal=// DOM needs to be re-parented on a drop
node._temporaryRemoved=!0):(node.w=w,node.h=h,node._temporaryRemoved=!0),
// clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)
this._itemRemoving(node.el,!1),dd.on(el,"drag",onDrag),
// make sure this is called at least once when going fast #1578
onDrag(event,el,helper),!1;// prevent parent from receiving msg (which may be a grid as well)
}))
/**
             * Leaving our grid area...
             */.on(this.el,"dropout",((event,el,helper)=>{
// console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST
let node=el.gridstackNode;return!!node&&(
// fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)
// so skip this one if we're not the active grid really..
node.grid&&node.grid!==this||(this._leave(el,helper),
// if we were created as temporary nested grid, go back to before state
this._isTemp&&this.removeAsSubGrid(node)),!1)}// prevent parent from receiving msg (which may be grid as well)
))
/**
             * end - releasing the mouse
             */.on(this.el,"drop",((event,el,helper)=>{var _a,_b;let node=el.gridstackNode;
// ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead
if((null===node||void 0===node?void 0:node.grid)===this&&!node._isExternal)return!1;let wasAdded=!!this.placeholder.parentElement;// skip items not actually added to us because of constrains, but do cleanup #1419
this.placeholder.remove();
// notify previous grid of removal
// console.log('drop delete _gridstackNodeOrig') // TEST
let origNode=el._gridstackNodeOrig;if(delete el._gridstackNodeOrig,wasAdded&&(null===origNode||void 0===origNode?void 0:origNode.grid)&&origNode.grid!==this){let oGrid=origNode.grid;oGrid.engine.removedNodes.push(origNode),oGrid._triggerRemoveEvent()._triggerChangeEvent(),
// if it's an empty sub-grid that got auto-created, nuke it
oGrid.parentGridItem&&!oGrid.engine.nodes.length&&oGrid.opts.subGridDynamic&&oGrid.removeAsSubGrid()}if(!node)return!1;
// use existing placeholder node as it's already in our list with drop location
if(wasAdded&&(this.engine.cleanupNode(node),// removes all internal _xyz values
node.grid=this),dd.off(el,"drag"),
// if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)
// as the helper will be nuked by jquery-ui otherwise. TODO: update old code path
helper!==el?(helper.remove(),el.gridstackNode=origNode,// original item (left behind) is re-stored to pre dragging as the node now has drop info
wasAdded&&(el=el.cloneNode(!0))):(el.remove(),// reduce flicker as we change depth here, and size further down
this._removeDD(el)),!wasAdded)return!1;el.gridstackNode=node,node.el=el;let subGrid=null===(_b=null===(_a=node.subGrid)||void 0===_a?void 0:_a.el)||void 0===_b?void 0:_b.gridstack;// set when actual sub-grid present
// @ts-ignore
return utils_1.Utils.copyPos(node,this._readAttr(this.placeholder)),// placeholder values as moving VERY fast can throw things off #1578
utils_1.Utils.removePositioningStyles(el),// @ts-ignore
this._writeAttr(el,node),el.classList.add(types_1.gridDefaults.itemClass,this.opts.itemClass),this.el.appendChild(el),// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)
subGrid&&(subGrid.parentGridItem=node,subGrid.opts.styleInHead||subGrid._updateStyles(!0)),this._updateContainerHeight(),this.engine.addedNodes.push(node),// @ts-ignore
this._triggerAddEvent(),// @ts-ignore
this._triggerChangeEvent(),this.engine.endUpdate(),this._gsEventHandler["dropped"]&&this._gsEventHandler["dropped"](Object.assign(Object.assign({},event),{type:"dropped"}),origNode&&origNode.grid?origNode:void 0,node),
// wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up
window.setTimeout((()=>{
// IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())
node.el&&node.el.parentElement?this._prepareDragDropByNode(node):this.engine.removeNode(node),delete node.grid._isTemp})),!1;// prevent parent from receiving msg (which may be grid as well)
})),this}
/** @internal mark item for removal */_itemRemoving(el,remove){let node=el?el.gridstackNode:void 0;node&&node.grid&&(remove?node._isAboutToRemove=!0:delete node._isAboutToRemove,remove?el.classList.add("grid-stack-item-removing"):el.classList.remove("grid-stack-item-removing"))}
/** @internal called to setup a trash drop zone if the user specifies it */_setupRemoveDrop(){if(!this.opts.staticGrid&&"string"===typeof this.opts.removable){let trashEl=document.querySelector(this.opts.removable);if(!trashEl)return this;
// only register ONE drop-over/dropout callback for the 'trash', and it will
// update the passed in item and parent grid because the 'trash' is a shared resource anyway,
// and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)
dd.isDroppable(trashEl)||dd.droppable(trashEl,this.opts.removableOptions).on(trashEl,"dropover",((event,el)=>this._itemRemoving(el,!0))).on(trashEl,"dropout",((event,el)=>this._itemRemoving(el,!1)))}return this}
/** @internal prepares the element for drag&drop **/_prepareDragDropByNode(node){let el=node.el;const noMove=node.noMove||this.opts.disableDrag,noResize=node.noResize||this.opts.disableResize;
// check for disabled grid first
if(this.opts.staticGrid||noMove&&noResize)// add styles one might depend on #1435
return node._initDD&&(this._removeDD(el),// nukes everything instead of just disable, will add some styles back next
delete node._initDD),el.classList.add("ui-draggable-disabled","ui-resizable-disabled"),this;if(!node._initDD){
// variables used/cashed between the 3 start/move/end methods, in addition to node passed above
let cellWidth,cellHeight,onStartMoving=(event,ui)=>{
// trigger any 'dragstart' / 'resizestart' manually
this._gsEventHandler[event.type]&&this._gsEventHandler[event.type](event,event.target),cellWidth=this.cellWidth(),cellHeight=this.getCellHeight(!0),// force pixels for calculations
this._onStartMoving(el,event,ui,node,cellWidth,cellHeight)},dragOrResize=(event,ui)=>{this._dragOrResize(el,event,ui,node,cellWidth,cellHeight)},onEndMoving=event=>{this.placeholder.remove(),delete node._moving,delete node._event,delete node._lastTried;
// if the item has moved to another grid, we're done here
let target=event.target;if(target.gridstackNode&&target.gridstackNode.grid===this){if(node.el=target,node._isAboutToRemove){let gridToNotify=el.gridstackNode.grid;gridToNotify._gsEventHandler[event.type]&&gridToNotify._gsEventHandler[event.type](event,target),this._removeDD(el),gridToNotify.engine.removedNodes.push(node),gridToNotify._triggerRemoveEvent(),
// break circular links and remove DOM
delete el.gridstackNode,delete node.el,el.remove()}else utils_1.Utils.removePositioningStyles(target),node._temporaryRemoved?(
// got removed - restore item back to before dragging position
utils_1.Utils.copyPos(node,node._orig),// @ts-ignore
this._writePosAttr(target,node),this.engine.addNode(node)):
// move to new placeholder location
this._writePosAttr(target,node),this._gsEventHandler[event.type]&&this._gsEventHandler[event.type](event,target);
// @ts-ignore
this._extraDragRow=0,// @ts-ignore
this._updateContainerHeight(),// @ts-ignore
this._triggerChangeEvent(),this.engine.endUpdate()}};dd.draggable(el,{start:onStartMoving,stop:onEndMoving,drag:dragOrResize}).resizable(el,{start:onStartMoving,stop:onEndMoving,resize:dragOrResize}),node._initDD=!0}
// finally fine tune move vs resize by disabling any part...
return dd.draggable(el,noMove?"disable":"enable").resizable(el,noResize?"disable":"enable"),this}
/** @internal handles actual drag/resize start **/_onStartMoving(el,event,ui,node,cellWidth,cellHeight){this.engine.cleanNodes().beginUpdate(node),
// @ts-ignore
this._writePosAttr(this.placeholder,node),this.el.appendChild(this.placeholder),
// console.log('_onStartMoving placeholder') // TEST
node.el=this.placeholder,node._lastUiPosition=ui.position,node._prevYPix=ui.position.top,node._moving="dragstart"===event.type,// 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)
delete node._lastTried,"dropover"===event.type&&node._temporaryRemoved&&(
// console.log('engine.addNode x=' + node.x); // TEST
this.engine.addNode(node),// will add, fix collisions, update attr and clear _temporaryRemoved
node._moving=!0),
// set the min/max resize info
this.engine.cacheRects(cellWidth,cellHeight,this.opts.marginTop,this.opts.marginRight,this.opts.marginBottom,this.opts.marginLeft),"resizestart"===event.type&&(dd.resizable(el,"option","minWidth",cellWidth*(node.minW||1)).resizable(el,"option","minHeight",cellHeight*(node.minH||1)),node.maxW&&dd.resizable(el,"option","maxWidth",cellWidth*node.maxW),node.maxH&&dd.resizable(el,"option","maxHeight",cellHeight*node.maxH))}
/** @internal handles actual drag/resize **/_dragOrResize(el,event,ui,node,cellWidth,cellHeight){let resizing,p=Object.assign({},node._orig),mLeft=this.opts.marginLeft,mRight=this.opts.marginRight,mTop=this.opts.marginTop,mBottom=this.opts.marginBottom,mHeight=Math.round(.1*cellHeight),mWidth=Math.round(.1*cellWidth);// could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)
if(mLeft=Math.min(mLeft,mWidth),mRight=Math.min(mRight,mWidth),mTop=Math.min(mTop,mHeight),mBottom=Math.min(mBottom,mHeight),"drag"===event.type){if(node._temporaryRemoved)return;// handled by dropover
let distance=ui.position.top-node._prevYPix;node._prevYPix=ui.position.top,!1!==this.opts.draggable.scroll&&utils_1.Utils.updateScrollPosition(el,ui.position,distance);
// get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)
let left=ui.position.left+(ui.position.left>node._lastUiPosition.left?-mRight:mLeft),top=ui.position.top+(ui.position.top>node._lastUiPosition.top?-mBottom:mTop);p.x=Math.round(left/cellWidth),p.y=Math.round(top/cellHeight);
// @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others
let prev=this._extraDragRow;if(this.engine.collide(node,p)){let row=this.getRow(),extra=Math.max(0,p.y+node.h-row);this.opts.maxRow&&row+extra>this.opts.maxRow&&(extra=Math.max(0,this.opts.maxRow-row)),// @ts-ignore
this._extraDragRow=extra}else this._extraDragRow=0;// @ts-ignore
if(this._extraDragRow!==prev&&this._updateContainerHeight(),node.x===p.x&&node.y===p.y)return;// skip same
// DON'T skip one we tried as we might have failed because of coverage <50% before
// if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;
}else if("resize"===event.type){if(p.x<0)return;
// Scrolling page if needed
if(utils_1.Utils.updateScrollResize(event,el,cellHeight),
// get new size
p.w=Math.round((ui.size.width-mLeft)/cellWidth),p.h=Math.round((ui.size.height-mTop)/cellHeight),node.w===p.w&&node.h===p.h)return;if(node._lastTried&&node._lastTried.w===p.w&&node._lastTried.h===p.h)return;// skip one we tried (but failed)
// if we size on left/top side this might move us, so get possible new position as well
let left=ui.position.left+mLeft,top=ui.position.top+mTop;p.x=Math.round(left/cellWidth),p.y=Math.round(top/cellHeight),resizing=!0}node._event=event,node._lastTried=p;// set as last tried (will nuke if we go there)
let rect={x:ui.position.left+mLeft,y:ui.position.top+mTop,w:(ui.size?ui.size.width:node.w*cellWidth)-mLeft-mRight,h:(ui.size?ui.size.height:node.h*cellHeight)-mTop-mBottom};if(this.engine.moveNodeCheck(node,Object.assign(Object.assign({},p),{cellWidth:cellWidth,cellHeight:cellHeight,rect:rect,resizing:resizing}))){node._lastUiPosition=ui.position,this.engine.cacheRects(cellWidth,cellHeight,mTop,mRight,mBottom,mLeft),delete node._skipDown,resizing&&node.subGrid&&node.subGrid.onParentResize(),// @ts-ignore
this._extraDragRow=0,// @ts-ignore
this._updateContainerHeight();let target=event.target;// @ts-ignore
this._writePosAttr(target,node),this._gsEventHandler[event.type]&&this._gsEventHandler[event.type](event,target)}}
/** @internal called when item leaving our area by either cursor dropout event
     * or shape is outside our boundaries. remove it from us, and mark temporary if this was
     * our item to start with else restore prev node values from prev grid it came from.
     **/_leave(el,helper){let node=el.gridstackNode;node&&(dd.off(el,"drag"),// no need to track while being outside
// this gets called when cursor leaves and shape is outside, so only do this once
node._temporaryRemoved||(node._temporaryRemoved=!0,this.engine.removeNode(node),// remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue
node.el=node._isExternal&&helper?helper:el,// point back to real item being dragged
!0===this.opts.removable&&// boolean vs a class string
// item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so
this._itemRemoving(el,!0),
// finally if item originally came from another grid, but left us, restore things back to prev info
el._gridstackNodeOrig?(
// console.log('leave delete _gridstackNodeOrig') // TEST
el.gridstackNode=el._gridstackNodeOrig,delete el._gridstackNodeOrig):node._isExternal&&(
// item came from outside (like a toolbar) so nuke any node info
delete node.el,delete el.gridstackNode,
// and restore all nodes back to original
this.engine.restoreInitial())))}
// legacy method removed
commit(){return utils_1.obsolete(this,this.batchUpdate(!1),"commit","batchUpdate","5.2"),this}}exports.GridStack=GridStack,
/** scoping so users can call GridStack.Utils.sort() for example */
GridStack.Utils=utils_1.Utils,
/** scoping so users can call new GridStack.Engine(12) for example */
GridStack.Engine=gridstack_engine_1.GridStackEngine,GridStack.GDRev="7.3.0"},
/***/327817:
/***/function(__unused_webpack_module,exports){"use strict";
/**
 * types.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.dragInDefaultOptions=exports.gridDefaults=void 0,
// default values for grid options - used during init and when saving out
exports.gridDefaults={alwaysShowResizeHandle:"mobile",animate:!0,auto:!0,cellHeight:"auto",cellHeightThrottle:100,cellHeightUnit:"px",column:12,draggable:{handle:".grid-stack-item-content",appendTo:"body",scroll:!0},handle:".grid-stack-item-content",itemClass:"grid-stack-item",margin:10,marginUnit:"px",maxRow:0,minRow:0,oneColumnSize:768,placeholderClass:"grid-stack-placeholder",placeholderText:"",removableOptions:{accept:".grid-stack-item"},resizable:{handles:"se"},rtl:"auto"},
/** default dragIn options */
exports.dragInDefaultOptions={handle:".grid-stack-item-content",appendTo:"body"}},
/***/985395:
/***/function(__unused_webpack_module,exports){"use strict";
/**
 * utils.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */
/** checks for obsolete method names */
// eslint-disable-next-line
function obsolete(self,f,oldName,newName,rev){let wrapper=(...args)=>f.apply(self,args);return wrapper.prototype=f.prototype,wrapper}
/** checks for obsolete grid options (can be used for any fields, but msg is about options) */
function obsoleteOpts(opts,oldName,newName,rev){void 0!==opts[oldName]&&(opts[newName]=opts[oldName])}
/** checks for obsolete grid options which are gone */
function obsoleteOptsDel(opts,oldName,rev,info){opts[oldName]}
/** checks for obsolete Jquery element attributes */
function obsoleteAttr(el,oldName,newName,rev){let oldAttr=el.getAttribute(oldName);null!==oldAttr&&el.setAttribute(newName,oldAttr)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.Utils=exports.obsoleteAttr=exports.obsoleteOptsDel=exports.obsoleteOpts=exports.obsolete=void 0,exports.obsolete=obsolete,exports.obsoleteOpts=obsoleteOpts,exports.obsoleteOptsDel=obsoleteOptsDel,exports.obsoleteAttr=obsoleteAttr;
/**
 * Utility methods
 */
class Utils{
/** convert a potential selector into actual list of html elements */
static getElements(els){if("string"===typeof els){let list=document.querySelectorAll(els);return list.length||"."===els[0]||"#"===els[0]||(list=document.querySelectorAll("."+els),list.length||(list=document.querySelectorAll("#"+els))),Array.from(list)}return[els]}
/** convert a potential selector into actual single element */static getElement(els){if("string"===typeof els){if(!els.length)return null;if("#"===els[0])return document.getElementById(els.substring(1));if("."===els[0]||"["===els[0])return document.querySelector(els);
// if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS
if(!isNaN(+els[0]))// start with digit
return document.getElementById(els);
// finally try string, then id then class
let el=document.querySelector(els);return el||(el=document.getElementById(els)),el||(el=document.querySelector("."+els)),el}return els}
/** returns true if a and b overlap */static isIntercepted(a,b){return!(a.y>=b.y+b.h||a.y+a.h<=b.y||a.x+a.w<=b.x||a.x>=b.x+b.w)}
/** returns true if a and b touch edges or corners */static isTouching(a,b){return Utils.isIntercepted(a,{x:b.x-.5,y:b.y-.5,w:b.w+1,h:b.h+1})}
/** returns the area a and b overlap */static areaIntercept(a,b){let x0=a.x>b.x?a.x:b.x,x1=a.x+a.w<b.x+b.w?a.x+a.w:b.x+b.w;if(x1<=x0)return 0;// no overlap
let y0=a.y>b.y?a.y:b.y,y1=a.y+a.h<b.y+b.h?a.y+a.h:b.y+b.h;return y1<=y0?0:(x1-x0)*(y1-y0);// no overlap
}
/** returns the area */static area(a){return a.w*a.h}
/**
     * Sorts array of nodes
     * @param nodes array to sort
     * @param dir 1 for asc, -1 for desc (optional)
     * @param width width of the grid. If undefined the width will be calculated automatically (optional).
     **/static sort(nodes,dir,column){return column=column||nodes.reduce(((col,n)=>Math.max(n.x+n.w,col)),0)||12,-1===dir?nodes.sort(((a,b)=>b.x+b.y*column-(a.x+a.y*column))):nodes.sort(((b,a)=>b.x+b.y*column-(a.x+a.y*column)))}
/**
     * creates a style sheet with style id under given parent
     * @param id will set the 'gs-style-id' attribute to that id
     * @param parent to insert the stylesheet as first child,
     * if none supplied it will be appended to the document head instead.
     */static createStylesheet(id,parent,options){let style=document.createElement("style");const nonce=null===options||void 0===options?void 0:options.nonce;return nonce&&(style.nonce=nonce),style.setAttribute("type","text/css"),style.setAttribute("gs-style-id",id),
// eslint-disable-next-line @typescript-eslint/no-explicit-any
style.styleSheet?// TODO: only CSSImportRule have that and different beast ??
// eslint-disable-next-line @typescript-eslint/no-explicit-any
style.styleSheet.cssText="":style.appendChild(document.createTextNode("")),parent?parent.insertBefore(style,parent.firstChild):(
// default to head
parent=document.getElementsByTagName("head")[0],parent.appendChild(style)),style.sheet}
/** removed the given stylesheet id */static removeStylesheet(id){let el=document.querySelector("STYLE[gs-style-id="+id+"]");el&&el.parentNode&&el.remove()}
/** inserts a CSS rule */static addCSSRule(sheet,selector,rules){"function"===typeof sheet.addRule?sheet.addRule(selector,rules):"function"===typeof sheet.insertRule&&sheet.insertRule(`${selector}{${rules}}`)}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
static toBool(v){return"boolean"===typeof v?v:"string"===typeof v?(v=v.toLowerCase(),!(""===v||"no"===v||"false"===v||"0"===v)):Boolean(v)}static toNumber(value){return null===value||0===value.length?void 0:Number(value)}static parseHeight(val){let h,unit="px";if("string"===typeof val){let match=val.match(/^(-[0-9]+\.[0-9]+|[0-9]*\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);if(!match)throw new Error("Invalid height");unit=match[2]||"px",h=parseFloat(match[1])}else h=val;return{h:h,unit:unit}}
/** copies unset fields in target to use the given default sources values */
// eslint-disable-next-line
static defaults(target,...sources){return sources.forEach((source=>{for(const key in source){if(!source.hasOwnProperty(key))return;null===target[key]||void 0===target[key]?target[key]=source[key]:"object"===typeof source[key]&&"object"===typeof target[key]&&
// property is an object, recursively add it's field over... #1373
this.defaults(target[key],source[key])}})),target}
/** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */static same(a,b){if("object"!==typeof a)return a==b;if(typeof a!==typeof b)return!1;
// else we have object, check just 1 level deep for being same things...
if(Object.keys(a).length!==Object.keys(b).length)return!1;for(const key in a)if(a[key]!==b[key])return!1;return!0}
/** copies over b size & position (GridStackPosition), and optionally min/max as well */static copyPos(a,b,doMinMax=!1){return a.x=b.x,a.y=b.y,a.w=b.w,a.h=b.h,doMinMax&&(b.minW&&(a.minW=b.minW),b.minH&&(a.minH=b.minH),b.maxW&&(a.maxW=b.maxW),b.maxH&&(a.maxH=b.maxH)),a}
/** true if a and b has same size & position */static samePos(a,b){return a&&b&&a.x===b.x&&a.y===b.y&&a.w===b.w&&a.h===b.h}
/** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */static removeInternalAndSame(a,b){if("object"===typeof a&&"object"===typeof b)for(let key in a){let val=a[key];if("_"===key[0]||val===b[key])delete a[key];else if(val&&"object"===typeof val&&void 0!==b[key]){for(let i in val)val[i]!==b[key][i]&&"_"!==i[0]||delete val[i];Object.keys(val).length||delete a[key]}}}
/** removes internal fields '_' and default values for saving */static removeInternalForSave(n,removeEl=!0){for(let key in n)"_"!==key[0]&&null!==n[key]&&void 0!==n[key]||delete n[key];delete n.grid,removeEl&&delete n.el,
// delete default values (will be re-created on read)
n.autoPosition||delete n.autoPosition,n.noResize||delete n.noResize,n.noMove||delete n.noMove,n.locked||delete n.locked,1!==n.w&&n.w!==n.minW||delete n.w,1!==n.h&&n.h!==n.minH||delete n.h}
/** return the closest parent (or itself) matching the given class */static closestUpByClass(el,name){while(el){if(el.classList.contains(name))return el;el=el.parentElement}return null}
/** delay calling the given function for given delay, preventing new calls from happening while waiting */static throttle(func,delay){let isWaiting=!1;return(...args)=>{isWaiting||(isWaiting=!0,setTimeout((()=>{func(...args),isWaiting=!1}),delay))}}static removePositioningStyles(el){let style=el.style;style.position&&style.removeProperty("position"),style.left&&style.removeProperty("left"),style.top&&style.removeProperty("top"),style.width&&style.removeProperty("width"),style.height&&style.removeProperty("height")}
/** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */static getScrollElement(el){if(!el)return document.scrollingElement||document.documentElement;// IE support
const style=getComputedStyle(el),overflowRegex=/(auto|scroll)/;return overflowRegex.test(style.overflow+style.overflowY)?el:this.getScrollElement(el.parentElement)}
/** @internal */static updateScrollPosition(el,position,distance){
// is widget in view?
let rect=el.getBoundingClientRect(),innerHeightOrClientHeight=window.innerHeight||document.documentElement.clientHeight;if(rect.top<0||rect.bottom>innerHeightOrClientHeight){
// set scrollTop of first parent that scrolls
// if parent is larger than el, set as low as possible
// to get entire widget on screen
let offsetDiffDown=rect.bottom-innerHeightOrClientHeight,offsetDiffUp=rect.top,scrollEl=this.getScrollElement(el);if(null!==scrollEl){let prevScroll=scrollEl.scrollTop;rect.top<0&&distance<0?
// moving up
el.offsetHeight>innerHeightOrClientHeight?scrollEl.scrollTop+=distance:scrollEl.scrollTop+=Math.abs(offsetDiffUp)>Math.abs(distance)?distance:offsetDiffUp:distance>0&&(
// moving down
el.offsetHeight>innerHeightOrClientHeight?scrollEl.scrollTop+=distance:scrollEl.scrollTop+=offsetDiffDown>distance?distance:offsetDiffDown),
// move widget y by amount scrolled
position.top+=scrollEl.scrollTop-prevScroll}}}
/**
     * @internal Function used to scroll the page.
     *
     * @param event `MouseEvent` that triggers the resize
     * @param el `HTMLElement` that's being resized
     * @param distance Distance from the V edges to start scrolling
     */static updateScrollResize(event,el,distance){const scrollEl=this.getScrollElement(el),height=scrollEl.clientHeight,offsetTop=scrollEl===this.getScrollElement()?0:scrollEl.getBoundingClientRect().top,pointerPosY=event.clientY-offsetTop,top=pointerPosY<distance,bottom=pointerPosY>height-distance;top?
// This also can be done with a timeout to keep scrolling while the mouse is
// in the scrolling zone. (will have smoother behavior)
scrollEl.scrollBy({behavior:"smooth",top:pointerPosY-distance}):bottom&&scrollEl.scrollBy({behavior:"smooth",top:distance-(height-pointerPosY)})}
/** single level clone, returning a new object with same top fields. This will share sub objects and arrays */static clone(obj){return null===obj||void 0===obj||"object"!==typeof obj?obj:
// return Object.assign({}, obj);
obj instanceof Array?[...obj]:Object.assign({},obj)}
/**
     * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.
     * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.
     */static cloneDeep(obj){
// list of fields we will skip during cloneDeep (nested objects, other internal)
const skipFields=["parentGrid","el","grid","subGrid","engine"],ret=Utils.clone(obj);
// return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?
for(const key in ret)
// NOTE: we don't support function/circular dependencies so skip those properties for now...
ret.hasOwnProperty(key)&&"object"===typeof ret[key]&&"__"!==key.substring(0,2)&&!skipFields.find((k=>k===key))&&(ret[key]=Utils.cloneDeep(obj[key]));return ret}
/** deep clone the given HTML node, removing teh unique id field */static cloneNode(el){const node=el.cloneNode(!0);return node.removeAttribute("id"),node}static appendTo(el,parent){let parentNode;parentNode="string"===typeof parent?document.querySelector(parent):parent,parentNode&&parentNode.appendChild(el)}
// public static setPositionRelative(el: HTMLElement): void {
//   if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {
//     el.style.position = "relative";
//   }
// }
static addElStyles(el,styles){if(styles instanceof Object)for(const s in styles)styles.hasOwnProperty(s)&&(Array.isArray(styles[s])?
// support fallback value
styles[s].forEach((val=>{el.style[s]=val})):el.style[s]=styles[s])}static initEvent(e,info){const evt={type:info.type},obj={button:0,which:0,buttons:1,bubbles:!0,cancelable:!0,target:info.target?info.target:e.target};// point info
// don't check for `instanceof DragEvent` as Safari use MouseEvent #1540
return e.dataTransfer&&(evt["dataTransfer"]=e.dataTransfer),["altKey","ctrlKey","metaKey","shiftKey"].forEach((p=>evt[p]=e[p])),// keys
["pageX","pageY","clientX","clientY","screenX","screenY"].forEach((p=>evt[p]=e[p])),Object.assign(Object.assign({},evt),obj)}
/** copies the MouseEvent properties and sends it as another event to the given target */static simulateMouseEvent(e,simulatedType,target){const simulatedEvent=document.createEvent("MouseEvents");simulatedEvent.initMouseEvent(simulatedType,// type
!0,// bubbles
!0,// cancelable
window,// view
1,// detail
e.screenX,// screenX
e.screenY,// screenY
e.clientX,// clientX
e.clientY,// clientY
e.ctrlKey,// ctrlKey
e.altKey,// altKey
e.shiftKey,// shiftKey
e.metaKey,// metaKey
0,// button
e.target),(target||e.target).dispatchEvent(simulatedEvent)}}exports.Utils=Utils},
/***/206682:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";
// EXPORTS
__webpack_require__.d(__webpack_exports__,{Z:function(){/* binding */return esm_browser_v4}});// CONCATENATED MODULE: ./node_modules/@facilio/design-system/node_modules/uuid/dist/esm-browser/native.js
const randomUUID="undefined"!==typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);
/* harmony default export */var esm_browser_native={randomUUID:randomUUID};// CONCATENATED MODULE: ./node_modules/@facilio/design-system/node_modules/uuid/dist/esm-browser/rng.js
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;const rnds8=new Uint8Array(16);function rng(){
// lazy load so that environments that need to polyfill have a chance to do so
if(!getRandomValues&&(
// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
getRandomValues="undefined"!==typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!getRandomValues))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}// CONCATENATED MODULE: ./node_modules/@facilio/design-system/node_modules/uuid/dist/esm-browser/stringify.js
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex=[];for(let i=0;i<256;++i)byteToHex.push((i+256).toString(16).slice(1));function unsafeStringify(arr,offset=0){
// Note: Be careful editing this code!  It's been tuned for performance
// and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
return byteToHex[arr[offset+0]]+byteToHex[arr[offset+1]]+byteToHex[arr[offset+2]]+byteToHex[arr[offset+3]]+"-"+byteToHex[arr[offset+4]]+byteToHex[arr[offset+5]]+"-"+byteToHex[arr[offset+6]]+byteToHex[arr[offset+7]]+"-"+byteToHex[arr[offset+8]]+byteToHex[arr[offset+9]]+"-"+byteToHex[arr[offset+10]]+byteToHex[arr[offset+11]]+byteToHex[arr[offset+12]]+byteToHex[arr[offset+13]]+byteToHex[arr[offset+14]]+byteToHex[arr[offset+15]]}// CONCATENATED MODULE: ./node_modules/@facilio/design-system/node_modules/uuid/dist/esm-browser/v4.js
function v4(options,buf,offset){if(esm_browser_native.randomUUID&&!buf&&!options)return esm_browser_native.randomUUID();options=options||{};const rnds=options.random||(options.rng||rng)();// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
// Copy bytes to buffer, if provided
if(rnds[6]=15&rnds[6]|64,rnds[8]=63&rnds[8]|128,buf){offset=offset||0;for(let i=0;i<16;++i)buf[offset+i]=rnds[i];return buf}return unsafeStringify(rnds)}
/* harmony default export */var esm_browser_v4=v4;
/***/},
/***/664839:
/***/function(__unused_webpack_module,exports){"use strict";
/**
 * dd-base-impl.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDBaseImplement=void 0;class DDBaseImplement{constructor(){
/** @internal */
this._eventRegister={}}
/** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */get disabled(){return this._disabled}on(event,callback){this._eventRegister[event]=callback}off(event){delete this._eventRegister[event]}enable(){this._disabled=!1}disable(){this._disabled=!0}destroy(){delete this._eventRegister}triggerEvent(eventName,event){if(!this.disabled&&this._eventRegister&&this._eventRegister[eventName])return this._eventRegister[eventName](event)}}exports.DDBaseImplement=DDBaseImplement},
/***/547839:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-draggable.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDDraggable=void 0;const dd_manager_1=__webpack_require__(488951),utils_1=__webpack_require__(14090),dd_base_impl_1=__webpack_require__(664839),dd_touch_1=__webpack_require__(600212);
// let count = 0; // TEST
class DDDraggable extends dd_base_impl_1.DDBaseImplement{constructor(el,option={}){super(),this.el=el,this.option=option;
// get the element that is actually supposed to be dragged by
let handleName=option.handle.substring(1);this.dragEl=el.classList.contains(handleName)?el:el.querySelector(option.handle)||el,
// create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)
this._mouseDown=this._mouseDown.bind(this),this._mouseMove=this._mouseMove.bind(this),this._mouseUp=this._mouseUp.bind(this),this.enable()}on(event,callback){super.on(event,callback)}off(event){super.off(event)}enable(){!1!==this.disabled&&(super.enable(),this.dragEl.addEventListener("mousedown",this._mouseDown),dd_touch_1.isTouch&&(this.dragEl.addEventListener("touchstart",dd_touch_1.touchstart),this.dragEl.addEventListener("pointerdown",dd_touch_1.pointerdown)),this.el.classList.remove("ui-draggable-disabled"),this.el.classList.add("ui-draggable"))}disable(forDestroy=!1){!0!==this.disabled&&(super.disable(),this.dragEl.removeEventListener("mousedown",this._mouseDown),dd_touch_1.isTouch&&(this.dragEl.removeEventListener("touchstart",dd_touch_1.touchstart),this.dragEl.removeEventListener("pointerdown",dd_touch_1.pointerdown)),this.el.classList.remove("ui-draggable"),forDestroy||this.el.classList.add("ui-draggable-disabled"))}destroy(){this.dragTimeout&&window.clearTimeout(this.dragTimeout),delete this.dragTimeout,this.dragging&&this._mouseUp(this.mouseDownEvent),this.disable(!0),delete this.el,delete this.helper,delete this.option,super.destroy()}updateOption(opts){return Object.keys(opts).forEach((key=>this.option[key]=opts[key])),this}
/** @internal call when mouse goes down before a dragstart happens */_mouseDown(e){
// don't let more than one widget handle mouseStart
if(dd_manager_1.DDManager.mouseHandled)return;if(0!==e.button)return!0;// only left click
// make sure we are not clicking on known object that handles mouseDown (TODO: make this extensible ?) #2054
const skipMouseDown=["input","textarea","button","select","option"],name=e.target.nodeName.toLowerCase();return skipMouseDown.find((skip=>skip===name))||e.target.closest('[contenteditable="true"]')||(
// also check for content editable
// REMOVE: why would we get the event if it wasn't for us or child ?
// make sure we are clicking on a drag handle or child of it...
// Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)
// let className = this.option.handle.substring(1);
// let el = e.target as HTMLElement;
// while (el && !el.classList.contains(className)) { el = el.parentElement; }
// if (!el) return;
this.mouseDownEvent=e,delete this.dragging,delete dd_manager_1.DDManager.dragElement,delete dd_manager_1.DDManager.dropElement,
// document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack
document.addEventListener("mousemove",this._mouseMove,!0),// true=capture, not bubble
document.addEventListener("mouseup",this._mouseUp,!0),dd_touch_1.isTouch&&(this.dragEl.addEventListener("touchmove",dd_touch_1.touchmove),this.dragEl.addEventListener("touchend",dd_touch_1.touchend)),e.preventDefault(),
// preventDefault() prevents blur event which occurs just after mousedown event.
// if an editable content has focus, then blur must be call
document.activeElement&&document.activeElement.blur(),dd_manager_1.DDManager.mouseHandled=!0),!0}
/** @internal method to call actual drag event */_callDrag(e){if(!this.dragging)return;const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"drag"});this.option.drag&&this.option.drag(ev,this.ui()),this.triggerEvent("drag",ev)}
/** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */_mouseMove(e){var _a;
// console.log(`${count++} move ${e.x},${e.y}`)
let s=this.mouseDownEvent;if(this.dragging)
// delay actual grid handling drag until we pause for a while if set
if(this._dragFollow(e),dd_manager_1.DDManager.pauseDrag){const pause=Number.isInteger(dd_manager_1.DDManager.pauseDrag)?dd_manager_1.DDManager.pauseDrag:100;this.dragTimeout&&window.clearTimeout(this.dragTimeout),this.dragTimeout=window.setTimeout((()=>this._callDrag(e)),pause)}else this._callDrag(e);else if(Math.abs(e.x-s.x)+Math.abs(e.y-s.y)>3){
/**
             * don't start unless we've moved at least 3 pixels
             */
this.dragging=!0,dd_manager_1.DDManager.dragElement=this;
// if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)
let grid=null===(_a=this.el.gridstackNode)||void 0===_a?void 0:_a.grid;grid?dd_manager_1.DDManager.dropElement=grid.el.ddElement.ddDroppable:delete dd_manager_1.DDManager.dropElement,this.helper=this._createHelper(e),this._setupHelperContainmentStyle(),this.dragOffset=this._getDragOffset(e,this.el,this.helperContainment);const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"dragstart"});this._setupHelperStyle(e),this.option.start&&this.option.start(ev,this.ui()),this.triggerEvent("dragstart",ev)}// needed otherwise we get text sweep text selection as we drag around
return e.preventDefault(),!0}
/** @internal call when the mouse gets released to drop the item at current location */_mouseUp(e){var _a;if(document.removeEventListener("mousemove",this._mouseMove,!0),document.removeEventListener("mouseup",this._mouseUp,!0),dd_touch_1.isTouch&&(this.dragEl.removeEventListener("touchmove",dd_touch_1.touchmove,!0),this.dragEl.removeEventListener("touchend",dd_touch_1.touchend,!0)),this.dragging){delete this.dragging,
// reset the drop target if dragging over ourself (already parented, just moving during stop callback below)
(null===(_a=dd_manager_1.DDManager.dropElement)||void 0===_a?void 0:_a.el)===this.el.parentElement&&delete dd_manager_1.DDManager.dropElement,this.helperContainment.style.position=this.parentOriginStylePosition||null,this.helper===this.el?this._removeHelperStyle():this.helper.remove();const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"dragstop"});this.option.stop&&this.option.stop(ev),this.triggerEvent("dragstop",ev),
// call the droppable method to receive the item
dd_manager_1.DDManager.dropElement&&dd_manager_1.DDManager.dropElement.drop(e)}delete this.helper,delete this.mouseDownEvent,delete dd_manager_1.DDManager.dragElement,delete dd_manager_1.DDManager.dropElement,delete dd_manager_1.DDManager.mouseHandled,e.preventDefault()}
/** @internal create a clone copy (or user defined method) of the original drag item if set */_createHelper(event){let helper=this.el;return"function"===typeof this.option.helper?helper=this.option.helper(event):"clone"===this.option.helper&&(helper=utils_1.Utils.cloneNode(this.el)),document.body.contains(helper)||utils_1.Utils.appendTo(helper,"parent"===this.option.appendTo?this.el.parentNode:this.option.appendTo),helper===this.el&&(this.dragElementOriginStyle=DDDraggable.originStyleProp.map((prop=>this.el.style[prop]))),helper}
/** @internal set the fix position of the dragged item */_setupHelperStyle(e){this.helper.classList.add("ui-draggable-dragging");
// TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593
const style=this.helper.style;return style.pointerEvents="none",// needed for over items to get enter/leave
// style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)
style["min-width"]=0,// since we no longer relative to our parent and we don't resize anyway (normally 100/#column %)
style.width=this.dragOffset.width+"px",style.height=this.dragOffset.height+"px",style.willChange="left, top",style.position="fixed",// let us drag between grids by not clipping as parent .grid-stack is position: 'relative'
this._dragFollow(e),// now position it
style.transition="none",// show up instantly
setTimeout((()=>{this.helper&&(style.transition=null)}),0),this}
/** @internal restore back the original style before dragging */_removeHelperStyle(){var _a;this.helper.classList.remove("ui-draggable-dragging");let node=null===(_a=this.helper)||void 0===_a?void 0:_a.gridstackNode;
// don't bother restoring styles if we're gonna remove anyway...
if(!(null===node||void 0===node?void 0:node._isAboutToRemove)&&this.dragElementOriginStyle){let helper=this.helper,transition=this.dragElementOriginStyle["transition"]||null;
// don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.
// TODO: this also removes resizing animation which doesn't have this issue, but others.
// Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,
// then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'
// is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)
helper.style.transition=this.dragElementOriginStyle["transition"]="none",// can't be NULL #1973
DDDraggable.originStyleProp.forEach((prop=>helper.style[prop]=this.dragElementOriginStyle[prop]||null)),setTimeout((()=>helper.style.transition=transition),50)}return delete this.dragElementOriginStyle,this}
/** @internal updates the top/left position to follow the mouse */_dragFollow(e){let containmentRect={left:0,top:0};
// if (this.helper.style.position === 'absolute') { // we use 'fixed'
//   const { left, top } = this.helperContainment.getBoundingClientRect();
//   containmentRect = { left, top };
// }
const style=this.helper.style,offset=this.dragOffset;style.left=e.clientX+offset.offsetLeft-containmentRect.left+"px",style.top=e.clientY+offset.offsetTop-containmentRect.top+"px"}
/** @internal */_setupHelperContainmentStyle(){return this.helperContainment=this.helper.parentElement,"fixed"!==this.helper.style.position&&(this.parentOriginStylePosition=this.helperContainment.style.position,window.getComputedStyle(this.helperContainment).position.match(/static/)&&(this.helperContainment.style.position="relative")),this}
/** @internal */_getDragOffset(event,el,parent){
// in case ancestor has transform/perspective css properties that change the viewpoint
let xformOffsetX=0,xformOffsetY=0;if(parent){const testEl=document.createElement("div");utils_1.Utils.addElStyles(testEl,{opacity:"0",position:"fixed",top:"0px",left:"0px",width:"1px",height:"1px",zIndex:"-999999"}),parent.appendChild(testEl);const testElPosition=testEl.getBoundingClientRect();parent.removeChild(testEl),xformOffsetX=testElPosition.left,xformOffsetY=testElPosition.top}const targetOffset=el.getBoundingClientRect();return{left:targetOffset.left,top:targetOffset.top,offsetLeft:-event.clientX+targetOffset.left-xformOffsetX,offsetTop:-event.clientY+targetOffset.top-xformOffsetY,width:targetOffset.width,height:targetOffset.height}}
/** @internal TODO: set to public as called by DDDroppable! */ui(){const containmentEl=this.el.parentElement,containmentRect=containmentEl.getBoundingClientRect(),offset=this.helper.getBoundingClientRect();return{position:{top:offset.top-containmentRect.top,left:offset.left-containmentRect.left}
/* not used by GridStack for now...
            helper: [this.helper], //The object arr representing the helper that's being dragged.
            offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.
            */}}}exports.DDDraggable=DDDraggable,
/** @internal properties we change during dragging, and restore back */
DDDraggable.originStyleProp=["transition","pointerEvents","position","left","top","minWidth","willChange"]},
/***/343521:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-droppable.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDDroppable=void 0;const dd_manager_1=__webpack_require__(488951),dd_base_impl_1=__webpack_require__(664839),utils_1=__webpack_require__(14090),dd_touch_1=__webpack_require__(600212);
// let count = 0; // TEST
class DDDroppable extends dd_base_impl_1.DDBaseImplement{constructor(el,opts={}){super(),this.el=el,this.option=opts,
// create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)
this._mouseEnter=this._mouseEnter.bind(this),this._mouseLeave=this._mouseLeave.bind(this),this.enable(),this._setupAccept()}on(event,callback){super.on(event,callback)}off(event){super.off(event)}enable(){!1!==this.disabled&&(super.enable(),this.el.classList.add("ui-droppable"),this.el.classList.remove("ui-droppable-disabled"),this.el.addEventListener("mouseenter",this._mouseEnter),this.el.addEventListener("mouseleave",this._mouseLeave),dd_touch_1.isTouch&&(this.el.addEventListener("pointerenter",dd_touch_1.pointerenter),this.el.addEventListener("pointerleave",dd_touch_1.pointerleave)))}disable(forDestroy=!1){!0!==this.disabled&&(super.disable(),this.el.classList.remove("ui-droppable"),forDestroy||this.el.classList.add("ui-droppable-disabled"),this.el.removeEventListener("mouseenter",this._mouseEnter),this.el.removeEventListener("mouseleave",this._mouseLeave),dd_touch_1.isTouch&&(this.el.removeEventListener("pointerenter",dd_touch_1.pointerenter),this.el.removeEventListener("pointerleave",dd_touch_1.pointerleave)))}destroy(){this.disable(!0),this.el.classList.remove("ui-droppable"),this.el.classList.remove("ui-droppable-disabled"),super.destroy()}updateOption(opts){return Object.keys(opts).forEach((key=>this.option[key]=opts[key])),this._setupAccept(),this}
/** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */_mouseEnter(e){
// console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST
if(!dd_manager_1.DDManager.dragElement)return;if(!this._canDrop(dd_manager_1.DDManager.dragElement.el))return;e.preventDefault(),e.stopPropagation(),
// make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do
dd_manager_1.DDManager.dropElement&&dd_manager_1.DDManager.dropElement!==this&&dd_manager_1.DDManager.dropElement._mouseLeave(e),dd_manager_1.DDManager.dropElement=this;const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"dropover"});this.option.over&&this.option.over(ev,this._ui(dd_manager_1.DDManager.dragElement)),this.triggerEvent("dropover",ev),this.el.classList.add("ui-droppable-over")}
/** @internal called when the item is leaving our area, stop tracking if we had moving item */_mouseLeave(e){var _a;
// console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST
if(!dd_manager_1.DDManager.dragElement||dd_manager_1.DDManager.dropElement!==this)return;e.preventDefault(),e.stopPropagation();const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"dropout"});if(this.option.out&&this.option.out(ev,this._ui(dd_manager_1.DDManager.dragElement)),this.triggerEvent("dropout",ev),dd_manager_1.DDManager.dropElement===this){
// console.log('not tracking'); // TEST
// if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children
let parentDrop;delete dd_manager_1.DDManager.dropElement;let parent=this.el.parentElement;while(!parentDrop&&parent)parentDrop=null===(_a=parent.ddElement)||void 0===_a?void 0:_a.ddDroppable,parent=parent.parentElement;parentDrop&&parentDrop._mouseEnter(e)}}
/** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */drop(e){e.preventDefault();const ev=utils_1.Utils.initEvent(e,{target:this.el,type:"drop"});this.option.drop&&this.option.drop(ev,this._ui(dd_manager_1.DDManager.dragElement)),this.triggerEvent("drop",ev)}
/** @internal true if element matches the string/method accept option */_canDrop(el){return el&&(!this.accept||this.accept(el))}
/** @internal */_setupAccept(){return this.option.accept?("string"===typeof this.option.accept?this.accept=el=>el.matches(this.option.accept):this.accept=this.option.accept,this):this}
/** @internal */_ui(drag){return Object.assign({draggable:drag.el},drag.ui())}}exports.DDDroppable=DDDroppable},
/***/849431:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-elements.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDElement=void 0;const dd_resizable_1=__webpack_require__(423444),dd_draggable_1=__webpack_require__(547839),dd_droppable_1=__webpack_require__(343521);class DDElement{constructor(el){this.el=el}static init(el){return el.ddElement||(el.ddElement=new DDElement(el)),el.ddElement}on(eventName,callback){return this.ddDraggable&&["drag","dragstart","dragstop"].indexOf(eventName)>-1?this.ddDraggable.on(eventName,callback):this.ddDroppable&&["drop","dropover","dropout"].indexOf(eventName)>-1?this.ddDroppable.on(eventName,callback):this.ddResizable&&["resizestart","resize","resizestop"].indexOf(eventName)>-1&&this.ddResizable.on(eventName,callback),this}off(eventName){return this.ddDraggable&&["drag","dragstart","dragstop"].indexOf(eventName)>-1?this.ddDraggable.off(eventName):this.ddDroppable&&["drop","dropover","dropout"].indexOf(eventName)>-1?this.ddDroppable.off(eventName):this.ddResizable&&["resizestart","resize","resizestop"].indexOf(eventName)>-1&&this.ddResizable.off(eventName),this}setupDraggable(opts){return this.ddDraggable?this.ddDraggable.updateOption(opts):this.ddDraggable=new dd_draggable_1.DDDraggable(this.el,opts),this}cleanDraggable(){return this.ddDraggable&&(this.ddDraggable.destroy(),delete this.ddDraggable),this}setupResizable(opts){return this.ddResizable?this.ddResizable.updateOption(opts):this.ddResizable=new dd_resizable_1.DDResizable(this.el,opts),this}cleanResizable(){return this.ddResizable&&(this.ddResizable.destroy(),delete this.ddResizable),this}setupDroppable(opts){return this.ddDroppable?this.ddDroppable.updateOption(opts):this.ddDroppable=new dd_droppable_1.DDDroppable(this.el,opts),this}cleanDroppable(){return this.ddDroppable&&(this.ddDroppable.destroy(),delete this.ddDroppable),this}}exports.DDElement=DDElement},
/***/231485:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-gridstack.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDGridStack=void 0;const utils_1=__webpack_require__(14090),dd_manager_1=__webpack_require__(488951),dd_element_1=__webpack_require__(849431);
// let count = 0; // TEST
/**
 * HTML Native Mouse and Touch Events Drag and Drop functionality.
 */
class DDGridStack{resizable(el,opts,key,value){return this._getDDElements(el).forEach((dEl=>{if("disable"===opts||"enable"===opts)dEl.ddResizable&&dEl.ddResizable[opts]();// can't create DD as it requires options for setupResizable()
else if("destroy"===opts)dEl.ddResizable&&dEl.cleanResizable();else if("option"===opts)dEl.setupResizable({[key]:value});else{const grid=dEl.el.gridstackNode.grid;let handles=dEl.el.getAttribute("gs-resize-handles")?dEl.el.getAttribute("gs-resize-handles"):grid.opts.resizable.handles,autoHide=!grid.opts.alwaysShowResizeHandle;dEl.setupResizable(Object.assign(Object.assign(Object.assign({},grid.opts.resizable),{handles:handles,autoHide:autoHide}),{start:opts.start,stop:opts.stop,resize:opts.resize}))}})),this}draggable(el,opts,key,value){return this._getDDElements(el).forEach((dEl=>{if("disable"===opts||"enable"===opts)dEl.ddDraggable&&dEl.ddDraggable[opts]();// can't create DD as it requires options for setupDraggable()
else if("destroy"===opts)dEl.ddDraggable&&dEl.cleanDraggable();else if("option"===opts)dEl.setupDraggable({[key]:value});else{const grid=dEl.el.gridstackNode.grid;dEl.setupDraggable(Object.assign(Object.assign({},grid.opts.draggable),{
// containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),
start:opts.start,stop:opts.stop,drag:opts.drag}))}})),this}dragIn(el,opts){return this._getDDElements(el).forEach((dEl=>dEl.setupDraggable(opts))),this}droppable(el,opts,key,value){return"function"!==typeof opts.accept||opts._accept||(opts._accept=opts.accept,opts.accept=el=>opts._accept(el)),this._getDDElements(el).forEach((dEl=>{"disable"===opts||"enable"===opts?dEl.ddDroppable&&dEl.ddDroppable[opts]():"destroy"===opts?dEl.ddDroppable&&// error to call destroy if not there
dEl.cleanDroppable():"option"===opts?dEl.setupDroppable({[key]:value}):dEl.setupDroppable(opts)})),this}
/** true if element is droppable */isDroppable(el){return!(!(el&&el.ddElement&&el.ddElement.ddDroppable)||el.ddElement.ddDroppable.disabled)}
/** true if element is draggable */isDraggable(el){return!(!(el&&el.ddElement&&el.ddElement.ddDraggable)||el.ddElement.ddDraggable.disabled)}
/** true if element is draggable */isResizable(el){return!(!(el&&el.ddElement&&el.ddElement.ddResizable)||el.ddElement.ddResizable.disabled)}on(el,name,callback){return this._getDDElements(el).forEach((dEl=>dEl.on(name,(event=>{callback(event,dd_manager_1.DDManager.dragElement?dd_manager_1.DDManager.dragElement.el:event.target,dd_manager_1.DDManager.dragElement?dd_manager_1.DDManager.dragElement.helper:null)})))),this}off(el,name){return this._getDDElements(el).forEach((dEl=>dEl.off(name))),this}
/** @internal returns a list of DD elements, creating them on the fly by default */_getDDElements(els,create=!0){let hosts=utils_1.Utils.getElements(els);if(!hosts.length)return[];let list=hosts.map((e=>e.ddElement||(create?dd_element_1.DDElement.init(e):null)));// remove nulls
return create||list.filter((d=>d)),list}}exports.DDGridStack=DDGridStack},
/***/488951:
/***/function(__unused_webpack_module,exports){"use strict";
/**
 * dd-manager.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDManager=void 0;
/**
 * globals that are shared across Drag & Drop instances
 */
class DDManager{}exports.DDManager=DDManager},
/***/125094:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-resizable-handle.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDResizableHandle=void 0;const dd_touch_1=__webpack_require__(600212);class DDResizableHandle{constructor(host,direction,option){
/** @internal true after we've moved enough pixels to start a resize */
this.moving=!1,this.host=host,this.dir=direction,this.option=option,
// create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)
this._mouseDown=this._mouseDown.bind(this),this._mouseMove=this._mouseMove.bind(this),this._mouseUp=this._mouseUp.bind(this),this._init()}
/** @internal */_init(){const el=document.createElement("div");return el.classList.add("ui-resizable-handle"),el.classList.add(`${DDResizableHandle.prefix}${this.dir}`),el.style.zIndex="100",el.style.userSelect="none",this.el=el,this.host.appendChild(this.el),this.el.addEventListener("mousedown",this._mouseDown),dd_touch_1.isTouch&&(this.el.addEventListener("touchstart",dd_touch_1.touchstart),this.el.addEventListener("pointerdown",dd_touch_1.pointerdown)),this}
/** call this when resize handle needs to be removed and cleaned up */destroy(){return this.moving&&this._mouseUp(this.mouseDownEvent),this.el.removeEventListener("mousedown",this._mouseDown),dd_touch_1.isTouch&&(this.el.removeEventListener("touchstart",dd_touch_1.touchstart),this.el.removeEventListener("pointerdown",dd_touch_1.pointerdown)),this.host.removeChild(this.el),delete this.el,delete this.host,this}
/** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */_mouseDown(e){this.mouseDownEvent=e,document.addEventListener("mousemove",this._mouseMove,!0),// capture, not bubble
document.addEventListener("mouseup",this._mouseUp,!0),dd_touch_1.isTouch&&(this.el.addEventListener("touchmove",dd_touch_1.touchmove),this.el.addEventListener("touchend",dd_touch_1.touchend)),e.stopPropagation(),e.preventDefault()}
/** @internal */_mouseMove(e){let s=this.mouseDownEvent;this.moving?this._triggerEvent("move",e):Math.abs(e.x-s.x)+Math.abs(e.y-s.y)>2&&(
// don't start unless we've moved at least 3 pixels
this.moving=!0,this._triggerEvent("start",this.mouseDownEvent),this._triggerEvent("move",e)),e.stopPropagation(),e.preventDefault()}
/** @internal */_mouseUp(e){this.moving&&this._triggerEvent("stop",e),document.removeEventListener("mousemove",this._mouseMove,!0),document.removeEventListener("mouseup",this._mouseUp,!0),dd_touch_1.isTouch&&(this.el.removeEventListener("touchmove",dd_touch_1.touchmove),this.el.removeEventListener("touchend",dd_touch_1.touchend)),delete this.moving,delete this.mouseDownEvent,e.stopPropagation(),e.preventDefault()}
/** @internal */_triggerEvent(name,event){return this.option[name]&&this.option[name](event),this}}exports.DDResizableHandle=DDResizableHandle,
/** @internal */
DDResizableHandle.prefix="ui-resizable-"},
/***/423444:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * dd-resizable.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.DDResizable=void 0;const dd_resizable_handle_1=__webpack_require__(125094),dd_base_impl_1=__webpack_require__(664839),utils_1=__webpack_require__(14090),dd_manager_1=__webpack_require__(488951);class DDResizable extends dd_base_impl_1.DDBaseImplement{constructor(el,opts={}){super(),
/** @internal */
this._ui=()=>{const containmentEl=this.el.parentElement,containmentRect=containmentEl.getBoundingClientRect(),newRect={width:this.originalRect.width,height:this.originalRect.height+this.scrolled,left:this.originalRect.left,top:this.originalRect.top-this.scrolled},rect=this.temporalRect||newRect;return{position:{left:rect.left-containmentRect.left,top:rect.top-containmentRect.top},size:{width:rect.width,height:rect.height}
/* Gridstack ONLY needs position set above... keep around in case.
                element: [this.el], // The object representing the element to be resized
                helper: [], // TODO: not support yet - The object representing the helper that's being resized
                originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped
                originalPosition: { // The position represented as { left, top } before the resizable is resized
                  left: this.originalRect.left - containmentRect.left,
                  top: this.originalRect.top - containmentRect.top
                },
                originalSize: { // The size represented as { width, height } before the resizable is resized
                  width: this.originalRect.width,
                  height: this.originalRect.height
                }
                */}},this.el=el,this.option=opts,
// create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)
this._mouseOver=this._mouseOver.bind(this),this._mouseOut=this._mouseOut.bind(this),this.enable(),this._setupAutoHide(this.option.autoHide),this._setupHandlers()}on(event,callback){super.on(event,callback)}off(event){super.off(event)}enable(){super.enable(),this.el.classList.add("ui-resizable"),this.el.classList.remove("ui-resizable-disabled"),this._setupAutoHide(this.option.autoHide)}disable(){super.disable(),this.el.classList.add("ui-resizable-disabled"),this.el.classList.remove("ui-resizable"),this._setupAutoHide(!1)}destroy(){this._removeHandlers(),this._setupAutoHide(!1),this.el.classList.remove("ui-resizable"),delete this.el,super.destroy()}updateOption(opts){let updateHandles=opts.handles&&opts.handles!==this.option.handles,updateAutoHide=opts.autoHide&&opts.autoHide!==this.option.autoHide;return Object.keys(opts).forEach((key=>this.option[key]=opts[key])),updateHandles&&(this._removeHandlers(),this._setupHandlers()),updateAutoHide&&this._setupAutoHide(this.option.autoHide),this}
/** @internal turns auto hide on/off */_setupAutoHide(auto){return auto?(this.el.classList.add("ui-resizable-autohide"),
// use mouseover and not mouseenter to get better performance and track for nested cases
this.el.addEventListener("mouseover",this._mouseOver),this.el.addEventListener("mouseout",this._mouseOut)):(this.el.classList.remove("ui-resizable-autohide"),this.el.removeEventListener("mouseover",this._mouseOver),this.el.removeEventListener("mouseout",this._mouseOut),dd_manager_1.DDManager.overResizeElement===this&&delete dd_manager_1.DDManager.overResizeElement),this}
/** @internal */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
_mouseOver(e){
// console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)
// already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018
dd_manager_1.DDManager.overResizeElement||dd_manager_1.DDManager.dragElement||(dd_manager_1.DDManager.overResizeElement=this,
// console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)
this.el.classList.remove("ui-resizable-autohide"))}
/** @internal */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
_mouseOut(e){
// console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)
dd_manager_1.DDManager.overResizeElement===this&&(delete dd_manager_1.DDManager.overResizeElement,
// console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)
this.el.classList.add("ui-resizable-autohide"))}
/** @internal */_setupHandlers(){let handlerDirection=this.option.handles||"e,s,se";return"all"===handlerDirection&&(handlerDirection="n,e,s,w,se,sw,ne,nw"),this.handlers=handlerDirection.split(",").map((dir=>dir.trim())).map((dir=>new dd_resizable_handle_1.DDResizableHandle(this.el,dir,{start:event=>{this._resizeStart(event)},stop:event=>{this._resizeStop(event)},move:event=>{this._resizing(event,dir)}}))),this}
/** @internal */_resizeStart(event){this.originalRect=this.el.getBoundingClientRect(),this.scrollEl=utils_1.Utils.getScrollElement(this.el),this.scrollY=this.scrollEl.scrollTop,this.scrolled=0,this.startEvent=event,this._setupHelper(),this._applyChange();const ev=utils_1.Utils.initEvent(event,{type:"resizestart",target:this.el});return this.option.start&&this.option.start(ev,this._ui()),this.el.classList.add("ui-resizable-resizing"),this.triggerEvent("resizestart",ev),this}
/** @internal */_resizing(event,dir){this.scrolled=this.scrollEl.scrollTop-this.scrollY,this.temporalRect=this._getChange(event,dir),this._applyChange();const ev=utils_1.Utils.initEvent(event,{type:"resize",target:this.el});return this.option.resize&&this.option.resize(ev,this._ui()),this.triggerEvent("resize",ev),this}
/** @internal */_resizeStop(event){const ev=utils_1.Utils.initEvent(event,{type:"resizestop",target:this.el});return this.option.stop&&this.option.stop(ev),this.el.classList.remove("ui-resizable-resizing"),this.triggerEvent("resizestop",ev),this._cleanHelper(),delete this.startEvent,delete this.originalRect,delete this.temporalRect,delete this.scrollY,delete this.scrolled,this}
/** @internal */_setupHelper(){return this.elOriginStyleVal=DDResizable._originStyleProp.map((prop=>this.el.style[prop])),this.parentOriginStylePosition=this.el.parentElement.style.position,window.getComputedStyle(this.el.parentElement).position.match(/static/)&&(this.el.parentElement.style.position="relative"),this.el.style.position="absolute",this.el.style.opacity="0.8",this}
/** @internal */_cleanHelper(){return DDResizable._originStyleProp.forEach(((prop,i)=>{this.el.style[prop]=this.elOriginStyleVal[i]||null})),this.el.parentElement.style.position=this.parentOriginStylePosition||null,this}
/** @internal */_getChange(event,dir){const oEvent=this.startEvent,newRect={width:this.originalRect.width,height:this.originalRect.height+this.scrolled,left:this.originalRect.left,top:this.originalRect.top-this.scrolled},offsetX=event.clientX-oEvent.clientX,offsetY=event.clientY-oEvent.clientY;dir.indexOf("e")>-1?newRect.width+=offsetX:dir.indexOf("w")>-1&&(newRect.width-=offsetX,newRect.left+=offsetX),dir.indexOf("s")>-1?newRect.height+=offsetY:dir.indexOf("n")>-1&&(newRect.height-=offsetY,newRect.top+=offsetY);const constrain=this._constrainSize(newRect.width,newRect.height);return Math.round(newRect.width)!==Math.round(constrain.width)&&(// round to ignore slight round-off errors
dir.indexOf("w")>-1&&(newRect.left+=newRect.width-constrain.width),newRect.width=constrain.width),Math.round(newRect.height)!==Math.round(constrain.height)&&(dir.indexOf("n")>-1&&(newRect.top+=newRect.height-constrain.height),newRect.height=constrain.height),newRect}
/** @internal constrain the size to the set min/max values */_constrainSize(oWidth,oHeight){const maxWidth=this.option.maxWidth||Number.MAX_SAFE_INTEGER,minWidth=this.option.minWidth||oWidth,maxHeight=this.option.maxHeight||Number.MAX_SAFE_INTEGER,minHeight=this.option.minHeight||oHeight,width=Math.min(maxWidth,Math.max(minWidth,oWidth)),height=Math.min(maxHeight,Math.max(minHeight,oHeight));return{width:width,height:height}}
/** @internal */_applyChange(){let containmentRect={left:0,top:0,width:0,height:0};if("absolute"===this.el.style.position){const containmentEl=this.el.parentElement,{left:left,top:top}=containmentEl.getBoundingClientRect();containmentRect={left:left,top:top,width:0,height:0}}return this.temporalRect?(Object.keys(this.temporalRect).forEach((key=>{const value=this.temporalRect[key];this.el.style[key]=value-containmentRect[key]+"px"})),this):this}
/** @internal */_removeHandlers(){return this.handlers.forEach((handle=>handle.destroy())),delete this.handlers,this}}exports.DDResizable=DDResizable,
/** @internal */
DDResizable._originStyleProp=["width","height","position","left","top","opacity","zIndex"]},
/***/600212:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * touch.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.pointerleave=exports.pointerenter=exports.pointerdown=exports.touchend=exports.touchmove=exports.touchstart=exports.isTouch=void 0;const dd_manager_1=__webpack_require__(488951);
/**
 * Detect touch support - Windows Surface devices and other touch devices
 * should we use this instead ? (what we had for always showing resize handles)
 * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
 */exports.isTouch="undefined"!==typeof window&&"undefined"!==typeof document&&("ontouchstart"in document||"ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0);
// interface TouchCoord {x: number, y: number};
class DDTouch{}
/**
* Get the x,y position of a touch event
*/
// function getTouchCoords(e: TouchEvent): TouchCoord {
//   return {
//     x: e.changedTouches[0].pageX,
//     y: e.changedTouches[0].pageY
//   };
// }
/**
 * Simulate a mouse event based on a corresponding touch event
 * @param {Object} e A touch event
 * @param {String} simulatedType The corresponding mouse event
 */function simulateMouseEvent(e,simulatedType){
// Ignore multi-touch events
if(e.touches.length>1)return;
// Prevent "Ignored attempt to cancel a touchmove event with cancelable=false" errors
e.cancelable&&e.preventDefault();const touch=e.changedTouches[0],simulatedEvent=document.createEvent("MouseEvents");
// Initialize the simulated mouse event using the touch event's coordinates
simulatedEvent.initMouseEvent(simulatedType,// type
!0,// bubbles
!0,// cancelable
window,// view
1,// detail
touch.screenX,// screenX
touch.screenY,// screenY
touch.clientX,// clientX
touch.clientY,// clientY
!1,// ctrlKey
!1,// altKey
!1,// shiftKey
!1,// metaKey
0,// button
null),
// Dispatch the simulated event to the target element
e.target.dispatchEvent(simulatedEvent)}
/**
 * Simulate a mouse event based on a corresponding Pointer event
 * @param {Object} e A pointer event
 * @param {String} simulatedType The corresponding mouse event
 */function simulatePointerMouseEvent(e,simulatedType){
// Prevent "Ignored attempt to cancel a touchmove event with cancelable=false" errors
e.cancelable&&e.preventDefault();const simulatedEvent=document.createEvent("MouseEvents");
// Initialize the simulated mouse event using the touch event's coordinates
simulatedEvent.initMouseEvent(simulatedType,// type
!0,// bubbles
!0,// cancelable
window,// view
1,// detail
e.screenX,// screenX
e.screenY,// screenY
e.clientX,// clientX
e.clientY,// clientY
!1,// ctrlKey
!1,// altKey
!1,// shiftKey
!1,// metaKey
0,// button
null),
// Dispatch the simulated event to the target element
e.target.dispatchEvent(simulatedEvent)}
/**
 * Handle the touchstart events
 * @param {Object} e The widget element's touchstart event
 */function touchstart(e){
// Ignore the event if another widget is already being handled
DDTouch.touchHandled||(DDTouch.touchHandled=!0,
// Simulate the mouse events
// simulateMouseEvent(e, 'mouseover');
// simulateMouseEvent(e, 'mousemove');
simulateMouseEvent(e,"mousedown"))}
/**
 * Handle the touchmove events
 * @param {Object} e The document's touchmove event
 */
function touchmove(e){
// Ignore event if not handled by us
DDTouch.touchHandled&&simulateMouseEvent(e,"mousemove")}
/**
 * Handle the touchend events
 * @param {Object} e The document's touchend event
 */
function touchend(e){
// Ignore event if not handled
if(!DDTouch.touchHandled)return;
// cancel delayed leave event when we release on ourself which happens BEFORE we get this!
DDTouch.pointerLeaveTimeout&&(window.clearTimeout(DDTouch.pointerLeaveTimeout),delete DDTouch.pointerLeaveTimeout);const wasDragging=!!dd_manager_1.DDManager.dragElement;
// Simulate the mouseup event
simulateMouseEvent(e,"mouseup"),
// simulateMouseEvent(event, 'mouseout');
// If the touch interaction did not move, it should trigger a click
wasDragging||simulateMouseEvent(e,"click"),
// Unset the flag to allow other widgets to inherit the touch event
DDTouch.touchHandled=!1}
/**
 * Note we don't get touchenter/touchleave (which are deprecated)
 * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter
 * so instead of PointerEvent to still get enter/leave and send the matching mouse event.
 */
function pointerdown(e){
// console.log("pointer down")
e.target.releasePointerCapture(e.pointerId);// <- Important!
}function pointerenter(e){
// ignore the initial one we get on pointerdown on ourself
dd_manager_1.DDManager.dragElement&&
// console.log('pointerenter');
simulatePointerMouseEvent(e,"mouseenter")}function pointerleave(e){
// ignore the leave on ourself we get before releasing the mouse over ourself
// by delaying sending the event and having the up event cancel us
dd_manager_1.DDManager.dragElement&&(DDTouch.pointerLeaveTimeout=window.setTimeout((()=>{delete DDTouch.pointerLeaveTimeout,
// console.log('pointerleave delayed');
simulatePointerMouseEvent(e,"mouseleave")}),10))}exports.touchstart=touchstart,exports.touchmove=touchmove,exports.touchend=touchend,exports.pointerdown=pointerdown,exports.pointerenter=pointerenter,exports.pointerleave=pointerleave},
/***/846541:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";
/**
 * gridstack-engine.ts 7.3.0
 * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.GridStackEngine=void 0;const utils_1=__webpack_require__(14090);
/**
 * Defines the GridStack engine that does most no DOM grid manipulation.
 * See GridStack methods and vars for descriptions.
 *
 * NOTE: values should not be modified directly - call the main GridStack API instead
 */class GridStackEngine{constructor(opts={}){this.addedNodes=[],this.removedNodes=[],this.column=opts.column||12,this.maxRow=opts.maxRow,this._float=opts.float,this.nodes=opts.nodes||[],this.onChange=opts.onChange}batchUpdate(flag=!0){return!!this.batchMode===flag||(this.batchMode=flag,flag?(this._prevFloat=this._float,this._float=!0,// let things go anywhere for now... will restore and possibly reposition later
this.saveInitial()):(this._float=this._prevFloat,delete this._prevFloat,this._packNodes()._notify())),this}
// use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip
_useEntireRowArea(node,nn){return(!this.float||this.batchMode&&!this._prevFloat)&&!this._hasLocked&&(!node._moving||node._skipDown||nn.y<=node.y)}
/** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.
     * return true if we moved. */_fixCollisions(node,nn=node,collide,opt={}){// REAL area collide for swap and skip if none...
if(this.sortNodes(-1),// from last to first, so recursive collision move items in the right order
collide=collide||this.collide(node,nn),!collide)return!1;
// swap check: if we're actively moving in gravity mode, see if we collide with an object the same size
if(node._moving&&!opt.nested&&!this.float&&this.swap(node,collide))return!0;
// during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)
let area=nn;this._useEntireRowArea(node,nn)&&(area={x:0,w:this.column,y:nn.y,h:nn.h},collide=this.collide(node,area,opt.skip));let didMove=!1,newOpt={nested:!0,pack:!1};while(collide=collide||this.collide(node,area,opt.skip)){// could collide with more than 1 item... so repeat for each
let moved;
// if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,
// but remember that skip down so we only do this once (and push others otherwise).
if(collide.locked||node._moving&&!node._skipDown&&nn.y>node.y&&!this.float&&(
// can take space we had, or before where we're going
!this.collide(collide,Object.assign(Object.assign({},collide),{y:node.y}),node)||!this.collide(collide,Object.assign(Object.assign({},collide),{y:nn.y-collide.h}),node))?(node._skipDown=node._skipDown||nn.y>node.y,moved=this.moveNode(node,Object.assign(Object.assign(Object.assign({},nn),{y:collide.y+collide.h}),newOpt)),collide.locked&&moved?utils_1.Utils.copyPos(nn,node):!collide.locked&&moved&&opt.pack&&(
// we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way
this._packNodes(),nn.y=collide.y+collide.h,utils_1.Utils.copyPos(node,nn)),didMove=didMove||moved):
// move collide down *after* where we will be, ignoring where we are now (don't collide with us)
moved=this.moveNode(collide,Object.assign(Object.assign(Object.assign({},collide),{y:nn.y+nn.h,skip:node}),newOpt)),!moved)return didMove;// break inf loop if we couldn't move after all (ex: maxRow, fixed)
collide=void 0}return didMove}
/** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */collide(skip,area=skip,skip2){return this.nodes.find((n=>n!==skip&&n!==skip2&&utils_1.Utils.isIntercepted(n,area)))}collideAll(skip,area=skip,skip2){return this.nodes.filter((n=>n!==skip&&n!==skip2&&utils_1.Utils.isIntercepted(n,area)))}
/** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */directionCollideCoverage(node,o,collides){if(!o.rect||!node._rect)return;let collide,r0=node._rect,r=Object.assign({},o.rect);// where started
// save it so we don't have to find it again
// where we are
// update dragged rect to show where it's coming from (above or below, etc...)
return r.y>r0.y?(r.h+=r.y-r0.y,r.y=r0.y):r.h+=r0.y-r.y,r.x>r0.x?(r.w+=r.x-r0.x,r.x=r0.x):r.w+=r0.x-r.x,collides.forEach((n=>{if(n.locked||!n._rect)return;let r2=n._rect,yOver=Number.MAX_VALUE,xOver=Number.MAX_VALUE,overMax=.5;// overlapping target
// need >50%
// depending on which side we started from, compute the overlap % of coverage
// (ex: from above/below we only compute the max horizontal line coverage)
r0.y<r2.y?// from above
yOver=(r.y+r.h-r2.y)/r2.h:r0.y+r0.h>r2.y+r2.h&&(// from below
yOver=(r2.y+r2.h-r.y)/r2.h),r0.x<r2.x?// from the left
xOver=(r.x+r.w-r2.x)/r2.w:r0.x+r0.w>r2.x+r2.w&&(// from the right
xOver=(r2.x+r2.w-r.x)/r2.w);let over=Math.min(xOver,yOver);over>overMax&&(overMax=over,collide=n)})),o.collide=collide,collide}
/** does a pixel coverage returning the node that has the most coverage by area */
/*
    protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {
      let collide: GridStackNode;
      let overMax = 0;
      collides.forEach(n => {
        if (n.locked || !n._rect) return;
        let over = Utils.areaIntercept(r, n._rect);
        if (over > overMax) {
          overMax = over;
          collide = n;
        }
      });
      return {collide, over: overMax};
    }
    */
/** called to cache the nodes pixel rectangles used for collision detection during drag */cacheRects(w,h,top,right,bottom,left){return this.nodes.forEach((n=>n._rect={y:n.y*h+top,x:n.x*w+left,w:n.w*w-left-right,h:n.h*h-top-bottom})),this}
/** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */swap(a,b){if(!b||b.locked||!a||a.locked)return!1;function _doSwap(){let x=b.x,y=b.y;return b.x=a.x,b.y=a.y,// b -> a position
a.h!=b.h?(a.x=x,a.y=b.y+b.h):a.w!=b.w?(a.x=b.x+b.w,a.y=y):(a.x=x,a.y=y),a._dirty=b._dirty=!0,!0}let touching;// remember if we called it (vs undefined)
// same size and same row or column, and touching
if(a.w===b.w&&a.h===b.h&&(a.x===b.x||a.y===b.y)&&(touching=utils_1.Utils.isTouching(a,b)))return _doSwap();if(!1!==touching){// IFF ran test and fail, bail out
// check for taking same columns (but different height) and touching
if(a.w===b.w&&a.x===b.x&&(touching||(touching=utils_1.Utils.isTouching(a,b)))){if(b.y<a.y){let t=a;a=b,b=t}// swap a <-> b vars so a is first
return _doSwap()}if(!1!==touching){
// check if taking same row (but different width) and touching
if(a.h===b.h&&a.y===b.y&&(touching||(touching=utils_1.Utils.isTouching(a,b)))){if(b.x<a.x){let t=a;a=b,b=t}// swap a <-> b vars so a is first
return _doSwap()}return!1}}}isAreaEmpty(x,y,w,h){let nn={x:x||0,y:y||0,w:w||1,h:h||1};return!this.collide(nn)}
/** re-layout grid items to reclaim any empty space */compact(){if(0===this.nodes.length)return this;this.batchUpdate().sortNodes();let copyNodes=this.nodes;return this.nodes=[],// pretend we have no nodes to conflict layout to start with...
copyNodes.forEach((node=>{node.locked||(node.autoPosition=!0),this.addNode(node,!1),// 'false' for add event trigger
node._dirty=!0}// will force attr update
)),this.batchUpdate(!1)}
/** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */set float(val){this._float!==val&&(this._float=val||!1,val||this._packNodes()._notify())}
/** float getter method */get float(){return this._float||!1}
/** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */sortNodes(dir){return this.nodes=utils_1.Utils.sort(this.nodes,dir,this.column),this}
/** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */_packNodes(){return this.batchMode||(this.sortNodes(),// first to last
this.float?
// restore original Y pos
this.nodes.forEach((n=>{if(n._updating||void 0===n._orig||n.y===n._orig.y)return;let newY=n.y;while(newY>n._orig.y){--newY;let collide=this.collide(n,{x:n.x,y:newY,w:n.w,h:n.h});collide||(n._dirty=!0,n.y=newY)}})):
// top gravity pack
this.nodes.forEach(((n,i)=>{if(!n.locked)while(n.y>0){let newY=0===i?0:n.y-1,canBeMoved=0===i||!this.collide(n,{x:n.x,y:newY,w:n.w,h:n.h});if(!canBeMoved)break;
// Note: must be dirty (from last position) for GridStack::OnChange CB to update positions
// and move items back. The user 'change' CB should detect changes from the original
// starting position instead.
n._dirty=n.y!==newY,n.y=newY}}))),this}
/**
     * given a random node, makes sure it's coordinates/values are valid in the current grid
     * @param node to adjust
     * @param resizing if out of bound, resize down or move into the grid to fit ?
     */prepareNode(node,resizing){node=node||{},node._id=node._id||GridStackEngine._idSeq++,
// if we're missing position, have the grid position us automatically (before we set them to 0,0)
void 0!==node.x&&void 0!==node.y&&null!==node.x&&null!==node.y||(node.autoPosition=!0);
// assign defaults for missing required fields
let defaults={x:0,y:0,w:1,h:1};return utils_1.Utils.defaults(node,defaults),node.autoPosition||delete node.autoPosition,node.noResize||delete node.noResize,node.noMove||delete node.noMove,
// check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)
"string"==typeof node.x&&(node.x=Number(node.x)),"string"==typeof node.y&&(node.y=Number(node.y)),"string"==typeof node.w&&(node.w=Number(node.w)),"string"==typeof node.h&&(node.h=Number(node.h)),isNaN(node.x)&&(node.x=defaults.x,node.autoPosition=!0),isNaN(node.y)&&(node.y=defaults.y,node.autoPosition=!0),isNaN(node.w)&&(node.w=defaults.w),isNaN(node.h)&&(node.h=defaults.h),this.nodeBoundFix(node,resizing)}
/** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */nodeBoundFix(node,resizing){let before=node._orig||utils_1.Utils.copyPos({},node);node.maxW&&(node.w=Math.min(node.w,node.maxW)),node.maxH&&(node.h=Math.min(node.h,node.maxH)),node.minW&&node.minW<=this.column&&(node.w=Math.max(node.w,node.minW)),node.minH&&(node.h=Math.max(node.h,node.minH));
// if user loaded a larger than allowed widget for current # of columns (or force 1 column mode),
// remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985
// IFF we're not in the middle of column resizing!
const saveOrig=1===this.column||node.x+node.w>this.column;if(saveOrig&&this.column<12&&!this._inColumnResize&&node._id&&-1===this.findCacheLayout(node,12)){let copy=Object.assign({},node);// need _id + positions
copy.autoPosition?(delete copy.x,delete copy.y):copy.x=Math.min(11,copy.x),copy.w=Math.min(12,copy.w),this.cacheOneLayout(copy,12)}return node.w>this.column?node.w=this.column:node.w<1&&(node.w=1),this.maxRow&&node.h>this.maxRow?node.h=this.maxRow:node.h<1&&(node.h=1),node.x<0&&(node.x=0),node.y<0&&(node.y=0),node.x+node.w>this.column&&(resizing?node.w=this.column-node.x:node.x=this.column-node.w),this.maxRow&&node.y+node.h>this.maxRow&&(resizing?node.h=this.maxRow-node.y:node.y=this.maxRow-node.h),utils_1.Utils.samePos(node,before)||(node._dirty=!0),node}
/** returns a list of modified nodes from their original values */getDirtyNodes(verify){
// compare original x,y,w,h instead as _dirty can be a temporary state
return verify?this.nodes.filter((n=>n._dirty&&!utils_1.Utils.samePos(n,n._orig))):this.nodes.filter((n=>n._dirty))}
/** @internal call this to call onChange callback with dirty nodes so DOM can be updated */_notify(removedNodes){if(this.batchMode||!this.onChange)return this;let dirtyNodes=(removedNodes||[]).concat(this.getDirtyNodes());return this.onChange(dirtyNodes),this}
/** @internal remove dirty and last tried info */cleanNodes(){return this.batchMode||this.nodes.forEach((n=>{delete n._dirty,delete n._lastTried})),this}
/** @internal called to save initial position/size to track real dirty state.
     * Note: should be called right after we call change event (so next API is can detect changes)
     * as well as right before we start move/resize/enter (so we can restore items to prev values) */saveInitial(){return this.nodes.forEach((n=>{n._orig=utils_1.Utils.copyPos({},n),delete n._dirty})),this._hasLocked=this.nodes.some((n=>n.locked)),this}
/** @internal restore all the nodes back to initial values (called when we leave) */restoreInitial(){return this.nodes.forEach((n=>{utils_1.Utils.samePos(n,n._orig)||(utils_1.Utils.copyPos(n,n._orig),n._dirty=!0)})),this._notify(),this}
/** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.
     * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.
     */findEmptyPosition(node,nodeList=this.nodes,column=this.column){nodeList=utils_1.Utils.sort(nodeList,-1,column);let found=!1;for(let i=0;!found;++i){let x=i%column,y=Math.floor(i/column);if(x+node.w>column)continue;let box={x:x,y:y,w:node.w,h:node.h};nodeList.find((n=>utils_1.Utils.isIntercepted(box,n)))||(node.x=x,node.y=y,delete node.autoPosition,found=!0)}return found}
/** call to add the given node to our list, fixing collision and re-packing */addNode(node,triggerAddEvent=!1){let dup=this.nodes.find((n=>n._id===node._id));return dup||(// prevent inserting twice! return it instead.
// skip prepareNode if we're in middle of column resize (not new) but do check for bounds!
node=this._inColumnResize?this.nodeBoundFix(node):this.prepareNode(node),delete node._temporaryRemoved,delete node._removeDOM,node.autoPosition&&this.findEmptyPosition(node)&&delete node.autoPosition,this.nodes.push(node),triggerAddEvent&&this.addedNodes.push(node),this._fixCollisions(node),this.batchMode||this._packNodes()._notify(),node)}removeNode(node,removeDOM=!0,triggerEvent=!1){return this.nodes.find((n=>n===node))?(triggerEvent&&// we wait until final drop to manually track removed items (rather than during drag)
this.removedNodes.push(node),removeDOM&&(node._removeDOM=!0),// let CB remove actual HTML (used to set _id to null, but then we loose layout info)
// don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.
this.nodes=this.nodes.filter((n=>n!==node)),this._packNodes()._notify([node])):this}removeAll(removeDOM=!0){return delete this._layouts,0===this.nodes.length?this:(removeDOM&&this.nodes.forEach((n=>n._removeDOM=!0)),// let CB remove actual HTML (used to set _id to null, but then we loose layout info)
this.removedNodes=this.nodes,this.nodes=[],this._notify(this.removedNodes))}
/** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.
     * In more complicated cases (maxRow) it will attempt at moving the item and fixing
     * others in a clone first, then apply those changes if still within specs. */moveNodeCheck(node,o){
// if (node.locked) return false;
if(!this.changedPosConstrain(node,o))return!1;
// simpler case: move item directly...
if(o.pack=!0,!this.maxRow)return this.moveNode(node,o);
// complex case: create a clone with NO maxRow (will check for out of bounds at the end)
let clonedNode,clone=new GridStackEngine({column:this.column,float:this.float,nodes:this.nodes.map((n=>n===node?(clonedNode=Object.assign({},n),clonedNode):Object.assign({},n)))});if(!clonedNode)return!1;
// check if we're covering 50% collision and could move
let canMove=clone.moveNode(clonedNode,o)&&clone.getRow()<=this.maxRow;
// else check if we can force a swap (float=true, or different shapes) on non-resize
if(!canMove&&!o.resizing&&o.collide){let collide=o.collide.el.gridstackNode;// find the source node the clone collided with at 50%
if(this.swap(node,collide))// swaps and mark dirty
return this._notify(),!0}return!!canMove&&(
// if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!
// Note: we can't use the list directly as elements and other parts point to actual node, so copy content
clone.nodes.filter((n=>n._dirty)).forEach((c=>{let n=this.nodes.find((a=>a._id===c._id));n&&(utils_1.Utils.copyPos(n,c),n._dirty=!0)})),this._notify(),!0)}
/** return true if can fit in grid height constrain only (always true if no maxRow) */willItFit(node){if(delete node._willFitPos,!this.maxRow)return!0;
// create a clone with NO maxRow and check if still within size
let clone=new GridStackEngine({column:this.column,float:this.float,nodes:this.nodes.map((n=>Object.assign({},n)))}),n=Object.assign({},node);// clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687
return this.cleanupNode(n),delete n.el,delete n._id,delete n.content,delete n.grid,clone.addNode(n),clone.getRow()<=this.maxRow&&(node._willFitPos=utils_1.Utils.copyPos({},n),!0)}
/** true if x,y or w,h are different after clamping to min/max */changedPosConstrain(node,p){
// first make sure w,h are set for caller
return p.w=p.w||node.w,p.h=p.h||node.h,node.x!==p.x||node.y!==p.y||(
// check constrained w,h
node.maxW&&(p.w=Math.min(p.w,node.maxW)),node.maxH&&(p.h=Math.min(p.h,node.maxH)),node.minW&&(p.w=Math.max(p.w,node.minW)),node.minH&&(p.h=Math.max(p.h,node.minH)),node.w!==p.w||node.h!==p.h)}
/** return true if the passed in node was actually moved (checks for no-op and locked) */moveNode(node,o){var _a,_b;if(!node||/*node.locked ||*/!o)return!1;let wasUndefinedPack;void 0===o.pack&&(wasUndefinedPack=o.pack=!0),
// constrain the passed in values and check if we're still changing our node
"number"!==typeof o.x&&(o.x=node.x),"number"!==typeof o.y&&(o.y=node.y),"number"!==typeof o.w&&(o.w=node.w),"number"!==typeof o.h&&(o.h=node.h);let resizing=node.w!==o.w||node.h!==o.h,nn=utils_1.Utils.copyPos({},node,!0);if(// get min/max out first, then opt positions next
utils_1.Utils.copyPos(nn,o),nn=this.nodeBoundFix(nn,resizing),utils_1.Utils.copyPos(o,nn),utils_1.Utils.samePos(node,o))return!1;let prevPos=utils_1.Utils.copyPos({},node),collides=this.collideAll(node,nn,o.skip),needToMove=!0;
// check if we will need to fix collision at our new location
if(collides.length){let activeDrag=node._moving&&!o.nested,collide=activeDrag?this.directionCollideCoverage(node,o,collides):collides[0];
// check to make sure we actually collided over 50% surface area while dragging
// if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that
if(activeDrag&&collide&&(null===(_b=null===(_a=node.grid)||void 0===_a?void 0:_a.opts)||void 0===_b?void 0:_b.subGridDynamic)&&!node.grid._isTemp){let over=utils_1.Utils.areaIntercept(o.rect,collide._rect),a1=utils_1.Utils.area(o.rect),a2=utils_1.Utils.area(collide._rect),perc=over/(a1<a2?a1:a2);perc>.8&&(collide.grid.makeSubGrid(collide.el,void 0,node),collide=void 0)}collide?needToMove=!this._fixCollisions(node,nn,collide,o):(needToMove=!1,// we didn't cover >50% for a move, skip...
wasUndefinedPack&&delete o.pack)}
// now move (to the original ask vs the collision version which might differ) and repack things
return needToMove&&(node._dirty=!0,utils_1.Utils.copyPos(node,nn)),o.pack&&this._packNodes()._notify(),!utils_1.Utils.samePos(node,prevPos);// pack might have moved things back
}getRow(){return this.nodes.reduce(((row,n)=>Math.max(row,n.y+n.h)),0)}beginUpdate(node){return node._updating||(node._updating=!0,delete node._skipDown,this.batchMode||this.saveInitial()),this}endUpdate(){let n=this.nodes.find((n=>n._updating));return n&&(delete n._updating,delete n._skipDown),this}
/** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,
     * returning a list of widgets for serialization */save(saveElement=!0){var _a;
// use the highest layout for any saved info so we can have full detail on reload #1849
let len=null===(_a=this._layouts)||void 0===_a?void 0:_a.length,layout=len&&this.column!==len-1?this._layouts[len-1]:null,list=[];return this.sortNodes(),this.nodes.forEach((n=>{let wl=null===layout||void 0===layout?void 0:layout.find((l=>l._id===n._id)),w=Object.assign({},n);
// use layout info instead if set
wl&&(w.x=wl.x,w.y=wl.y,w.w=wl.w),utils_1.Utils.removeInternalForSave(w,!saveElement),list.push(w)})),list}
/** @internal called whenever a node is added or moved - updates the cached layouts */layoutsNodesChange(nodes){return!this._layouts||this._inColumnResize||
// remove smaller layouts - we will re-generate those on the fly... larger ones need to update
this._layouts.forEach(((layout,column)=>{if(!layout||column===this.column)return this;if(column<this.column)this._layouts[column]=void 0;else{
// we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.
// NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785
let ratio=column/this.column;nodes.forEach((node=>{if(!node._orig)return;// didn't change (newly added ?)
let n=layout.find((l=>l._id===node._id));n&&(// no cache for new nodes. Will use those values.
// Y changed, push down same amount
// TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)
node.y!==node._orig.y&&(n.y+=node.y-node._orig.y),
// X changed, scale from new position
node.x!==node._orig.x&&(n.x=Math.round(node.x*ratio)),
// width changed, scale from new width
node.w!==node._orig.w&&(n.w=Math.round(node.w*ratio)))}
// ...height always carries over from cache
))}})),this}
/**
     * @internal Called to scale the widget width & position up/down based on the column change.
     * Note we store previous layouts (especially original ones) to make it possible to go
     * from say 12 -> 1 -> 12 and get back to where we were.
     *
     * @param prevColumn previous number of columns
     * @param column  new column number
     * @param nodes different sorted list (ex: DOM order) instead of current list
     * @param layout specify the type of re-layout that will happen (position, size, etc...).
     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column
     */updateNodeWidths(prevColumn,column,nodes,layout="moveScale"){var _a;if(!this.nodes.length||!column||prevColumn===column)return this;
// cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data
this.cacheLayout(this.nodes,prevColumn),this.batchUpdate();// do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision
let newNodes=[],domOrder=!1;
// if we're going to 1 column and using DOM order rather than default sorting, then generate that layout
if(1===column&&(null===nodes||void 0===nodes?void 0:nodes.length)){domOrder=!0;let top=0;nodes.forEach((n=>{n.x=0,n.w=1,n.y=Math.max(n.y,top),top=n.y+n.h})),newNodes=nodes,nodes=[]}else nodes=utils_1.Utils.sort(this.nodes,-1,prevColumn);// current column reverse sorting so we can insert last to front (limit collision)
// see if we have cached previous layout IFF we are going up in size (restore) otherwise always
// generate next size down from where we are (looks more natural as you gradually size down).
let cacheNodes=[];if(column>prevColumn){cacheNodes=this._layouts[column]||[];
// ...if not, start with the largest layout (if not already there) as down-scaling is more accurate
// by pretending we came from that larger column by assigning those values as starting point
let lastIndex=this._layouts.length-1;!cacheNodes.length&&prevColumn!==lastIndex&&(null===(_a=this._layouts[lastIndex])||void 0===_a?void 0:_a.length)&&(prevColumn=lastIndex,this._layouts[lastIndex].forEach((cacheNode=>{let n=nodes.find((n=>n._id===cacheNode._id));n&&(
// still current, use cache info positions
n.x=cacheNode.x,n.y=cacheNode.y,n.w=cacheNode.w)})))}
// if we found cache re-use those nodes that are still current
// ...and add any extra non-cached ones
if(cacheNodes.forEach((cacheNode=>{let j=nodes.findIndex((n=>n._id===cacheNode._id));-1!==j&&(
// still current, use cache info positions
(cacheNode.autoPosition||isNaN(cacheNode.x)||isNaN(cacheNode.y))&&this.findEmptyPosition(cacheNode,newNodes),cacheNode.autoPosition||(nodes[j].x=cacheNode.x,nodes[j].y=cacheNode.y,nodes[j].w=cacheNode.w,newNodes.push(nodes[j])),nodes.splice(j,1))})),nodes.length)if("function"===typeof layout)layout(column,prevColumn,newNodes,nodes);else if(!domOrder){let ratio=column/prevColumn,move="move"===layout||"moveScale"===layout,scale="scale"===layout||"moveScale"===layout;nodes.forEach((node=>{
// NOTE: x + w could be outside of the grid, but addNode() below will handle that
node.x=1===column?0:move?Math.round(node.x*ratio):Math.min(node.x,column-1),node.w=1===column||1===prevColumn?1:scale?Math.round(node.w*ratio)||1:Math.min(node.w,column),newNodes.push(node)})),nodes=[]}
// finally re-layout them in reverse order (to get correct placement)
return domOrder||(newNodes=utils_1.Utils.sort(newNodes,-1,column)),this._inColumnResize=!0,// prevent cache update
this.nodes=[],// pretend we have no nodes to start with (add() will use same structures) to simplify layout
newNodes.forEach((node=>{this.addNode(node,!1),// 'false' for add event trigger
delete node._orig}// make sure the commit doesn't try to restore things back to original
)),this.batchUpdate(!1),delete this._inColumnResize,this}
/**
     * call to cache the given layout internally to the given location so we can restore back when column changes size
     * @param nodes list of nodes
     * @param column corresponding column index to save it under
     * @param clear if true, will force other caches to be removed (default false)
     */cacheLayout(nodes,column,clear=!1){let copy=[];return nodes.forEach(((n,i)=>{n._id=n._id||GridStackEngine._idSeq++,// make sure we have an id in case this is new layout, else re-use id already set
copy[i]={x:n.x,y:n.y,w:n.w,_id:n._id}}// only thing we change is x,y,w and id to find it back
)),this._layouts=clear?[]:this._layouts||[],// use array to find larger quick
this._layouts[column]=copy,this}
/**
     * call to cache the given node layout internally to the given location so we can restore back when column changes size
     * @param node single node to cache
     * @param column corresponding column index to save it under
     */cacheOneLayout(n,column){n._id=n._id||GridStackEngine._idSeq++;let l={x:n.x,y:n.y,w:n.w,_id:n._id};n.autoPosition&&(delete l.x,delete l.y,l.autoPosition=!0),this._layouts=this._layouts||[],this._layouts[column]=this._layouts[column]||[];let index=this.findCacheLayout(n,column);return-1===index?this._layouts[column].push(l):this._layouts[column][index]=l,this}findCacheLayout(n,column){var _a,_b,_c;return null!==(_c=null===(_b=null===(_a=this._layouts)||void 0===_a?void 0:_a[column])||void 0===_b?void 0:_b.findIndex((l=>l._id===n._id)))&&void 0!==_c?_c:-1}
/** called to remove all internal values but the _id */cleanupNode(node){for(let prop in node)"_"===prop[0]&&"_id"!==prop&&delete node[prop];return this}}exports.GridStackEngine=GridStackEngine,
/** @internal unique global internal _id counter NOT starting at 0 */
GridStackEngine._idSeq=1},
/***/654053:
/***/function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k),Object.defineProperty(o,k2,{enumerable:!0,get:function(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__exportStar=this&&this.__exportStar||function(m,exports){for(var p in m)"default"===p||exports.hasOwnProperty(p)||__createBinding(exports,m,p)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.GridStack=void 0;
/*!
 * GridStack 7.3.0
 * https://gridstackjs.com/
 *
 * Copyright (c) 2021-2022 Alain Dumesny
 * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE
 */
const gridstack_engine_1=__webpack_require__(846541),utils_1=__webpack_require__(14090),types_1=__webpack_require__(680014),dd_gridstack_1=__webpack_require__(231485),dd_touch_1=__webpack_require__(600212),dd_manager_1=__webpack_require__(488951),dd=new dd_gridstack_1.DDGridStack;
// export all dependent file as well to make it easier for users to just import the main file
__exportStar(__webpack_require__(680014),exports),__exportStar(__webpack_require__(14090),exports),__exportStar(__webpack_require__(846541),exports),__exportStar(__webpack_require__(231485),exports);
/**
 * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.
 * Note: your grid elements MUST have the following classes for the CSS layout to work:
 * @example
 * <div class="grid-stack">
 *   <div class="grid-stack-item">
 *     <div class="grid-stack-item-content">Item 1</div>
 *   </div>
 * </div>
 */
class GridStack{
/**
     * Construct a grid item from the given element and options
     * @param el
     * @param opts
     */
constructor(el,opts={}){var _a,_b;
/** @internal */this._gsEventHandler={},
/** @internal extra row added when dragging at the bottom of the grid */
this._extraDragRow=0,this.el=el,// exposed HTML element to the user
opts=opts||{},// handles null/undefined/0
el.classList.contains("grid-stack")||this.el.classList.add("grid-stack"),
// if row property exists, replace minRow and maxRow instead
opts.row&&(opts.minRow=opts.maxRow=opts.row,delete opts.row);let rowAttr=utils_1.Utils.toNumber(el.getAttribute("gs-row"));
// flag only valid in sub-grids (handled by parent, not here)
"auto"===opts.column&&delete opts.column;
// 'minWidth' legacy support in 5.1
/* eslint-disable-next-line @typescript-eslint/no-explicit-any */let anyOpts=opts;void 0!==anyOpts.minWidth&&(opts.oneColumnSize=opts.oneColumnSize||anyOpts.minWidth,delete anyOpts.minWidth),
// save original setting so we can restore on save
void 0!==opts.alwaysShowResizeHandle&&(opts._alwaysShowResizeHandle=opts.alwaysShowResizeHandle);
// elements DOM attributes override any passed options (like CSS style) - merge the two together
let defaults=Object.assign(Object.assign({},utils_1.Utils.cloneDeep(types_1.gridDefaults)),{column:utils_1.Utils.toNumber(el.getAttribute("gs-column"))||types_1.gridDefaults.column,minRow:rowAttr||(utils_1.Utils.toNumber(el.getAttribute("gs-min-row"))||types_1.gridDefaults.minRow),maxRow:rowAttr||(utils_1.Utils.toNumber(el.getAttribute("gs-max-row"))||types_1.gridDefaults.maxRow),staticGrid:utils_1.Utils.toBool(el.getAttribute("gs-static"))||types_1.gridDefaults.staticGrid,draggable:{handle:(opts.handleClass?"."+opts.handleClass:opts.handle?opts.handle:"")||types_1.gridDefaults.draggable.handle},removableOptions:{accept:opts.itemClass?"."+opts.itemClass:types_1.gridDefaults.removableOptions.accept}});el.getAttribute("gs-animate")&&(// default to true, but if set to false use that instead
defaults.animate=utils_1.Utils.toBool(el.getAttribute("gs-animate"))),this.opts=utils_1.Utils.defaults(opts,defaults),opts=null,// make sure we use this.opts instead
this._initMargin(),// part of settings defaults...
// Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)
1!==this.opts.column&&!this.opts.disableOneColumnMode&&this._widthOrContainer()<=this.opts.oneColumnSize&&(this._prevColumn=this.getColumn(),this.opts.column=1),"auto"===this.opts.rtl&&(this.opts.rtl="rtl"===el.style.direction),this.opts.rtl&&this.el.classList.add("grid-stack-rtl");
// check if we're been nested, and if so update our style and keep pointer around (used during save)
let parentGridItem=null===(_a=utils_1.Utils.closestUpByClass(this.el,types_1.gridDefaults.itemClass))||void 0===_a?void 0:_a.gridstackNode;parentGridItem&&(parentGridItem.subGrid=this,this.parentGridItem=parentGridItem,this.el.classList.add("grid-stack-nested"),parentGridItem.el.classList.add("grid-stack-sub-grid")),this._isAutoCellHeight="auto"===this.opts.cellHeight,this._isAutoCellHeight||"initial"===this.opts.cellHeight?
// make the cell content square initially (will use resize/column event to keep it square)
this.cellHeight(void 0,!1):(
// append unit if any are set
"number"==typeof this.opts.cellHeight&&this.opts.cellHeightUnit&&this.opts.cellHeightUnit!==types_1.gridDefaults.cellHeightUnit&&(this.opts.cellHeight=this.opts.cellHeight+this.opts.cellHeightUnit,delete this.opts.cellHeightUnit),this.cellHeight(this.opts.cellHeight,!1)),
// see if we need to adjust auto-hide
"mobile"===this.opts.alwaysShowResizeHandle&&(this.opts.alwaysShowResizeHandle=dd_touch_1.isTouch),this._styleSheetClass="grid-stack-instance-"+gridstack_engine_1.GridStackEngine._idSeq++,this.el.classList.add(this._styleSheetClass),this._setStaticClass();let engineClass=this.opts.engineClass||GridStack.engineClass||gridstack_engine_1.GridStackEngine;
// load any passed in children as well, which overrides any DOM layout done above
if(this.engine=new engineClass({column:this.getColumn(),float:this.opts.float,maxRow:this.opts.maxRow,onChange:cbNodes=>{let maxH=0;this.engine.nodes.forEach((n=>{maxH=Math.max(maxH,n.y+n.h)})),cbNodes.forEach((n=>{let el=n.el;el&&(n._removeDOM?(el&&el.remove(),delete n._removeDOM):this._writePosAttr(el,n))})),this._updateStyles(!1,maxH)}// false = don't recreate, just append if need be
}),this.opts.auto&&(this.batchUpdate(),// prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...
this.getGridItems().forEach((el=>this._prepareElement(el))),this.batchUpdate(!1)),this.opts.children){let children=this.opts.children;delete this.opts.children,children.length&&this.load(children)}this.setAnimation(this.opts.animate),this._updateStyles(),12!=this.opts.column&&this.el.classList.add("grid-stack-"+this.opts.column),
// legacy support to appear 'per grid` options when really global.
this.opts.dragIn&&GridStack.setupDragIn(this.opts.dragIn,this.opts.dragInOptions),delete this.opts.dragIn,delete this.opts.dragInOptions,
// dynamic grids require pausing during drag to detect over to nest vs push
this.opts.subGridDynamic&&!dd_manager_1.DDManager.pauseDrag&&(dd_manager_1.DDManager.pauseDrag=!0),void 0!==(null===(_b=this.opts.draggable)||void 0===_b?void 0:_b.pause)&&(dd_manager_1.DDManager.pauseDrag=this.opts.draggable.pause),this._setupRemoveDrop(),this._setupAcceptWidget(),this._updateWindowResizeEvent()}
/**
     * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will
     * simply return the existing instance (ignore any passed options). There is also an initAll() version that support
     * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.
     * @param options grid options (optional)
     * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)
     *
     * @example
     * let grid = GridStack.init();
     *
     * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later
     * let grid = document.querySelector('.grid-stack').gridstack;
     */static init(options={},elOrString=".grid-stack"){let el=GridStack.getGridElement(elOrString);return el?(el.gridstack||(el.gridstack=new GridStack(el,utils_1.Utils.cloneDeep(options))),el.gridstack):null}
/**
     * Will initialize a list of elements (given a selector) and return an array of grids.
     * @param options grid options (optional)
     * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)
     *
     * @example
     * let grids = GridStack.initAll();
     * grids.forEach(...)
     */static initAll(options={},selector=".grid-stack"){let grids=[];return GridStack.getGridElements(selector).forEach((el=>{el.gridstack||(el.gridstack=new GridStack(el,utils_1.Utils.cloneDeep(options)),delete options.dragIn,delete options.dragInOptions),grids.push(el.gridstack)})),grids.length,grids}
/**
     * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then
     * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from
     * JSON serialized data, including options.
     * @param parent HTML element parent to the grid
     * @param opt grids options used to initialize the grid, and list of children
     */static addGrid(parent,opt={}){if(!parent)return null;
// create the grid element, but check if the passed 'parent' already has grid styling and should be used instead
let el=parent;const parentIsGrid=parent.classList.contains("grid-stack");if(!parentIsGrid||opt.addRemoveCB)if(opt.addRemoveCB)el=opt.addRemoveCB(parent,opt,!0,!0);else{let doc=document.implementation.createHTMLDocument("");// IE needs a param
doc.body.innerHTML=`<div class="grid-stack ${opt.class||""}"></div>`,el=doc.body.children[0],parent.appendChild(el)}
// create grid class and load any children
let grid=GridStack.init(opt,el);return grid}
/** call this method to register your engine instead of the default one.
     * See instead `GridStackOptions.engineClass` if you only need to
     * replace just one instance.
     */static registerEngine(engineClass){GridStack.engineClass=engineClass}
/** @internal create placeholder DIV as needed */get placeholder(){if(!this._placeholder){let placeholderChild=document.createElement("div");// child so padding match item-content
placeholderChild.className="placeholder-content",this.opts.placeholderText&&(placeholderChild.innerHTML=this.opts.placeholderText),this._placeholder=document.createElement("div"),this._placeholder.classList.add(this.opts.placeholderClass,types_1.gridDefaults.itemClass,this.opts.itemClass),this.placeholder.appendChild(placeholderChild)}return this._placeholder}
/**
     * add a new widget and returns it.
     *
     * Widget will be always placed even if result height is more than actual grid height.
     * You need to use `willItFit()` before calling addWidget for additional check.
     * See also `makeWidget()`.
     *
     * @example
     * let grid = GridStack.init();
     * grid.addWidget({w: 3, content: 'hello'});
     * grid.addWidget('<div class="grid-stack-item"><div class="grid-stack-item-content">hello</div></div>', {w: 3});
     *
     * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add
     * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget
     */addWidget(els,options){function isGridStackWidget(w){return void 0!==w.el||void 0!==w.x||void 0!==w.y||void 0!==w.w||void 0!==w.h||void 0!==w.content}let el,node;if("string"===typeof els){let doc=document.implementation.createHTMLDocument("");// IE needs a param
doc.body.innerHTML=els,el=doc.body.children[0]}else if(0===arguments.length||1===arguments.length&&isGridStackWidget(els))if(node=options=els,null===node||void 0===node?void 0:node.el)el=node.el;// re-use element stored in the node
else if(this.opts.addRemoveCB)el=this.opts.addRemoveCB(this.el,options,!0,!1);else{let content=(null===options||void 0===options?void 0:options.content)||"",doc=document.implementation.createHTMLDocument("");// IE needs a param
doc.body.innerHTML=`<div class="grid-stack-item ${this.opts.itemClass||""}"><div class="grid-stack-item-content">${content}</div></div>`,el=doc.body.children[0]}else el=els;if(!el)return;
// Tempting to initialize the passed in opt with default and valid values, but this break knockout demos
// as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.
// So make sure we load any DOM attributes that are not specified in passed in options (which override)
let domAttr=this._readAttr(el);return options=utils_1.Utils.cloneDeep(options)||{},// make a copy before we modify in case caller re-uses it
utils_1.Utils.defaults(options,domAttr),node=this.engine.prepareNode(options),this._writeAttr(el,options),this._insertNotAppend?this.el.prepend(el):this.el.appendChild(el),
// similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id
this._prepareElement(el,!0,options),this._updateContainerHeight(),
// see if there is a sub-grid to create
node.subGrid&&this.makeSubGrid(node.el,void 0,void 0,!1),
// if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure
// we don't override the larger 12 column layout that was already saved. #1985
this._prevColumn&&1===this.opts.column&&(this._ignoreLayoutsNodeChange=!0),this._triggerAddEvent(),this._triggerChangeEvent(),delete this._ignoreLayoutsNodeChange,el}
/**
     * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them
     * from the parent's subGrid options.
     * @param el gridItem element to convert
     * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults
     * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)
     * @returns newly created grid
     */makeSubGrid(el,ops,nodeToAdd,saveContent=!0){var _a,_b,_c;let subGridTemplate,node=el.gridstackNode;if(node||(node=this.makeWidget(el).gridstackNode),null===(_a=node.subGrid)||void 0===_a?void 0:_a.el)return node.subGrid;// already done
// find the template subGrid stored on a parent as fallback...
// eslint-disable-next-line @typescript-eslint/no-this-alias
let autoColumn,grid=this;while(grid&&!subGridTemplate)subGridTemplate=null===(_b=grid.opts)||void 0===_b?void 0:_b.subGrid,grid=null===(_c=grid.parentGridItem)||void 0===_c?void 0:_c.grid;
//... and set the create options
ops=utils_1.Utils.cloneDeep(Object.assign(Object.assign(Object.assign({},subGridTemplate||{}),{children:void 0}),ops||node.subGrid)),node.subGrid=ops,"auto"===ops.column&&(autoColumn=!0,ops.column=Math.max(node.w||1,(null===nodeToAdd||void 0===nodeToAdd?void 0:nodeToAdd.w)||1),ops.disableOneColumnMode=!0);
// if we're converting an existing full item, move over the content to be the first sub item in the new grid
let newItem,newItemOpt,content=node.el.querySelector(".grid-stack-item-content");if(saveContent){if(this._removeDD(node.el),// remove D&D since it's set on content div
newItemOpt=Object.assign(Object.assign({},node),{x:0,y:0}),utils_1.Utils.removeInternalForSave(newItemOpt),delete newItemOpt.subGrid,node.content&&(newItemOpt.content=node.content,delete node.content),this.opts.addRemoveCB)newItem=this.opts.addRemoveCB(this.el,newItemOpt,!0,!1);else{let doc=document.implementation.createHTMLDocument("");// IE needs a param
doc.body.innerHTML='<div class="grid-stack-item"></div>',newItem=doc.body.children[0],newItem.appendChild(content),doc.body.innerHTML='<div class="grid-stack-item-content"></div>',content=doc.body.children[0],node.el.appendChild(content)}this._prepareDragDropByNode(node)}
// if we're adding an additional item, make the container large enough to have them both
if(nodeToAdd){let w=autoColumn?ops.column:node.w,h=node.h+nodeToAdd.h,style=node.el.style;style.transition="none",// show up instantly so we don't see scrollbar with nodeToAdd
this.update(node.el,{w:w,h:h}),setTimeout((()=>style.transition=null))}this.opts.addRemoveCB&&(ops.addRemoveCB=ops.addRemoveCB||this.opts.addRemoveCB);let subGrid=node.subGrid=GridStack.addGrid(content,ops);return(null===nodeToAdd||void 0===nodeToAdd?void 0:nodeToAdd._moving)&&(subGrid._isTemp=!0),// prevent re-nesting as we add over
autoColumn&&(subGrid._autoColumn=!0),
// add the original content back as a child of hte newly created grid
saveContent&&subGrid.addWidget(newItem,newItemOpt),
// now add any additional node
nodeToAdd&&(nodeToAdd._moving?
// create an artificial event even for the just created grid to receive this item
window.setTimeout((()=>utils_1.Utils.simulateMouseEvent(nodeToAdd._event,"mouseenter",subGrid.el)),0):subGrid.addWidget(node.el,node)),subGrid}
/**
     * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back
     * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)
     */removeAsSubGrid(nodeThatRemoved){var _a;let pGrid=null===(_a=this.parentGridItem)||void 0===_a?void 0:_a.grid;pGrid&&(pGrid.batchUpdate(),pGrid.removeWidget(this.parentGridItem.el,!0,!0),this.engine.nodes.forEach((n=>{
// migrate any children over and offsetting by our location
n.x+=this.parentGridItem.x,n.y+=this.parentGridItem.y,pGrid.addWidget(n.el,n)})),pGrid.batchUpdate(!1),this.parentGridItem&&delete this.parentGridItem.subGrid,delete this.parentGridItem,
// create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)
nodeThatRemoved&&window.setTimeout((()=>utils_1.Utils.simulateMouseEvent(nodeThatRemoved._event,"mouseenter",pGrid.el)),0))}
/**
    /**
     * saves the current layout returning a list of widgets for serialization which might include any nested grids.
     * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will
     * be removed.
     * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()
     * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.
     * @returns list of widgets or full grid option, including .children list of widgets
     */save(saveContent=!0,saveGridOpt=!1){
// return copied nodes we can modify at will...
let list=this.engine.save(saveContent);
// check for HTML content and nested grids
// check if save entire grid options (needed for recursive) + children...
if(list.forEach((n=>{var _a;if(saveContent&&n.el&&!n.subGrid){// sub-grid are saved differently, not plain content
let sub=n.el.querySelector(".grid-stack-item-content");n.content=sub?sub.innerHTML:void 0,n.content||delete n.content}else
// check for nested grid
if(saveContent||delete n.content,null===(_a=n.subGrid)||void 0===_a?void 0:_a.el){const listOrOpt=n.subGrid.save(saveContent,saveGridOpt);n.subGrid=saveGridOpt?listOrOpt:{children:listOrOpt}}delete n.el})),saveGridOpt){let o=utils_1.Utils.cloneDeep(this.opts);
// delete default values that will be recreated on launch
o.marginBottom===o.marginTop&&o.marginRight===o.marginLeft&&o.marginTop===o.marginRight&&(o.margin=o.marginTop,delete o.marginTop,delete o.marginRight,delete o.marginBottom,delete o.marginLeft),o.rtl===("rtl"===this.el.style.direction)&&(o.rtl="auto"),this._isAutoCellHeight&&(o.cellHeight="auto"),this._autoColumn&&(o.column="auto",delete o.disableOneColumnMode);const origShow=o._alwaysShowResizeHandle;return delete o._alwaysShowResizeHandle,void 0!==origShow?o.alwaysShowResizeHandle=origShow:delete o.alwaysShowResizeHandle,utils_1.Utils.removeInternalAndSame(o,types_1.gridDefaults),o.children=list,o}return list}
/**
     * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.
     *
     * @param layout list of widgets definition to update/create
     * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving
     * the user control of insertion.
     *
     * @example
     * see http://gridstackjs.com/demo/serialization.html
     **/load(layout,addRemove=this.opts.addRemoveCB||!0){let items=GridStack.Utils.sort([...layout],-1,this._prevColumn||this.getColumn());// make copy before we mod/sort
this._insertNotAppend=!0,// since create in reverse order...
// if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save
// the original wanted layout so we can scale back up correctly #1471
this._prevColumn&&this._prevColumn!==this.opts.column&&items.some((n=>n.x+n.w>this.opts.column))&&(this._ignoreLayoutsNodeChange=!0,// skip layout update
this.engine.cacheLayout(items,this._prevColumn,!0));
// if given a different callback, temporally set it as global option to creating will use it
const prevCB=this.opts.addRemoveCB;"function"===typeof addRemove&&(this.opts.addRemoveCB=addRemove);let removed=[];
// see if any items are missing from new layout and need to be removed first
if(this.batchUpdate(),addRemove){let copyNodes=[...this.engine.nodes];// don't loop through array you modify
copyNodes.forEach((n=>{let item=items.find((w=>n.id===w.id));item||(this.opts.addRemoveCB&&this.opts.addRemoveCB(this.el,n,!1,!1),removed.push(n),// batch keep track
this.removeWidget(n.el,!0,!1))}))}
// now add/update the widgets
return items.forEach((w=>{let item=w.id||0===w.id?this.engine.nodes.find((n=>n.id===w.id)):void 0;if(item){if(this.update(item.el,w),w.subGrid&&w.subGrid.children){// update any sub grid as well
let sub=item.el.querySelector(".grid-stack");sub&&sub.gridstack&&(sub.gridstack.load(w.subGrid.children),// TODO: support updating grid options ?
this._insertNotAppend=!0)}}else addRemove&&this.addWidget(w)})),this.engine.removedNodes=removed,this.batchUpdate(!1),
// after commit, clear that flag
delete this._ignoreLayoutsNodeChange,delete this._insertNotAppend,prevCB?this.opts.addRemoveCB=prevCB:delete this.opts.addRemoveCB,this}
/**
     * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)
     * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.
     */batchUpdate(flag=!0){return this.engine.batchUpdate(flag),flag||(this._triggerRemoveEvent(),this._triggerAddEvent(),this._triggerChangeEvent()),this}
/**
     * Gets current cell height.
     */getCellHeight(forcePixel=!1){if(this.opts.cellHeight&&"auto"!==this.opts.cellHeight&&(!forcePixel||!this.opts.cellHeightUnit||"px"===this.opts.cellHeightUnit))return this.opts.cellHeight;
// else get first cell height
let el=this.el.querySelector("."+this.opts.itemClass);if(el){let height=utils_1.Utils.toNumber(el.getAttribute("gs-h"));return Math.round(el.offsetHeight/height)}
// else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)
let rows=parseInt(this.el.getAttribute("gs-current-row"));return rows?Math.round(this.el.getBoundingClientRect().height/rows):this.opts.cellHeight}
/**
     * Update current cell height - see `GridStackOptions.cellHeight` for format.
     * This method rebuilds an internal CSS style sheet.
     * Note: You can expect performance issues if call this method too often.
     *
     * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),
     * if pass 0 the CSS will be generated by the application instead.
     * @param update (Optional) if false, styles will not be updated
     *
     * @example
     * grid.cellHeight(100); // same as 100px
     * grid.cellHeight('70px');
     * grid.cellHeight(grid.cellWidth() * 1.2);
     */cellHeight(val,update=!0){
// make item content be square
if(
// if not called internally, check if we're changing mode
update&&void 0!==val&&this._isAutoCellHeight!==("auto"===val)&&(this._isAutoCellHeight="auto"===val,this._updateWindowResizeEvent()),"initial"!==val&&"auto"!==val||(val=void 0),void 0===val){let marginDiff=-this.opts.marginRight-this.opts.marginLeft+this.opts.marginTop+this.opts.marginBottom;val=this.cellWidth()+marginDiff}let data=utils_1.Utils.parseHeight(val);return this.opts.cellHeightUnit===data.unit&&this.opts.cellHeight===data.h||(this.opts.cellHeightUnit=data.unit,this.opts.cellHeight=data.h,update&&this._updateStyles(!0)),this}
/** Gets current cell width. */cellWidth(){return this._widthOrContainer()/this.getColumn()}
/** return our expected width (or parent) for 1 column check */_widthOrContainer(){
// use `offsetWidth` or `clientWidth` (no scrollbar) ?
// https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively
return this.el.clientWidth||this.el.parentElement.clientWidth||window.innerWidth}
/** re-layout grid items to reclaim any empty space */compact(){return this.engine.compact(),this._triggerChangeEvent(),this}
/**
     * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,
     * as well as cache the original layout so you can revert back to previous positions without loss.
     * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],
     * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)
     * @param column - Integer > 0 (default 12).
     * @param layout specify the type of re-layout that will happen (position, size, etc...).
     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column
     */column(column,layout="moveScale"){if(column<1||this.opts.column===column)return this;let domNodes,oldColumn=this.getColumn();
// if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)
// then remember the original columns so we can restore.
return 1===column?this._prevColumn=oldColumn:delete this._prevColumn,this.el.classList.remove("grid-stack-"+oldColumn),this.el.classList.add("grid-stack-"+column),this.opts.column=this.engine.column=column,1===column&&this.opts.oneColumnModeDomSort&&(domNodes=[],this.getGridItems().forEach((el=>{el.gridstackNode&&domNodes.push(el.gridstackNode)})),domNodes.length||(domNodes=void 0)),this.engine.updateNodeWidths(oldColumn,column,domNodes,layout),this._isAutoCellHeight&&this.cellHeight(),
// and trigger our event last...
this._ignoreLayoutsNodeChange=!0,// skip layout update
this._triggerChangeEvent(),delete this._ignoreLayoutsNodeChange,this}
/**
     * get the number of columns in the grid (default 12)
     */getColumn(){return this.opts.column}
/** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */getGridItems(){return Array.from(this.el.children).filter((el=>el.matches("."+this.opts.itemClass)&&!el.matches("."+this.opts.placeholderClass)))}
/**
     * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.
     * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).
     */destroy(removeDOM=!0){if(this.el)// prevent multiple calls
return this._updateWindowResizeEvent(!0),this.setStatic(!0,!1),// permanently removes DD but don't set CSS class (we're going away)
this.setAnimation(!1),removeDOM?this.el.parentNode.removeChild(this.el):(this.removeAll(removeDOM),this.el.classList.remove(this._styleSheetClass)),this._removeStylesheet(),this.el.removeAttribute("gs-current-row"),this.parentGridItem&&delete this.parentGridItem.subGrid,delete this.parentGridItem,delete this.opts,delete this._placeholder,delete this.engine,delete this.el.gridstack,// remove circular dependency that would prevent a freeing
delete this.el,this}
/**
     * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)
     */float(val){return this.opts.float!==val&&(this.opts.float=this.engine.float=val,this._triggerChangeEvent()),this}
/**
     * get the current float mode
     */getFloat(){return this.engine.float}
/**
     * Get the position of the cell under a pixel on screen.
     * @param position the position of the pixel to resolve in
     * absolute coordinates, as an object with top and left properties
     * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).
     * Useful when grid is within `position: relative` element
     *
     * Returns an object with properties `x` and `y` i.e. the column and row in the grid.
     */getCellFromPixel(position,useDocRelative=!1){let containerPos,box=this.el.getBoundingClientRect();
// console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)
containerPos=useDocRelative?{top:box.top+document.documentElement.scrollTop,left:box.left}:{top:this.el.offsetTop,left:this.el.offsetLeft};let relativeLeft=position.left-containerPos.left,relativeTop=position.top-containerPos.top,columnWidth=box.width/this.getColumn(),rowHeight=box.height/parseInt(this.el.getAttribute("gs-current-row"));return{x:Math.floor(relativeLeft/columnWidth),y:Math.floor(relativeTop/rowHeight)}}
/** returns the current number of rows, which will be at least `minRow` if set */getRow(){return Math.max(this.engine.getRow(),this.opts.minRow)}
/**
     * Checks if specified area is empty.
     * @param x the position x.
     * @param y the position y.
     * @param w the width of to check
     * @param h the height of to check
     */isAreaEmpty(x,y,w,h){return this.engine.isAreaEmpty(x,y,w,h)}
/**
     * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.
     * If you want gridstack to add the elements for you, use `addWidget()` instead.
     * Makes the given element a widget and returns it.
     * @param els widget or single selector to convert.
     *
     * @example
     * let grid = GridStack.init();
     * grid.el.appendChild('<div id="gsi-1" gs-w="3"></div>');
     * grid.makeWidget('#gsi-1');
     */makeWidget(els){let el=GridStack.getElement(els);return this._prepareElement(el,!0),this._updateContainerHeight(),this._triggerAddEvent(),this._triggerChangeEvent(),el}
/**
     * Event handler that extracts our CustomEvent data out automatically for receiving custom
     * notifications (see doc for supported events)
     * @param name of the event (see possible values) or list of names space separated
     * @param callback function called with event and optional second/third param
     * (see README documentation for each signature).
     *
     * @example
     * grid.on('added', function(e, items) { log('added ', items)} );
     * or
     * grid.on('added removed change', function(e, items) { log(e.type, items)} );
     *
     * Note: in some cases it is the same as calling native handler and parsing the event.
     * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );
     *
     */on(name,callback){
// check for array of names being passed instead
if(-1!==name.indexOf(" ")){let names=name.split(" ");return names.forEach((name=>this.on(name,callback))),this}if("change"===name||"added"===name||"removed"===name||"enable"===name||"disable"===name){
// native CustomEvent handlers - cash the generic handlers so we can easily remove
let noData="enable"===name||"disable"===name;this._gsEventHandler[name]=noData?event=>callback(event):event=>callback(event,event.detail),this.el.addEventListener(name,this._gsEventHandler[name])}else"drag"!==name&&"dragstart"!==name&&"dragstop"!==name&&"resizestart"!==name&&"resize"!==name&&"resizestop"!==name&&"dropped"!==name||(
// drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.
// do same for start event to make it easier...
this._gsEventHandler[name]=callback);return this}
/**
     * unsubscribe from the 'on' event below
     * @param name of the event (see possible values)
     */off(name){
// check for array of names being passed instead
if(-1!==name.indexOf(" ")){let names=name.split(" ");return names.forEach((name=>this.off(name))),this}return"change"!==name&&"added"!==name&&"removed"!==name&&"enable"!==name&&"disable"!==name||
// remove native CustomEvent handlers
this._gsEventHandler[name]&&this.el.removeEventListener(name,this._gsEventHandler[name]),delete this._gsEventHandler[name],this}
/**
     * Removes widget from the grid.
     * @param el  widget or selector to modify
     * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).
     * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).
     */removeWidget(els,removeDOM=!0,triggerEvent=!0){return GridStack.getElements(els).forEach((el=>{if(el.parentElement&&el.parentElement!==this.el)return;// not our child!
let node=el.gridstackNode;
// For Meteor support: https://github.com/gridstack/gridstack.js/pull/272
node||(node=this.engine.nodes.find((n=>el===n.el))),node&&(
// remove our DOM data (circular link) and drag&drop permanently
delete el.gridstackNode,this._removeDD(el),this.engine.removeNode(node,removeDOM,triggerEvent),removeDOM&&el.parentElement&&el.remove())})),triggerEvent&&(this._triggerRemoveEvent(),this._triggerChangeEvent()),this}
/**
     * Removes all widgets from the grid.
     * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).
     */removeAll(removeDOM=!0){
// always remove our DOM data (circular link) before list gets emptied and drag&drop permanently
return this.engine.nodes.forEach((n=>{delete n.el.gridstackNode,this._removeDD(n.el)})),this.engine.removeAll(removeDOM),this._triggerRemoveEvent(),this}
/**
     * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.
     * @param doAnimate if true the grid will animate.
     */setAnimation(doAnimate){return doAnimate?this.el.classList.add("grid-stack-animate"):this.el.classList.remove("grid-stack-animate"),this}
/**
     * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.
     * Also toggle the grid-stack-static class.
     * @param val if true the grid become static.
     * @param updateClass true (default) if css class gets updated
     * @param recurse true (default) if sub-grids also get updated
     */setStatic(val,updateClass=!0,recurse=!0){return this.opts.staticGrid===val||(this.opts.staticGrid=val,this._setupRemoveDrop(),this._setupAcceptWidget(),this.engine.nodes.forEach((n=>{this._prepareDragDropByNode(n),// either delete or init Drag&drop
n.subGrid&&recurse&&n.subGrid.setStatic(val,updateClass,recurse)})),updateClass&&this._setStaticClass()),this}
/**
     * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.
     * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)
     * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.
     */update(els,opt){
// support legacy call for now ?
if(arguments.length>2){
// eslint-disable-next-line prefer-rest-params
let a=arguments,i=1;return opt={x:a[i++],y:a[i++],w:a[i++],h:a[i++]},this.update(els,opt)}return GridStack.getElements(els).forEach((el=>{if(!el||!el.gridstackNode)return;let n=el.gridstackNode,w=utils_1.Utils.cloneDeep(opt);// make a copy we can modify in case they re-use it or multiple items
delete w.autoPosition;
// move/resize widget if anything changed
let m,keys=["x","y","w","h"];
// check for content changing
if(keys.some((k=>void 0!==w[k]&&w[k]!==n[k]))&&(m={},keys.forEach((k=>{m[k]=void 0!==w[k]?w[k]:n[k],delete w[k]}))),
// for a move as well IFF there is any min/max fields set
!m&&(w.minW||w.minH||w.maxW||w.maxH)&&(m={}),w.content){let sub=el.querySelector(".grid-stack-item-content");sub&&sub.innerHTML!==w.content&&(sub.innerHTML=w.content),delete w.content}
// any remaining fields are assigned, but check for dragging changes, resize constrain
let changed=!1,ddChanged=!1;for(const key in w)"_"!==key[0]&&n[key]!==w[key]&&(n[key]=w[key],changed=!0,ddChanged=ddChanged||!this.opts.staticGrid&&("noResize"===key||"noMove"===key||"locked"===key));
// finally move the widget
m&&(this.engine.cleanNodes().beginUpdate(n).moveNode(n,m),this._updateContainerHeight(),this._triggerChangeEvent(),this.engine.endUpdate()),changed&&// move will only update x,y,w,h so update the rest too
this._writeAttr(el,n),ddChanged&&this._prepareDragDropByNode(n)})),this}
/**
     * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).
     * @param value margin value
     */margin(value){let isMultiValue="string"===typeof value&&value.split(" ").length>1;
// check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)
if(!isMultiValue){let data=utils_1.Utils.parseHeight(value);if(this.opts.marginUnit===data.unit&&this.opts.margin===data.h)return}
// re-use existing margin handling
// true = force re-create
return this.opts.margin=value,this.opts.marginTop=this.opts.marginBottom=this.opts.marginLeft=this.opts.marginRight=void 0,this._initMargin(),this._updateStyles(!0),this}
/** returns current margin number value (undefined if 4 sides don't match) */getMargin(){return this.opts.margin}
/**
     * Returns true if the height of the grid will be less than the vertical
     * constraint. Always returns true if grid doesn't have height constraint.
     * @param node contains x,y,w,h,auto-position options
     *
     * @example
     * if (grid.willItFit(newWidget)) {
     *   grid.addWidget(newWidget);
     * } else {
     *   alert('Not enough free space to place the widget');
     * }
     */willItFit(node){
// support legacy call for now
if(arguments.length>1){
// eslint-disable-next-line prefer-rest-params
let a=arguments,i=0,w={x:a[i++],y:a[i++],w:a[i++],h:a[i++],autoPosition:a[i++]};return this.willItFit(w)}return this.engine.willItFit(node)}
/** @internal */_triggerChangeEvent(){if(this.engine.batchMode)return this;let elements=this.engine.getDirtyNodes(!0);// verify they really changed
// we called, now reset initial values & dirty flags
return elements&&elements.length&&(this._ignoreLayoutsNodeChange||this.engine.layoutsNodesChange(elements),this._triggerEvent("change",elements)),this.engine.saveInitial(),this}
/** @internal */_triggerAddEvent(){return this.engine.batchMode||this.engine.addedNodes&&this.engine.addedNodes.length>0&&(this._ignoreLayoutsNodeChange||this.engine.layoutsNodesChange(this.engine.addedNodes),
// prevent added nodes from also triggering 'change' event (which is called next)
this.engine.addedNodes.forEach((n=>{delete n._dirty})),this._triggerEvent("added",this.engine.addedNodes),this.engine.addedNodes=[]),this}
/** @internal */_triggerRemoveEvent(){return this.engine.batchMode||this.engine.removedNodes&&this.engine.removedNodes.length>0&&(this._triggerEvent("removed",this.engine.removedNodes),this.engine.removedNodes=[]),this}
/** @internal */_triggerEvent(type,data){let event=data?new CustomEvent(type,{bubbles:!1,detail:data}):new Event(type);return this.el.dispatchEvent(event),this}
/** @internal called to delete the current dynamic style sheet used for our layout */_removeStylesheet(){return this._styles&&(utils_1.Utils.removeStylesheet(this._styleSheetClass),delete this._styles),this}
/** @internal updated/create the CSS styles for row based layout and initial margin setting */_updateStyles(forceUpdate=!1,maxH){
// if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??
if(
// call to delete existing one if we change cellHeight / margin
forceUpdate&&this._removeStylesheet(),maxH||(maxH=this.getRow()),this._updateContainerHeight(),0===this.opts.cellHeight)return this;let cellHeight=this.opts.cellHeight,cellHeightUnit=this.opts.cellHeightUnit,prefix=`.${this._styleSheetClass} > .${this.opts.itemClass}`;
// create one as needed
if(!this._styles){
// insert style to parent (instead of 'head' by default) to support WebComponent
let styleLocation=this.opts.styleInHead?void 0:this.el.parentNode;if(this._styles=utils_1.Utils.createStylesheet(this._styleSheetClass,styleLocation,{nonce:this.opts.nonce}),!this._styles)return this;this._styles._max=0,
// these are done once only
utils_1.Utils.addCSSRule(this._styles,prefix,`min-height: ${cellHeight}${cellHeightUnit}`);
// content margins
let top=this.opts.marginTop+this.opts.marginUnit,bottom=this.opts.marginBottom+this.opts.marginUnit,right=this.opts.marginRight+this.opts.marginUnit,left=this.opts.marginLeft+this.opts.marginUnit,content=`${prefix} > .grid-stack-item-content`,placeholder=`.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;utils_1.Utils.addCSSRule(this._styles,content,`top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`),utils_1.Utils.addCSSRule(this._styles,placeholder,`top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`),
// resize handles offset (to match margin)
utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-ne`,`right: ${right}`),utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-e`,`right: ${right}`),utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-se`,`right: ${right}; bottom: ${bottom}`),utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-nw`,`left: ${left}`),utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-w`,`left: ${left}`),utils_1.Utils.addCSSRule(this._styles,`${prefix} > .ui-resizable-sw`,`left: ${left}; bottom: ${bottom}`)}
// now update the height specific fields
if(maxH=maxH||this._styles._max,maxH>this._styles._max){let getHeight=rows=>cellHeight*rows+cellHeightUnit;for(let i=this._styles._max+1;i<=maxH;i++){// start at 1
let h=getHeight(i);utils_1.Utils.addCSSRule(this._styles,`${prefix}[gs-y="${i-1}"]`,`top: ${getHeight(i-1)}`),// start at 0
utils_1.Utils.addCSSRule(this._styles,`${prefix}[gs-h="${i}"]`,`height: ${h}`),utils_1.Utils.addCSSRule(this._styles,`${prefix}[gs-min-h="${i}"]`,`min-height: ${h}`),utils_1.Utils.addCSSRule(this._styles,`${prefix}[gs-max-h="${i}"]`,`max-height: ${h}`)}this._styles._max=maxH}return this}
/** @internal */_updateContainerHeight(){if(!this.engine||this.engine.batchMode)return this;let row=this.getRow()+this._extraDragRow;// checks for minRow already
// check for css min height
// Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary
// rows as the CSS will make us bigger than our set height if needed... not sure why we had this.
// let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);
// if (cssMinHeight > 0) {
//   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));
//   if (row < minRow) {
//     row = minRow;
//   }
// }
if(this.el.setAttribute("gs-current-row",String(row)),0===row)return this.el.style.removeProperty("min-height"),this;let cellHeight=this.opts.cellHeight,unit=this.opts.cellHeightUnit;return cellHeight?(this.el.style.minHeight=row*cellHeight+unit,this):this}
/** @internal */_prepareElement(el,triggerAddEvent=!1,node){el.classList.add(this.opts.itemClass),node=node||this._readAttr(el),el.gridstackNode=node,node.el=el,node.grid=this;let copy=Object.assign({},node);return node=this.engine.addNode(node,triggerAddEvent),
// write node attr back in case there was collision or we have to fix bad values during addNode()
utils_1.Utils.same(node,copy)||this._writeAttr(el,node),this._prepareDragDropByNode(node),this}
/** @internal call to write position x,y,w,h attributes back to element */_writePosAttr(el,n){return void 0!==n.x&&null!==n.x&&el.setAttribute("gs-x",String(n.x)),void 0!==n.y&&null!==n.y&&el.setAttribute("gs-y",String(n.y)),n.w&&el.setAttribute("gs-w",String(n.w)),n.h&&el.setAttribute("gs-h",String(n.h)),this}
/** @internal call to write any default attributes back to element */_writeAttr(el,node){if(!node)return this;this._writePosAttr(el,node);let attrs/*: GridStackWidget but strings */={autoPosition:"gs-auto-position",minW:"gs-min-w",minH:"gs-min-h",maxW:"gs-max-w",maxH:"gs-max-h",noResize:"gs-no-resize",noMove:"gs-no-move",locked:"gs-locked",id:"gs-id"};for(const key in attrs)node[key]?// 0 is valid for x,y only but done above already and not in list anyway
el.setAttribute(attrs[key],String(node[key])):el.removeAttribute(attrs[key]);return this}
/** @internal call to read any default attributes from element */_readAttr(el){let node={};node.x=utils_1.Utils.toNumber(el.getAttribute("gs-x")),node.y=utils_1.Utils.toNumber(el.getAttribute("gs-y")),node.w=utils_1.Utils.toNumber(el.getAttribute("gs-w")),node.h=utils_1.Utils.toNumber(el.getAttribute("gs-h")),node.maxW=utils_1.Utils.toNumber(el.getAttribute("gs-max-w")),node.minW=utils_1.Utils.toNumber(el.getAttribute("gs-min-w")),node.maxH=utils_1.Utils.toNumber(el.getAttribute("gs-max-h")),node.minH=utils_1.Utils.toNumber(el.getAttribute("gs-min-h")),node.autoPosition=utils_1.Utils.toBool(el.getAttribute("gs-auto-position")),node.noResize=utils_1.Utils.toBool(el.getAttribute("gs-no-resize")),node.noMove=utils_1.Utils.toBool(el.getAttribute("gs-no-move")),node.locked=utils_1.Utils.toBool(el.getAttribute("gs-locked")),node.id=el.getAttribute("gs-id");
// remove any key not found (null or false which is default)
for(const key in node){if(!node.hasOwnProperty(key))return;node[key]||0===node[key]||// 0 can be valid value (x,y only really)
delete node[key]}return node}
/** @internal */_setStaticClass(){let classes=["grid-stack-static"];return this.opts.staticGrid?(this.el.classList.add(...classes),this.el.setAttribute("gs-static","true")):(this.el.classList.remove(...classes),this.el.removeAttribute("gs-static")),this}
/**
     * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off
     * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)
     */onParentResize(){if(!this.el||!this.el.clientWidth)return;// return if we're gone or no size yet (will get called again)
let changedColumn=!1;
// see if we're nested and take our column count from our parent....
if(this._autoColumn&&this.parentGridItem)this.opts.column!==this.parentGridItem.w&&(changedColumn=!0,this.column(this.parentGridItem.w,"none"));else{
// else check for 1 column in/out behavior
let oneColumn=!this.opts.disableOneColumnMode&&this.el.clientWidth<=this.opts.oneColumnSize;1===this.opts.column!==oneColumn&&(changedColumn=!0,this.opts.animate&&this.setAnimation(!1),// 1 <-> 12 is too radical, turn off animation
this.column(oneColumn?1:this._prevColumn),this.opts.animate&&this.setAnimation(!0))}
// make the cells content square again
return this._isAutoCellHeight&&(!changedColumn&&this.opts.cellHeightThrottle?(this._cellHeightThrottle||(this._cellHeightThrottle=utils_1.Utils.throttle((()=>this.cellHeight()),this.opts.cellHeightThrottle)),this._cellHeightThrottle()):
// immediate update if we've changed column count or have no threshold
this.cellHeight()),
// finally update any nested grids
this.engine.nodes.forEach((n=>{n.subGrid&&n.subGrid.onParentResize()})),this}
/** add or remove the window size event handler */_updateWindowResizeEvent(forceRemove=!1){
// only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)
const workTodo=(this._isAutoCellHeight||!this.opts.disableOneColumnMode)&&!this.parentGridItem;return forceRemove||!workTodo||this._windowResizeBind?!forceRemove&&workTodo||!this._windowResizeBind||(window.removeEventListener("resize",this._windowResizeBind),delete this._windowResizeBind):(this._windowResizeBind=this.onParentResize.bind(this),// so we can properly remove later
window.addEventListener("resize",this._windowResizeBind)),this}
/** @internal convert a potential selector into actual element */static getElement(els=".grid-stack-item"){return utils_1.Utils.getElement(els)}
/** @internal */static getElements(els=".grid-stack-item"){return utils_1.Utils.getElements(els)}
/** @internal */static getGridElement(els){return GridStack.getElement(els)}
/** @internal */static getGridElements(els){return utils_1.Utils.getElements(els)}
/** @internal initialize margin top/bottom/left/right and units */_initMargin(){let data,margin=0,margins=[];return"string"===typeof this.opts.margin&&(margins=this.opts.margin.split(" ")),2===margins.length?(// top/bot, left/right like CSS
this.opts.marginTop=this.opts.marginBottom=margins[0],this.opts.marginLeft=this.opts.marginRight=margins[1]):4===margins.length?(// Clockwise like CSS
this.opts.marginTop=margins[0],this.opts.marginRight=margins[1],this.opts.marginBottom=margins[2],this.opts.marginLeft=margins[3]):(data=utils_1.Utils.parseHeight(this.opts.margin),this.opts.marginUnit=data.unit,margin=this.opts.margin=data.h),
// see if top/bottom/left/right need to be set as well
void 0===this.opts.marginTop?this.opts.marginTop=margin:(data=utils_1.Utils.parseHeight(this.opts.marginTop),this.opts.marginTop=data.h,delete this.opts.margin),void 0===this.opts.marginBottom?this.opts.marginBottom=margin:(data=utils_1.Utils.parseHeight(this.opts.marginBottom),this.opts.marginBottom=data.h,delete this.opts.margin),void 0===this.opts.marginRight?this.opts.marginRight=margin:(data=utils_1.Utils.parseHeight(this.opts.marginRight),this.opts.marginRight=data.h,delete this.opts.margin),void 0===this.opts.marginLeft?this.opts.marginLeft=margin:(data=utils_1.Utils.parseHeight(this.opts.marginLeft),this.opts.marginLeft=data.h,delete this.opts.margin),this.opts.marginUnit=data.unit,// in case side were spelled out, use those units instead...
this.opts.marginTop===this.opts.marginBottom&&this.opts.marginLeft===this.opts.marginRight&&this.opts.marginTop===this.opts.marginRight&&(this.opts.margin=this.opts.marginTop),this}
/* ===========================================================================================
     * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts
     * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039
     * ===========================================================================================
     */
/** get the global (but static to this code) DD implementation */static getDD(){return dd}
/**
     * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.
     * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar
     * is dynamically create and needs to be set later.
     * @param dragIn string selector (ex: '.sidebar .grid-stack-item')
     * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}
     **/static setupDragIn(dragIn,dragInOptions){void 0!==(null===dragInOptions||void 0===dragInOptions?void 0:dragInOptions.pause)&&(dd_manager_1.DDManager.pauseDrag=dragInOptions.pause),"string"===typeof dragIn&&(dragInOptions=Object.assign(Object.assign({},types_1.dragInDefaultOptions),dragInOptions||{}),utils_1.Utils.getElements(dragIn).forEach((el=>{dd.isDraggable(el)||dd.dragIn(el,dragInOptions)})))}
/**
     * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.
     * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.
     * @param els widget or selector to modify.
     * @param val if true widget will be draggable.
     */movable(els,val){return this.opts.staticGrid||// can't move a static grid!
GridStack.getElements(els).forEach((el=>{let node=el.gridstackNode;node&&(val?delete node.noMove:node.noMove=!0,this._prepareDragDropByNode(node))}// init DD if need be, and adjust
)),this}
/**
     * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.
     * @param els  widget or selector to modify
     * @param val  if true widget will be resizable.
     */resizable(els,val){return this.opts.staticGrid||// can't resize a static grid!
GridStack.getElements(els).forEach((el=>{let node=el.gridstackNode;node&&(val?delete node.noResize:node.noResize=!0,this._prepareDragDropByNode(node))}// init DD if need be, and adjust
)),this}
/**
     * Temporarily disables widgets moving/resizing.
     * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.
     * Note: no-op for static grid
     * This is a shortcut for:
     * @example
     *  grid.enableMove(false);
     *  grid.enableResize(false);
     * @param recurse true (default) if sub-grids also get updated
     */disable(recurse=!0){if(!this.opts.staticGrid)return this.enableMove(!1,recurse),this.enableResize(!1,recurse),// @ts-ignore
this._triggerEvent("disable"),this}
/**
     * Re-enables widgets moving/resizing - see disable().
     * Note: no-op for static grid.
     * This is a shortcut for:
     * @example
     *  grid.enableMove(true);
     *  grid.enableResize(true);
     * @param recurse true (default) if sub-grids also get updated
     */enable(recurse=!0){if(!this.opts.staticGrid)return this.enableMove(!0,recurse),this.enableResize(!0,recurse),// @ts-ignore
this._triggerEvent("enable"),this}
/**
     * Enables/disables widget moving. No-op for static grids.
     * @param recurse true (default) if sub-grids also get updated
     */enableMove(doEnable,recurse=!0){return this.opts.staticGrid||(// can't move a static grid!
this.opts.disableDrag=!doEnable,// FIRST before we update children as grid overrides #1658
this.engine.nodes.forEach((n=>{this.movable(n.el,doEnable),n.subGrid&&recurse&&n.subGrid.enableMove(doEnable,recurse)}))),this}
/**
     * Enables/disables widget resizing. No-op for static grids.
     * @param recurse true (default) if sub-grids also get updated
     */enableResize(doEnable,recurse=!0){return this.opts.staticGrid||(// can't size a static grid!
this.opts.disableResize=!doEnable,// FIRST before we update children as grid overrides #1658
this.engine.nodes.forEach((n=>{this.resizable(n.el,doEnable),n.subGrid&&recurse&&n.subGrid.enableResize(doEnable,recurse)}))),this}
/** @internal removes any drag&drop present (called during destroy) */_removeDD(el){return dd.draggable(el,"destroy").resizable(el,"destroy"),el.gridstackNode&&delete el.gridstackNode._initDD,delete el.ddElement,this}
/** @internal called to add drag over to support widgets being added externally */_setupAcceptWidget(){
// check if we need to disable things
if(this.opts.staticGrid||!this.opts.acceptWidgets&&!this.opts.removable)return dd.droppable(this.el,"destroy"),this;
// vars shared across all methods
let cellHeight,cellWidth,onDrag=(event,el,helper)=>{let node=el.gridstackNode;if(!node)return;helper=helper||el;let parent=this.el.getBoundingClientRect(),{top:top,left:left}=helper.getBoundingClientRect();left-=parent.left,top-=parent.top;let ui={position:{top:top,left:left}};if(node._temporaryRemoved){
// don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere
if(node.x=Math.max(0,Math.round(left/cellWidth)),node.y=Math.max(0,Math.round(top/cellHeight)),delete node.autoPosition,this.engine.nodeBoundFix(node),!this.engine.willItFit(node)){// ignore x,y and try for any slot...
if(node.autoPosition=!0,!this.engine.willItFit(node))// stop calling us
return void dd.off(el,"drag");// full grid or can't grow
node._willFitPos&&(
// use the auto position instead #1687
utils_1.Utils.copyPos(node,node._willFitPos),delete node._willFitPos)}
// re-use the existing node dragging method
this._onStartMoving(helper,event,ui,node,cellWidth,cellHeight)}else
// re-use the existing node dragging that does so much of the collision detection
this._dragOrResize(helper,event,ui,node,cellWidth,cellHeight)};return dd.droppable(this.el,{accept:el=>{let node=el.gridstackNode;
// set accept drop to true on ourself (which we ignore) so we don't get "can't drop" icon in HTML5 mode while moving
if((null===node||void 0===node?void 0:node.grid)===this)return!0;if(!this.opts.acceptWidgets)return!1;
// check for accept method or class matching
let canAccept=!0;if("function"===typeof this.opts.acceptWidgets)canAccept=this.opts.acceptWidgets(el);else{let selector=!0===this.opts.acceptWidgets?".grid-stack-item":this.opts.acceptWidgets;canAccept=el.matches(selector)}
// finally check to make sure we actually have space left #1571
if(canAccept&&node&&this.opts.maxRow){let n={w:node.w,h:node.h,minW:node.minW,minH:node.minH};// only width/height matters and autoPosition
canAccept=this.engine.willItFit(n)}return canAccept}})
/**
             * entering our grid area
             */.on(this.el,"dropover",((event,el,helper)=>{
// console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST
let node=el.gridstackNode;
// ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item
if((null===node||void 0===node?void 0:node.grid)===this&&!node._temporaryRemoved)
// delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)
return!1;// prevent parent from receiving msg (which may be a grid as well)
// fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now
if((null===node||void 0===node?void 0:node.grid)&&node.grid!==this&&!node._temporaryRemoved){
// console.log('dropover without leave'); // TEST
let otherGrid=node.grid;otherGrid._leave(el,helper)}
// cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...
cellWidth=this.cellWidth(),cellHeight=this.getCellHeight(!0),
// load any element attributes if we don't have a node
node||(// @ts-ignore private read only on ourself
node=this._readAttr(el)),node.grid||(node._isExternal=!0,el.gridstackNode=node),
// calculate the grid size based on element outer size
helper=helper||el;let w=node.w||Math.round(helper.offsetWidth/cellWidth)||1,h=node.h||Math.round(helper.offsetHeight/cellHeight)||1;
// if the item came from another grid, make a copy and save the original info in case we go back there
return node.grid&&node.grid!==this?(
// copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific
// console.log('dropover cloning node'); // TEST
el._gridstackNodeOrig||(el._gridstackNodeOrig=node),// shouldn't have multiple nested!
el.gridstackNode=node=Object.assign(Object.assign({},node),{w:w,h:h,grid:this}),this.engine.cleanupNode(node).nodeBoundFix(node),
// restore some internal fields we need after clearing them all
node._initDD=node._isExternal=// DOM needs to be re-parented on a drop
node._temporaryRemoved=!0):(node.w=w,node.h=h,node._temporaryRemoved=!0),
// clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)
this._itemRemoving(node.el,!1),dd.on(el,"drag",onDrag),
// make sure this is called at least once when going fast #1578
onDrag(event,el,helper),!1;// prevent parent from receiving msg (which may be a grid as well)
}))
/**
             * Leaving our grid area...
             */.on(this.el,"dropout",((event,el,helper)=>{
// console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST
let node=el.gridstackNode;return!!node&&(
// fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)
// so skip this one if we're not the active grid really..
node.grid&&node.grid!==this||(this._leave(el,helper),
// if we were created as temporary nested grid, go back to before state
this._isTemp&&this.removeAsSubGrid(node)),!1)}// prevent parent from receiving msg (which may be grid as well)
))
/**
             * end - releasing the mouse
             */.on(this.el,"drop",((event,el,helper)=>{var _a,_b;let node=el.gridstackNode;
// ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead
if((null===node||void 0===node?void 0:node.grid)===this&&!node._isExternal)return!1;let wasAdded=!!this.placeholder.parentElement;// skip items not actually added to us because of constrains, but do cleanup #1419
this.placeholder.remove();
// notify previous grid of removal
// console.log('drop delete _gridstackNodeOrig') // TEST
let origNode=el._gridstackNodeOrig;if(delete el._gridstackNodeOrig,wasAdded&&(null===origNode||void 0===origNode?void 0:origNode.grid)&&origNode.grid!==this){let oGrid=origNode.grid;oGrid.engine.removedNodes.push(origNode),oGrid._triggerRemoveEvent()._triggerChangeEvent(),
// if it's an empty sub-grid that got auto-created, nuke it
oGrid.parentGridItem&&!oGrid.engine.nodes.length&&oGrid.opts.subGridDynamic&&oGrid.removeAsSubGrid()}if(!node)return!1;
// use existing placeholder node as it's already in our list with drop location
if(wasAdded&&(this.engine.cleanupNode(node),// removes all internal _xyz values
node.grid=this),dd.off(el,"drag"),
// if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)
// as the helper will be nuked by jquery-ui otherwise. TODO: update old code path
helper!==el?(helper.remove(),el.gridstackNode=origNode,// original item (left behind) is re-stored to pre dragging as the node now has drop info
wasAdded&&(el=el.cloneNode(!0))):(el.remove(),// reduce flicker as we change depth here, and size further down
this._removeDD(el)),!wasAdded)return!1;el.gridstackNode=node,node.el=el;let subGrid=null===(_b=null===(_a=node.subGrid)||void 0===_a?void 0:_a.el)||void 0===_b?void 0:_b.gridstack;// set when actual sub-grid present
// @ts-ignore
return utils_1.Utils.copyPos(node,this._readAttr(this.placeholder)),// placeholder values as moving VERY fast can throw things off #1578
utils_1.Utils.removePositioningStyles(el),// @ts-ignore
this._writeAttr(el,node),el.classList.add(types_1.gridDefaults.itemClass,this.opts.itemClass),this.el.appendChild(el),// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)
subGrid&&(subGrid.parentGridItem=node,subGrid.opts.styleInHead||subGrid._updateStyles(!0)),this._updateContainerHeight(),this.engine.addedNodes.push(node),// @ts-ignore
this._triggerAddEvent(),// @ts-ignore
this._triggerChangeEvent(),this.engine.endUpdate(),this._gsEventHandler["dropped"]&&this._gsEventHandler["dropped"](Object.assign(Object.assign({},event),{type:"dropped"}),origNode&&origNode.grid?origNode:void 0,node),
// wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up
window.setTimeout((()=>{
// IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())
node.el&&node.el.parentElement?this._prepareDragDropByNode(node):this.engine.removeNode(node),delete node.grid._isTemp})),!1;// prevent parent from receiving msg (which may be grid as well)
})),this}
/** @internal mark item for removal */_itemRemoving(el,remove){let node=el?el.gridstackNode:void 0;node&&node.grid&&(remove?node._isAboutToRemove=!0:delete node._isAboutToRemove,remove?el.classList.add("grid-stack-item-removing"):el.classList.remove("grid-stack-item-removing"))}
/** @internal called to setup a trash drop zone if the user specifies it */_setupRemoveDrop(){if(!this.opts.staticGrid&&"string"===typeof this.opts.removable){let trashEl=document.querySelector(this.opts.removable);if(!trashEl)return this;
// only register ONE drop-over/dropout callback for the 'trash', and it will
// update the passed in item and parent grid because the 'trash' is a shared resource anyway,
// and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)
dd.isDroppable(trashEl)||dd.droppable(trashEl,this.opts.removableOptions).on(trashEl,"dropover",((event,el)=>this._itemRemoving(el,!0))).on(trashEl,"dropout",((event,el)=>this._itemRemoving(el,!1)))}return this}
/** @internal prepares the element for drag&drop **/_prepareDragDropByNode(node){let el=node.el;const noMove=node.noMove||this.opts.disableDrag,noResize=node.noResize||this.opts.disableResize;
// check for disabled grid first
if(this.opts.staticGrid||noMove&&noResize)// add styles one might depend on #1435
return node._initDD&&(this._removeDD(el),// nukes everything instead of just disable, will add some styles back next
delete node._initDD),el.classList.add("ui-draggable-disabled","ui-resizable-disabled"),this;if(!node._initDD){
// variables used/cashed between the 3 start/move/end methods, in addition to node passed above
let cellWidth,cellHeight,onStartMoving=(event,ui)=>{
// trigger any 'dragstart' / 'resizestart' manually
this._gsEventHandler[event.type]&&this._gsEventHandler[event.type](event,event.target),cellWidth=this.cellWidth(),cellHeight=this.getCellHeight(!0),// force pixels for calculations
this._onStartMoving(el,event,ui,node,cellWidth,cellHeight)},dragOrResize=(event,ui)=>{this._dragOrResize(el,event,ui,node,cellWidth,cellHeight)},onEndMoving=event=>{this.placeholder.remove(),delete node._moving,delete node._event,delete node._lastTried;
// if the item has moved to another grid, we're done here
let target=event.target;if(target.gridstackNode&&target.gridstackNode.grid===this){if(node.el=target,node._isAboutToRemove){let gridToNotify=el.gridstackNode.grid;gridToNotify._gsEventHandler[event.type]&&gridToNotify._gsEventHandler[event.type](event,target),this._removeDD(el),gridToNotify.engine.removedNodes.push(node),gridToNotify._triggerRemoveEvent(),
// break circular links and remove DOM
delete el.gridstackNode,delete node.el,el.remove()}else utils_1.Utils.removePositioningStyles(target),node._temporaryRemoved?(
// got removed - restore item back to before dragging position
utils_1.Utils.copyPos(node,node._orig),// @ts-ignore
this._writePosAttr(target,node),this.engine.addNode(node)):
// move to new placeholder location
this._writePosAttr(target,node),this._gsEventHandler[event.type]&&this._gsEventHandler[event.type](event,target);
// @ts-ignore
this._extraDragRow=0,// @ts-ignore
this._updateContainerHeight(),// @ts-ignore
this._triggerChangeEvent(),this.engine.endUpdate()}};dd.draggable(el,{start:onStartMoving,stop:onEndMoving,drag:dragOrResize}).resizable(el,{start:onStartMoving,stop:onEndMoving,resize:dragOrResize}),node._initDD=!0}
// finally fine tune move vs resize by disabling any part...
return dd.draggable(el,noMove?"disable":"enable").resizable(el,noResize?"disable":"enable"),this}
/** @internal handles actual drag/resize start **/_onStartMoving(el,event,ui,node,cellWidth,cellHeight){this.engine.cleanNodes().beginUpdate(node),
// @ts-ignore
this._writePosAttr(this.placeholder,node),this.el.appendChild(this.placeholder),
// console.log('_onStartMoving placeholder') // TEST
node.el=this.placeholder,node._lastUiPosition=ui.position,node._prevYPix=ui.position.top,node._moving="dragstart"===event.type,// 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)
delete node._lastTried,"dropover"===event.type&&node._temporaryRemoved&&(
// console.log('engine.addNode x=' + node.x); // TEST
this.engine.addNode(node),// will add, fix collisions, update attr and clear _temporaryRemoved
node._moving=!0),
// set the min/max resize info
this.engine.cacheRects(cellWidth,cellHeight,this.opts.marginTop,this.opts.marginRight,this.opts.marginBottom,this.opts.marginLeft),"resizestart"===event.type&&(dd.resizable(el,"option","minWidth",cellWidth*(node.minW||1)).resizable(el,"option","minHeight",cellHeight*(node.minH||1)),node.maxW&&dd.resizable(el,"option","maxWidth",cellWidth*node.maxW),node.maxH&&dd.resizable(el,"option","maxHeight",cellHeight*node.maxH))}
/** @internal handles actual drag/resize **/_dragOrResize(el,event,ui,node,cellWidth,cellHeight){let resizing,p=Object.assign({},node._orig),mLeft=this.opts.marginLeft,mRight=this.opts.marginRight,mTop=this.opts.marginTop,mBottom=this.opts.marginBottom,mHeight=Math.round(.1*cellHeight),mWidth=Math.round(.1*cellWidth);// could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)
if(mLeft=Math.min(mLeft,mWidth),mRight=Math.min(mRight,mWidth),mTop=Math.min(mTop,mHeight),mBottom=Math.min(mBottom,mHeight),"drag"===event.type){if(node._temporaryRemoved)return;// handled by dropover
let distance=ui.position.top-node._prevYPix;node._prevYPix=ui.position.top,!1!==this.opts.draggable.scroll&&utils_1.Utils.updateScrollPosition(el,ui.position,distance);
// get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)
let left=ui.position.left+(ui.position.left>node._lastUiPosition.left?-mRight:mLeft),top=ui.position.top+(ui.position.top>node._lastUiPosition.top?-mBottom:mTop);p.x=Math.round(left/cellWidth),p.y=Math.round(top/cellHeight);
// @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others
let prev=this._extraDragRow;if(this.engine.collide(node,p)){let row=this.getRow(),extra=Math.max(0,p.y+node.h-row);this.opts.maxRow&&row+extra>this.opts.maxRow&&(extra=Math.max(0,this.opts.maxRow-row)),// @ts-ignore
this._extraDragRow=extra}else this._extraDragRow=0;// @ts-ignore
if(this._extraDragRow!==prev&&this._updateContainerHeight(),node.x===p.x&&node.y===p.y)return;// skip same
// DON'T skip one we tried as we might have failed because of coverage <50% before
// if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;
}else if("resize"===event.type){if(p.x<0)return;
// Scrolling page if needed
if(utils_1.Utils.updateScrollResize(event,el,cellHeight),
// get new size
p.w=Math.round((ui.size.width-mLeft)/cellWidth),p.h=Math.round((ui.size.height-mTop)/cellHeight),node.w===p.w&&node.h===p.h)return;if(node._lastTried&&node._lastTried.w===p.w&&node._lastTried.h===p.h)return;// skip one we tried (but failed)
// if we size on left/top side this might move us, so get possible new position as well
let left=ui.position.left+mLeft,top=ui.position.top+mTop;p.x=Math.round(left/cellWidth),p.y=Math.round(top/cellHeight),resizing=!0}node._event=event,node._lastTried=p;// set as last tried (will nuke if we go there)
let rect={x:ui.position.left+mLeft,y:ui.position.top+mTop,w:(ui.size?ui.size.width:node.w*cellWidth)-mLeft-mRight,h:(ui.size?ui.size.height:node.h*cellHeight)-mTop-mBottom};if(this.engine.moveNodeCheck(node,Object.assign(Object.assign({},p),{cellWidth:cellWidth,cellHeight:cellHeight,rect:rect,resizing:resizing}))){node._lastUiPosition=ui.position,this.engine.cacheRects(cellWidth,cellHeight,mTop,mRight,mBottom,mLeft),delete node._skipDown,resizing&&node.subGrid&&node.subGrid.onParentResize(),// @ts-ignore
this._extraDragRow=0,// @ts-ignore
this._updateContainerHeight();let target=event.target;// @ts-ignore
this._writePosAttr(target,node),this._gsEventHandler[event.type]&&this._gsEventHandler[event.type](event,target)}}
/** @internal called when item leaving our area by either cursor dropout event
     * or shape is outside our boundaries. remove it from us, and mark temporary if this was
     * our item to start with else restore prev node values from prev grid it came from.
     **/_leave(el,helper){let node=el.gridstackNode;node&&(dd.off(el,"drag"),// no need to track while being outside
// this gets called when cursor leaves and shape is outside, so only do this once
node._temporaryRemoved||(node._temporaryRemoved=!0,this.engine.removeNode(node),// remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue
node.el=node._isExternal&&helper?helper:el,// point back to real item being dragged
!0===this.opts.removable&&// boolean vs a class string
// item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so
this._itemRemoving(el,!0),
// finally if item originally came from another grid, but left us, restore things back to prev info
el._gridstackNodeOrig?(
// console.log('leave delete _gridstackNodeOrig') // TEST
el.gridstackNode=el._gridstackNodeOrig,delete el._gridstackNodeOrig):node._isExternal&&(
// item came from outside (like a toolbar) so nuke any node info
delete node.el,delete el.gridstackNode,
// and restore all nodes back to original
this.engine.restoreInitial())))}
// legacy method removed
commit(){return utils_1.obsolete(this,this.batchUpdate(!1),"commit","batchUpdate","5.2"),this}}exports.GridStack=GridStack,
/** scoping so users can call GridStack.Utils.sort() for example */
GridStack.Utils=utils_1.Utils,
/** scoping so users can call new GridStack.Engine(12) for example */
GridStack.Engine=gridstack_engine_1.GridStackEngine,GridStack.GDRev="7.3.0"},
/***/680014:
/***/function(__unused_webpack_module,exports){"use strict";
/**
 * types.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.dragInDefaultOptions=exports.gridDefaults=void 0,
// default values for grid options - used during init and when saving out
exports.gridDefaults={alwaysShowResizeHandle:"mobile",animate:!0,auto:!0,cellHeight:"auto",cellHeightThrottle:100,cellHeightUnit:"px",column:12,draggable:{handle:".grid-stack-item-content",appendTo:"body",scroll:!0},handle:".grid-stack-item-content",itemClass:"grid-stack-item",margin:10,marginUnit:"px",maxRow:0,minRow:0,oneColumnSize:768,placeholderClass:"grid-stack-placeholder",placeholderText:"",removableOptions:{accept:".grid-stack-item"},resizable:{handles:"se"},rtl:"auto"},
/** default dragIn options */
exports.dragInDefaultOptions={handle:".grid-stack-item-content",appendTo:"body"}},
/***/14090:
/***/function(__unused_webpack_module,exports){"use strict";
/**
 * utils.ts 7.3.0
 * Copyright (c) 2021 Alain Dumesny - see GridStack root license
 */
/** checks for obsolete method names */
// eslint-disable-next-line
function obsolete(self,f,oldName,newName,rev){let wrapper=(...args)=>f.apply(self,args);return wrapper.prototype=f.prototype,wrapper}
/** checks for obsolete grid options (can be used for any fields, but msg is about options) */
function obsoleteOpts(opts,oldName,newName,rev){void 0!==opts[oldName]&&(opts[newName]=opts[oldName])}
/** checks for obsolete grid options which are gone */
function obsoleteOptsDel(opts,oldName,rev,info){opts[oldName]}
/** checks for obsolete Jquery element attributes */
function obsoleteAttr(el,oldName,newName,rev){let oldAttr=el.getAttribute(oldName);null!==oldAttr&&el.setAttribute(newName,oldAttr)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.Utils=exports.obsoleteAttr=exports.obsoleteOptsDel=exports.obsoleteOpts=exports.obsolete=void 0,exports.obsolete=obsolete,exports.obsoleteOpts=obsoleteOpts,exports.obsoleteOptsDel=obsoleteOptsDel,exports.obsoleteAttr=obsoleteAttr;
/**
 * Utility methods
 */
class Utils{
/** convert a potential selector into actual list of html elements */
static getElements(els){if("string"===typeof els){let list=document.querySelectorAll(els);return list.length||"."===els[0]||"#"===els[0]||(list=document.querySelectorAll("."+els),list.length||(list=document.querySelectorAll("#"+els))),Array.from(list)}return[els]}
/** convert a potential selector into actual single element */static getElement(els){if("string"===typeof els){if(!els.length)return null;if("#"===els[0])return document.getElementById(els.substring(1));if("."===els[0]||"["===els[0])return document.querySelector(els);
// if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS
if(!isNaN(+els[0]))// start with digit
return document.getElementById(els);
// finally try string, then id then class
let el=document.querySelector(els);return el||(el=document.getElementById(els)),el||(el=document.querySelector("."+els)),el}return els}
/** returns true if a and b overlap */static isIntercepted(a,b){return!(a.y>=b.y+b.h||a.y+a.h<=b.y||a.x+a.w<=b.x||a.x>=b.x+b.w)}
/** returns true if a and b touch edges or corners */static isTouching(a,b){return Utils.isIntercepted(a,{x:b.x-.5,y:b.y-.5,w:b.w+1,h:b.h+1})}
/** returns the area a and b overlap */static areaIntercept(a,b){let x0=a.x>b.x?a.x:b.x,x1=a.x+a.w<b.x+b.w?a.x+a.w:b.x+b.w;if(x1<=x0)return 0;// no overlap
let y0=a.y>b.y?a.y:b.y,y1=a.y+a.h<b.y+b.h?a.y+a.h:b.y+b.h;return y1<=y0?0:(x1-x0)*(y1-y0);// no overlap
}
/** returns the area */static area(a){return a.w*a.h}
/**
     * Sorts array of nodes
     * @param nodes array to sort
     * @param dir 1 for asc, -1 for desc (optional)
     * @param width width of the grid. If undefined the width will be calculated automatically (optional).
     **/static sort(nodes,dir,column){return column=column||nodes.reduce(((col,n)=>Math.max(n.x+n.w,col)),0)||12,-1===dir?nodes.sort(((a,b)=>b.x+b.y*column-(a.x+a.y*column))):nodes.sort(((b,a)=>b.x+b.y*column-(a.x+a.y*column)))}
/**
     * creates a style sheet with style id under given parent
     * @param id will set the 'gs-style-id' attribute to that id
     * @param parent to insert the stylesheet as first child,
     * if none supplied it will be appended to the document head instead.
     */static createStylesheet(id,parent,options){let style=document.createElement("style");const nonce=null===options||void 0===options?void 0:options.nonce;return nonce&&(style.nonce=nonce),style.setAttribute("type","text/css"),style.setAttribute("gs-style-id",id),
// eslint-disable-next-line @typescript-eslint/no-explicit-any
style.styleSheet?// TODO: only CSSImportRule have that and different beast ??
// eslint-disable-next-line @typescript-eslint/no-explicit-any
style.styleSheet.cssText="":style.appendChild(document.createTextNode("")),parent?parent.insertBefore(style,parent.firstChild):(
// default to head
parent=document.getElementsByTagName("head")[0],parent.appendChild(style)),style.sheet}
/** removed the given stylesheet id */static removeStylesheet(id){let el=document.querySelector("STYLE[gs-style-id="+id+"]");el&&el.parentNode&&el.remove()}
/** inserts a CSS rule */static addCSSRule(sheet,selector,rules){"function"===typeof sheet.addRule?sheet.addRule(selector,rules):"function"===typeof sheet.insertRule&&sheet.insertRule(`${selector}{${rules}}`)}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
static toBool(v){return"boolean"===typeof v?v:"string"===typeof v?(v=v.toLowerCase(),!(""===v||"no"===v||"false"===v||"0"===v)):Boolean(v)}static toNumber(value){return null===value||0===value.length?void 0:Number(value)}static parseHeight(val){let h,unit="px";if("string"===typeof val){let match=val.match(/^(-[0-9]+\.[0-9]+|[0-9]*\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);if(!match)throw new Error("Invalid height");unit=match[2]||"px",h=parseFloat(match[1])}else h=val;return{h:h,unit:unit}}
/** copies unset fields in target to use the given default sources values */
// eslint-disable-next-line
static defaults(target,...sources){return sources.forEach((source=>{for(const key in source){if(!source.hasOwnProperty(key))return;null===target[key]||void 0===target[key]?target[key]=source[key]:"object"===typeof source[key]&&"object"===typeof target[key]&&
// property is an object, recursively add it's field over... #1373
this.defaults(target[key],source[key])}})),target}
/** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */static same(a,b){if("object"!==typeof a)return a==b;if(typeof a!==typeof b)return!1;
// else we have object, check just 1 level deep for being same things...
if(Object.keys(a).length!==Object.keys(b).length)return!1;for(const key in a)if(a[key]!==b[key])return!1;return!0}
/** copies over b size & position (GridStackPosition), and optionally min/max as well */static copyPos(a,b,doMinMax=!1){return a.x=b.x,a.y=b.y,a.w=b.w,a.h=b.h,doMinMax&&(b.minW&&(a.minW=b.minW),b.minH&&(a.minH=b.minH),b.maxW&&(a.maxW=b.maxW),b.maxH&&(a.maxH=b.maxH)),a}
/** true if a and b has same size & position */static samePos(a,b){return a&&b&&a.x===b.x&&a.y===b.y&&a.w===b.w&&a.h===b.h}
/** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */static removeInternalAndSame(a,b){if("object"===typeof a&&"object"===typeof b)for(let key in a){let val=a[key];if("_"===key[0]||val===b[key])delete a[key];else if(val&&"object"===typeof val&&void 0!==b[key]){for(let i in val)val[i]!==b[key][i]&&"_"!==i[0]||delete val[i];Object.keys(val).length||delete a[key]}}}
/** removes internal fields '_' and default values for saving */static removeInternalForSave(n,removeEl=!0){for(let key in n)"_"!==key[0]&&null!==n[key]&&void 0!==n[key]||delete n[key];delete n.grid,removeEl&&delete n.el,
// delete default values (will be re-created on read)
n.autoPosition||delete n.autoPosition,n.noResize||delete n.noResize,n.noMove||delete n.noMove,n.locked||delete n.locked,1!==n.w&&n.w!==n.minW||delete n.w,1!==n.h&&n.h!==n.minH||delete n.h}
/** return the closest parent (or itself) matching the given class */static closestUpByClass(el,name){while(el){if(el.classList.contains(name))return el;el=el.parentElement}return null}
/** delay calling the given function for given delay, preventing new calls from happening while waiting */static throttle(func,delay){let isWaiting=!1;return(...args)=>{isWaiting||(isWaiting=!0,setTimeout((()=>{func(...args),isWaiting=!1}),delay))}}static removePositioningStyles(el){let style=el.style;style.position&&style.removeProperty("position"),style.left&&style.removeProperty("left"),style.top&&style.removeProperty("top"),style.width&&style.removeProperty("width"),style.height&&style.removeProperty("height")}
/** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */static getScrollElement(el){if(!el)return document.scrollingElement||document.documentElement;// IE support
const style=getComputedStyle(el),overflowRegex=/(auto|scroll)/;return overflowRegex.test(style.overflow+style.overflowY)?el:this.getScrollElement(el.parentElement)}
/** @internal */static updateScrollPosition(el,position,distance){
// is widget in view?
let rect=el.getBoundingClientRect(),innerHeightOrClientHeight=window.innerHeight||document.documentElement.clientHeight;if(rect.top<0||rect.bottom>innerHeightOrClientHeight){
// set scrollTop of first parent that scrolls
// if parent is larger than el, set as low as possible
// to get entire widget on screen
let offsetDiffDown=rect.bottom-innerHeightOrClientHeight,offsetDiffUp=rect.top,scrollEl=this.getScrollElement(el);if(null!==scrollEl){let prevScroll=scrollEl.scrollTop;rect.top<0&&distance<0?
// moving up
el.offsetHeight>innerHeightOrClientHeight?scrollEl.scrollTop+=distance:scrollEl.scrollTop+=Math.abs(offsetDiffUp)>Math.abs(distance)?distance:offsetDiffUp:distance>0&&(
// moving down
el.offsetHeight>innerHeightOrClientHeight?scrollEl.scrollTop+=distance:scrollEl.scrollTop+=offsetDiffDown>distance?distance:offsetDiffDown),
// move widget y by amount scrolled
position.top+=scrollEl.scrollTop-prevScroll}}}
/**
     * @internal Function used to scroll the page.
     *
     * @param event `MouseEvent` that triggers the resize
     * @param el `HTMLElement` that's being resized
     * @param distance Distance from the V edges to start scrolling
     */static updateScrollResize(event,el,distance){const scrollEl=this.getScrollElement(el),height=scrollEl.clientHeight,offsetTop=scrollEl===this.getScrollElement()?0:scrollEl.getBoundingClientRect().top,pointerPosY=event.clientY-offsetTop,top=pointerPosY<distance,bottom=pointerPosY>height-distance;top?
// This also can be done with a timeout to keep scrolling while the mouse is
// in the scrolling zone. (will have smoother behavior)
scrollEl.scrollBy({behavior:"smooth",top:pointerPosY-distance}):bottom&&scrollEl.scrollBy({behavior:"smooth",top:distance-(height-pointerPosY)})}
/** single level clone, returning a new object with same top fields. This will share sub objects and arrays */static clone(obj){return null===obj||void 0===obj||"object"!==typeof obj?obj:
// return Object.assign({}, obj);
obj instanceof Array?[...obj]:Object.assign({},obj)}
/**
     * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.
     * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.
     */static cloneDeep(obj){
// list of fields we will skip during cloneDeep (nested objects, other internal)
const skipFields=["parentGrid","el","grid","subGrid","engine"],ret=Utils.clone(obj);
// return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?
for(const key in ret)
// NOTE: we don't support function/circular dependencies so skip those properties for now...
ret.hasOwnProperty(key)&&"object"===typeof ret[key]&&"__"!==key.substring(0,2)&&!skipFields.find((k=>k===key))&&(ret[key]=Utils.cloneDeep(obj[key]));return ret}
/** deep clone the given HTML node, removing teh unique id field */static cloneNode(el){const node=el.cloneNode(!0);return node.removeAttribute("id"),node}static appendTo(el,parent){let parentNode;parentNode="string"===typeof parent?document.querySelector(parent):parent,parentNode&&parentNode.appendChild(el)}
// public static setPositionRelative(el: HTMLElement): void {
//   if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {
//     el.style.position = "relative";
//   }
// }
static addElStyles(el,styles){if(styles instanceof Object)for(const s in styles)styles.hasOwnProperty(s)&&(Array.isArray(styles[s])?
// support fallback value
styles[s].forEach((val=>{el.style[s]=val})):el.style[s]=styles[s])}static initEvent(e,info){const evt={type:info.type},obj={button:0,which:0,buttons:1,bubbles:!0,cancelable:!0,target:info.target?info.target:e.target};// point info
// don't check for `instanceof DragEvent` as Safari use MouseEvent #1540
return e.dataTransfer&&(evt["dataTransfer"]=e.dataTransfer),["altKey","ctrlKey","metaKey","shiftKey"].forEach((p=>evt[p]=e[p])),// keys
["pageX","pageY","clientX","clientY","screenX","screenY"].forEach((p=>evt[p]=e[p])),Object.assign(Object.assign({},evt),obj)}
/** copies the MouseEvent properties and sends it as another event to the given target */static simulateMouseEvent(e,simulatedType,target){const simulatedEvent=document.createEvent("MouseEvents");simulatedEvent.initMouseEvent(simulatedType,// type
!0,// bubbles
!0,// cancelable
window,// view
1,// detail
e.screenX,// screenX
e.screenY,// screenY
e.clientX,// clientX
e.clientY,// clientY
e.ctrlKey,// ctrlKey
e.altKey,// altKey
e.shiftKey,// shiftKey
e.metaKey,// metaKey
0,// button
e.target),(target||e.target).dispatchEvent(simulatedEvent)}}exports.Utils=Utils},
/***/711483:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */q4:function(){/* reexport safe */return _esm_loader_js__WEBPACK_IMPORTED_MODULE_0__.q}
/* harmony export */});
/* harmony import */var _esm_loader_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(226399);
/***/},
/***/815872:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */CT:function(){/* binding */return isLookupPopup},
/* harmony export */Hw:function(){/* binding */return isSystemEnumField},
/* harmony export */K:function(){/* binding */return isDateTimeField},
/* harmony export */Lg:function(){/* binding */return isFileTypeField},
/* harmony export */Mw:function(){/* binding */return isBooleanField},
/* harmony export */No:function(){/* binding */return isDecimalField},
/* harmony export */Nz:function(){/* binding */return isLookupDropDownField},
/* harmony export */On:function(){/* binding */return isMultiLookup},
/* harmony export */PR:function(){/* binding */return isGeoLocationField},
/* harmony export */Qf:function(){/* binding */return isLookupField},
/* harmony export */Ri:function(){/* binding */return isEnumField},
/* harmony export */Rq:function(){/* binding */return isChooserTypeField},
/* harmony export */S6:function(){/* binding */return isDateTypeField},
/* harmony export */Vn:function(){/* binding */return isSiteField},
/* harmony export */Z2:function(){/* binding */return isNumberField},
/* harmony export */aK:function(){/* binding */return isDropdownTypeField},
/* harmony export */je:function(){/* binding */return isSpecialEnumField},
/* harmony export */qu:function(){/* binding */return isLookupSimple},
/* harmony export */sh:function(){/* binding */return isIdField},
/* harmony export */y2:function(){/* binding */return isDateField},
/* harmony export */yP:function(){/* binding */return isLocationField},
/* harmony export */yS:function(){/* binding */return isMultiEnumField}
/* harmony export */});
/* harmony import */var _validation__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(990260);const FIELD_LOOKUP_ENTITY_HASH=[1,-1],FIELD_TYPE_CHOOSERHASH=["WOASSETSPACECHOOSER","SPACECHOOSER"],FIELD_TYPE_DROPDOWNHASH=["LOOKUP_SIMPLE","SELECTBOX","URGENCY","REQUESTER"],SPECIAL_ENUM_FIELDS_HASH={workorder:["urgency"],tenant:["tenantType"]}
/**
 * Checks whether the given field is BooleanField or not
 * @param {Object} field
 * @example
 * isBooleanField(field)
 * //if field.dataTypeEnum or field.dataTypeEnum._name is BOOLEAN it returns true
 * @returns {Boolean} True or False
 */,isBooleanField=field=>"BOOLEAN"===field.dataTypeEnum||"BOOLEAN"===(field.dataTypeEnum||{})._name
/**
 * Checks whether the given field is NumberField or not
 * @param {Object} field
 * @example
 * isNumberField(field)
 * //if field.dataTypeEnum or field.dataTypeEnum._name is NUMBER it returns true
 * @returns {Boolean} True or False
 */,isNumberField=field=>"NUMBER"===field.dataTypeEnum||"NUMBER"===(field.dataTypeEnum||{})._name
/**
 * Checks whether the given field is DecimalField or not
 * @param {Object} field
 * @example
 * isDecimalField(field)
 * //if field.dataTypeEnum or field.dataTypeEnum._name is DECIMAL it returns true
 * @returns {Boolean} True or False
 */,isDecimalField=field=>"DECIMAL"===field.dataTypeEnum||"DECIMAL"===(field.dataTypeEnum||{})._name
/**
 * Checks whether the given field is EnumField or not
 * @param {Object} field
 * @example
 * isEnumField(field)
 * //if field.dataTypeEnum or field.dataTypeEnum._name is ENUM it returns true
 * @returns {Boolean} True or False
 */,isEnumField=field=>"ENUM"===field.dataTypeEnum||"ENUM"===(field.dataTypeEnum||{})._name
/**
 * Checks whether the given field is SystemEnumField or not
 * @param {Object} field
 * @example
 * isSystemEnumField(field)
 * //if field.dataTypeEnum or field.dataTypeEnum._name is SYSTEMENUM it returns true
 * @returns {Boolean} True or False
 */,isSystemEnumField=field=>"SYSTEM_ENUM"===field.dataTypeEnum||"SYSTEM_ENUM"===(field.dataTypeEnum||{})._name
/**
 * Checks whether the given field is MultiEnumField or not
 * @param {Object} field
 * @example
 * isMultiEnumField(field)
 * //if field.dataTypeEnum or field.dataTypeEnum._name is MULTIENUM it returns true
 * @returns {Boolean} True or False
 */,isMultiEnumField=field=>"MULTI_ENUM"===field.dataTypeEnum||"MULTI_ENUM"===(field.dataTypeEnum||{})._name
/**
 * Checks whether the given field is DateField or not
 * @param {Object} field
 * @example
 * isDateField(field)
 * //if field.dataTypeEnum or field.dataTypeEnum._name is DATE it returns true
 * @returns {Boolean} True or False
 */,isDateField=field=>"DATE"===field.dataTypeEnum||"DATE"===(field.dataTypeEnum||{})._name
/**
 * Checks whether the given field is DateTimeField or not
 * @param {Object} field
 * @example
 * isDateTimeField(field)
 * //if field.dataTypeEnum or field.dataTypeEnum._name is DATE_TIME it returns true
 * @returns {Boolean} True or False
 */,isDateTimeField=field=>"DATE_TIME"===field.dataTypeEnum||"DATE_TIME"===(field.dataTypeEnum||{})._name
/**
 * Checks whether the given field is DateTypeField or not
 * @param {Object} field
 * @example
 * isDateTypeField(field)
 * //if the given field is DateTimeField or DateField it returns true
 * @returns {Boolean} True or False
 */,isDateTypeField=field=>isDateTimeField(field)||isDateField(field)
/**
 * Checks whether the given field is LookupField or not
 * @param {Object} field
 * @example
 * isLookupField(field)
 * //if field.dataTypeEnum or field.dataTypeEnum._name is LOOKUP it returns true
 * @returns {Boolean} True or False
 */,isLookupField=field=>"LOOKUP"===field.dataTypeEnum||"LOOKUP"===(field.dataTypeEnum||{})._name
/**
 * Checks whether the given field is MultiLookup or not
 * @param {Object} field
 * @example
 * isMultiLookup(field)
 * //if field.displayTypeEnum is MULTI_LOOKUP_SIMPLE it returns true
 * @returns {Boolean} True or False
 */,isMultiLookup=fieldObj=>{let{displayTypeEnum:displayTypeEnum}=fieldObj||{};return!(0,_validation__WEBPACK_IMPORTED_MODULE_0__/* .isEmpty */.xb)(displayTypeEnum)&&"MULTI_LOOKUP_SIMPLE"===displayTypeEnum}
/**
 * Checks whether the given field is LookupSimple or not
 * @param {Object} field
 * @example
 * isLookupSimple(field)
 * //if field.displayTypeEnum is LOOKUP_SIMPLE it returns true
 * @returns {Boolean} True or False
 */,isLookupSimple=fieldObj=>"LOOKUP_SIMPLE"===fieldObj.displayTypeEnum
/**
 * Checks whether the given field is LookupPopup or not
 * @param {Object} field
 * @example
 * isLookupPopup(field)
 * //if field.displayTypeEnum is LOOKUP_POPUP it returns true
 * @returns {Boolean} True or False
 */,isLookupPopup=fieldObj=>"LOOKUP_POPUP"===fieldObj.displayTypeEnum
/**
 * Checks whether the given field is SiteField or not
 * @param {Object} field
 * @example
 * isSiteField(field)
 * //if field.name is siteId it returns true
 * @returns {Boolean} True or False
 */,isSiteField=field=>{let{name:name}=field||{};return"siteId"===name}
/**
 * Checks whether the given field is FileTypeField or not
 * @param  {Object} field
 * @example
 * isFileTypeField(field)
 * //if field.displayType is FILE it returns true
 * @returns {Boolean} True or False
 */,isFileTypeField=fieldObj=>!(0,_validation__WEBPACK_IMPORTED_MODULE_0__/* .isEmpty */.xb)(fieldObj)&&"FILE"===fieldObj.displayType
/**
 * Checks whether the given field is LookupDropDownField or not
 * @param {Object} field
 * @example
 * isLookupDropDownField(field)
 * //if FIELD_TYPE_CHOOSERHASH.includes(field.displayTypeEnum) it returns true
 * @returns {Boolean} True or False
 */,isLookupDropDownField=field=>{let{displayTypeEnum:displayTypeEnum,field:fieldObj,dataTypeEnum:dataTypeEnum}=field;if((!(0,_validation__WEBPACK_IMPORTED_MODULE_0__/* .isEmpty */.xb)(fieldObj)||!(0,_validation__WEBPACK_IMPORTED_MODULE_0__/* .isEmpty */.xb)(field))&&("LOOKUP_SIMPLE"===displayTypeEnum||"LOOKUP"===dataTypeEnum||"LOOKUP"===(dataTypeEnum||{})._name)){let{lookupModule:lookupModule}=fieldObj||field;if(!(0,_validation__WEBPACK_IMPORTED_MODULE_0__/* .isEmpty */.xb)(lookupModule)){let{type:type}=lookupModule;return FIELD_LOOKUP_ENTITY_HASH.includes(type)}}return!1}
/**
 * Checks whether the given field is ChooserTypeField or not
 * @param {Object} field
 * @example
 * isChooserTypeField(field)
 * //if FIELD_TYPE_CHOOSERHASH.includes(field.displayTypeEnum) it returns true
 * @returns {Boolean} True or False
 */,isChooserTypeField=field=>{let{displayTypeEnum:displayTypeEnum}=field;return FIELD_TYPE_CHOOSERHASH.includes(displayTypeEnum)}
/**
 * Checks whether the given field is DropdownTypeField or not
 * @param {Object} field
 * @example
 * isDropdownTypeField(field)
 * //if FIELD_TYPE_DROPDOWNHASH.includes(field.displayTypeEnum) it returns true
 * @returns {Boolean} True or False
 */,isDropdownTypeField=field=>{let{displayTypeEnum:displayTypeEnum}=field;return FIELD_TYPE_DROPDOWNHASH.includes(displayTypeEnum)}
/**
 * Checks whether the given field is SpecialEnumField or not
 * @param {Object} field
 * @example
 * isSpecialEnumField(field)
 * //if SPECIAL_ENUM_FIELDS_HASH[field.module.name].includes(field.name)  it returns true
 * @returns {Boolean} True or False
 */,isSpecialEnumField=field=>{let{name:name,module:module={}}=field,{name:moduleName}=module;return(SPECIAL_ENUM_FIELDS_HASH[moduleName]||[]).includes(name)}
/**
 * Checks whether the given field is LocationField or not
 * @param {Object} field
 * @example
 * isLocationField(field)
 * //if field.name includes location it returns true
 * @returns {Boolean} True or False
 */,isLocationField=field=>{let{name:name}=field||{};const locationFieldsList=["location"];// Should remove this name check
return locationFieldsList.includes(name)}
/**
 * Checks whether the given field is GeoLocationField or not
 * @param {Object} field
 * @example
 * isGeoLocationField(field)
 * //if field.displayTypeEnum is GEO_LOCATION it returns true
 * @returns {Boolean} True or False
 */,isGeoLocationField=field=>{let{displayTypeEnum:displayTypeEnum="",displayType:displayType=""}=field||{},isStringLocationField="STRING"===field?.field?.dataTypeEnum;return[displayTypeEnum,displayType].includes("GEO_LOCATION")&&!isStringLocationField}
/**
 * Checks whether the given field is IdField or not
 * @param {Object} field
 * @example
 * isIdField(field)
 * //if field.dataTypeEnum is ID it returns true
 * @returns {Boolean} True or False
 */,isIdField=field=>"ID"==field.dataTypeEnum
/***/},
/***/232777:
/***/function(__unused_webpack_module,exports,__webpack_require__){
/* build: `node build.js modules=ALL exclude=gestures,accessors requirejs minifier=uglifyjs` */
/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */
var fabric=fabric||{version:"3.6.6"};
/* _AMD_END_ */
if(exports.fabric=fabric,"undefined"!==typeof document&&"undefined"!==typeof window)document instanceof("undefined"!==typeof HTMLDocument?HTMLDocument:Document)?fabric.document=document:fabric.document=document.implementation.createHTMLDocument(""),fabric.window=window;else{
// assume we're running under node.js when document/window are not present
var jsdom=__webpack_require__(324960),virtualWindow=new jsdom.JSDOM(decodeURIComponent("%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E"),{features:{FetchExternalResources:["img"]},resources:"usable"}).window;fabric.document=virtualWindow.document,fabric.jsdomImplForWrapper=__webpack_require__(326759).implForWrapper,fabric.nodeCanvas=__webpack_require__(56272).Canvas,fabric.window=virtualWindow,DOMParser=fabric.window.DOMParser}
/**
 * True when in environment that supports touch events
 * @type boolean
 */function resizeCanvasIfNeeded(pipelineState){var targetCanvas=pipelineState.targetCanvas,width=targetCanvas.width,height=targetCanvas.height,dWidth=pipelineState.destinationWidth,dHeight=pipelineState.destinationHeight;width===dWidth&&height===dHeight||(targetCanvas.width=dWidth,targetCanvas.height=dHeight)}
/**
 * Copy an input WebGL canvas on to an output 2D canvas.
 *
 * The WebGL canvas is assumed to be upside down, with the top-left pixel of the
 * desired output image appearing in the bottom-left corner of the WebGL canvas.
 *
 * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.
 * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.
 * @param {Object} pipelineState The 2D target canvas to copy on to.
 */function copyGLTo2DDrawImage(gl,pipelineState){var glCanvas=gl.canvas,targetCanvas=pipelineState.targetCanvas,ctx=targetCanvas.getContext("2d");ctx.translate(0,targetCanvas.height),// move it down again
ctx.scale(1,-1);// vertical flip
// where is my image on the big glcanvas?
var sourceY=glCanvas.height-targetCanvas.height;ctx.drawImage(glCanvas,0,sourceY,targetCanvas.width,targetCanvas.height,0,0,targetCanvas.width,targetCanvas.height)}
/**
 * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData
 * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).
 *
 * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.
 * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.
 * @param {Object} pipelineState The 2D target canvas to copy on to.
 */function copyGLTo2DPutImageData(gl,pipelineState){var targetCanvas=pipelineState.targetCanvas,ctx=targetCanvas.getContext("2d"),dWidth=pipelineState.destinationWidth,dHeight=pipelineState.destinationHeight,numBytes=dWidth*dHeight*4,u8=new Uint8Array(this.imageBuffer,0,numBytes),u8Clamped=new Uint8ClampedArray(this.imageBuffer,0,numBytes);
// eslint-disable-next-line no-undef
gl.readPixels(0,0,dWidth,dHeight,gl.RGBA,gl.UNSIGNED_BYTE,u8);var imgData=new ImageData(u8Clamped,dWidth,dHeight);ctx.putImageData(imgData,0,0)}fabric.isTouchSupported="ontouchstart"in fabric.window||"ontouchstart"in fabric.document||fabric.window&&fabric.window.navigator&&fabric.window.navigator.maxTouchPoints>0,
/**
 * True when in environment that's probably Node.js
 * @type boolean
 */
fabric.isLikelyNode="undefined"!==typeof Buffer&&"undefined"===typeof window,
/* _FROM_SVG_START_ */
/**
 * Attributes parsed from all SVG elements
 * @type array
 */
fabric.SHARED_ATTRIBUTES=["display","transform","fill","fill-opacity","fill-rule","opacity","stroke","stroke-dasharray","stroke-linecap","stroke-dashoffset","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","id","paint-order","vector-effect","instantiated_by_use","clip-path"],
/* _FROM_SVG_END_ */
/**
 * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.
 */
fabric.DPI=96,fabric.reNum="(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?)",fabric.rePathCommand=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:[eE][-+]?\d+)?)/gi,fabric.reNonWord=/[ \n\.,;!\?\-]/,fabric.fontPaths={},fabric.iMatrix=[1,0,0,1,0,0],fabric.svgNS="http://www.w3.org/2000/svg",
/**
 * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.
 * @since 1.7.14
 * @type Number
 * @default
 */
fabric.perfLimitSizeTotal=2097152,
/**
 * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000
 * @since 1.7.14
 * @type Number
 * @default
 */
fabric.maxCacheSideLimit=4096,
/**
 * Lowest pixel limit for cache canvases, set at 256PX
 * @since 1.7.14
 * @type Number
 * @default
 */
fabric.minCacheSideLimit=256,
/**
 * Cache Object for widths of chars in text rendering.
 */
fabric.charWidthsCache={},
/**
 * if webgl is enabled and available, textureSize will determine the size
 * of the canvas backend
 * @since 2.0.0
 * @type Number
 * @default
 */
fabric.textureSize=2048,
/**
 * When 'true', style information is not retained when copy/pasting text, making
 * pasted text use destination style.
 * Defaults to 'false'.
 * @type Boolean
 * @default
 */
fabric.disableStyleCopyPaste=!1,
/**
 * Enable webgl for filtering picture is available
 * A filtering backend will be initialized, this will both take memory and
 * time since a default 2048x2048 canvas will be created for the gl context
 * @since 2.0.0
 * @type Boolean
 * @default
 */
fabric.enableGLFiltering=!0,
/**
 * Device Pixel Ratio
 * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html
 */
fabric.devicePixelRatio=fabric.window.devicePixelRatio||fabric.window.webkitDevicePixelRatio||fabric.window.mozDevicePixelRatio||1,
/**
 * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,
 * which is unitless and not rendered equally across browsers.
 *
 * Values that work quite well (as of October 2017) are:
 * - Chrome: 1.5
 * - Edge: 1.75
 * - Firefox: 0.9
 * - Safari: 0.95
 *
 * @since 2.0.0
 * @type Number
 * @default 1
 */
fabric.browserShadowBlurConstant=1,
/**
 * This object contains the result of arc to beizer conversion for faster retrieving if the same arc needs to be converted again.
 * It was an internal variable, is accessible since version 2.3.4
 */
fabric.arcToSegmentsCache={},
/**
 * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.
 * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing
 * you do not get any speed benefit and you get a big object in memory.
 * The object was a private variable before, while now is appended to the lib so that you have access to it and you
 * can eventually clear it.
 * It was an internal variable, is accessible since version 2.3.4
 */
fabric.boundsOfCurveCache={},
/**
 * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better
 * @default true
 */
fabric.cachesBoundsOfCurve=!0,
/**
 * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on
 * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true
 * this has to be set before instantiating the filtering backend ( before filtering the first image )
 * @type Boolean
 * @default false
 */
fabric.forceGLPutImageData=!1,fabric.initFilterBackend=function(){return fabric.enableGLFiltering&&fabric.isWebglSupported&&fabric.isWebglSupported(fabric.textureSize)?new fabric.WebglFilterBackend({tileSize:fabric.textureSize}):fabric.Canvas2dFilterBackend?new fabric.Canvas2dFilterBackend:void 0},"undefined"!==typeof document&&"undefined"!==typeof window&&(
// ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)
window.fabric=fabric),function(){
/**
   * @private
   * @param {String} eventName
   * @param {Function} handler
   */
function _removeEventListener(eventName,handler){if(this.__eventListeners[eventName]){var eventListener=this.__eventListeners[eventName];handler?eventListener[eventListener.indexOf(handler)]=!1:fabric.util.array.fill(eventListener,!1)}}
/**
   * Observes specified event
   * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)
   * @memberOf fabric.Observable
   * @alias on
   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})
   * @param {Function} handler Function that receives a notification when an event of the specified type occurs
   * @return {Self} thisArg
   * @chainable
   */function observe(eventName,handler){
// one object with key/value pairs was passed
if(this.__eventListeners||(this.__eventListeners={}),1===arguments.length)for(var prop in eventName)this.on(prop,eventName[prop]);else this.__eventListeners[eventName]||(this.__eventListeners[eventName]=[]),this.__eventListeners[eventName].push(handler);return this}
/**
   * Stops event observing for a particular event handler. Calling this method
   * without arguments removes all handlers for all events
   * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)
   * @memberOf fabric.Observable
   * @alias off
   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})
   * @param {Function} handler Function to be deleted from EventListeners
   * @return {Self} thisArg
   * @chainable
   */function stopObserving(eventName,handler){if(!this.__eventListeners)return this;
// remove all key/value pairs (event name -> event handler)
if(0===arguments.length)for(eventName in this.__eventListeners)_removeEventListener.call(this,eventName);else if(1===arguments.length&&"object"===typeof arguments[0])for(var prop in eventName)_removeEventListener.call(this,prop,eventName[prop]);else _removeEventListener.call(this,eventName,handler);return this}
/**
   * Fires event with an optional options object
   * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)
   * @memberOf fabric.Observable
   * @alias trigger
   * @param {String} eventName Event name to fire
   * @param {Object} [options] Options object
   * @return {Self} thisArg
   * @chainable
   */function fire(eventName,options){if(!this.__eventListeners)return this;var listenersForEvent=this.__eventListeners[eventName];if(!listenersForEvent)return this;for(var i=0,len=listenersForEvent.length;i<len;i++)listenersForEvent[i]&&listenersForEvent[i].call(this,options||{});return this.__eventListeners[eventName]=listenersForEvent.filter((function(value){return!1!==value})),this}
/**
   * @namespace fabric.Observable
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}
   * @see {@link http://fabricjs.com/events|Events demo}
   */fabric.Observable={observe:observe,stopObserving:stopObserving,fire:fire,on:observe,off:stopObserving,trigger:fire}}(),
/**
 * @namespace fabric.Collection
 */
fabric.Collection={_objects:[],
/**
   * Adds objects to collection, Canvas or Group, then renders canvas
   * (if `renderOnAddRemove` is not `false`).
   * in case of Group no changes to bounding box are made.
   * Objects should be instances of (or inherit from) fabric.Object
   * Use of this function is highly discouraged for groups.
   * you can add a bunch of objects with the add method but then you NEED
   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
   * @param {...fabric.Object} object Zero or more fabric instances
   * @return {Self} thisArg
   * @chainable
   */
add:function(){if(this._objects.push.apply(this._objects,arguments),this._onObjectAdded)for(var i=0,length=arguments.length;i<length;i++)this._onObjectAdded(arguments[i]);return this.renderOnAddRemove&&this.requestRenderAll(),this},
/**
   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)
   * An object should be an instance of (or inherit from) fabric.Object
   * Use of this function is highly discouraged for groups.
   * you can add a bunch of objects with the insertAt method but then you NEED
   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
   * @param {Object} object Object to insert
   * @param {Number} index Index to insert object at
   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs
   * @return {Self} thisArg
   * @chainable
   */
insertAt:function(object,index,nonSplicing){var objects=this._objects;return nonSplicing?objects[index]=object:objects.splice(index,0,object),this._onObjectAdded&&this._onObjectAdded(object),this.renderOnAddRemove&&this.requestRenderAll(),this},
/**
   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)
   * @param {...fabric.Object} object Zero or more fabric instances
   * @return {Self} thisArg
   * @chainable
   */
remove:function(){for(var index,objects=this._objects,somethingRemoved=!1,i=0,length=arguments.length;i<length;i++)index=objects.indexOf(arguments[i]),
// only call onObjectRemoved if an object was actually removed
-1!==index&&(somethingRemoved=!0,objects.splice(index,1),this._onObjectRemoved&&this._onObjectRemoved(arguments[i]));return this.renderOnAddRemove&&somethingRemoved&&this.requestRenderAll(),this},
/**
   * Executes given function for each object in this group
   * @param {Function} callback
   *                   Callback invoked with current object as first argument,
   *                   index - as second and an array of all objects - as third.
   *                   Callback is invoked in a context of Global Object (e.g. `window`)
   *                   when no `context` argument is given
   *
   * @param {Object} context Context (aka thisObject)
   * @return {Self} thisArg
   * @chainable
   */
forEachObject:function(callback,context){for(var objects=this.getObjects(),i=0,len=objects.length;i<len;i++)callback.call(context,objects[i],i,objects);return this},
/**
   * Returns an array of children objects of this instance
   * Type parameter introduced in 1.3.10
   * since 2.3.5 this method return always a COPY of the array;
   * @param {String} [type] When specified, only objects of this type are returned
   * @return {Array}
   */
getObjects:function(type){return"undefined"===typeof type?this._objects.concat():this._objects.filter((function(o){return o.type===type}))},
/**
   * Returns object at specified index
   * @param {Number} index
   * @return {Self} thisArg
   */
item:function(index){return this._objects[index]},
/**
   * Returns true if collection contains no objects
   * @return {Boolean} true if collection is empty
   */
isEmpty:function(){return 0===this._objects.length},
/**
   * Returns a size of a collection (i.e: length of an array containing its objects)
   * @return {Number} Collection size
   */
size:function(){return this._objects.length},
/**
   * Returns true if collection contains an object
   * @param {Object} object Object to check against
   * @return {Boolean} `true` if collection contains an object
   */
contains:function(object){return this._objects.indexOf(object)>-1},
/**
   * Returns number representation of a collection complexity
   * @return {Number} complexity
   */
complexity:function(){return this._objects.reduce((function(memo,current){return memo+=current.complexity?current.complexity():0,memo}),0)}},
/**
 * @namespace fabric.CommonMethods
 */
fabric.CommonMethods={
/**
   * Sets object's properties from options
   * @param {Object} [options] Options object
   */
_setOptions:function(options){for(var prop in options)this.set(prop,options[prop])},
/**
   * @private
   * @param {Object} [filler] Options object
   * @param {String} [property] property to set the Gradient to
   */
_initGradient:function(filler,property){!filler||!filler.colorStops||filler instanceof fabric.Gradient||this.set(property,new fabric.Gradient(filler))},
/**
   * @private
   * @param {Object} [filler] Options object
   * @param {String} [property] property to set the Pattern to
   * @param {Function} [callback] callback to invoke after pattern load
   */
_initPattern:function(filler,property,callback){!filler||!filler.source||filler instanceof fabric.Pattern?callback&&callback():this.set(property,new fabric.Pattern(filler,callback))},
/**
   * @private
   * @param {Object} [options] Options object
   */
_initClipping:function(options){if(options.clipTo&&"string"===typeof options.clipTo){var functionBody=fabric.util.getFunctionBody(options.clipTo);"undefined"!==typeof functionBody&&(this.clipTo=new Function("ctx",functionBody))}},
/**
   * @private
   */
_setObject:function(obj){for(var prop in obj)this._set(prop,obj[prop])},
/**
   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
   * @param {String|Object} key Property name or object (if object, iterate over the object properties)
   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
   * @return {fabric.Object} thisArg
   * @chainable
   */
set:function(key,value){return"object"===typeof key?this._setObject(key):"function"===typeof value&&"clipTo"!==key?this._set(key,value(this.get(key))):this._set(key,value),this},_set:function(key,value){this[key]=value},
/**
   * Toggles specified property from `true` to `false` or from `false` to `true`
   * @param {String} property Property to toggle
   * @return {fabric.Object} thisArg
   * @chainable
   */
toggle:function(property){var value=this.get(property);return"boolean"===typeof value&&this.set(property,!value),this},
/**
   * Basic getter
   * @param {String} property Property name
   * @return {*} value of a property
   */
get:function(property){return this[property]}},function(global){var sqrt=Math.sqrt,atan2=Math.atan2,pow=Math.pow,PiBy180=Math.PI/180,PiBy2=Math.PI/2;
/**
   * @namespace fabric.util
   */fabric.util={
/**
     * Calculate the cos of an angle, avoiding returning floats for known results
     * @static
     * @memberOf fabric.util
     * @param {Number} angle the angle in radians or in degree
     * @return {Number}
     */
cos:function(angle){if(0===angle)return 1;angle<0&&(
// cos(a) = cos(-a)
angle=-angle);var angleSlice=angle/PiBy2;switch(angleSlice){case 1:case 3:return 0;case 2:return-1}return Math.cos(angle)},
/**
     * Calculate the sin of an angle, avoiding returning floats for known results
     * @static
     * @memberOf fabric.util
     * @param {Number} angle the angle in radians or in degree
     * @return {Number}
     */
sin:function(angle){if(0===angle)return 0;var angleSlice=angle/PiBy2,sign=1;switch(angle<0&&(
// sin(-a) = -sin(a)
sign=-1),angleSlice){case 1:return sign;case 2:return 0;case 3:return-sign}return Math.sin(angle)},
/**
     * Removes value from an array.
     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`
     * @static
     * @memberOf fabric.util
     * @param {Array} array
     * @param {*} value
     * @return {Array} original array
     */
removeFromArray:function(array,value){var idx=array.indexOf(value);return-1!==idx&&array.splice(idx,1),array},
/**
     * Returns random number between 2 specified ones.
     * @static
     * @memberOf fabric.util
     * @param {Number} min lower limit
     * @param {Number} max upper limit
     * @return {Number} random value (between min and max)
     */
getRandomInt:function(min,max){return Math.floor(Math.random()*(max-min+1))+min},
/**
     * Transforms degrees to radians.
     * @static
     * @memberOf fabric.util
     * @param {Number} degrees value in degrees
     * @return {Number} value in radians
     */
degreesToRadians:function(degrees){return degrees*PiBy180},
/**
     * Transforms radians to degrees.
     * @static
     * @memberOf fabric.util
     * @param {Number} radians value in radians
     * @return {Number} value in degrees
     */
radiansToDegrees:function(radians){return radians/PiBy180},
/**
     * Rotates `point` around `origin` with `radians`
     * @static
     * @memberOf fabric.util
     * @param {fabric.Point} point The point to rotate
     * @param {fabric.Point} origin The origin of the rotation
     * @param {Number} radians The radians of the angle for the rotation
     * @return {fabric.Point} The new rotated point
     */
rotatePoint:function(point,origin,radians){point.subtractEquals(origin);var v=fabric.util.rotateVector(point,radians);return new fabric.Point(v.x,v.y).addEquals(origin)},
/**
     * Rotates `vector` with `radians`
     * @static
     * @memberOf fabric.util
     * @param {Object} vector The vector to rotate (x and y)
     * @param {Number} radians The radians of the angle for the rotation
     * @return {Object} The new rotated point
     */
rotateVector:function(vector,radians){var sin=fabric.util.sin(radians),cos=fabric.util.cos(radians),rx=vector.x*cos-vector.y*sin,ry=vector.x*sin+vector.y*cos;return{x:rx,y:ry}},
/**
     * Apply transform t to point p
     * @static
     * @memberOf fabric.util
     * @param  {fabric.Point} p The point to transform
     * @param  {Array} t The transform
     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied
     * @return {fabric.Point} The transformed point
     */
transformPoint:function(p,t,ignoreOffset){return ignoreOffset?new fabric.Point(t[0]*p.x+t[2]*p.y,t[1]*p.x+t[3]*p.y):new fabric.Point(t[0]*p.x+t[2]*p.y+t[4],t[1]*p.x+t[3]*p.y+t[5])},
/**
     * Returns coordinates of points's bounding rectangle (left, top, width, height)
     * @param {Array} points 4 points array
     * @param {Array} [transform] an array of 6 numbers representing a 2x3 transform matrix
     * @return {Object} Object with left, top, width, height properties
     */
makeBoundingBoxFromPoints:function(points,transform){if(transform)for(var i=0;i<points.length;i++)points[i]=fabric.util.transformPoint(points[i],transform);var xPoints=[points[0].x,points[1].x,points[2].x,points[3].x],minX=fabric.util.array.min(xPoints),maxX=fabric.util.array.max(xPoints),width=maxX-minX,yPoints=[points[0].y,points[1].y,points[2].y,points[3].y],minY=fabric.util.array.min(yPoints),maxY=fabric.util.array.max(yPoints),height=maxY-minY;return{left:minX,top:minY,width:width,height:height}},
/**
     * Invert transformation t
     * @static
     * @memberOf fabric.util
     * @param {Array} t The transform
     * @return {Array} The inverted transform
     */
invertTransform:function(t){var a=1/(t[0]*t[3]-t[1]*t[2]),r=[a*t[3],-a*t[1],-a*t[2],a*t[0]],o=fabric.util.transformPoint({x:t[4],y:t[5]},r,!0);return r[4]=-o.x,r[5]=-o.y,r},
/**
     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.
     * @static
     * @memberOf fabric.util
     * @param {Number|String} number number to operate on
     * @param {Number} fractionDigits number of fraction digits to "leave"
     * @return {Number}
     */
toFixed:function(number,fractionDigits){return parseFloat(Number(number).toFixed(fractionDigits))},
/**
     * Converts from attribute value to pixel value if applicable.
     * Returns converted pixels or original value not converted.
     * @param {Number|String} value number to operate on
     * @param {Number} fontSize
     * @return {Number|String}
     */
parseUnit:function(value,fontSize){var unit=/\D{0,2}$/.exec(value),number=parseFloat(value);switch(fontSize||(fontSize=fabric.Text.DEFAULT_SVG_FONT_SIZE),unit[0]){case"mm":return number*fabric.DPI/25.4;case"cm":return number*fabric.DPI/2.54;case"in":return number*fabric.DPI;case"pt":return number*fabric.DPI/72;// or * 4 / 3
case"pc":return number*fabric.DPI/72*12;// or * 16
case"em":return number*fontSize;default:return number}},
/**
     * Function which always returns `false`.
     * @static
     * @memberOf fabric.util
     * @return {Boolean}
     */
falseFunction:function(){return!1},
/**
     * Returns klass "Class" object of given namespace
     * @memberOf fabric.util
     * @param {String} type Type of object (eg. 'circle')
     * @param {String} namespace Namespace to get klass "Class" object from
     * @return {Object} klass "Class"
     */
getKlass:function(type,namespace){
// capitalize first letter only
return type=fabric.util.string.camelize(type.charAt(0).toUpperCase()+type.slice(1)),fabric.util.resolveNamespace(namespace)[type]},
/**
     * Returns array of attributes for given svg that fabric parses
     * @memberOf fabric.util
     * @param {String} type Type of svg element (eg. 'circle')
     * @return {Array} string names of supported attributes
     */
getSvgAttributes:function(type){var attributes=["instantiated_by_use","style","id","class"];switch(type){case"linearGradient":attributes=attributes.concat(["x1","y1","x2","y2","gradientUnits","gradientTransform"]);break;case"radialGradient":attributes=attributes.concat(["gradientUnits","gradientTransform","cx","cy","r","fx","fy","fr"]);break;case"stop":attributes=attributes.concat(["offset","stop-color","stop-opacity"]);break}return attributes},
/**
     * Returns object of given namespace
     * @memberOf fabric.util
     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'
     * @return {Object} Object for given namespace (default fabric)
     */
resolveNamespace:function(namespace){if(!namespace)return fabric;var i,parts=namespace.split("."),len=parts.length,obj=global||fabric.window;for(i=0;i<len;++i)obj=obj[parts[i]];return obj},
/**
     * Loads image element from given url and passes it to a callback
     * @memberOf fabric.util
     * @param {String} url URL representing an image
     * @param {Function} callback Callback; invoked with loaded image
     * @param {*} [context] Context to invoke callback in
     * @param {Object} [crossOrigin] crossOrigin value to set image element to
     */
loadImage:function(url,callback,context,crossOrigin){if(url){var img=fabric.util.createImage(),onLoadCallback=function(){callback&&callback.call(context,img),img=img.onload=img.onerror=null};
/** @ignore */img.onload=onLoadCallback,
/** @ignore */
img.onerror=function(){fabric.log("Error loading "+img.src),callback&&callback.call(context,null,!0),img=img.onload=img.onerror=null},
// data-urls appear to be buggy with crossOrigin
// https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767
// see https://code.google.com/p/chromium/issues/detail?id=315152
//     https://bugzilla.mozilla.org/show_bug.cgi?id=935069
0!==url.indexOf("data")&&crossOrigin&&(img.crossOrigin=crossOrigin),
// IE10 / IE11-Fix: SVG contents from data: URI
// will only be available if the IMG is present
// in the DOM (and visible)
"data:image/svg"===url.substring(0,14)&&(img.onload=null,fabric.util.loadImageInDom(img,onLoadCallback)),img.src=url}else callback&&callback.call(context,url)},
/**
     * Attaches SVG image with data: URL to the dom
     * @memberOf fabric.util
     * @param {Object} img Image object with data:image/svg src
     * @param {Function} callback Callback; invoked with loaded image
     * @return {Object} DOM element (div containing the SVG image)
     */
loadImageInDom:function(img,onLoadCallback){var div=fabric.document.createElement("div");div.style.width=div.style.height="1px",div.style.left=div.style.top="-100%",div.style.position="absolute",div.appendChild(img),fabric.document.querySelector("body").appendChild(div),
/**
       * Wrap in function to:
       *   1. Call existing callback
       *   2. Cleanup DOM
       */
img.onload=function(){onLoadCallback(),div.parentNode.removeChild(div),div=null}},
/**
     * Creates corresponding fabric instances from their object representations
     * @static
     * @memberOf fabric.util
     * @param {Array} objects Objects to enliven
     * @param {Function} callback Callback to invoke when all objects are created
     * @param {String} namespace Namespace to get klass "Class" object from
     * @param {Function} reviver Method for further parsing of object elements,
     * called after each fabric object created.
     */
enlivenObjects:function(objects,callback,namespace,reviver){objects=objects||[];var enlivenedObjects=[],numLoadedObjects=0,numTotalObjects=objects.length;function onLoaded(){++numLoadedObjects===numTotalObjects&&callback&&callback(enlivenedObjects.filter((function(obj){
// filter out undefined objects (objects that gave error)
return obj})))}numTotalObjects?objects.forEach((function(o,index){
// if sparse array
if(o&&o.type){var klass=fabric.util.getKlass(o.type,namespace);klass.fromObject(o,(function(obj,error){error||(enlivenedObjects[index]=obj),reviver&&reviver(o,obj,error),onLoaded()}))}else onLoaded()})):callback&&callback(enlivenedObjects)},
/**
     * Create and wait for loading of patterns
     * @static
     * @memberOf fabric.util
     * @param {Array} patterns Objects to enliven
     * @param {Function} callback Callback to invoke when all objects are created
     * called after each fabric object created.
     */
enlivenPatterns:function(patterns,callback){function onLoaded(){++numLoadedPatterns===numPatterns&&callback&&callback(enlivenedPatterns)}patterns=patterns||[];var enlivenedPatterns=[],numLoadedPatterns=0,numPatterns=patterns.length;numPatterns?patterns.forEach((function(p,index){p&&p.source?new fabric.Pattern(p,(function(pattern){enlivenedPatterns[index]=pattern,onLoaded()})):(enlivenedPatterns[index]=p,onLoaded())})):callback&&callback(enlivenedPatterns)},
/**
     * Groups SVG elements (usually those retrieved from SVG document)
     * @static
     * @memberOf fabric.util
     * @param {Array} elements SVG elements to group
     * @param {Object} [options] Options object
     * @param {String} path Value to set sourcePath to
     * @return {fabric.Object|fabric.Group}
     */
groupSVGElements:function(elements,options,path){var object;return elements&&1===elements.length?elements[0]:(options&&(options.width&&options.height?options.centerPoint={x:options.width/2,y:options.height/2}:(delete options.width,delete options.height)),object=new fabric.Group(elements,options),"undefined"!==typeof path&&(object.sourcePath=path),object)},
/**
     * Populates an object with properties of another object
     * @static
     * @memberOf fabric.util
     * @param {Object} source Source object
     * @param {Object} destination Destination object
     * @return {Array} properties Properties names to include
     */
populateWithProperties:function(source,destination,properties){if(properties&&"[object Array]"===Object.prototype.toString.call(properties))for(var i=0,len=properties.length;i<len;i++)properties[i]in source&&(destination[properties[i]]=source[properties[i]])},
/**
     * Draws a dashed line between two points
     *
     * This method is used to draw dashed line around selection area.
     * See <a href="http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas">dotted stroke in canvas</a>
     *
     * @param {CanvasRenderingContext2D} ctx context
     * @param {Number} x  start x coordinate
     * @param {Number} y start y coordinate
     * @param {Number} x2 end x coordinate
     * @param {Number} y2 end y coordinate
     * @param {Array} da dash array pattern
     */
drawDashedLine:function(ctx,x,y,x2,y2,da){var dx=x2-x,dy=y2-y,len=sqrt(dx*dx+dy*dy),rot=atan2(dy,dx),dc=da.length,di=0,draw=!0;ctx.save(),ctx.translate(x,y),ctx.moveTo(0,0),ctx.rotate(rot),x=0;while(len>x)x+=da[di++%dc],x>len&&(x=len),ctx[draw?"lineTo":"moveTo"](x,0),draw=!draw;ctx.restore()},
/**
     * Creates canvas element
     * @static
     * @memberOf fabric.util
     * @return {CanvasElement} initialized canvas element
     */
createCanvasElement:function(){return fabric.document.createElement("canvas")},
/**
     * Creates a canvas element that is a copy of another and is also painted
     * @param {CanvasElement} canvas to copy size and content of
     * @static
     * @memberOf fabric.util
     * @return {CanvasElement} initialized canvas element
     */
copyCanvasElement:function(canvas){var newCanvas=fabric.util.createCanvasElement();return newCanvas.width=canvas.width,newCanvas.height=canvas.height,newCanvas.getContext("2d").drawImage(canvas,0,0),newCanvas},
/**
     * since 2.6.0 moved from canvas instance to utility.
     * @param {CanvasElement} canvasEl to copy size and content of
     * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too
     * @param {Number} quality <= 1 and > 0
     * @static
     * @memberOf fabric.util
     * @return {String} data url
     */
toDataURL:function(canvasEl,format,quality){return canvasEl.toDataURL("image/"+format,quality)},
/**
     * Creates image element (works on client and node)
     * @static
     * @memberOf fabric.util
     * @return {HTMLImageElement} HTML image element
     */
createImage:function(){return fabric.document.createElement("img")},
/**
     * @static
     * @memberOf fabric.util
     * @deprecated since 2.0.0
     * @param {fabric.Object} receiver Object implementing `clipTo` method
     * @param {CanvasRenderingContext2D} ctx Context to clip
     */
clipContext:function(receiver,ctx){ctx.save(),ctx.beginPath(),receiver.clipTo(ctx),ctx.clip()},
/**
     * Multiply matrix A by matrix B to nest transformations
     * @static
     * @memberOf fabric.util
     * @param  {Array} a First transformMatrix
     * @param  {Array} b Second transformMatrix
     * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices
     * @return {Array} The product of the two transform matrices
     */
multiplyTransformMatrices:function(a,b,is2x2){
// Matrix multiply a * b
return[a[0]*b[0]+a[2]*b[1],a[1]*b[0]+a[3]*b[1],a[0]*b[2]+a[2]*b[3],a[1]*b[2]+a[3]*b[3],is2x2?0:a[0]*b[4]+a[2]*b[5]+a[4],is2x2?0:a[1]*b[4]+a[3]*b[5]+a[5]]},
/**
     * Decomposes standard 2x3 matrix into transform components
     * @static
     * @memberOf fabric.util
     * @param  {Array} a transformMatrix
     * @return {Object} Components of transform
     */
qrDecompose:function(a){var angle=atan2(a[1],a[0]),denom=pow(a[0],2)+pow(a[1],2),scaleX=sqrt(denom),scaleY=(a[0]*a[3]-a[2]*a[1])/scaleX,skewX=atan2(a[0]*a[2]+a[1]*a[3],denom);return{angle:angle/PiBy180,scaleX:scaleX,scaleY:scaleY,skewX:skewX/PiBy180,skewY:0,translateX:a[4],translateY:a[5]}},
/**
     * Returns a transform matrix starting from an object of the same kind of
     * the one returned from qrDecompose, useful also if you want to calculate some
     * transformations from an object that is not enlived yet
     * @static
     * @memberOf fabric.util
     * @param  {Object} options
     * @param  {Number} [options.angle] angle in degrees
     * @return {Number[]} transform matrix
     */
calcRotateMatrix:function(options){if(!options.angle)return fabric.iMatrix.concat();var theta=fabric.util.degreesToRadians(options.angle),cos=fabric.util.cos(theta),sin=fabric.util.sin(theta);return[cos,sin,-sin,cos,0,0]},
/**
     * Returns a transform matrix starting from an object of the same kind of
     * the one returned from qrDecompose, useful also if you want to calculate some
     * transformations from an object that is not enlived yet.
     * is called DimensionsTransformMatrix because those properties are the one that influence
     * the size of the resulting box of the object.
     * @static
     * @memberOf fabric.util
     * @param  {Object} options
     * @param  {Number} [options.scaleX]
     * @param  {Number} [options.scaleY]
     * @param  {Boolean} [options.flipX]
     * @param  {Boolean} [options.flipY]
     * @param  {Number} [options.skewX]
     * @param  {Number} [options.skewX]
     * @return {Number[]} transform matrix
     */
calcDimensionsMatrix:function(options){var scaleX="undefined"===typeof options.scaleX?1:options.scaleX,scaleY="undefined"===typeof options.scaleY?1:options.scaleY,scaleMatrix=[options.flipX?-scaleX:scaleX,0,0,options.flipY?-scaleY:scaleY,0,0],multiply=fabric.util.multiplyTransformMatrices,degreesToRadians=fabric.util.degreesToRadians;return options.skewX&&(scaleMatrix=multiply(scaleMatrix,[1,0,Math.tan(degreesToRadians(options.skewX)),1],!0)),options.skewY&&(scaleMatrix=multiply(scaleMatrix,[1,Math.tan(degreesToRadians(options.skewY)),0,1],!0)),scaleMatrix},
/**
     * Returns a transform matrix starting from an object of the same kind of
     * the one returned from qrDecompose, useful also if you want to calculate some
     * transformations from an object that is not enlived yet
     * @static
     * @memberOf fabric.util
     * @param  {Object} options
     * @param  {Number} [options.angle]
     * @param  {Number} [options.scaleX]
     * @param  {Number} [options.scaleY]
     * @param  {Boolean} [options.flipX]
     * @param  {Boolean} [options.flipY]
     * @param  {Number} [options.skewX]
     * @param  {Number} [options.skewX]
     * @param  {Number} [options.translateX]
     * @param  {Number} [options.translateY]
     * @return {Number[]} transform matrix
     */
composeMatrix:function(options){var matrix=[1,0,0,1,options.translateX||0,options.translateY||0],multiply=fabric.util.multiplyTransformMatrices;return options.angle&&(matrix=multiply(matrix,fabric.util.calcRotateMatrix(options))),(options.scaleX||options.scaleY||options.skewX||options.skewY||options.flipX||options.flipY)&&(matrix=multiply(matrix,fabric.util.calcDimensionsMatrix(options))),matrix},
/**
     * Returns a transform matrix that has the same effect of scaleX, scaleY and skewX.
     * Is deprecated for composeMatrix. Please do not use it.
     * @static
     * @deprecated since 3.4.0
     * @memberOf fabric.util
     * @param  {Number} scaleX
     * @param  {Number} scaleY
     * @param  {Number} skewX
     * @return {Number[]} transform matrix
     */
customTransformMatrix:function(scaleX,scaleY,skewX){return fabric.util.composeMatrix({scaleX:scaleX,scaleY:scaleY,skewX:skewX})},
/**
     * reset an object transform state to neutral. Top and left are not accounted for
     * @static
     * @memberOf fabric.util
     * @param  {fabric.Object} target object to transform
     */
resetObjectTransform:function(target){target.scaleX=1,target.scaleY=1,target.skewX=0,target.skewY=0,target.flipX=!1,target.flipY=!1,target.rotate(0)},
/**
     * Extract Object transform values
     * @static
     * @memberOf fabric.util
     * @param  {fabric.Object} target object to read from
     * @return {Object} Components of transform
     */
saveObjectTransform:function(target){return{scaleX:target.scaleX,scaleY:target.scaleY,skewX:target.skewX,skewY:target.skewY,angle:target.angle,left:target.left,flipX:target.flipX,flipY:target.flipY,top:target.top}},
/**
     * Returns string representation of function body
     * @param {Function} fn Function to get body of
     * @return {String} Function body
     */
getFunctionBody:function(fn){return(String(fn).match(/function[^{]*\{([\s\S]*)\}/)||{})[1]},
/**
     * Returns true if context has transparent pixel
     * at specified location (taking tolerance into account)
     * @param {CanvasRenderingContext2D} ctx context
     * @param {Number} x x coordinate
     * @param {Number} y y coordinate
     * @param {Number} tolerance Tolerance
     */
isTransparent:function(ctx,x,y,tolerance){
// If tolerance is > 0 adjust start coords to take into account.
// If moves off Canvas fix to 0
tolerance>0&&(x>tolerance?x-=tolerance:x=0,y>tolerance?y-=tolerance:y=0);var i,temp,_isTransparent=!0,imageData=ctx.getImageData(x,y,2*tolerance||1,2*tolerance||1),l=imageData.data.length;
// Split image data - for tolerance > 1, pixelDataSize = 4;
for(i=3;i<l;i+=4)if(temp=imageData.data[i],_isTransparent=temp<=0,!1===_isTransparent)break;// Stop if colour found
return imageData=null,_isTransparent},
/**
     * Parse preserveAspectRatio attribute from element
     * @param {string} attribute to be parsed
     * @return {Object} an object containing align and meetOrSlice attribute
     */
parsePreserveAspectRatioAttribute:function(attribute){var align,meetOrSlice="meet",alignX="Mid",alignY="Mid",aspectRatioAttrs=attribute.split(" ");return aspectRatioAttrs&&aspectRatioAttrs.length&&(meetOrSlice=aspectRatioAttrs.pop(),"meet"!==meetOrSlice&&"slice"!==meetOrSlice?(align=meetOrSlice,meetOrSlice="meet"):aspectRatioAttrs.length&&(align=aspectRatioAttrs.pop())),
//divide align in alignX and alignY
alignX="none"!==align?align.slice(1,4):"none",alignY="none"!==align?align.slice(5,8):"none",{meetOrSlice:meetOrSlice,alignX:alignX,alignY:alignY}},
/**
     * Clear char widths cache for the given font family or all the cache if no
     * fontFamily is specified.
     * Use it if you know you are loading fonts in a lazy way and you are not waiting
     * for custom fonts to load properly when adding text objects to the canvas.
     * If a text object is added when its own font is not loaded yet, you will get wrong
     * measurement and so wrong bounding boxes.
     * After the font cache is cleared, either change the textObject text content or call
     * initDimensions() to trigger a recalculation
     * @memberOf fabric.util
     * @param {String} [fontFamily] font family to clear
     */
clearFabricFontCache:function(fontFamily){fontFamily=(fontFamily||"").toLowerCase(),fontFamily?fabric.charWidthsCache[fontFamily]&&delete fabric.charWidthsCache[fontFamily]:fabric.charWidthsCache={}},
/**
     * Given current aspect ratio, determines the max width and height that can
     * respect the total allowed area for the cache.
     * @memberOf fabric.util
     * @param {Number} ar aspect ratio
     * @param {Number} maximumArea Maximum area you want to achieve
     * @return {Object.x} Limited dimensions by X
     * @return {Object.y} Limited dimensions by Y
     */
limitDimsByArea:function(ar,maximumArea){var roughWidth=Math.sqrt(maximumArea*ar),perfLimitSizeY=Math.floor(maximumArea/roughWidth);return{x:Math.floor(roughWidth),y:perfLimitSizeY}},capValue:function(min,value,max){return Math.max(min,Math.min(value,max))},
/**
     * Finds the scale for the object source to fit inside the object destination,
     * keeping aspect ratio intact.
     * respect the total allowed area for the cache.
     * @memberOf fabric.util
     * @param {Object | fabric.Object} source
     * @param {Number} source.height natural unscaled height of the object
     * @param {Number} source.width natural unscaled width of the object
     * @param {Object | fabric.Object} destination
     * @param {Number} destination.height natural unscaled height of the object
     * @param {Number} destination.width natural unscaled width of the object
     * @return {Number} scale factor to apply to source to fit into destination
     */
findScaleToFit:function(source,destination){return Math.min(destination.width/source.width,destination.height/source.height)},
/**
     * Finds the scale for the object source to cover entirely the object destination,
     * keeping aspect ratio intact.
     * respect the total allowed area for the cache.
     * @memberOf fabric.util
     * @param {Object | fabric.Object} source
     * @param {Number} source.height natural unscaled height of the object
     * @param {Number} source.width natural unscaled width of the object
     * @param {Object | fabric.Object} destination
     * @param {Number} destination.height natural unscaled height of the object
     * @param {Number} destination.width natural unscaled width of the object
     * @return {Number} scale factor to apply to source to cover destination
     */
findScaleToCover:function(source,destination){return Math.max(destination.width/source.width,destination.height/source.height)},
/**
     * given an array of 6 number returns something like `"matrix(...numbers)"`
     * @memberOf fabric.util
     * @param {Array} trasnform an array with 6 numbers
     * @return {String} transform matrix for svg
     * @return {Object.y} Limited dimensions by Y
     */
matrixToSVG:function(transform){return"matrix("+transform.map((function(value){return fabric.util.toFixed(value,fabric.Object.NUM_FRACTION_DIGITS)})).join(" ")+")"}}}(exports),function(){var _join=Array.prototype.join;
/* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp
   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here
   * http://mozilla.org/MPL/2.0/
   */function arcToSegments(toX,toY,rx,ry,large,sweep,rotateX){var argsString=_join.call(arguments);if(fabric.arcToSegmentsCache[argsString])return fabric.arcToSegmentsCache[argsString];var PI=Math.PI,th=rotateX*PI/180,sinTh=fabric.util.sin(th),cosTh=fabric.util.cos(th),fromX=0,fromY=0;rx=Math.abs(rx),ry=Math.abs(ry);var px=-cosTh*toX*.5-sinTh*toY*.5,py=-cosTh*toY*.5+sinTh*toX*.5,rx2=rx*rx,ry2=ry*ry,py2=py*py,px2=px*px,pl=rx2*ry2-rx2*py2-ry2*px2,root=0;if(pl<0){var s=Math.sqrt(1-pl/(rx2*ry2));rx*=s,ry*=s}else root=(large===sweep?-1:1)*Math.sqrt(pl/(rx2*py2+ry2*px2));var cx=root*rx*py/ry,cy=-root*ry*px/rx,cx1=cosTh*cx-sinTh*cy+.5*toX,cy1=sinTh*cx+cosTh*cy+.5*toY,mTheta=calcVectorAngle(1,0,(px-cx)/rx,(py-cy)/ry),dtheta=calcVectorAngle((px-cx)/rx,(py-cy)/ry,(-px-cx)/rx,(-py-cy)/ry);0===sweep&&dtheta>0?dtheta-=2*PI:1===sweep&&dtheta<0&&(dtheta+=2*PI);
// Convert into cubic bezier segments <= 90deg
for(var segments=Math.ceil(Math.abs(dtheta/PI*2)),result=[],mDelta=dtheta/segments,mT=8/3*Math.sin(mDelta/4)*Math.sin(mDelta/4)/Math.sin(mDelta/2),th3=mTheta+mDelta,i=0;i<segments;i++)result[i]=segmentToBezier(mTheta,th3,cosTh,sinTh,rx,ry,cx1,cy1,mT,fromX,fromY),fromX=result[i][4],fromY=result[i][5],mTheta=th3,th3+=mDelta;return fabric.arcToSegmentsCache[argsString]=result,result}function segmentToBezier(th2,th3,cosTh,sinTh,rx,ry,cx1,cy1,mT,fromX,fromY){var costh2=fabric.util.cos(th2),sinth2=fabric.util.sin(th2),costh3=fabric.util.cos(th3),sinth3=fabric.util.sin(th3),toX=cosTh*rx*costh3-sinTh*ry*sinth3+cx1,toY=sinTh*rx*costh3+cosTh*ry*sinth3+cy1,cp1X=fromX+mT*(-cosTh*rx*sinth2-sinTh*ry*costh2),cp1Y=fromY+mT*(-sinTh*rx*sinth2+cosTh*ry*costh2),cp2X=toX+mT*(cosTh*rx*sinth3+sinTh*ry*costh3),cp2Y=toY+mT*(sinTh*rx*sinth3-cosTh*ry*costh3);return[cp1X,cp1Y,cp2X,cp2Y,toX,toY]}
/*
   * Private
   */function calcVectorAngle(ux,uy,vx,vy){var ta=Math.atan2(uy,ux),tb=Math.atan2(vy,vx);return tb>=ta?tb-ta:2*Math.PI-(ta-tb)}
/**
   * Draws arc
   * @param {CanvasRenderingContext2D} ctx
   * @param {Number} fx
   * @param {Number} fy
   * @param {Array} coords
   */
/**
   * Calculate bounding box of a beziercurve
   * @param {Number} x0 starting point
   * @param {Number} y0
   * @param {Number} x1 first control point
   * @param {Number} y1
   * @param {Number} x2 secondo control point
   * @param {Number} y2
   * @param {Number} x3 end of beizer
   * @param {Number} y3
   */
// taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.
function getBoundsOfCurve(x0,y0,x1,y1,x2,y2,x3,y3){var argsString;if(fabric.cachesBoundsOfCurve&&(argsString=_join.call(arguments),fabric.boundsOfCurveCache[argsString]))return fabric.boundsOfCurveCache[argsString];var a,b,c,t,t1,t2,b2ac,sqrtb2ac,sqrt=Math.sqrt,min=Math.min,max=Math.max,abs=Math.abs,tvalues=[],bounds=[[],[]];b=6*x0-12*x1+6*x2,a=-3*x0+9*x1-9*x2+3*x3,c=3*x1-3*x0;for(var i=0;i<2;++i)if(i>0&&(b=6*y0-12*y1+6*y2,a=-3*y0+9*y1-9*y2+3*y3,c=3*y1-3*y0),abs(a)<1e-12){if(abs(b)<1e-12)continue;t=-c/b,0<t&&t<1&&tvalues.push(t)}else b2ac=b*b-4*c*a,b2ac<0||(sqrtb2ac=sqrt(b2ac),t1=(-b+sqrtb2ac)/(2*a),0<t1&&t1<1&&tvalues.push(t1),t2=(-b-sqrtb2ac)/(2*a),0<t2&&t2<1&&tvalues.push(t2));var x,y,mt,j=tvalues.length,jlen=j;while(j--)t=tvalues[j],mt=1-t,x=mt*mt*mt*x0+3*mt*mt*t*x1+3*mt*t*t*x2+t*t*t*x3,bounds[0][j]=x,y=mt*mt*mt*y0+3*mt*mt*t*y1+3*mt*t*t*y2+t*t*t*y3,bounds[1][j]=y;bounds[0][jlen]=x0,bounds[1][jlen]=y0,bounds[0][jlen+1]=x3,bounds[1][jlen+1]=y3;var result=[{x:min.apply(null,bounds[0]),y:min.apply(null,bounds[1])},{x:max.apply(null,bounds[0]),y:max.apply(null,bounds[1])}];return fabric.cachesBoundsOfCurve&&(fabric.boundsOfCurveCache[argsString]=result),result}fabric.util.drawArc=function(ctx,fx,fy,coords){for(var rx=coords[0],ry=coords[1],rot=coords[2],large=coords[3],sweep=coords[4],tx=coords[5],ty=coords[6],segs=[[],[],[],[]],segsNorm=arcToSegments(tx-fx,ty-fy,rx,ry,large,sweep,rot),i=0,len=segsNorm.length;i<len;i++)segs[i][0]=segsNorm[i][0]+fx,segs[i][1]=segsNorm[i][1]+fy,segs[i][2]=segsNorm[i][2]+fx,segs[i][3]=segsNorm[i][3]+fy,segs[i][4]=segsNorm[i][4]+fx,segs[i][5]=segsNorm[i][5]+fy,ctx.bezierCurveTo.apply(ctx,segs[i])},
/**
   * Calculate bounding box of a elliptic-arc
   * @param {Number} fx start point of arc
   * @param {Number} fy
   * @param {Number} rx horizontal radius
   * @param {Number} ry vertical radius
   * @param {Number} rot angle of horizontal axe
   * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points
   * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction
   * @param {Number} tx end point of arc
   * @param {Number} ty
   */
fabric.util.getBoundsOfArc=function(fx,fy,rx,ry,rot,large,sweep,tx,ty){for(var bound,fromX=0,fromY=0,bounds=[],segs=arcToSegments(tx-fx,ty-fy,rx,ry,large,sweep,rot),i=0,len=segs.length;i<len;i++)bound=getBoundsOfCurve(fromX,fromY,segs[i][0],segs[i][1],segs[i][2],segs[i][3],segs[i][4],segs[i][5]),bounds.push({x:bound[0].x+fx,y:bound[0].y+fy}),bounds.push({x:bound[1].x+fx,y:bound[1].y+fy}),fromX=segs[i][4],fromY=segs[i][5];return bounds},fabric.util.getBoundsOfCurve=getBoundsOfCurve}(),function(){var slice=Array.prototype.slice;
/**
   * Invokes method on all items in a given array
   * @memberOf fabric.util.array
   * @param {Array} array Array to iterate over
   * @param {String} method Name of a method to invoke
   * @return {Array}
   */function invoke(array,method){for(var args=slice.call(arguments,2),result=[],i=0,len=array.length;i<len;i++)result[i]=args.length?array[i][method].apply(array[i],args):array[i][method].call(array[i]);return result}
/**
   * Finds maximum value in array (not necessarily "first" one)
   * @memberOf fabric.util.array
   * @param {Array} array Array to iterate over
   * @param {String} byProperty
   * @return {*}
   */function max(array,byProperty){return find(array,byProperty,(function(value1,value2){return value1>=value2}))}
/**
   * Finds minimum value in array (not necessarily "first" one)
   * @memberOf fabric.util.array
   * @param {Array} array Array to iterate over
   * @param {String} byProperty
   * @return {*}
   */function min(array,byProperty){return find(array,byProperty,(function(value1,value2){return value1<value2}))}
/**
   * @private
   */function fill(array,value){var k=array.length;while(k--)array[k]=value;return array}
/**
   * @private
   */function find(array,byProperty,condition){if(array&&0!==array.length){var i=array.length-1,result=byProperty?array[i][byProperty]:array[i];if(byProperty)while(i--)condition(array[i][byProperty],result)&&(result=array[i][byProperty]);else while(i--)condition(array[i],result)&&(result=array[i]);return result}}
/**
   * @namespace fabric.util.array
   */fabric.util.array={fill:fill,invoke:invoke,min:min,max:max}}(),function(){
/**
   * Copies all enumerable properties of one js object to another
   * this does not and cannot compete with generic utils.
   * Does not clone or extend fabric.Object subclasses.
   * This is mostly for internal use and has extra handling for fabricJS objects
   * it skips the canvas property in deep cloning.
   * @memberOf fabric.util.object
   * @param {Object} destination Where to copy to
   * @param {Object} source Where to copy from
   * @return {Object}
   */
function extend(destination,source,deep){
// JScript DontEnum bug is not taken care of
// the deep clone is for internal use, is not meant to avoid
// javascript traps or cloning html element or self referenced objects.
if(deep)if(!fabric.isLikelyNode&&source instanceof Element)
// avoid cloning deep images, canvases,
destination=source;else if(source instanceof Array){destination=[];for(var i=0,len=source.length;i<len;i++)destination[i]=extend({},source[i],deep)}else if(source&&"object"===typeof source)for(var property in source)"canvas"===property?destination[property]=extend({},source[property]):source.hasOwnProperty(property)&&(destination[property]=extend({},source[property],deep));else
// this sounds odd for an extend but is ok for recursive use
destination=source;else for(var property in source)destination[property]=source[property];return destination}
/**
   * Creates an empty object and copies all enumerable properties of another object to it
   * @memberOf fabric.util.object
   * TODO: this function return an empty object if you try to clone null
   * @param {Object} object Object to clone
   * @return {Object}
   */function clone(object,deep){return extend({},object,deep)}
/** @namespace fabric.util.object */fabric.util.object={extend:extend,clone:clone},fabric.util.object.extend(fabric.util,fabric.Observable)}(),function(){
/**
   * Camelizes a string
   * @memberOf fabric.util.string
   * @param {String} string String to camelize
   * @return {String} Camelized version of a string
   */
function camelize(string){return string.replace(/-+(.)?/g,(function(match,character){return character?character.toUpperCase():""}))}
/**
   * Capitalizes a string
   * @memberOf fabric.util.string
   * @param {String} string String to capitalize
   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized
   * and other letters stay untouched, if false first letter is capitalized
   * and other letters are converted to lowercase.
   * @return {String} Capitalized version of a string
   */function capitalize(string,firstLetterOnly){return string.charAt(0).toUpperCase()+(firstLetterOnly?string.slice(1):string.slice(1).toLowerCase())}
/**
   * Escapes XML in a string
   * @memberOf fabric.util.string
   * @param {String} string String to escape
   * @return {String} Escaped version of a string
   */function escapeXml(string){return string.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&apos;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}
/**
   * Divide a string in the user perceived single units
   * @memberOf fabric.util.string
   * @param {String} textstring String to escape
   * @return {Array} array containing the graphemes
   */function graphemeSplit(textstring){var chr,i=0,graphemes=[];for(i=0,chr;i<textstring.length;i++)!1!==(chr=getWholeChar(textstring,i))&&graphemes.push(chr);return graphemes}
// taken from mdn in the charAt doc page.
function getWholeChar(str,i){var code=str.charCodeAt(i);if(isNaN(code))return"";// Position not found
if(code<55296||code>57343)return str.charAt(i);
// High surrogate (could change last hex to 0xDB7F to treat high private
// surrogates as single characters)
if(55296<=code&&code<=56319){if(str.length<=i+1)throw"High surrogate without following low surrogate";var next=str.charCodeAt(i+1);if(56320>next||next>57343)throw"High surrogate without following low surrogate";return str.charAt(i)+str.charAt(i+1)}
// Low surrogate (0xDC00 <= code && code <= 0xDFFF)
if(0===i)throw"Low surrogate without preceding high surrogate";var prev=str.charCodeAt(i-1);
// (could change last hex to 0xDB7F to treat high private
// surrogates as single characters)
if(55296>prev||prev>56319)throw"Low surrogate without preceding high surrogate";
// We can pass over low surrogates now as the second component
// in a pair which we have already processed
return!1}
/**
   * String utilities
   * @namespace fabric.util.string
   */fabric.util.string={camelize:camelize,capitalize:capitalize,escapeXml:escapeXml,graphemeSplit:graphemeSplit}}(),function(){var slice=Array.prototype.slice,emptyFunction=function(){},IS_DONTENUM_BUGGY=function(){for(var p in{toString:1})if("toString"===p)return!1;return!0}(),
/** @ignore */
addMethods=function(klass,source,parent){for(var property in source)property in klass.prototype&&"function"===typeof klass.prototype[property]&&(source[property]+"").indexOf("callSuper")>-1?klass.prototype[property]=function(property){return function(){var superclass=this.constructor.superclass;this.constructor.superclass=parent;var returnValue=source[property].apply(this,arguments);if(this.constructor.superclass=superclass,"initialize"!==property)return returnValue}}(property):klass.prototype[property]=source[property],IS_DONTENUM_BUGGY&&(source.toString!==Object.prototype.toString&&(klass.prototype.toString=source.toString),source.valueOf!==Object.prototype.valueOf&&(klass.prototype.valueOf=source.valueOf))};function Subclass(){}function callSuper(methodName){var parentMethod=null,_this=this;
// climb prototype chain to find method not equal to callee's method
while(_this.constructor.superclass){var superClassMethod=_this.constructor.superclass.prototype[methodName];if(_this[methodName]!==superClassMethod){parentMethod=superClassMethod;break}
// eslint-disable-next-line
_this=_this.constructor.superclass.prototype}if(parentMethod)return arguments.length>1?parentMethod.apply(this,slice.call(arguments,1)):parentMethod.call(this)}
/**
   * Helper for creation of "classes".
   * @memberOf fabric.util
   * @param {Function} [parent] optional "Class" to inherit from
   * @param {Object} [properties] Properties shared by all instances of this class
   *                  (be careful modifying objects defined here as this would affect all instances)
   */function createClass(){var parent=null,properties=slice.call(arguments,0);function klass(){this.initialize.apply(this,arguments)}"function"===typeof properties[0]&&(parent=properties.shift()),klass.superclass=parent,klass.subclasses=[],parent&&(Subclass.prototype=parent.prototype,klass.prototype=new Subclass,parent.subclasses.push(klass));for(var i=0,length=properties.length;i<length;i++)addMethods(klass,properties[i],parent);return klass.prototype.initialize||(klass.prototype.initialize=emptyFunction),klass.prototype.constructor=klass,klass.prototype.callSuper=callSuper,klass}fabric.util.createClass=createClass}(),function(){
// since ie10 or ie9 can use addEventListener but they do not support options, i need to check
var couldUseAttachEvent=!!fabric.document.createElement("div").attachEvent;
/**
   * Adds an event listener to an element
   * @function
   * @memberOf fabric.util
   * @param {HTMLElement} element
   * @param {String} eventName
   * @param {Function} handler
   */function getTouchInfo(event){var touchProp=event.changedTouches;return touchProp&&touchProp[0]?touchProp[0]:event}fabric.util.addListener=function(element,eventName,handler,options){element&&element.addEventListener(eventName,handler,!couldUseAttachEvent&&options)},
/**
   * Removes an event listener from an element
   * @function
   * @memberOf fabric.util
   * @param {HTMLElement} element
   * @param {String} eventName
   * @param {Function} handler
   */
fabric.util.removeListener=function(element,eventName,handler,options){element&&element.removeEventListener(eventName,handler,!couldUseAttachEvent&&options)},fabric.util.getPointer=function(event){var element=event.target,scroll=fabric.util.getScrollLeftTop(element),_evt=getTouchInfo(event);return{x:_evt.clientX+scroll.left,y:_evt.clientY+scroll.top}}}(),function(){
/**
   * Cross-browser wrapper for setting element's style
   * @memberOf fabric.util
   * @param {HTMLElement} element
   * @param {Object} styles
   * @return {HTMLElement} Element that was passed as a first argument
   */
function setStyle(element,styles){var elementStyle=element.style;if(!elementStyle)return element;if("string"===typeof styles)return element.style.cssText+=";"+styles,styles.indexOf("opacity")>-1?setOpacity(element,styles.match(/opacity:\s*(\d?\.?\d*)/)[1]):element;for(var property in styles)if("opacity"===property)setOpacity(element,styles[property]);else{var normalizedProperty="float"===property||"cssFloat"===property?"undefined"===typeof elementStyle.styleFloat?"cssFloat":"styleFloat":property;elementStyle[normalizedProperty]=styles[property]}return element}var parseEl=fabric.document.createElement("div"),supportsOpacity="string"===typeof parseEl.style.opacity,supportsFilters="string"===typeof parseEl.style.filter,reOpacity=/alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/,
/** @ignore */
setOpacity=function(element){return element};supportsOpacity?
/** @ignore */
setOpacity=function(element,value){return element.style.opacity=value,element}:supportsFilters&&(
/** @ignore */
setOpacity=function(element,value){var es=element.style;return element.currentStyle&&!element.currentStyle.hasLayout&&(es.zoom=1),reOpacity.test(es.filter)?(value=value>=.9999?"":"alpha(opacity="+100*value+")",es.filter=es.filter.replace(reOpacity,value)):es.filter+=" alpha(opacity="+100*value+")",element}),fabric.util.setStyle=setStyle}(),function(){var _slice=Array.prototype.slice;
/**
   * Takes id and returns an element with that id (if one exists in a document)
   * @memberOf fabric.util
   * @param {String|HTMLElement} id
   * @return {HTMLElement|null}
   */function getById(id){return"string"===typeof id?fabric.document.getElementById(id):id}var sliceCanConvertNodelists,getElementStyle,
/**
       * Converts an array-like object (e.g. arguments or NodeList) to an array
       * @memberOf fabric.util
       * @param {Object} arrayLike
       * @return {Array}
       */
toArray=function(arrayLike){return _slice.call(arrayLike,0)};try{sliceCanConvertNodelists=toArray(fabric.document.childNodes)instanceof Array}catch(err){}
/**
   * Creates specified element with specified attributes
   * @memberOf fabric.util
   * @param {String} tagName Type of an element to create
   * @param {Object} [attributes] Attributes to set on an element
   * @return {HTMLElement} Newly created element
   */
function makeElement(tagName,attributes){var el=fabric.document.createElement(tagName);for(var prop in attributes)"class"===prop?el.className=attributes[prop]:"for"===prop?el.htmlFor=attributes[prop]:el.setAttribute(prop,attributes[prop]);return el}
/**
   * Adds class to an element
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to add class to
   * @param {String} className Class to add to an element
   */function addClass(element,className){element&&-1===(" "+element.className+" ").indexOf(" "+className+" ")&&(element.className+=(element.className?" ":"")+className)}
/**
   * Wraps element with another element
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to wrap
   * @param {HTMLElement|String} wrapper Element to wrap with
   * @param {Object} [attributes] Attributes to set on a wrapper
   * @return {HTMLElement} wrapper
   */function wrapElement(element,wrapper,attributes){return"string"===typeof wrapper&&(wrapper=makeElement(wrapper,attributes)),element.parentNode&&element.parentNode.replaceChild(wrapper,element),wrapper.appendChild(element),wrapper}
/**
   * Returns element scroll offsets
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to operate on
   * @return {Object} Object with left/top values
   */function getScrollLeftTop(element){var left=0,top=0,docElement=fabric.document.documentElement,body=fabric.document.body||{scrollLeft:0,scrollTop:0};
// While loop checks (and then sets element to) .parentNode OR .host
//  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,
//  but the .parentNode of a root ShadowDOM node will always be null, instead
//  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938
while(element&&(element.parentNode||element.host))if(
// Set element to element parent, or 'host' in case of ShadowDOM
element=element.parentNode||element.host,element===fabric.document?(left=body.scrollLeft||docElement.scrollLeft||0,top=body.scrollTop||docElement.scrollTop||0):(left+=element.scrollLeft||0,top+=element.scrollTop||0),1===element.nodeType&&"fixed"===element.style.position)break;return{left:left,top:top}}
/**
   * Returns offset for a given element
   * @function
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to get offset for
   * @return {Object} Object with "left" and "top" properties
   */function getElementOffset(element){var docElem,scrollLeftTop,doc=element&&element.ownerDocument,box={left:0,top:0},offset={left:0,top:0},offsetAttributes={borderLeftWidth:"left",borderTopWidth:"top",paddingLeft:"left",paddingTop:"top"};if(!doc)return offset;for(var attr in offsetAttributes)offset[offsetAttributes[attr]]+=parseInt(getElementStyle(element,attr),10)||0;return docElem=doc.documentElement,"undefined"!==typeof element.getBoundingClientRect&&(box=element.getBoundingClientRect()),scrollLeftTop=getScrollLeftTop(element),{left:box.left+scrollLeftTop.left-(docElem.clientLeft||0)+offset.left,top:box.top+scrollLeftTop.top-(docElem.clientTop||0)+offset.top}}
/**
   * Returns style attribute value of a given element
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to get style attribute for
   * @param {String} attr Style attribute to get for element
   * @return {String} Style attribute value of the given element.
   */function getNodeCanvas(element){var impl=fabric.jsdomImplForWrapper(element);return impl._canvas||impl._image}function cleanUpJsdomNode(element){if(fabric.isLikelyNode){var impl=fabric.jsdomImplForWrapper(element);impl&&(impl._image=null,impl._canvas=null,
// unsure if necessary
impl._currentSrc=null,impl._attributes=null,impl._classList=null)}}sliceCanConvertNodelists||(toArray=function(arrayLike){var arr=new Array(arrayLike.length),i=arrayLike.length;while(i--)arr[i]=arrayLike[i];return arr}),getElementStyle=fabric.document.defaultView&&fabric.document.defaultView.getComputedStyle?function(element,attr){var style=fabric.document.defaultView.getComputedStyle(element,null);return style?style[attr]:void 0}:function(element,attr){var value=element.style[attr];return!value&&element.currentStyle&&(value=element.currentStyle[attr]),value},function(){var style=fabric.document.documentElement.style,selectProp="userSelect"in style?"userSelect":"MozUserSelect"in style?"MozUserSelect":"WebkitUserSelect"in style?"WebkitUserSelect":"KhtmlUserSelect"in style?"KhtmlUserSelect":"";
/**
     * Makes element unselectable
     * @memberOf fabric.util
     * @param {HTMLElement} element Element to make unselectable
     * @return {HTMLElement} Element that was passed in
     */function makeElementUnselectable(element){return"undefined"!==typeof element.onselectstart&&(element.onselectstart=fabric.util.falseFunction),selectProp?element.style[selectProp]="none":"string"===typeof element.unselectable&&(element.unselectable="on"),element}
/**
     * Makes element selectable
     * @memberOf fabric.util
     * @param {HTMLElement} element Element to make selectable
     * @return {HTMLElement} Element that was passed in
     */function makeElementSelectable(element){return"undefined"!==typeof element.onselectstart&&(element.onselectstart=null),selectProp?element.style[selectProp]="":"string"===typeof element.unselectable&&(element.unselectable=""),element}fabric.util.makeElementUnselectable=makeElementUnselectable,fabric.util.makeElementSelectable=makeElementSelectable}(),function(){
/**
     * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading
     * @memberOf fabric.util
     * @param {String} url URL of a script to load
     * @param {Function} callback Callback to execute when script is finished loading
     */
function getScript(url,callback){var headEl=fabric.document.getElementsByTagName("head")[0],scriptEl=fabric.document.createElement("script"),loading=!0;
/** @ignore */scriptEl.onload=/** @ignore */scriptEl.onreadystatechange=function(e){if(loading){if("string"===typeof this.readyState&&"loaded"!==this.readyState&&"complete"!==this.readyState)return;loading=!1,callback(e||fabric.window.event),scriptEl=scriptEl.onload=scriptEl.onreadystatechange=null}},scriptEl.src=url,headEl.appendChild(scriptEl)}fabric.util.getScript=getScript}(),fabric.util.getById=getById,fabric.util.toArray=toArray,fabric.util.makeElement=makeElement,fabric.util.addClass=addClass,fabric.util.wrapElement=wrapElement,fabric.util.getScrollLeftTop=getScrollLeftTop,fabric.util.getElementOffset=getElementOffset,fabric.util.getElementStyle=getElementStyle,fabric.util.getNodeCanvas=getNodeCanvas,fabric.util.cleanUpJsdomNode=cleanUpJsdomNode}(),function(){function addParamToUrl(url,param){return url+(/\?/.test(url)?"&":"?")+param}function emptyFn(){}
/**
   * Cross-browser abstraction for sending XMLHttpRequest
   * @memberOf fabric.util
   * @param {String} url URL to send XMLHttpRequest to
   * @param {Object} [options] Options object
   * @param {String} [options.method="GET"]
   * @param {String} [options.parameters] parameters to append to url in GET or in body
   * @param {String} [options.body] body to send with POST or PUT request
   * @param {Function} options.onComplete Callback to invoke when request is completed
   * @return {XMLHttpRequest} request
   */function request(url,options){options||(options={});var method=options.method?options.method.toUpperCase():"GET",onComplete=options.onComplete||function(){},xhr=new fabric.window.XMLHttpRequest,body=options.body||options.parameters;
/** @ignore */return xhr.onreadystatechange=function(){4===xhr.readyState&&(onComplete(xhr),xhr.onreadystatechange=emptyFn)},"GET"===method&&(body=null,"string"===typeof options.parameters&&(url=addParamToUrl(url,options.parameters))),xhr.open(method,url,!0),"POST"!==method&&"PUT"!==method||xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),xhr.send(body),xhr}fabric.util.request=request}(),
/**
 * Wrapper around `console.log` (when available)
 * @param {*} [values] Values to log
 */
fabric.log=console.log,
/**
 * Wrapper around `console.warn` (when available)
 * @param {*} [values] Values to log as a warning
 */
fabric.warn=console.warn,function(){function noop(){return!1}function defaultEasing(t,b,c,d){return-c*Math.cos(t/d*(Math.PI/2))+c+b}
/**
   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.
   * @memberOf fabric.util
   * @param {Object} [options] Animation options
   * @param {Function} [options.onChange] Callback; invoked on every value change
   * @param {Function} [options.onComplete] Callback; invoked when value change is completed
   * @param {Number} [options.startValue=0] Starting value
   * @param {Number} [options.endValue=100] Ending value
   * @param {Number} [options.byValue=100] Value to modify the property by
   * @param {Function} [options.easing] Easing function
   * @param {Number} [options.duration=500] Duration of change (in ms)
   * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.
   */function animate(options){requestAnimFrame((function(timestamp){options||(options={});var time,start=timestamp||+new Date,duration=options.duration||500,finish=start+duration,onChange=options.onChange||noop,abort=options.abort||noop,onComplete=options.onComplete||noop,easing=options.easing||defaultEasing,startValue="startValue"in options?options.startValue:0,endValue="endValue"in options?options.endValue:100,byValue=options.byValue||endValue-startValue;options.onStart&&options.onStart(),function tick(ticktime){
// TODO: move abort call after calculation
// and pass (current,valuePerc, timePerc) as arguments
time=ticktime||+new Date;var currentTime=time>finish?duration:time-start,timePerc=currentTime/duration,current=easing(currentTime,startValue,byValue,duration),valuePerc=Math.abs((current-startValue)/byValue);if(!abort())return time>finish?(onChange(endValue,1,1),void onComplete(endValue,1,1)):(onChange(current,valuePerc,timePerc),void requestAnimFrame(tick));onComplete(endValue,1,1)}(start)}))}var _requestAnimFrame=fabric.window.requestAnimationFrame||fabric.window.webkitRequestAnimationFrame||fabric.window.mozRequestAnimationFrame||fabric.window.oRequestAnimationFrame||fabric.window.msRequestAnimationFrame||function(callback){return fabric.window.setTimeout(callback,1e3/60)},_cancelAnimFrame=fabric.window.cancelAnimationFrame||fabric.window.clearTimeout;
/**
   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/
   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method
   * @memberOf fabric.util
   * @param {Function} callback Callback to invoke
   * @param {DOMElement} element optional Element to associate with animation
   */
function requestAnimFrame(){return _requestAnimFrame.apply(fabric.window,arguments)}function cancelAnimFrame(){return _cancelAnimFrame.apply(fabric.window,arguments)}fabric.util.animate=animate,fabric.util.requestAnimFrame=requestAnimFrame,fabric.util.cancelAnimFrame=cancelAnimFrame}(),function(){
// Calculate an in-between color. Returns a "rgba()" string.
// Credit: Edwin Martin <edwin@bitstorm.org>
//         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js
function calculateColor(begin,end,pos){var color="rgba("+parseInt(begin[0]+pos*(end[0]-begin[0]),10)+","+parseInt(begin[1]+pos*(end[1]-begin[1]),10)+","+parseInt(begin[2]+pos*(end[2]-begin[2]),10);return color+=","+(begin&&end?parseFloat(begin[3]+pos*(end[3]-begin[3])):1),color+=")",color}
/**
   * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.
   * @memberOf fabric.util
   * @param {String} fromColor The starting color in hex or rgb(a) format.
   * @param {String} toColor The starting color in hex or rgb(a) format.
   * @param {Number} [duration] Duration of change (in ms).
   * @param {Object} [options] Animation options
   * @param {Function} [options.onChange] Callback; invoked on every value change
   * @param {Function} [options.onComplete] Callback; invoked when value change is completed
   * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.
   * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.
   */function animateColor(fromColor,toColor,duration,options){var startColor=new fabric.Color(fromColor).getSource(),endColor=new fabric.Color(toColor).getSource();options=options||{},fabric.util.animate(fabric.util.object.extend(options,{duration:duration||500,startValue:startColor,endValue:endColor,byValue:endColor,easing:function(currentTime,startValue,byValue,duration){var posValue=options.colorEasing?options.colorEasing(currentTime,duration):1-Math.cos(currentTime/duration*(Math.PI/2));return calculateColor(startValue,byValue,posValue)}}))}fabric.util.animateColor=animateColor}(),function(){function normalize(a,c,p,s){return a<Math.abs(c)?(a=c,s=p/4):
//handle the 0/0 case:
s=0===c&&0===a?p/(2*Math.PI)*Math.asin(1):p/(2*Math.PI)*Math.asin(c/a),{a:a,c:c,p:p,s:s}}function elastic(opts,t,d){return opts.a*Math.pow(2,10*(t-=1))*Math.sin((t*d-opts.s)*(2*Math.PI)/opts.p)}
/**
   * Cubic easing out
   * @memberOf fabric.util.ease
   */function easeOutCubic(t,b,c,d){return c*((t=t/d-1)*t*t+1)+b}
/**
   * Cubic easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutCubic(t,b,c,d){return t/=d/2,t<1?c/2*t*t*t+b:c/2*((t-=2)*t*t+2)+b}
/**
   * Quartic easing in
   * @memberOf fabric.util.ease
   */function easeInQuart(t,b,c,d){return c*(t/=d)*t*t*t+b}
/**
   * Quartic easing out
   * @memberOf fabric.util.ease
   */function easeOutQuart(t,b,c,d){return-c*((t=t/d-1)*t*t*t-1)+b}
/**
   * Quartic easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutQuart(t,b,c,d){return t/=d/2,t<1?c/2*t*t*t*t+b:-c/2*((t-=2)*t*t*t-2)+b}
/**
   * Quintic easing in
   * @memberOf fabric.util.ease
   */function easeInQuint(t,b,c,d){return c*(t/=d)*t*t*t*t+b}
/**
   * Quintic easing out
   * @memberOf fabric.util.ease
   */function easeOutQuint(t,b,c,d){return c*((t=t/d-1)*t*t*t*t+1)+b}
/**
   * Quintic easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutQuint(t,b,c,d){return t/=d/2,t<1?c/2*t*t*t*t*t+b:c/2*((t-=2)*t*t*t*t+2)+b}
/**
   * Sinusoidal easing in
   * @memberOf fabric.util.ease
   */function easeInSine(t,b,c,d){return-c*Math.cos(t/d*(Math.PI/2))+c+b}
/**
   * Sinusoidal easing out
   * @memberOf fabric.util.ease
   */function easeOutSine(t,b,c,d){return c*Math.sin(t/d*(Math.PI/2))+b}
/**
   * Sinusoidal easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutSine(t,b,c,d){return-c/2*(Math.cos(Math.PI*t/d)-1)+b}
/**
   * Exponential easing in
   * @memberOf fabric.util.ease
   */function easeInExpo(t,b,c,d){return 0===t?b:c*Math.pow(2,10*(t/d-1))+b}
/**
   * Exponential easing out
   * @memberOf fabric.util.ease
   */function easeOutExpo(t,b,c,d){return t===d?b+c:c*(1-Math.pow(2,-10*t/d))+b}
/**
   * Exponential easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutExpo(t,b,c,d){return 0===t?b:t===d?b+c:(t/=d/2,t<1?c/2*Math.pow(2,10*(t-1))+b:c/2*(2-Math.pow(2,-10*--t))+b)}
/**
   * Circular easing in
   * @memberOf fabric.util.ease
   */function easeInCirc(t,b,c,d){return-c*(Math.sqrt(1-(t/=d)*t)-1)+b}
/**
   * Circular easing out
   * @memberOf fabric.util.ease
   */function easeOutCirc(t,b,c,d){return c*Math.sqrt(1-(t=t/d-1)*t)+b}
/**
   * Circular easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutCirc(t,b,c,d){return t/=d/2,t<1?-c/2*(Math.sqrt(1-t*t)-1)+b:c/2*(Math.sqrt(1-(t-=2)*t)+1)+b}
/**
   * Elastic easing in
   * @memberOf fabric.util.ease
   */function easeInElastic(t,b,c,d){var s=1.70158,p=0,a=c;if(0===t)return b;if(t/=d,1===t)return b+c;p||(p=.3*d);var opts=normalize(a,c,p,s);return-elastic(opts,t,d)+b}
/**
   * Elastic easing out
   * @memberOf fabric.util.ease
   */function easeOutElastic(t,b,c,d){var s=1.70158,p=0,a=c;if(0===t)return b;if(t/=d,1===t)return b+c;p||(p=.3*d);var opts=normalize(a,c,p,s);return opts.a*Math.pow(2,-10*t)*Math.sin((t*d-opts.s)*(2*Math.PI)/opts.p)+opts.c+b}
/**
   * Elastic easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutElastic(t,b,c,d){var s=1.70158,p=0,a=c;if(0===t)return b;if(t/=d/2,2===t)return b+c;p||(p=d*(.3*1.5));var opts=normalize(a,c,p,s);return t<1?-.5*elastic(opts,t,d)+b:opts.a*Math.pow(2,-10*(t-=1))*Math.sin((t*d-opts.s)*(2*Math.PI)/opts.p)*.5+opts.c+b}
/**
   * Backwards easing in
   * @memberOf fabric.util.ease
   */function easeInBack(t,b,c,d,s){return void 0===s&&(s=1.70158),c*(t/=d)*t*((s+1)*t-s)+b}
/**
   * Backwards easing out
   * @memberOf fabric.util.ease
   */function easeOutBack(t,b,c,d,s){return void 0===s&&(s=1.70158),c*((t=t/d-1)*t*((s+1)*t+s)+1)+b}
/**
   * Backwards easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutBack(t,b,c,d,s){return void 0===s&&(s=1.70158),t/=d/2,t<1?c/2*(t*t*((1+(s*=1.525))*t-s))+b:c/2*((t-=2)*t*((1+(s*=1.525))*t+s)+2)+b}
/**
   * Bouncing easing in
   * @memberOf fabric.util.ease
   */function easeInBounce(t,b,c,d){return c-easeOutBounce(d-t,0,c,d)+b}
/**
   * Bouncing easing out
   * @memberOf fabric.util.ease
   */function easeOutBounce(t,b,c,d){return(t/=d)<1/2.75?c*(7.5625*t*t)+b:t<2/2.75?c*(7.5625*(t-=1.5/2.75)*t+.75)+b:t<2.5/2.75?c*(7.5625*(t-=2.25/2.75)*t+.9375)+b:c*(7.5625*(t-=2.625/2.75)*t+.984375)+b}
/**
   * Bouncing easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutBounce(t,b,c,d){return t<d/2?.5*easeInBounce(2*t,0,c,d)+b:.5*easeOutBounce(2*t-d,0,c,d)+.5*c+b}
/**
   * Easing functions
   * See <a href="http://gizma.com/easing/">Easing Equations by Robert Penner</a>
   * @namespace fabric.util.ease
   */fabric.util.ease={
/**
     * Quadratic easing in
     * @memberOf fabric.util.ease
     */
easeInQuad:function(t,b,c,d){return c*(t/=d)*t+b},
/**
     * Quadratic easing out
     * @memberOf fabric.util.ease
     */
easeOutQuad:function(t,b,c,d){return-c*(t/=d)*(t-2)+b},
/**
     * Quadratic easing in and out
     * @memberOf fabric.util.ease
     */
easeInOutQuad:function(t,b,c,d){return t/=d/2,t<1?c/2*t*t+b:-c/2*(--t*(t-2)-1)+b},
/**
     * Cubic easing in
     * @memberOf fabric.util.ease
     */
easeInCubic:function(t,b,c,d){return c*(t/=d)*t*t+b},easeOutCubic:easeOutCubic,easeInOutCubic:easeInOutCubic,easeInQuart:easeInQuart,easeOutQuart:easeOutQuart,easeInOutQuart:easeInOutQuart,easeInQuint:easeInQuint,easeOutQuint:easeOutQuint,easeInOutQuint:easeInOutQuint,easeInSine:easeInSine,easeOutSine:easeOutSine,easeInOutSine:easeInOutSine,easeInExpo:easeInExpo,easeOutExpo:easeOutExpo,easeInOutExpo:easeInOutExpo,easeInCirc:easeInCirc,easeOutCirc:easeOutCirc,easeInOutCirc:easeInOutCirc,easeInElastic:easeInElastic,easeOutElastic:easeOutElastic,easeInOutElastic:easeInOutElastic,easeInBack:easeInBack,easeOutBack:easeOutBack,easeInOutBack:easeInOutBack,easeInBounce:easeInBounce,easeOutBounce:easeOutBounce,easeInOutBounce:easeInOutBounce}}(),function(global){"use strict";
/**
   * @name fabric
   * @namespace
   */var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,clone=fabric.util.object.clone,toFixed=fabric.util.toFixed,parseUnit=fabric.util.parseUnit,multiplyTransformMatrices=fabric.util.multiplyTransformMatrices,svgValidTagNames=["path","circle","polygon","polyline","ellipse","rect","line","image","text"],svgViewBoxElements=["symbol","image","marker","pattern","view","svg"],svgInvalidAncestors=["pattern","defs","symbol","metadata","clipPath","mask","desc"],svgValidParents=["symbol","g","a","svg","clipPath","defs"],attributesMap={cx:"left",x:"left",r:"radius",cy:"top",y:"top",display:"visible",visibility:"visible",transform:"transformMatrix","fill-opacity":"fillOpacity","fill-rule":"fillRule","font-family":"fontFamily","font-size":"fontSize","font-style":"fontStyle","font-weight":"fontWeight","letter-spacing":"charSpacing","paint-order":"paintFirst","stroke-dasharray":"strokeDashArray","stroke-dashoffset":"strokeDashOffset","stroke-linecap":"strokeLineCap","stroke-linejoin":"strokeLineJoin","stroke-miterlimit":"strokeMiterLimit","stroke-opacity":"strokeOpacity","stroke-width":"strokeWidth","text-decoration":"textDecoration","text-anchor":"textAnchor",opacity:"opacity","clip-path":"clipPath","clip-rule":"clipRule","vector-effect":"strokeUniform"},colorAttributes={stroke:"strokeOpacity",fill:"fillOpacity"},fSize="font-size",cPath="clip-path";function normalizeAttr(attr){
// transform attribute names
return attr in attributesMap?attributesMap[attr]:attr}function normalizeValue(attr,value,parentAttributes,fontSize){var parsed,isArray="[object Array]"===Object.prototype.toString.call(value);if("fill"!==attr&&"stroke"!==attr||"none"!==value)if("vector-effect"===attr)value="non-scaling-stroke"===value;else if("strokeDashArray"===attr)value="none"===value?null:value.replace(/,/g," ").split(/\s+/).map(parseFloat);else if("transformMatrix"===attr)value=parentAttributes&&parentAttributes.transformMatrix?multiplyTransformMatrices(parentAttributes.transformMatrix,fabric.parseTransformAttribute(value)):fabric.parseTransformAttribute(value);else if("visible"===attr)value="none"!==value&&"hidden"!==value,
// display=none on parent element always takes precedence over child element
parentAttributes&&!1===parentAttributes.visible&&(value=!1);else if("opacity"===attr)value=parseFloat(value),parentAttributes&&"undefined"!==typeof parentAttributes.opacity&&(value*=parentAttributes.opacity);else if("textAnchor"/* text-anchor */===attr)value="start"===value?"left":"end"===value?"right":"center";else if("charSpacing"===attr)
// parseUnit returns px and we convert it to em
parsed=parseUnit(value,fontSize)/fontSize*1e3;else if("paintFirst"===attr){var fillIndex=value.indexOf("fill"),strokeIndex=value.indexOf("stroke");value="fill";(fillIndex>-1&&strokeIndex>-1&&strokeIndex<fillIndex||-1===fillIndex&&strokeIndex>-1)&&(value="stroke")}else{if("href"===attr||"xlink:href"===attr)return value;parsed=isArray?value.map(parseUnit):parseUnit(value,fontSize)}else value="";return!isArray&&isNaN(parsed)?value:parsed}
/**
    * @private
    */function getSvgRegex(arr){return new RegExp("^("+arr.join("|")+")\\b","i")}
/**
   * @private
   * @param {Object} attributes Array of attributes to parse
   */function _setStrokeFillOpacity(attributes){for(var attr in colorAttributes)if("undefined"!==typeof attributes[colorAttributes[attr]]&&""!==attributes[attr]){if("undefined"===typeof attributes[attr]){if(!fabric.Object.prototype[attr])continue;attributes[attr]=fabric.Object.prototype[attr]}if(0!==attributes[attr].indexOf("url(")){var color=new fabric.Color(attributes[attr]);attributes[attr]=color.setAlpha(toFixed(color.getAlpha()*attributes[colorAttributes[attr]],2)).toRgba()}}return attributes}
/**
   * @private
   */function _getMultipleNodes(doc,nodeNames){var nodeName,nodeList,i,len,nodeArray=[];for(i=0,len=nodeNames.length;i<len;i++)nodeName=nodeNames[i],nodeList=doc.getElementsByTagName(nodeName),nodeArray=nodeArray.concat(Array.prototype.slice.call(nodeList));return nodeArray}
/**
   * Parses "transform" attribute, returning an array of values
   * @static
   * @function
   * @memberOf fabric
   * @param {String} attributeValue String containing attribute value
   * @return {Array} Array of 6 elements representing transformation matrix
   */
/**
   * @private
   */
function parseStyleString(style,oStyle){var attr,value;style.replace(/;\s*$/,"").split(";").forEach((function(chunk){var pair=chunk.split(":");attr=pair[0].trim().toLowerCase(),value=pair[1].trim(),oStyle[attr]=value}))}
/**
   * @private
   */function parseStyleObject(style,oStyle){var attr,value;for(var prop in style)"undefined"!==typeof style[prop]&&(attr=prop.toLowerCase(),value=style[prop],oStyle[attr]=value)}
/**
   * @private
   */function getGlobalStylesForElement(element,svgUid){var styles={};for(var rule in fabric.cssRules[svgUid])if(elementMatchesRule(element,rule.split(" ")))for(var property in fabric.cssRules[svgUid][rule])styles[property]=fabric.cssRules[svgUid][rule][property];return styles}
/**
   * @private
   */function elementMatchesRule(element,selectors){var firstMatching,parentMatching=!0;
//start from rightmost selector.
return firstMatching=selectorMatches(element,selectors.pop()),firstMatching&&selectors.length&&(parentMatching=doesSomeParentMatch(element,selectors)),firstMatching&&parentMatching&&0===selectors.length}function doesSomeParentMatch(element,selectors){var selector,parentMatching=!0;while(element.parentNode&&1===element.parentNode.nodeType&&selectors.length)parentMatching&&(selector=selectors.pop()),element=element.parentNode,parentMatching=selectorMatches(element,selector);return 0===selectors.length}
/**
   * @private
   */function selectorMatches(element,selector){var matcher,i,nodeName=element.nodeName,classNames=element.getAttribute("class"),id=element.getAttribute("id");
// i check if a selector matches slicing away part from it.
// if i get empty string i should match
if(matcher=new RegExp("^"+nodeName,"i"),selector=selector.replace(matcher,""),id&&selector.length&&(matcher=new RegExp("#"+id+"(?![a-zA-Z\\-]+)","i"),selector=selector.replace(matcher,"")),classNames&&selector.length)for(classNames=classNames.split(" "),i=classNames.length;i--;)matcher=new RegExp("\\."+classNames[i]+"(?![a-zA-Z\\-]+)","i"),selector=selector.replace(matcher,"");return 0===selector.length}
/**
   * @private
   * to support IE8 missing getElementById on SVGdocument and on node xmlDOM
   */function elementById(doc,id){var el;if(doc.getElementById&&(el=doc.getElementById(id)),el)return el;var node,i,len,nodelist=doc.getElementsByTagName("*");for(i=0,len=nodelist.length;i<len;i++)if(node=nodelist[i],id===node.getAttribute("id"))return node}
/**
   * @private
   */function parseUseDirectives(doc){var nodelist=_getMultipleNodes(doc,["use","svg:use"]),i=0;while(nodelist.length&&i<nodelist.length){var parentNode,attr,j,attrs,len,el=nodelist[i],xlink=(el.getAttribute("xlink:href")||el.getAttribute("href")).substr(1),x=el.getAttribute("x")||0,y=el.getAttribute("y")||0,el2=elementById(doc,xlink).cloneNode(!0),currentTrans=(el2.getAttribute("transform")||"")+" translate("+x+", "+y+")",oldLength=nodelist.length,namespace=fabric.svgNS;if(applyViewboxTransform(el2),/^svg$/i.test(el2.nodeName)){var el3=el2.ownerDocument.createElementNS(namespace,"g");for(j=0,attrs=el2.attributes,len=attrs.length;j<len;j++)attr=attrs.item(j),el3.setAttributeNS(namespace,attr.nodeName,attr.nodeValue);
// el2.firstChild != null
while(el2.firstChild)el3.appendChild(el2.firstChild);el2=el3}for(j=0,attrs=el.attributes,len=attrs.length;j<len;j++)attr=attrs.item(j),"x"!==attr.nodeName&&"y"!==attr.nodeName&&"xlink:href"!==attr.nodeName&&"href"!==attr.nodeName&&("transform"===attr.nodeName?currentTrans=attr.nodeValue+" "+currentTrans:el2.setAttribute(attr.nodeName,attr.nodeValue));el2.setAttribute("transform",currentTrans),el2.setAttribute("instantiated_by_use","1"),el2.removeAttribute("id"),parentNode=el.parentNode,parentNode.replaceChild(el2,el),
// some browsers do not shorten nodelist after replaceChild (IE8)
nodelist.length===oldLength&&i++}}
// http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute
// matches, e.g.: +14.56e-12, etc.
fabric.svgValidTagNamesRegEx=getSvgRegex(svgValidTagNames),fabric.svgViewBoxElementsRegEx=getSvgRegex(svgViewBoxElements),fabric.svgInvalidAncestorsRegEx=getSvgRegex(svgInvalidAncestors),fabric.svgValidParentsRegEx=getSvgRegex(svgValidParents),fabric.cssRules={},fabric.gradientDefs={},fabric.clipPaths={},fabric.parseTransformAttribute=function(){function rotateMatrix(matrix,args){var cos=fabric.util.cos(args[0]),sin=fabric.util.sin(args[0]),x=0,y=0;3===args.length&&(x=args[1],y=args[2]),matrix[0]=cos,matrix[1]=sin,matrix[2]=-sin,matrix[3]=cos,matrix[4]=x-(cos*x-sin*y),matrix[5]=y-(sin*x+cos*y)}function scaleMatrix(matrix,args){var multiplierX=args[0],multiplierY=2===args.length?args[1]:args[0];matrix[0]=multiplierX,matrix[3]=multiplierY}function skewMatrix(matrix,args,pos){matrix[pos]=Math.tan(fabric.util.degreesToRadians(args[0]))}function translateMatrix(matrix,args){matrix[4]=args[0],2===args.length&&(matrix[5]=args[1])}
// identity matrix
var iMatrix=fabric.iMatrix,
// == begin transform regexp
number=fabric.reNum,commaWsp="(?:\\s+,?\\s*|,\\s*)",skewX="(?:(skewX)\\s*\\(\\s*("+number+")\\s*\\))",skewY="(?:(skewY)\\s*\\(\\s*("+number+")\\s*\\))",rotate="(?:(rotate)\\s*\\(\\s*("+number+")(?:"+commaWsp+"("+number+")"+commaWsp+"("+number+"))?\\s*\\))",scale="(?:(scale)\\s*\\(\\s*("+number+")(?:"+commaWsp+"("+number+"))?\\s*\\))",translate="(?:(translate)\\s*\\(\\s*("+number+")(?:"+commaWsp+"("+number+"))?\\s*\\))",matrix="(?:(matrix)\\s*\\(\\s*("+number+")"+commaWsp+"("+number+")"+commaWsp+"("+number+")"+commaWsp+"("+number+")"+commaWsp+"("+number+")"+commaWsp+"("+number+")\\s*\\))",transform="(?:"+matrix+"|"+translate+"|"+scale+"|"+rotate+"|"+skewX+"|"+skewY+")",transforms="(?:"+transform+"(?:"+commaWsp+"*"+transform+")*)",transformList="^\\s*(?:"+transforms+"?)\\s*$",
// http://www.w3.org/TR/SVG/coords.html#TransformAttribute
reTransformList=new RegExp(transformList),
// == end transform regexp
reTransform=new RegExp(transform,"g");return function(attributeValue){
// start with identity matrix
var matrix=iMatrix.concat(),matrices=[];
// return if no argument was given or
// an argument does not match transform attribute regexp
if(!attributeValue||attributeValue&&!reTransformList.test(attributeValue))return matrix;attributeValue.replace(reTransform,(function(match){var m=new RegExp(transform).exec(match).filter((function(match){
// match !== '' && match != null
return!!match})),operation=m[1],args=m.slice(2).map(parseFloat);switch(operation){case"translate":translateMatrix(matrix,args);break;case"rotate":args[0]=fabric.util.degreesToRadians(args[0]),rotateMatrix(matrix,args);break;case"scale":scaleMatrix(matrix,args);break;case"skewX":skewMatrix(matrix,args,2);break;case"skewY":skewMatrix(matrix,args,1);break;case"matrix":matrix=args;break}
// snapshot current matrix into matrices array
matrices.push(matrix.concat()),
// reset
matrix=iMatrix.concat()}));var combinedMatrix=matrices[0];while(matrices.length>1)matrices.shift(),combinedMatrix=fabric.util.multiplyTransformMatrices(combinedMatrix,matrices[0]);return combinedMatrix}}();var reViewBoxAttrValue=new RegExp("^\\s*("+fabric.reNum+"+)\\s*,?\\s*("+fabric.reNum+"+)\\s*,?\\s*("+fabric.reNum+"+)\\s*,?\\s*("+fabric.reNum+"+)\\s*$");
/**
   * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements
   */function applyViewboxTransform(element){var viewBoxWidth,viewBoxHeight,matrix,el,viewBoxAttr=element.getAttribute("viewBox"),scaleX=1,scaleY=1,minX=0,minY=0,widthAttr=element.getAttribute("width"),heightAttr=element.getAttribute("height"),x=element.getAttribute("x")||0,y=element.getAttribute("y")||0,preserveAspectRatio=element.getAttribute("preserveAspectRatio")||"",missingViewBox=!viewBoxAttr||!fabric.svgViewBoxElementsRegEx.test(element.nodeName)||!(viewBoxAttr=viewBoxAttr.match(reViewBoxAttrValue)),missingDimAttr=!widthAttr||!heightAttr||"100%"===widthAttr||"100%"===heightAttr,toBeParsed=missingViewBox&&missingDimAttr,parsedDim={},translateMatrix="",widthDiff=0,heightDiff=0;if(parsedDim.width=0,parsedDim.height=0,parsedDim.toBeParsed=toBeParsed,toBeParsed)return parsedDim;if(missingViewBox)return parsedDim.width=parseUnit(widthAttr),parsedDim.height=parseUnit(heightAttr),parsedDim;if(minX=-parseFloat(viewBoxAttr[1]),minY=-parseFloat(viewBoxAttr[2]),viewBoxWidth=parseFloat(viewBoxAttr[3]),viewBoxHeight=parseFloat(viewBoxAttr[4]),parsedDim.minX=minX,parsedDim.minY=minY,parsedDim.viewBoxWidth=viewBoxWidth,parsedDim.viewBoxHeight=viewBoxHeight,missingDimAttr?(parsedDim.width=viewBoxWidth,parsedDim.height=viewBoxHeight):(parsedDim.width=parseUnit(widthAttr),parsedDim.height=parseUnit(heightAttr),scaleX=parsedDim.width/viewBoxWidth,scaleY=parsedDim.height/viewBoxHeight),
// default is to preserve aspect ratio
preserveAspectRatio=fabric.util.parsePreserveAspectRatioAttribute(preserveAspectRatio),"none"!==preserveAspectRatio.alignX&&(
//translate all container for the effect of Mid, Min, Max
"meet"===preserveAspectRatio.meetOrSlice&&(scaleY=scaleX=scaleX>scaleY?scaleY:scaleX),"slice"===preserveAspectRatio.meetOrSlice&&(scaleY=scaleX=scaleX>scaleY?scaleX:scaleY),widthDiff=parsedDim.width-viewBoxWidth*scaleX,heightDiff=parsedDim.height-viewBoxHeight*scaleX,"Mid"===preserveAspectRatio.alignX&&(widthDiff/=2),"Mid"===preserveAspectRatio.alignY&&(heightDiff/=2),"Min"===preserveAspectRatio.alignX&&(widthDiff=0),"Min"===preserveAspectRatio.alignY&&(heightDiff=0)),1===scaleX&&1===scaleY&&0===minX&&0===minY&&0===x&&0===y)return parsedDim;if((x||y)&&(translateMatrix=" translate("+parseUnit(x)+" "+parseUnit(y)+") "),matrix=translateMatrix+" matrix("+scaleX+" 0 0 "+scaleY+" "+(minX*scaleX+widthDiff)+" "+(minY*scaleY+heightDiff)+") ",parsedDim.viewboxTransform=fabric.parseTransformAttribute(matrix),"svg"===element.nodeName){el=element.ownerDocument.createElementNS(fabric.svgNS,"g");
// element.firstChild != null
while(element.firstChild)el.appendChild(element.firstChild);element.appendChild(el)}else el=element,matrix=el.getAttribute("transform")+matrix;return el.setAttribute("transform",matrix),parsedDim}function hasAncestorWithNodeName(element,nodeName){while(element&&(element=element.parentNode))if(element.nodeName&&nodeName.test(element.nodeName.replace("svg:",""))&&!element.getAttribute("instantiated_by_use"))return!0;return!1}
/**
   * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback
   * @static
   * @function
   * @memberOf fabric
   * @param {SVGDocument} doc SVG document to parse
   * @param {Function} callback Callback to call when parsing is finished;
   * It's being passed an array of elements (parsed from a document).
   * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
   * @param {Object} [parsingOptions] options for parsing document
   * @param {String} [parsingOptions.crossOrigin] crossOrigin settings
   */function recursivelyParseGradientsXlink(doc,gradient){var gradientsAttrs=["gradientTransform","x1","x2","y1","y2","gradientUnits","cx","cy","r","fx","fy"],xlinkAttr="xlink:href",xLink=gradient.getAttribute(xlinkAttr).substr(1),referencedGradient=elementById(doc,xLink);if(referencedGradient&&referencedGradient.getAttribute(xlinkAttr)&&recursivelyParseGradientsXlink(doc,referencedGradient),gradientsAttrs.forEach((function(attr){referencedGradient&&!gradient.hasAttribute(attr)&&referencedGradient.hasAttribute(attr)&&gradient.setAttribute(attr,referencedGradient.getAttribute(attr))})),!gradient.children.length){var referenceClone=referencedGradient.cloneNode(!0);while(referenceClone.firstChild)gradient.appendChild(referenceClone.firstChild)}gradient.removeAttribute(xlinkAttr)}fabric.parseSVGDocument=function(doc,callback,reviver,parsingOptions){if(doc){parseUseDirectives(doc);var i,len,svgUid=fabric.Object.__uid++,options=applyViewboxTransform(doc),descendants=fabric.util.toArray(doc.getElementsByTagName("*"));if(options.crossOrigin=parsingOptions&&parsingOptions.crossOrigin,options.svgUid=svgUid,0===descendants.length&&fabric.isLikelyNode){
// we're likely in node, where "o3-xml" library fails to gEBTN("*")
// https://github.com/ajaxorg/node-o3-xml/issues/21
descendants=doc.selectNodes('//*[name(.)!="svg"]');var arr=[];for(i=0,len=descendants.length;i<len;i++)arr[i]=descendants[i];descendants=arr}var elements=descendants.filter((function(el){return applyViewboxTransform(el),fabric.svgValidTagNamesRegEx.test(el.nodeName.replace("svg:",""))&&!hasAncestorWithNodeName(el,fabric.svgInvalidAncestorsRegEx);// http://www.w3.org/TR/SVG/struct.html#DefsElement
}));if(!elements||elements&&!elements.length)callback&&callback([],{});else{var clipPaths={};descendants.filter((function(el){return"clipPath"===el.nodeName.replace("svg:","")})).forEach((function(el){var id=el.getAttribute("id");clipPaths[id]=fabric.util.toArray(el.getElementsByTagName("*")).filter((function(el){return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace("svg:",""))}))})),fabric.gradientDefs[svgUid]=fabric.getGradientDefs(doc),fabric.cssRules[svgUid]=fabric.getCSSRules(doc),fabric.clipPaths[svgUid]=clipPaths,
// Precedence of rules:   style > class > attribute
fabric.parseElements(elements,(function(instances,elements){callback&&(callback(instances,options,elements,descendants),delete fabric.gradientDefs[svgUid],delete fabric.cssRules[svgUid],delete fabric.clipPaths[svgUid])}),clone(options),reviver,parsingOptions)}}};var reFontDeclaration=new RegExp("(normal|italic)?\\s*(normal|small-caps)?\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*("+fabric.reNum+"(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|"+fabric.reNum+"))?\\s+(.*)");extend(fabric,{
/**
     * Parses a short font declaration, building adding its properties to a style object
     * @static
     * @function
     * @memberOf fabric
     * @param {String} value font declaration
     * @param {Object} oStyle definition
     */
parseFontDeclaration:function(value,oStyle){var match=value.match(reFontDeclaration);if(match){var fontStyle=match[1],
// font variant is not used
// fontVariant = match[2],
fontWeight=match[3],fontSize=match[4],lineHeight=match[5],fontFamily=match[6];fontStyle&&(oStyle.fontStyle=fontStyle),fontWeight&&(oStyle.fontWeight=isNaN(parseFloat(fontWeight))?fontWeight:parseFloat(fontWeight)),fontSize&&(oStyle.fontSize=parseUnit(fontSize)),fontFamily&&(oStyle.fontFamily=fontFamily),lineHeight&&(oStyle.lineHeight="normal"===lineHeight?1:lineHeight)}},
/**
     * Parses an SVG document, returning all of the gradient declarations found in it
     * @static
     * @function
     * @memberOf fabric
     * @param {SVGDocument} doc SVG document to parse
     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element
     */
getGradientDefs:function(doc){var el,tagArray=["linearGradient","radialGradient","svg:linearGradient","svg:radialGradient"],elList=_getMultipleNodes(doc,tagArray),j=0,gradientDefs={};j=elList.length;while(j--)el=elList[j],el.getAttribute("xlink:href")&&recursivelyParseGradientsXlink(doc,el),gradientDefs[el.getAttribute("id")]=el;return gradientDefs},
/**
     * Returns an object of attributes' name/value, given element and an array of attribute names;
     * Parses parent "g" nodes recursively upwards.
     * @static
     * @memberOf fabric
     * @param {DOMElement} element Element to parse
     * @param {Array} attributes Array of attributes to parse
     * @return {Object} object containing parsed attributes' names/values
     */
parseAttributes:function(element,attributes,svgUid){if(element){var value,fontSize,parentFontSize,parentAttributes={};"undefined"===typeof svgUid&&(svgUid=element.getAttribute("svgUid")),
// if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards
element.parentNode&&fabric.svgValidParentsRegEx.test(element.parentNode.nodeName)&&(parentAttributes=fabric.parseAttributes(element.parentNode,attributes,svgUid));var ownAttributes=attributes.reduce((function(memo,attr){return value=element.getAttribute(attr),value&&(// eslint-disable-line
memo[attr]=value),memo}),{}),cssAttrs=extend(getGlobalStylesForElement(element,svgUid),fabric.parseStyleAttribute(element));
// add values parsed from style, which take precedence over attributes
// (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)
ownAttributes=extend(ownAttributes,cssAttrs),cssAttrs[cPath]&&element.setAttribute(cPath,cssAttrs[cPath]),fontSize=parentFontSize=parentAttributes.fontSize||fabric.Text.DEFAULT_SVG_FONT_SIZE,ownAttributes[fSize]&&(
// looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.
ownAttributes[fSize]=fontSize=parseUnit(ownAttributes[fSize],parentFontSize));var normalizedAttr,normalizedValue,normalizedStyle={};for(var attr in ownAttributes)normalizedAttr=normalizeAttr(attr),normalizedValue=normalizeValue(normalizedAttr,ownAttributes[attr],parentAttributes,fontSize),normalizedStyle[normalizedAttr]=normalizedValue;normalizedStyle&&normalizedStyle.font&&fabric.parseFontDeclaration(normalizedStyle.font,normalizedStyle);var mergedAttrs=extend(parentAttributes,normalizedStyle);return fabric.svgValidParentsRegEx.test(element.nodeName)?mergedAttrs:_setStrokeFillOpacity(mergedAttrs)}},
/**
     * Transforms an array of svg elements to corresponding fabric.* instances
     * @static
     * @memberOf fabric
     * @param {Array} elements Array of elements to parse
     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)
     * @param {Object} [options] Options object
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     */
parseElements:function(elements,callback,options,reviver,parsingOptions){new fabric.ElementsParser(elements,callback,options,reviver,parsingOptions).parse()},
/**
     * Parses "style" attribute, retuning an object with values
     * @static
     * @memberOf fabric
     * @param {SVGElement} element Element to parse
     * @return {Object} Objects with values parsed from style attribute of an element
     */
parseStyleAttribute:function(element){var oStyle={},style=element.getAttribute("style");return style?("string"===typeof style?parseStyleString(style,oStyle):parseStyleObject(style,oStyle),oStyle):oStyle},
/**
     * Parses "points" attribute, returning an array of values
     * @static
     * @memberOf fabric
     * @param {String} points points attribute string
     * @return {Array} array of points
     */
parsePointsAttribute:function(points){
// points attribute is required and must not be empty
if(!points)return null;
// replace commas with whitespace and remove bookending whitespace
points=points.replace(/,/g," ").trim(),points=points.split(/\s+/);var i,len,parsedPoints=[];for(i=0,len=points.length;i<len;i+=2)parsedPoints.push({x:parseFloat(points[i]),y:parseFloat(points[i+1])});
// odd number of points is an error
// if (parsedPoints.length % 2 !== 0) {
//   return null;
// }
return parsedPoints},
/**
     * Returns CSS rules for a given SVG document
     * @static
     * @function
     * @memberOf fabric
     * @param {SVGDocument} doc SVG document to parse
     * @return {Object} CSS rules of this document
     */
getCSSRules:function(doc){var i,len,rules,styles=doc.getElementsByTagName("style"),allRules={};
// very crude parsing of style contents
for(i=0,len=styles.length;i<len;i++){
// <style/> could produce `undefined`, covering this case with ''
var styleContents=styles[i].textContent||"";
// remove comments
styleContents=styleContents.replace(/\/\*[\s\S]*?\*\//g,""),""!==styleContents.trim()&&(rules=styleContents.match(/[^{]*\{[\s\S]*?\}/g),rules=rules.map((function(rule){return rule.trim()})),
// eslint-disable-next-line no-loop-func
rules.forEach((function(rule){var match=rule.match(/([\s\S]*?)\s*\{([^}]*)\}/),ruleObj={},declaration=match[2].trim(),propertyValuePairs=declaration.replace(/;$/,"").split(/\s*;\s*/);for(i=0,len=propertyValuePairs.length;i<len;i++){var pair=propertyValuePairs[i].split(/\s*:\s*/),property=pair[0],value=pair[1];ruleObj[property]=value}rule=match[1],rule.split(",").forEach((function(_rule){_rule=_rule.replace(/^svg/i,"").trim(),""!==_rule&&(allRules[_rule]?fabric.util.object.extend(allRules[_rule],ruleObj):allRules[_rule]=fabric.util.object.clone(ruleObj))}))})))}return allRules},
/**
     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.
     * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)
     * @memberOf fabric
     * @param {String} url
     * @param {Function} callback
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     * @param {Object} [options] Object containing options for parsing
     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
     */
loadSVGFromURL:function(url,callback,reviver,options){function onComplete(r){var xml=r.responseXML;if(xml&&!xml.documentElement&&fabric.window.ActiveXObject&&r.responseText&&(xml=new ActiveXObject("Microsoft.XMLDOM"),xml.async="false",
//IE chokes on DOCTYPE
xml.loadXML(r.responseText.replace(/<!DOCTYPE[\s\S]*?(\[[\s\S]*\])*?>/i,""))),!xml||!xml.documentElement)return callback&&callback(null),!1;fabric.parseSVGDocument(xml.documentElement,(function(results,_options,elements,allElements){callback&&callback(results,_options,elements,allElements)}),reviver,options)}url=url.replace(/^\n\s*/,"").trim(),new fabric.util.request(url,{method:"get",onComplete:onComplete})},
/**
     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects
     * @memberOf fabric
     * @param {String} string
     * @param {Function} callback
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     * @param {Object} [options] Object containing options for parsing
     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
     */
loadSVGFromString:function(string,callback,reviver,options){var doc;if(string=string.trim(),"undefined"!==typeof fabric.window.DOMParser){var parser=new fabric.window.DOMParser;parser&&parser.parseFromString&&(doc=parser.parseFromString(string,"text/xml"))}else fabric.window.ActiveXObject&&(doc=new ActiveXObject("Microsoft.XMLDOM"),doc.async="false",
// IE chokes on DOCTYPE
doc.loadXML(string.replace(/<!DOCTYPE[\s\S]*?(\[[\s\S]*\])*?>/i,"")));fabric.parseSVGDocument(doc.documentElement,(function(results,_options,elements,allElements){callback(results,_options,elements,allElements)}),reviver,options)}})}(exports),fabric.ElementsParser=function(elements,callback,options,reviver,parsingOptions,doc){this.elements=elements,this.callback=callback,this.options=options,this.reviver=reviver,this.svgUid=options&&options.svgUid||0,this.parsingOptions=parsingOptions,this.regexUrl=/^url\(['"]?#([^'"]+)['"]?\)/g,this.doc=doc},function(proto){proto.parse=function(){this.instances=new Array(this.elements.length),this.numElements=this.elements.length,this.createObjects()},proto.createObjects=function(){var _this=this;this.elements.forEach((function(element,i){element.setAttribute("svgUid",_this.svgUid),_this.createObject(element,i)}))},proto.findTag=function(el){return fabric[fabric.util.string.capitalize(el.tagName.replace("svg:",""))]},proto.createObject=function(el,index){var klass=this.findTag(el);if(klass&&klass.fromElement)try{klass.fromElement(el,this.createCallback(index,el),this.options)}catch(err){fabric.log(err)}else this.checkIfDone()},proto.createCallback=function(index,el){var _this=this;return function(obj){var _options;_this.resolveGradient(obj,el,"fill"),_this.resolveGradient(obj,el,"stroke"),obj instanceof fabric.Image&&obj._originalElement&&(_options=obj.parsePreserveAspectRatioAttribute(el)),obj._removeTransformMatrix(_options),_this.resolveClipPath(obj,el),_this.reviver&&_this.reviver(el,obj),_this.instances[index]=obj,_this.checkIfDone()}},proto.extractPropertyDefinition=function(obj,property,storage){var value=obj[property],regex=this.regexUrl;if(regex.test(value)){regex.lastIndex=0;var id=regex.exec(value)[1];return regex.lastIndex=0,fabric[storage][this.svgUid][id]}},proto.resolveGradient=function(obj,el,property){var gradientDef=this.extractPropertyDefinition(obj,property,"gradientDefs");if(gradientDef){var opacityAttr=el.getAttribute(property+"-opacity"),gradient=fabric.Gradient.fromElement(gradientDef,obj,opacityAttr,this.options);obj.set(property,gradient)}},proto.createClipPathCallback=function(obj,container){return function(_newObj){_newObj._removeTransformMatrix(),_newObj.fillRule=_newObj.clipRule,container.push(_newObj)}},proto.resolveClipPath=function(obj,usingElement){var element,klass,objTransformInv,container,gTransform,clipPath=this.extractPropertyDefinition(obj,"clipPath","clipPaths");if(clipPath){container=[],objTransformInv=fabric.util.invertTransform(obj.calcTransformMatrix());
// move the clipPath tag as sibling to the real element that is using it
var clipPathTag=clipPath[0].parentNode,clipPathOwner=usingElement;while(clipPathOwner.parentNode&&clipPathOwner.getAttribute("clip-path")!==obj.clipPath)clipPathOwner=clipPathOwner.parentNode;clipPathOwner.parentNode.appendChild(clipPathTag);for(var i=0;i<clipPath.length;i++)element=clipPath[i],klass=this.findTag(element),klass.fromElement(element,this.createClipPathCallback(obj,container),this.options);clipPath=1===container.length?container[0]:new fabric.Group(container),gTransform=fabric.util.multiplyTransformMatrices(objTransformInv,clipPath.calcTransformMatrix()),clipPath.clipPath&&this.resolveClipPath(clipPath,clipPathOwner);var options=fabric.util.qrDecompose(gTransform);clipPath.flipX=!1,clipPath.flipY=!1,clipPath.set("scaleX",options.scaleX),clipPath.set("scaleY",options.scaleY),clipPath.angle=options.angle,clipPath.skewX=options.skewX,clipPath.skewY=0,clipPath.setPositionByOrigin({x:options.translateX,y:options.translateY},"center","center"),obj.clipPath=clipPath}else
// if clip-path does not resolve to any element, delete the property.
delete obj.clipPath},proto.checkIfDone=function(){0===--this.numElements&&(this.instances=this.instances.filter((function(el){
// eslint-disable-next-line no-eq-null, eqeqeq
return null!=el})),this.callback(this.instances,this.elements))}}(fabric.ElementsParser.prototype),function(global){"use strict";
/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */var fabric=global.fabric||(global.fabric={});
/**
   * Point class
   * @class fabric.Point
   * @memberOf fabric
   * @constructor
   * @param {Number} x
   * @param {Number} y
   * @return {fabric.Point} thisArg
   */
function Point(x,y){this.x=x,this.y=y}fabric.Point?fabric.warn("fabric.Point is already defined"):(fabric.Point=Point,Point.prototype=/** @lends fabric.Point.prototype */{type:"point",constructor:Point,
/**
     * Adds another point to this one and returns another one
     * @param {fabric.Point} that
     * @return {fabric.Point} new Point instance with added values
     */
add:function(that){return new Point(this.x+that.x,this.y+that.y)},
/**
     * Adds another point to this one
     * @param {fabric.Point} that
     * @return {fabric.Point} thisArg
     * @chainable
     */
addEquals:function(that){return this.x+=that.x,this.y+=that.y,this},
/**
     * Adds value to this point and returns a new one
     * @param {Number} scalar
     * @return {fabric.Point} new Point with added value
     */
scalarAdd:function(scalar){return new Point(this.x+scalar,this.y+scalar)},
/**
     * Adds value to this point
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */
scalarAddEquals:function(scalar){return this.x+=scalar,this.y+=scalar,this},
/**
     * Subtracts another point from this point and returns a new one
     * @param {fabric.Point} that
     * @return {fabric.Point} new Point object with subtracted values
     */
subtract:function(that){return new Point(this.x-that.x,this.y-that.y)},
/**
     * Subtracts another point from this point
     * @param {fabric.Point} that
     * @return {fabric.Point} thisArg
     * @chainable
     */
subtractEquals:function(that){return this.x-=that.x,this.y-=that.y,this},
/**
     * Subtracts value from this point and returns a new one
     * @param {Number} scalar
     * @return {fabric.Point}
     */
scalarSubtract:function(scalar){return new Point(this.x-scalar,this.y-scalar)},
/**
     * Subtracts value from this point
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */
scalarSubtractEquals:function(scalar){return this.x-=scalar,this.y-=scalar,this},
/**
     * Multiplies this point by a value and returns a new one
     * TODO: rename in scalarMultiply in 2.0
     * @param {Number} scalar
     * @return {fabric.Point}
     */
multiply:function(scalar){return new Point(this.x*scalar,this.y*scalar)},
/**
     * Multiplies this point by a value
     * TODO: rename in scalarMultiplyEquals in 2.0
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */
multiplyEquals:function(scalar){return this.x*=scalar,this.y*=scalar,this},
/**
     * Divides this point by a value and returns a new one
     * TODO: rename in scalarDivide in 2.0
     * @param {Number} scalar
     * @return {fabric.Point}
     */
divide:function(scalar){return new Point(this.x/scalar,this.y/scalar)},
/**
     * Divides this point by a value
     * TODO: rename in scalarDivideEquals in 2.0
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */
divideEquals:function(scalar){return this.x/=scalar,this.y/=scalar,this},
/**
     * Returns true if this point is equal to another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */
eq:function(that){return this.x===that.x&&this.y===that.y},
/**
     * Returns true if this point is less than another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */
lt:function(that){return this.x<that.x&&this.y<that.y},
/**
     * Returns true if this point is less than or equal to another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */
lte:function(that){return this.x<=that.x&&this.y<=that.y},
/**

     * Returns true if this point is greater another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */
gt:function(that){return this.x>that.x&&this.y>that.y},
/**
     * Returns true if this point is greater than or equal to another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */
gte:function(that){return this.x>=that.x&&this.y>=that.y},
/**
     * Returns new point which is the result of linear interpolation with this one and another one
     * @param {fabric.Point} that
     * @param {Number} t , position of interpolation, between 0 and 1 default 0.5
     * @return {fabric.Point}
     */
lerp:function(that,t){return"undefined"===typeof t&&(t=.5),t=Math.max(Math.min(1,t),0),new Point(this.x+(that.x-this.x)*t,this.y+(that.y-this.y)*t)},
/**
     * Returns distance from this point and another one
     * @param {fabric.Point} that
     * @return {Number}
     */
distanceFrom:function(that){var dx=this.x-that.x,dy=this.y-that.y;return Math.sqrt(dx*dx+dy*dy)},
/**
     * Returns the point between this point and another one
     * @param {fabric.Point} that
     * @return {fabric.Point}
     */
midPointFrom:function(that){return this.lerp(that)},
/**
     * Returns a new point which is the min of this and another one
     * @param {fabric.Point} that
     * @return {fabric.Point}
     */
min:function(that){return new Point(Math.min(this.x,that.x),Math.min(this.y,that.y))},
/**
     * Returns a new point which is the max of this and another one
     * @param {fabric.Point} that
     * @return {fabric.Point}
     */
max:function(that){return new Point(Math.max(this.x,that.x),Math.max(this.y,that.y))},
/**
     * Returns string representation of this point
     * @return {String}
     */
toString:function(){return this.x+","+this.y},
/**
     * Sets x/y of this point
     * @param {Number} x
     * @param {Number} y
     * @chainable
     */
setXY:function(x,y){return this.x=x,this.y=y,this},
/**
     * Sets x of this point
     * @param {Number} x
     * @chainable
     */
setX:function(x){return this.x=x,this},
/**
     * Sets y of this point
     * @param {Number} y
     * @chainable
     */
setY:function(y){return this.y=y,this},
/**
     * Sets x/y of this point from another point
     * @param {fabric.Point} that
     * @chainable
     */
setFromPoint:function(that){return this.x=that.x,this.y=that.y,this},
/**
     * Swaps x/y of this point and another point
     * @param {fabric.Point} that
     */
swap:function(that){var x=this.x,y=this.y;this.x=that.x,this.y=that.y,that.x=x,that.y=y},
/**
     * return a cloned instance of the point
     * @return {fabric.Point}
     */
clone:function(){return new Point(this.x,this.y)}})}(exports),function(global){"use strict";
/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */var fabric=global.fabric||(global.fabric={});
/**
   * Intersection class
   * @class fabric.Intersection
   * @memberOf fabric
   * @constructor
   */
function Intersection(status){this.status=status,this.points=[]}fabric.Intersection?fabric.warn("fabric.Intersection is already defined"):(fabric.Intersection=Intersection,fabric.Intersection.prototype=/** @lends fabric.Intersection.prototype */{constructor:Intersection,
/**
     * Appends a point to intersection
     * @param {fabric.Point} point
     * @return {fabric.Intersection} thisArg
     * @chainable
     */
appendPoint:function(point){return this.points.push(point),this},
/**
     * Appends points to intersection
     * @param {Array} points
     * @return {fabric.Intersection} thisArg
     * @chainable
     */
appendPoints:function(points){return this.points=this.points.concat(points),this}},
/**
   * Checks if one line intersects another
   * TODO: rename in intersectSegmentSegment
   * @static
   * @param {fabric.Point} a1
   * @param {fabric.Point} a2
   * @param {fabric.Point} b1
   * @param {fabric.Point} b2
   * @return {fabric.Intersection}
   */
fabric.Intersection.intersectLineLine=function(a1,a2,b1,b2){var result,uaT=(b2.x-b1.x)*(a1.y-b1.y)-(b2.y-b1.y)*(a1.x-b1.x),ubT=(a2.x-a1.x)*(a1.y-b1.y)-(a2.y-a1.y)*(a1.x-b1.x),uB=(b2.y-b1.y)*(a2.x-a1.x)-(b2.x-b1.x)*(a2.y-a1.y);if(0!==uB){var ua=uaT/uB,ub=ubT/uB;0<=ua&&ua<=1&&0<=ub&&ub<=1?(result=new Intersection("Intersection"),result.appendPoint(new fabric.Point(a1.x+ua*(a2.x-a1.x),a1.y+ua*(a2.y-a1.y)))):result=new Intersection}else result=new Intersection(0===uaT||0===ubT?"Coincident":"Parallel");return result},
/**
   * Checks if line intersects polygon
   * TODO: rename in intersectSegmentPolygon
   * fix detection of coincident
   * @static
   * @param {fabric.Point} a1
   * @param {fabric.Point} a2
   * @param {Array} points
   * @return {fabric.Intersection}
   */
fabric.Intersection.intersectLinePolygon=function(a1,a2,points){var b1,b2,inter,i,result=new Intersection,length=points.length;for(i=0;i<length;i++)b1=points[i],b2=points[(i+1)%length],inter=Intersection.intersectLineLine(a1,a2,b1,b2),result.appendPoints(inter.points);return result.points.length>0&&(result.status="Intersection"),result},
/**
   * Checks if polygon intersects another polygon
   * @static
   * @param {Array} points1
   * @param {Array} points2
   * @return {fabric.Intersection}
   */
fabric.Intersection.intersectPolygonPolygon=function(points1,points2){var i,result=new Intersection,length=points1.length;for(i=0;i<length;i++){var a1=points1[i],a2=points1[(i+1)%length],inter=Intersection.intersectLinePolygon(a1,a2,points2);result.appendPoints(inter.points)}return result.points.length>0&&(result.status="Intersection"),result},
/**
   * Checks if polygon intersects rectangle
   * @static
   * @param {Array} points
   * @param {fabric.Point} r1
   * @param {fabric.Point} r2
   * @return {fabric.Intersection}
   */
fabric.Intersection.intersectPolygonRectangle=function(points,r1,r2){var min=r1.min(r2),max=r1.max(r2),topRight=new fabric.Point(max.x,min.y),bottomLeft=new fabric.Point(min.x,max.y),inter1=Intersection.intersectLinePolygon(min,topRight,points),inter2=Intersection.intersectLinePolygon(topRight,max,points),inter3=Intersection.intersectLinePolygon(max,bottomLeft,points),inter4=Intersection.intersectLinePolygon(bottomLeft,min,points),result=new Intersection;return result.appendPoints(inter1.points),result.appendPoints(inter2.points),result.appendPoints(inter3.points),result.appendPoints(inter4.points),result.points.length>0&&(result.status="Intersection"),result})}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={});
/**
   * Color class
   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;
   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.
   *
   * @class fabric.Color
   * @param {String} color optional in hex or rgb(a) or hsl format or from known color list
   * @return {fabric.Color} thisArg
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}
   */
function Color(color){color?this._tryParsingColor(color):this.setSource([0,0,0,1])}
/**
   * @private
   * @param {Number} p
   * @param {Number} q
   * @param {Number} t
   * @return {Number}
   */
function hue2rgb(p,q,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?p+6*(q-p)*t:t<.5?q:t<2/3?p+(q-p)*(2/3-t)*6:p}
/**
   * Returns new color object, when given a color in RGB format
   * @memberOf fabric.Color
   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)
   * @return {fabric.Color}
   */fabric.Color?fabric.warn("fabric.Color is already defined."):(fabric.Color=Color,fabric.Color.prototype=/** @lends fabric.Color.prototype */{
/**
     * @private
     * @param {String|Array} color Color value to parse
     */
_tryParsingColor:function(color){var source;color in Color.colorNameMap&&(color=Color.colorNameMap[color]),"transparent"===color&&(source=[255,255,255,0]),source||(source=Color.sourceFromHex(color)),source||(source=Color.sourceFromRgb(color)),source||(source=Color.sourceFromHsl(color)),source||(
//if color is not recognize let's make black as canvas does
source=[0,0,0,1]),source&&this.setSource(source)},
/**
     * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
     * @private
     * @param {Number} r Red color value
     * @param {Number} g Green color value
     * @param {Number} b Blue color value
     * @return {Array} Hsl color
     */
_rgbToHsl:function(r,g,b){r/=255,g/=255,b/=255;var h,s,l,max=fabric.util.array.max([r,g,b]),min=fabric.util.array.min([r,g,b]);if(l=(max+min)/2,max===min)h=s=0;// achromatic
else{var d=max-min;switch(s=l>.5?d/(2-max-min):d/(max+min),max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break}h/=6}return[Math.round(360*h),Math.round(100*s),Math.round(100*l)]},
/**
     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])
     * @return {Array}
     */
getSource:function(){return this._source},
/**
     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])
     * @param {Array} source
     */
setSource:function(source){this._source=source},
/**
     * Returns color representation in RGB format
     * @return {String} ex: rgb(0-255,0-255,0-255)
     */
toRgb:function(){var source=this.getSource();return"rgb("+source[0]+","+source[1]+","+source[2]+")"},
/**
     * Returns color representation in RGBA format
     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)
     */
toRgba:function(){var source=this.getSource();return"rgba("+source[0]+","+source[1]+","+source[2]+","+source[3]+")"},
/**
     * Returns color representation in HSL format
     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)
     */
toHsl:function(){var source=this.getSource(),hsl=this._rgbToHsl(source[0],source[1],source[2]);return"hsl("+hsl[0]+","+hsl[1]+"%,"+hsl[2]+"%)"},
/**
     * Returns color representation in HSLA format
     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)
     */
toHsla:function(){var source=this.getSource(),hsl=this._rgbToHsl(source[0],source[1],source[2]);return"hsla("+hsl[0]+","+hsl[1]+"%,"+hsl[2]+"%,"+source[3]+")"},
/**
     * Returns color representation in HEX format
     * @return {String} ex: FF5555
     */
toHex:function(){var r,g,b,source=this.getSource();return r=source[0].toString(16),r=1===r.length?"0"+r:r,g=source[1].toString(16),g=1===g.length?"0"+g:g,b=source[2].toString(16),b=1===b.length?"0"+b:b,r.toUpperCase()+g.toUpperCase()+b.toUpperCase()},
/**
     * Returns color representation in HEXA format
     * @return {String} ex: FF5555CC
     */
toHexa:function(){var a,source=this.getSource();return a=Math.round(255*source[3]),a=a.toString(16),a=1===a.length?"0"+a:a,this.toHex()+a.toUpperCase()},
/**
     * Gets value of alpha channel for this color
     * @return {Number} 0-1
     */
getAlpha:function(){return this.getSource()[3]},
/**
     * Sets value of alpha channel for this color
     * @param {Number} alpha Alpha value 0-1
     * @return {fabric.Color} thisArg
     */
setAlpha:function(alpha){var source=this.getSource();return source[3]=alpha,this.setSource(source),this},
/**
     * Transforms color to its grayscale representation
     * @return {fabric.Color} thisArg
     */
toGrayscale:function(){var source=this.getSource(),average=parseInt((.3*source[0]+.59*source[1]+.11*source[2]).toFixed(0),10),currentAlpha=source[3];return this.setSource([average,average,average,currentAlpha]),this},
/**
     * Transforms color to its black and white representation
     * @param {Number} threshold
     * @return {fabric.Color} thisArg
     */
toBlackWhite:function(threshold){var source=this.getSource(),average=(.3*source[0]+.59*source[1]+.11*source[2]).toFixed(0),currentAlpha=source[3];return threshold=threshold||127,average=Number(average)<Number(threshold)?0:255,this.setSource([average,average,average,currentAlpha]),this},
/**
     * Overlays color with another color
     * @param {String|fabric.Color} otherColor
     * @return {fabric.Color} thisArg
     */
overlayWith:function(otherColor){otherColor instanceof Color||(otherColor=new Color(otherColor));var i,result=[],alpha=this.getAlpha(),otherAlpha=.5,source=this.getSource(),otherSource=otherColor.getSource();for(i=0;i<3;i++)result.push(Math.round(source[i]*(1-otherAlpha)+otherSource[i]*otherAlpha));return result[3]=alpha,this.setSource(result),this}},
/**
   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))
   * @static
   * @field
   * @memberOf fabric.Color
   */
// eslint-disable-next-line max-len
fabric.Color.reRGBa=/^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/i,
/**
   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))
   * @static
   * @field
   * @memberOf fabric.Color
   */
fabric.Color.reHSLa=/^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/i,
/**
   * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)
   * @static
   * @field
   * @memberOf fabric.Color
   */
fabric.Color.reHex=/^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i,
/**
   * Map of the 148 color names with HEX code
   * @static
   * @field
   * @memberOf fabric.Color
   * @see: https://www.w3.org/TR/css3-color/#svg-color
   */
fabric.Color.colorNameMap={aliceblue:"#F0F8FF",antiquewhite:"#FAEBD7",aqua:"#00FFFF",aquamarine:"#7FFFD4",azure:"#F0FFFF",beige:"#F5F5DC",bisque:"#FFE4C4",black:"#000000",blanchedalmond:"#FFEBCD",blue:"#0000FF",blueviolet:"#8A2BE2",brown:"#A52A2A",burlywood:"#DEB887",cadetblue:"#5F9EA0",chartreuse:"#7FFF00",chocolate:"#D2691E",coral:"#FF7F50",cornflowerblue:"#6495ED",cornsilk:"#FFF8DC",crimson:"#DC143C",cyan:"#00FFFF",darkblue:"#00008B",darkcyan:"#008B8B",darkgoldenrod:"#B8860B",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",darkgreen:"#006400",darkkhaki:"#BDB76B",darkmagenta:"#8B008B",darkolivegreen:"#556B2F",darkorange:"#FF8C00",darkorchid:"#9932CC",darkred:"#8B0000",darksalmon:"#E9967A",darkseagreen:"#8FBC8F",darkslateblue:"#483D8B",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",darkturquoise:"#00CED1",darkviolet:"#9400D3",deeppink:"#FF1493",deepskyblue:"#00BFFF",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1E90FF",firebrick:"#B22222",floralwhite:"#FFFAF0",forestgreen:"#228B22",fuchsia:"#FF00FF",gainsboro:"#DCDCDC",ghostwhite:"#F8F8FF",gold:"#FFD700",goldenrod:"#DAA520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#ADFF2F",honeydew:"#F0FFF0",hotpink:"#FF69B4",indianred:"#CD5C5C",indigo:"#4B0082",ivory:"#FFFFF0",khaki:"#F0E68C",lavender:"#E6E6FA",lavenderblush:"#FFF0F5",lawngreen:"#7CFC00",lemonchiffon:"#FFFACD",lightblue:"#ADD8E6",lightcoral:"#F08080",lightcyan:"#E0FFFF",lightgoldenrodyellow:"#FAFAD2",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",lightgreen:"#90EE90",lightpink:"#FFB6C1",lightsalmon:"#FFA07A",lightseagreen:"#20B2AA",lightskyblue:"#87CEFA",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#B0C4DE",lightyellow:"#FFFFE0",lime:"#00FF00",limegreen:"#32CD32",linen:"#FAF0E6",magenta:"#FF00FF",maroon:"#800000",mediumaquamarine:"#66CDAA",mediumblue:"#0000CD",mediumorchid:"#BA55D3",mediumpurple:"#9370DB",mediumseagreen:"#3CB371",mediumslateblue:"#7B68EE",mediumspringgreen:"#00FA9A",mediumturquoise:"#48D1CC",mediumvioletred:"#C71585",midnightblue:"#191970",mintcream:"#F5FFFA",mistyrose:"#FFE4E1",moccasin:"#FFE4B5",navajowhite:"#FFDEAD",navy:"#000080",oldlace:"#FDF5E6",olive:"#808000",olivedrab:"#6B8E23",orange:"#FFA500",orangered:"#FF4500",orchid:"#DA70D6",palegoldenrod:"#EEE8AA",palegreen:"#98FB98",paleturquoise:"#AFEEEE",palevioletred:"#DB7093",papayawhip:"#FFEFD5",peachpuff:"#FFDAB9",peru:"#CD853F",pink:"#FFC0CB",plum:"#DDA0DD",powderblue:"#B0E0E6",purple:"#800080",rebeccapurple:"#663399",red:"#FF0000",rosybrown:"#BC8F8F",royalblue:"#4169E1",saddlebrown:"#8B4513",salmon:"#FA8072",sandybrown:"#F4A460",seagreen:"#2E8B57",seashell:"#FFF5EE",sienna:"#A0522D",silver:"#C0C0C0",skyblue:"#87CEEB",slateblue:"#6A5ACD",slategray:"#708090",slategrey:"#708090",snow:"#FFFAFA",springgreen:"#00FF7F",steelblue:"#4682B4",tan:"#D2B48C",teal:"#008080",thistle:"#D8BFD8",tomato:"#FF6347",turquoise:"#40E0D0",violet:"#EE82EE",wheat:"#F5DEB3",white:"#FFFFFF",whitesmoke:"#F5F5F5",yellow:"#FFFF00",yellowgreen:"#9ACD32"},fabric.Color.fromRgb=function(color){return Color.fromSource(Color.sourceFromRgb(color))},
/**
   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format
   * @memberOf fabric.Color
   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)
   * @return {Array} source
   */
fabric.Color.sourceFromRgb=function(color){var match=color.match(Color.reRGBa);if(match){var r=parseInt(match[1],10)/(/%$/.test(match[1])?100:1)*(/%$/.test(match[1])?255:1),g=parseInt(match[2],10)/(/%$/.test(match[2])?100:1)*(/%$/.test(match[2])?255:1),b=parseInt(match[3],10)/(/%$/.test(match[3])?100:1)*(/%$/.test(match[3])?255:1);return[parseInt(r,10),parseInt(g,10),parseInt(b,10),match[4]?parseFloat(match[4]):1]}},
/**
   * Returns new color object, when given a color in RGBA format
   * @static
   * @function
   * @memberOf fabric.Color
   * @param {String} color
   * @return {fabric.Color}
   */
fabric.Color.fromRgba=Color.fromRgb,
/**
   * Returns new color object, when given a color in HSL format
   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)
   * @memberOf fabric.Color
   * @return {fabric.Color}
   */
fabric.Color.fromHsl=function(color){return Color.fromSource(Color.sourceFromHsl(color))},
/**
   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.
   * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
   * @memberOf fabric.Color
   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)
   * @return {Array} source
   * @see http://http://www.w3.org/TR/css3-color/#hsl-color
   */
fabric.Color.sourceFromHsl=function(color){var match=color.match(Color.reHSLa);if(match){var r,g,b,h=(parseFloat(match[1])%360+360)%360/360,s=parseFloat(match[2])/(/%$/.test(match[2])?100:1),l=parseFloat(match[3])/(/%$/.test(match[3])?100:1);if(0===s)r=g=b=l;else{var q=l<=.5?l*(s+1):l+s-l*s,p=2*l-q;r=hue2rgb(p,q,h+1/3),g=hue2rgb(p,q,h),b=hue2rgb(p,q,h-1/3)}return[Math.round(255*r),Math.round(255*g),Math.round(255*b),match[4]?parseFloat(match[4]):1]}},
/**
   * Returns new color object, when given a color in HSLA format
   * @static
   * @function
   * @memberOf fabric.Color
   * @param {String} color
   * @return {fabric.Color}
   */
fabric.Color.fromHsla=Color.fromHsl,
/**
   * Returns new color object, when given a color in HEX format
   * @static
   * @memberOf fabric.Color
   * @param {String} color Color value ex: FF5555
   * @return {fabric.Color}
   */
fabric.Color.fromHex=function(color){return Color.fromSource(Color.sourceFromHex(color))},
/**
   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format
   * @static
   * @memberOf fabric.Color
   * @param {String} color ex: FF5555 or FF5544CC (RGBa)
   * @return {Array} source
   */
fabric.Color.sourceFromHex=function(color){if(color.match(Color.reHex)){var value=color.slice(color.indexOf("#")+1),isShortNotation=3===value.length||4===value.length,isRGBa=8===value.length||4===value.length,r=isShortNotation?value.charAt(0)+value.charAt(0):value.substring(0,2),g=isShortNotation?value.charAt(1)+value.charAt(1):value.substring(2,4),b=isShortNotation?value.charAt(2)+value.charAt(2):value.substring(4,6),a=isRGBa?isShortNotation?value.charAt(3)+value.charAt(3):value.substring(6,8):"FF";return[parseInt(r,16),parseInt(g,16),parseInt(b,16),parseFloat((parseInt(a,16)/255).toFixed(2))]}},
/**
   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])
   * @static
   * @memberOf fabric.Color
   * @param {Array} source
   * @return {fabric.Color}
   */
fabric.Color.fromSource=function(source){var oColor=new Color;return oColor.setSource(source),oColor})}(exports),function(){
/* _FROM_SVG_START_ */
function getColorStop(el,multiplier){var color,colorAlpha,opacity,i,style=el.getAttribute("style"),offset=el.getAttribute("offset")||0;
// convert percents to absolute values
if(offset=parseFloat(offset)/(/%$/.test(offset)?100:1),offset=offset<0?0:offset>1?1:offset,style){var keyValuePairs=style.split(/\s*;\s*/);for(""===keyValuePairs[keyValuePairs.length-1]&&keyValuePairs.pop(),i=keyValuePairs.length;i--;){var split=keyValuePairs[i].split(/\s*:\s*/),key=split[0].trim(),value=split[1].trim();"stop-color"===key?color=value:"stop-opacity"===key&&(opacity=value)}}return color||(color=el.getAttribute("stop-color")||"rgb(0,0,0)"),opacity||(opacity=el.getAttribute("stop-opacity")),color=new fabric.Color(color),colorAlpha=color.getAlpha(),opacity=isNaN(parseFloat(opacity))?1:parseFloat(opacity),opacity*=colorAlpha*multiplier,{offset:offset,color:color.toRgb(),opacity:opacity}}function getLinearCoords(el){return{x1:el.getAttribute("x1")||0,y1:el.getAttribute("y1")||0,x2:el.getAttribute("x2")||"100%",y2:el.getAttribute("y2")||0}}function getRadialCoords(el){return{x1:el.getAttribute("fx")||el.getAttribute("cx")||"50%",y1:el.getAttribute("fy")||el.getAttribute("cy")||"50%",r1:0,x2:el.getAttribute("cx")||"50%",y2:el.getAttribute("cy")||"50%",r2:el.getAttribute("r")||"50%"}}
/* _FROM_SVG_END_ */var clone=fabric.util.object.clone;
/**
   * Gradient class
   * @class fabric.Gradient
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}
   * @see {@link fabric.Gradient#initialize} for constructor definition
   */
/**
   * @private
   */
function __convertPercentUnitsToValues(instance,options,svgOptions,gradientUnits){var propValue,finalValue;Object.keys(options).forEach((function(prop){propValue=options[prop],"Infinity"===propValue?finalValue=1:"-Infinity"===propValue?finalValue=0:(finalValue=parseFloat(options[prop],10),"string"===typeof propValue&&/^(\d+\.\d+)%|(\d+)%$/.test(propValue)&&(finalValue*=.01,"pixels"===gradientUnits&&(
// then we need to fix those percentages here in svg parsing
"x1"!==prop&&"x2"!==prop&&"r2"!==prop||(finalValue*=svgOptions.viewBoxWidth||svgOptions.width),"y1"!==prop&&"y2"!==prop||(finalValue*=svgOptions.viewBoxHeight||svgOptions.height)))),options[prop]=finalValue}))}fabric.Gradient=fabric.util.createClass(/** @lends fabric.Gradient.prototype */{
/**
     * Horizontal offset for aligning gradients coming from SVG when outside pathgroups
     * @type Number
     * @default 0
     */
offsetX:0,
/**
     * Vertical offset for aligning gradients coming from SVG when outside pathgroups
     * @type Number
     * @default 0
     */
offsetY:0,
/**
     * A transform matrix to apply to the gradient before painting.
     * Imported from svg gradients, is not applied with the current transform in the center.
     * Before this transform is applied, the origin point is at the top left corner of the object
     * plus the addition of offsetY and offsetX.
     * @type Number[]
     * @default null
     */
gradientTransform:null,
/**
     * coordinates units for coords.
     * If `pixels`, the number of coords are in the same unit of width / height.
     * If set as `percentage` the coords are still a number, but 1 means 100% of width
     * for the X and 100% of the height for the y. It can be bigger than 1 and negative.
     * allowed values pixels or percentage.
     * @type String
     * @default 'pixels'
     */
gradientUnits:"pixels",
/**
     * Gradient type linear or radial
     * @type String
     * @default 'pixels'
     */
type:"linear",
/**
     * Constructor
     * @param {Object} options Options object with type, coords, gradientUnits and colorStops
     * @param {Object} [options.type] gradient type linear or radial
     * @param {Object} [options.gradientUnits] gradient units
     * @param {Object} [options.offsetX] SVG import compatibility
     * @param {Object} [options.offsetY] SVG import compatibility
     * @param {Object[]} options.colorStops contains the colorstops.
     * @param {Object} options.coords contains the coords of the gradient
     * @param {Number} [options.coords.x1] X coordiante of the first point for linear or of the focal point for radial
     * @param {Number} [options.coords.y1] Y coordiante of the first point for linear or of the focal point for radial
     * @param {Number} [options.coords.x2] X coordiante of the second point for linear or of the center point for radial
     * @param {Number} [options.coords.y2] Y coordiante of the second point for linear or of the center point for radial
     * @param {Number} [options.coords.r1] only for radial gradient, radius of the inner circle
     * @param {Number} [options.coords.r2] only for radial gradient, radius of the external circle
     * @return {fabric.Gradient} thisArg
     */
initialize:function(options){options||(options={}),options.coords||(options.coords={});var coords,_this=this;
// sets everything, then coords and colorstops get sets again
Object.keys(options).forEach((function(option){_this[option]=options[option]})),this.id?this.id+="_"+fabric.Object.__uid++:this.id=fabric.Object.__uid++,coords={x1:options.coords.x1||0,y1:options.coords.y1||0,x2:options.coords.x2||0,y2:options.coords.y2||0},"radial"===this.type&&(coords.r1=options.coords.r1||0,coords.r2=options.coords.r2||0),this.coords=coords,this.colorStops=options.colorStops.slice()},
/**
     * Adds another colorStop
     * @param {Object} colorStop Object with offset and color
     * @return {fabric.Gradient} thisArg
     */
addColorStop:function(colorStops){for(var position in colorStops){var color=new fabric.Color(colorStops[position]);this.colorStops.push({offset:parseFloat(position),color:color.toRgb(),opacity:color.getAlpha()})}return this},
/**
     * Returns object representation of a gradient
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object}
     */
toObject:function(propertiesToInclude){var object={type:this.type,coords:this.coords,colorStops:this.colorStops,offsetX:this.offsetX,offsetY:this.offsetY,gradientUnits:this.gradientUnits,gradientTransform:this.gradientTransform?this.gradientTransform.concat():this.gradientTransform};return fabric.util.populateWithProperties(this,object,propertiesToInclude),object},
/* _TO_SVG_START_ */
/**
     * Returns SVG representation of an gradient
     * @param {Object} object Object to create a gradient for
     * @return {String} SVG representation of an gradient (linear/radial)
     */
toSVG:function(object,options){var i,len,markup,commonAttributes,coords=clone(this.coords,!0),colorStops=(options=options||{},clone(this.colorStops,!0)),needsSwap=coords.r1>coords.r2,transform=this.gradientTransform?this.gradientTransform.concat():fabric.iMatrix.concat(),offsetX=-this.offsetX,offsetY=-this.offsetY,withViewport=!!options.additionalTransform,gradientUnits="pixels"===this.gradientUnits?"userSpaceOnUse":"objectBoundingBox";
// colorStops must be sorted ascending
if(colorStops.sort((function(a,b){return a.offset-b.offset})),"objectBoundingBox"===gradientUnits?(offsetX/=object.width,offsetY/=object.height):(offsetX+=object.width/2,offsetY+=object.height/2),"path"===object.type&&(offsetX-=object.pathOffset.x,offsetY-=object.pathOffset.y),transform[4]-=offsetX,transform[5]-=offsetY,commonAttributes='id="SVGID_'+this.id+'" gradientUnits="'+gradientUnits+'"',commonAttributes+=' gradientTransform="'+(withViewport?options.additionalTransform+" ":"")+fabric.util.matrixToSVG(transform)+'" ',"linear"===this.type?markup=["<linearGradient ",commonAttributes,' x1="',coords.x1,'" y1="',coords.y1,'" x2="',coords.x2,'" y2="',coords.y2,'">\n']:"radial"===this.type&&(
// svg radial gradient has just 1 radius. the biggest.
markup=["<radialGradient ",commonAttributes,' cx="',needsSwap?coords.x1:coords.x2,'" cy="',needsSwap?coords.y1:coords.y2,'" r="',needsSwap?coords.r1:coords.r2,'" fx="',needsSwap?coords.x2:coords.x1,'" fy="',needsSwap?coords.y2:coords.y1,'">\n']),"radial"===this.type){if(needsSwap)for(
// svg goes from internal to external radius. if radius are inverted, swap color stops.
colorStops=colorStops.concat(),colorStops.reverse(),i=0,len=colorStops.length;i<len;i++)colorStops[i].offset=1-colorStops[i].offset;var minRadius=Math.min(coords.r1,coords.r2);if(minRadius>0){
// i have to shift all colorStops and add new one in 0.
var maxRadius=Math.max(coords.r1,coords.r2),percentageShift=minRadius/maxRadius;for(i=0,len=colorStops.length;i<len;i++)colorStops[i].offset+=percentageShift*(1-colorStops[i].offset)}}for(i=0,len=colorStops.length;i<len;i++){var colorStop=colorStops[i];markup.push("<stop ",'offset="',100*colorStop.offset+"%",'" style="stop-color:',colorStop.color,"undefined"!==typeof colorStop.opacity?";stop-opacity: "+colorStop.opacity:";",'"/>\n')}return markup.push("linear"===this.type?"</linearGradient>\n":"</radialGradient>\n"),markup.join("")},
/* _TO_SVG_END_ */
/**
     * Returns an instance of CanvasGradient
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {fabric.Object} object the fabric.Object for which the gradient is
     * @return {CanvasGradient}
     */
toLive:function(ctx,object){var gradient,i,len,coords=fabric.util.object.clone(this.coords),x1=coords.x1,y1=coords.y1,x2=coords.x2,y2=coords.y2,stops=this.colorStops;if(this.type){for(object instanceof fabric.Text&&"percentage"===this.gradientUnits&&(x1*=object.width,y1*=object.height,x2*=object.width,y2*=object.height),"linear"===this.type?gradient=ctx.createLinearGradient(x1,y1,x2,y2):"radial"===this.type&&(gradient=ctx.createRadialGradient(x1,y1,coords.r1,x2,y2,coords.r2)),i=0,len=stops.length;i<len;i++){var color=stops[i].color,opacity=stops[i].opacity,offset=stops[i].offset;"undefined"!==typeof opacity&&(color=new fabric.Color(color).setAlpha(opacity).toRgba()),gradient.addColorStop(offset,color)}return gradient}}}),fabric.util.object.extend(fabric.Gradient,{
/* _FROM_SVG_START_ */
/**
     * Returns {@link fabric.Gradient} instance from an SVG element
     * @static
     * @memberOf fabric.Gradient
     * @param {SVGGradientElement} el SVG gradient element
     * @param {fabric.Object} instance
     * @param {String} opacityAttr A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.
     * @param {Object} svgOptions an object containing the size of the SVG in order to parse correctly graidents
     * that uses gradientUnits as 'userSpaceOnUse' and percentages.
     * @param {Object.number} viewBoxWidth width part of the viewBox attribute on svg
     * @param {Object.number} viewBoxHeight height part of the viewBox attribute on svg
     * @param {Object.number} width width part of the svg tag if viewBox is not specified
     * @param {Object.number} height height part of the svg tag if viewBox is not specified
     * @return {fabric.Gradient} Gradient instance
     * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement
     * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement
     */
fromElement:function(el,instance,opacityAttr,svgOptions){
/**
       *  @example:
       *
       *  <linearGradient id="linearGrad1">
       *    <stop offset="0%" stop-color="white"/>
       *    <stop offset="100%" stop-color="black"/>
       *  </linearGradient>
       *
       *  OR
       *
       *  <linearGradient id="linearGrad2">
       *    <stop offset="0" style="stop-color:rgb(255,255,255)"/>
       *    <stop offset="1" style="stop-color:rgb(0,0,0)"/>
       *  </linearGradient>
       *
       *  OR
       *
       *  <radialGradient id="radialGrad1">
       *    <stop offset="0%" stop-color="white" stop-opacity="1" />
       *    <stop offset="50%" stop-color="black" stop-opacity="0.5" />
       *    <stop offset="100%" stop-color="white" stop-opacity="1" />
       *  </radialGradient>
       *
       *  OR
       *
       *  <radialGradient id="radialGrad2">
       *    <stop offset="0" stop-color="rgb(255,255,255)" />
       *    <stop offset="0.5" stop-color="rgb(0,0,0)" />
       *    <stop offset="1" stop-color="rgb(255,255,255)" />
       *  </radialGradient>
       *
       */
var multiplier=parseFloat(opacityAttr)/(/%$/.test(opacityAttr)?100:1);multiplier=multiplier<0?0:multiplier>1?1:multiplier,isNaN(multiplier)&&(multiplier=1);var type,coords,i,transformMatrix,colorStopEls=el.getElementsByTagName("stop"),gradientUnits="userSpaceOnUse"===el.getAttribute("gradientUnits")?"pixels":"percentage",gradientTransform=el.getAttribute("gradientTransform")||"",colorStops=[],offsetX=0,offsetY=0;for("linearGradient"===el.nodeName||"LINEARGRADIENT"===el.nodeName?(type="linear",coords=getLinearCoords(el)):(type="radial",coords=getRadialCoords(el)),i=colorStopEls.length;i--;)colorStops.push(getColorStop(colorStopEls[i],multiplier));transformMatrix=fabric.parseTransformAttribute(gradientTransform),__convertPercentUnitsToValues(instance,coords,svgOptions,gradientUnits),"pixels"===gradientUnits&&(offsetX=-instance.left,offsetY=-instance.top);var gradient=new fabric.Gradient({id:el.getAttribute("id"),type:type,coords:coords,colorStops:colorStops,gradientUnits:gradientUnits,gradientTransform:transformMatrix,offsetX:offsetX,offsetY:offsetY});return gradient},
/* _FROM_SVG_END_ */
/**
     * Returns {@link fabric.Gradient} instance from its object representation
     * this function is uniquely used by Object.setGradient and is deprecated with it.
     * @static
     * @deprecated since 3.4.0
     * @memberOf fabric.Gradient
     * @param {Object} obj
     * @param {Object} [options] Options object
     */
forObject:function(obj,options){return options||(options={}),__convertPercentUnitsToValues(obj,options.coords,options.gradientUnits,{
// those values are to avoid errors. this function is uniquely used by
viewBoxWidth:100,viewBoxHeight:100}),new fabric.Gradient(options)}})}(),function(){"use strict";var toFixed=fabric.util.toFixed;
/**
   * Pattern class
   * @class fabric.Pattern
   * @see {@link http://fabricjs.com/patterns|Pattern demo}
   * @see {@link http://fabricjs.com/dynamic-patterns|DynamicPattern demo}
   * @see {@link fabric.Pattern#initialize} for constructor definition
   */fabric.Pattern=fabric.util.createClass(/** @lends fabric.Pattern.prototype */{
/**
     * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)
     * @type String
     * @default
     */
repeat:"repeat",
/**
     * Pattern horizontal offset from object's left/top corner
     * @type Number
     * @default
     */
offsetX:0,
/**
     * Pattern vertical offset from object's left/top corner
     * @type Number
     * @default
     */
offsetY:0,
/**
     * crossOrigin value (one of "", "anonymous", "use-credentials")
     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
     * @type String
     * @default
     */
crossOrigin:"",
/**
     * transform matrix to change the pattern, imported from svgs.
     * @type Array
     * @default
     */
patternTransform:null,
/**
     * Constructor
     * @param {Object} [options] Options object
     * @param {Function} [callback] function to invoke after callback init.
     * @return {fabric.Pattern} thisArg
     */
initialize:function(options,callback){if(options||(options={}),this.id=fabric.Object.__uid++,this.setOptions(options),!options.source||options.source&&"string"!==typeof options.source)callback&&callback(this);else
// function string
if("undefined"!==typeof fabric.util.getFunctionBody(options.source))this.source=new Function(fabric.util.getFunctionBody(options.source)),callback&&callback(this);else{
// img src string
var _this=this;this.source=fabric.util.createImage(),fabric.util.loadImage(options.source,(function(img){_this.source=img,callback&&callback(_this)}),null,this.crossOrigin)}},
/**
     * Returns object representation of a pattern
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of a pattern instance
     */
toObject:function(propertiesToInclude){var source,object,NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS;
// callback
return"function"===typeof this.source?source=String(this.source):"string"===typeof this.source.src?source=this.source.src:"object"===typeof this.source&&this.source.toDataURL&&(source=this.source.toDataURL()),object={type:"pattern",source:source,repeat:this.repeat,crossOrigin:this.crossOrigin,offsetX:toFixed(this.offsetX,NUM_FRACTION_DIGITS),offsetY:toFixed(this.offsetY,NUM_FRACTION_DIGITS),patternTransform:this.patternTransform?this.patternTransform.concat():null},fabric.util.populateWithProperties(this,object,propertiesToInclude),object},
/* _TO_SVG_START_ */
/**
     * Returns SVG representation of a pattern
     * @param {fabric.Object} object
     * @return {String} SVG representation of a pattern
     */
toSVG:function(object){var patternSource="function"===typeof this.source?this.source():this.source,patternWidth=patternSource.width/object.width,patternHeight=patternSource.height/object.height,patternOffsetX=this.offsetX/object.width,patternOffsetY=this.offsetY/object.height,patternImgSrc="";return"repeat-x"!==this.repeat&&"no-repeat"!==this.repeat||(patternHeight=1,patternOffsetY&&(patternHeight+=Math.abs(patternOffsetY))),"repeat-y"!==this.repeat&&"no-repeat"!==this.repeat||(patternWidth=1,patternOffsetX&&(patternWidth+=Math.abs(patternOffsetX))),patternSource.src?patternImgSrc=patternSource.src:patternSource.toDataURL&&(patternImgSrc=patternSource.toDataURL()),'<pattern id="SVGID_'+this.id+'" x="'+patternOffsetX+'" y="'+patternOffsetY+'" width="'+patternWidth+'" height="'+patternHeight+'">\n<image x="0" y="0" width="'+patternSource.width+'" height="'+patternSource.height+'" xlink:href="'+patternImgSrc+'"></image>\n</pattern>\n'},
/* _TO_SVG_END_ */
setOptions:function(options){for(var prop in options)this[prop]=options[prop]},
/**
     * Returns an instance of CanvasPattern
     * @param {CanvasRenderingContext2D} ctx Context to create pattern
     * @return {CanvasPattern}
     */
toLive:function(ctx){var source="function"===typeof this.source?this.source():this.source;
// if the image failed to load, return, and allow rest to continue loading
if(!source)return"";
// if an image
if("undefined"!==typeof source.src){if(!source.complete)return"";if(0===source.naturalWidth||0===source.naturalHeight)return""}return ctx.createPattern(source,this.repeat)}})}(),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),toFixed=fabric.util.toFixed;fabric.Shadow?fabric.warn("fabric.Shadow is already defined."):(
/**
   * Shadow class
   * @class fabric.Shadow
   * @see {@link http://fabricjs.com/shadows|Shadow demo}
   * @see {@link fabric.Shadow#initialize} for constructor definition
   */
fabric.Shadow=fabric.util.createClass(/** @lends fabric.Shadow.prototype */{
/**
     * Shadow color
     * @type String
     * @default
     */
color:"rgb(0,0,0)",
/**
     * Shadow blur
     * @type Number
     */
blur:0,
/**
     * Shadow horizontal offset
     * @type Number
     * @default
     */
offsetX:0,
/**
     * Shadow vertical offset
     * @type Number
     * @default
     */
offsetY:0,
/**
     * Whether the shadow should affect stroke operations
     * @type Boolean
     * @default
     */
affectStroke:!1,
/**
     * Indicates whether toObject should include default values
     * @type Boolean
     * @default
     */
includeDefaultValues:!0,
/**
     * When `false`, the shadow will scale with the object.
     * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.
     * default to false
     * @type Boolean
     * @default
     */
nonScaling:!1,
/**
     * Constructor
     * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. "rgba(0,0,0,0.2) 2px 2px 10px")
     * @return {fabric.Shadow} thisArg
     */
initialize:function(options){for(var prop in"string"===typeof options&&(options=this._parseShadow(options)),options)this[prop]=options[prop];this.id=fabric.Object.__uid++},
/**
     * @private
     * @param {String} shadow Shadow value to parse
     * @return {Object} Shadow object with color, offsetX, offsetY and blur
     */
_parseShadow:function(shadow){var shadowStr=shadow.trim(),offsetsAndBlur=fabric.Shadow.reOffsetsAndBlur.exec(shadowStr)||[],color=shadowStr.replace(fabric.Shadow.reOffsetsAndBlur,"")||"rgb(0,0,0)";return{color:color.trim(),offsetX:parseInt(offsetsAndBlur[1],10)||0,offsetY:parseInt(offsetsAndBlur[2],10)||0,blur:parseInt(offsetsAndBlur[3],10)||0}},
/**
     * Returns a string representation of an instance
     * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow
     * @return {String} Returns CSS3 text-shadow declaration
     */
toString:function(){return[this.offsetX,this.offsetY,this.blur,this.color].join("px ")},
/* _TO_SVG_START_ */
/**
     * Returns SVG representation of a shadow
     * @param {fabric.Object} object
     * @return {String} SVG representation of a shadow
     */
toSVG:function(object){var fBoxX=40,fBoxY=40,NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS,offset=fabric.util.rotateVector({x:this.offsetX,y:this.offsetY},fabric.util.degreesToRadians(-object.angle)),BLUR_BOX=20,color=new fabric.Color(this.color);return object.width&&object.height&&(
//http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion
// we add some extra space to filter box to contain the blur ( 20 )
fBoxX=100*toFixed((Math.abs(offset.x)+this.blur)/object.width,NUM_FRACTION_DIGITS)+BLUR_BOX,fBoxY=100*toFixed((Math.abs(offset.y)+this.blur)/object.height,NUM_FRACTION_DIGITS)+BLUR_BOX),object.flipX&&(offset.x*=-1),object.flipY&&(offset.y*=-1),'<filter id="SVGID_'+this.id+'" y="-'+fBoxY+'%" height="'+(100+2*fBoxY)+'%" x="-'+fBoxX+'%" width="'+(100+2*fBoxX)+'%" >\n\t<feGaussianBlur in="SourceAlpha" stdDeviation="'+toFixed(this.blur?this.blur/2:0,NUM_FRACTION_DIGITS)+'"></feGaussianBlur>\n\t<feOffset dx="'+toFixed(offset.x,NUM_FRACTION_DIGITS)+'" dy="'+toFixed(offset.y,NUM_FRACTION_DIGITS)+'" result="oBlur" ></feOffset>\n\t<feFlood flood-color="'+color.toRgb()+'" flood-opacity="'+color.getAlpha()+'"/>\n\t<feComposite in2="oBlur" operator="in" />\n\t<feMerge>\n\t\t<feMergeNode></feMergeNode>\n\t\t<feMergeNode in="SourceGraphic"></feMergeNode>\n\t</feMerge>\n</filter>\n'},
/* _TO_SVG_END_ */
/**
     * Returns object representation of a shadow
     * @return {Object} Object representation of a shadow instance
     */
toObject:function(){if(this.includeDefaultValues)return{color:this.color,blur:this.blur,offsetX:this.offsetX,offsetY:this.offsetY,affectStroke:this.affectStroke,nonScaling:this.nonScaling};var obj={},proto=fabric.Shadow.prototype;return["color","blur","offsetX","offsetY","affectStroke","nonScaling"].forEach((function(prop){this[prop]!==proto[prop]&&(obj[prop]=this[prop])}),this),obj}}),
/**
   * Regex matching shadow offsetX, offsetY and blur (ex: "2px 2px 10px rgba(0,0,0,0.2)", "rgb(0,255,0) 2px 2px")
   * @static
   * @field
   * @memberOf fabric.Shadow
   */
// eslint-disable-next-line max-len
fabric.Shadow.reOffsetsAndBlur=/(?:\s|^)(-?\d+(?:px)?(?:\s?|$))?(-?\d+(?:px)?(?:\s?|$))?(\d+(?:px)?)?(?:\s?|$)(?:$|\s)/)}(exports),function(){"use strict";if(fabric.StaticCanvas)fabric.warn("fabric.StaticCanvas is already defined.");else{
// aliases for faster resolution
var extend=fabric.util.object.extend,getElementOffset=fabric.util.getElementOffset,removeFromArray=fabric.util.removeFromArray,toFixed=fabric.util.toFixed,transformPoint=fabric.util.transformPoint,invertTransform=fabric.util.invertTransform,getNodeCanvas=fabric.util.getNodeCanvas,createCanvasElement=fabric.util.createCanvasElement,CANVAS_INIT_ERROR=new Error("Could not initialize `canvas` element");
/**
   * Static canvas class
   * @class fabric.StaticCanvas
   * @mixes fabric.Collection
   * @mixes fabric.Observable
   * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}
   * @see {@link fabric.StaticCanvas#initialize} for constructor definition
   * @fires before:render
   * @fires after:render
   * @fires canvas:cleared
   * @fires object:added
   * @fires object:removed
   */fabric.StaticCanvas=fabric.util.createClass(fabric.CommonMethods,/** @lends fabric.StaticCanvas.prototype */{
/**
     * Constructor
     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */
initialize:function(el,options){options||(options={}),this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(el,options)},
/**
     * Background color of canvas instance.
     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.
     * @type {(String|fabric.Pattern)}
     * @default
     */
backgroundColor:"",
/**
     * Background image of canvas instance.
     * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.
     * <b>Backwards incompatibility note:</b> The "backgroundImageOpacity"
     * and "backgroundImageStretch" properties are deprecated since 1.3.9.
     * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.
     * since 2.4.0 image caching is active, please when putting an image as background, add to the
     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom
     * vale. As an alternative you can disable image objectCaching
     * @type fabric.Image
     * @default
     */
backgroundImage:null,
/**
     * Overlay color of canvas instance.
     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}
     * @since 1.3.9
     * @type {(String|fabric.Pattern)}
     * @default
     */
overlayColor:"",
/**
     * Overlay image of canvas instance.
     * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.
     * <b>Backwards incompatibility note:</b> The "overlayImageLeft"
     * and "overlayImageTop" properties are deprecated since 1.3.9.
     * Use {@link fabric.Image#left} and {@link fabric.Image#top}.
     * since 2.4.0 image caching is active, please when putting an image as overlay, add to the
     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom
     * vale. As an alternative you can disable image objectCaching
     * @type fabric.Image
     * @default
     */
overlayImage:null,
/**
     * Indicates whether toObject/toDatalessObject should include default values
     * if set to false, takes precedence over the object value.
     * @type Boolean
     * @default
     */
includeDefaultValues:!0,
/**
     * Indicates whether objects' state should be saved
     * @type Boolean
     * @default
     */
stateful:!1,
/**
     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},
     * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.
     * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once
     * since the renders are quequed and executed one per frame.
     * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )
     * Left default to true to do not break documentation and old app, fiddles.
     * @type Boolean
     * @default
     */
renderOnAddRemove:!0,
/**
     * Function that determines clipping of entire canvas area
     * Being passed context as first argument.
     * If you are using code minification, ctx argument can be minified/manglied you should use
     * as a workaround `var ctx = arguments[0];` in the function;
     * See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}
     * @deprecated since 2.0.0
     * @type Function
     * @default
     */
clipTo:null,
/**
     * Indicates whether object controls (borders/controls) are rendered above overlay image
     * @type Boolean
     * @default
     */
controlsAboveOverlay:!1,
/**
     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas
     * @type Boolean
     * @default
     */
allowTouchScrolling:!1,
/**
     * Indicates whether this canvas will use image smoothing, this is on by default in browsers
     * @type Boolean
     * @default
     */
imageSmoothingEnabled:!0,
/**
     * The transformation (in the format of Canvas transform) which focuses the viewport
     * @type Array
     * @default
     */
viewportTransform:fabric.iMatrix.concat(),
/**
     * if set to false background image is not affected by viewport transform
     * @since 1.6.3
     * @type Boolean
     * @default
     */
backgroundVpt:!0,
/**
     * if set to false overlya image is not affected by viewport transform
     * @since 1.6.3
     * @type Boolean
     * @default
     */
overlayVpt:!0,
/**
     * Callback; invoked right before object is about to be scaled/rotated
     * @deprecated since 2.3.0
     * Use before:transform event
     */
onBeforeScaleRotate:function(){
/* NOOP */},
/**
     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens
     * @type Boolean
     * @default
     */
enableRetinaScaling:!0,
/**
     * Describe canvas element extension over design
     * properties are tl,tr,bl,br.
     * if canvas is not zoomed/panned those points are the four corner of canvas
     * if canvas is viewportTransformed you those points indicate the extension
     * of canvas element in plain untrasformed coordinates
     * The coordinates get updated with @method calcViewportBoundaries.
     * @memberOf fabric.StaticCanvas.prototype
     */
vptCoords:{},
/**
     * Based on vptCoords and object.aCoords, skip rendering of objects that
     * are not included in current viewport.
     * May greatly help in applications with crowded canvas and use of zoom/pan
     * If One of the corner of the bounding box of the object is on the canvas
     * the objects get rendered.
     * @memberOf fabric.StaticCanvas.prototype
     * @type Boolean
     * @default
     */
skipOffscreen:!0,
/**
     * a fabricObject that, without stroke define a clipping area with their shape. filled in black
     * the clipPath object gets used when the canvas has rendered, and the context is placed in the
     * top left corner of the canvas.
     * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true
     * @type fabric.Object
     */
clipPath:void 0,
/**
     * @private
     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
     * @param {Object} [options] Options object
     */
_initStatic:function(el,options){var cb=this.requestRenderAllBound;this._objects=[],this._createLowerCanvas(el),this._initOptions(options),this._setImageSmoothing(),
// only initialize retina scaling once
this.interactive||this._initRetinaScaling(),options.overlayImage&&this.setOverlayImage(options.overlayImage,cb),options.backgroundImage&&this.setBackgroundImage(options.backgroundImage,cb),options.backgroundColor&&this.setBackgroundColor(options.backgroundColor,cb),options.overlayColor&&this.setOverlayColor(options.overlayColor,cb),this.calcOffset()},
/**
     * @private
     */
_isRetinaScaling:function(){return 1!==fabric.devicePixelRatio&&this.enableRetinaScaling},
/**
     * @private
     * @return {Number} retinaScaling if applied, otherwise 1;
     */
getRetinaScaling:function(){return this._isRetinaScaling()?fabric.devicePixelRatio:1},
/**
     * @private
     */
_initRetinaScaling:function(){if(this._isRetinaScaling()){var scaleRatio=fabric.devicePixelRatio;this.__initRetinaScaling(scaleRatio,this.lowerCanvasEl,this.contextContainer),this.upperCanvasEl&&this.__initRetinaScaling(scaleRatio,this.upperCanvasEl,this.contextTop)}},__initRetinaScaling:function(scaleRatio,canvas,context){canvas.setAttribute("width",this.width*scaleRatio),canvas.setAttribute("height",this.height*scaleRatio),context.scale(scaleRatio,scaleRatio)},
/**
     * Calculates canvas element offset relative to the document
     * This method is also attached as "resize" event handler of window
     * @return {fabric.Canvas} instance
     * @chainable
     */
calcOffset:function(){return this._offset=getElementOffset(this.lowerCanvasEl),this},
/**
     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas
     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to
     * @param {Function} callback callback to invoke when image is loaded and set as an overlay
     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}
     * @example <caption>Normal overlayImage with left/top = 0</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   // Needed to position overlayImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>overlayImage with different properties</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>
     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {
     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));
     * });
     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   width: canvas.width,
     *   height: canvas.height,
     *   // Needed to position overlayImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>overlayImage loaded from cross-origin</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top',
     *   crossOrigin: 'anonymous'
     * });
     */
setOverlayImage:function(image,callback,options){return this.__setBgOverlayImage("overlayImage",image,callback,options)},
/**
     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas
     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to
     * @param {Function} callback Callback to invoke when image is loaded and set as background
     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}
     * @example <caption>Normal backgroundImage with left/top = 0</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   // Needed to position backgroundImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>backgroundImage with different properties</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>
     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {
     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
     * });
     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   width: canvas.width,
     *   height: canvas.height,
     *   // Needed to position backgroundImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>backgroundImage loaded from cross-origin</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top',
     *   crossOrigin: 'anonymous'
     * });
     */
// TODO: fix stretched examples
setBackgroundImage:function(image,callback,options){return this.__setBgOverlayImage("backgroundImage",image,callback,options)},
/**
     * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas
     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to
     * @param {Function} callback Callback to invoke when foreground color is set
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}
     * @example <caption>Normal overlayColor - color value</caption>
     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as overlayColor</caption>
     * canvas.setOverlayColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
     * }, canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>
     * canvas.setOverlayColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
     *   repeat: 'repeat',
     *   offsetX: 200,
     *   offsetY: 100
     * }, canvas.renderAll.bind(canvas));
     */
setOverlayColor:function(overlayColor,callback){return this.__setBgOverlayColor("overlayColor",overlayColor,callback)},
/**
     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas
     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to
     * @param {Function} callback Callback to invoke when background color is set
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}
     * @example <caption>Normal backgroundColor - color value</caption>
     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as backgroundColor</caption>
     * canvas.setBackgroundColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
     * }, canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>
     * canvas.setBackgroundColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
     *   repeat: 'repeat',
     *   offsetX: 200,
     *   offsetY: 100
     * }, canvas.renderAll.bind(canvas));
     */
setBackgroundColor:function(backgroundColor,callback){return this.__setBgOverlayColor("backgroundColor",backgroundColor,callback)},
/**
     * @private
     * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}
     */
_setImageSmoothing:function(){var ctx=this.getContext();ctx.imageSmoothingEnabled=ctx.imageSmoothingEnabled||ctx.webkitImageSmoothingEnabled||ctx.mozImageSmoothingEnabled||ctx.msImageSmoothingEnabled||ctx.oImageSmoothingEnabled,ctx.imageSmoothingEnabled=this.imageSmoothingEnabled},
/**
     * @private
     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}
     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})
     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to
     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay
     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.
     */
__setBgOverlayImage:function(property,image,callback,options){return"string"===typeof image?fabric.util.loadImage(image,(function(img){if(img){var instance=new fabric.Image(img,options);this[property]=instance,instance.canvas=this}callback&&callback(img)}),this,options&&options.crossOrigin):(options&&image.setOptions(options),this[property]=image,image&&(image.canvas=this),callback&&callback(image)),this},
/**
     * @private
     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}
     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})
     * @param {(Object|String|null)} color Object with pattern information, color value or null
     * @param {Function} [callback] Callback is invoked when color is set
     */
__setBgOverlayColor:function(property,color,callback){return this[property]=color,this._initGradient(color,property),this._initPattern(color,property,callback),this},
/**
     * @private
     */
_createCanvasElement:function(){var element=createCanvasElement();if(!element)throw CANVAS_INIT_ERROR;if(element.style||(element.style={}),"undefined"===typeof element.getContext)throw CANVAS_INIT_ERROR;return element},
/**
     * @private
     * @param {Object} [options] Options object
     */
_initOptions:function(options){var lowerCanvasEl=this.lowerCanvasEl;this._setOptions(options),this.width=this.width||parseInt(lowerCanvasEl.width,10)||0,this.height=this.height||parseInt(lowerCanvasEl.height,10)||0,this.lowerCanvasEl.style&&(lowerCanvasEl.width=this.width,lowerCanvasEl.height=this.height,lowerCanvasEl.style.width=this.width+"px",lowerCanvasEl.style.height=this.height+"px",this.viewportTransform=this.viewportTransform.slice())},
/**
     * Creates a bottom canvas
     * @private
     * @param {HTMLElement} [canvasEl]
     */
_createLowerCanvas:function(canvasEl){
// canvasEl === 'HTMLCanvasElement' does not work on jsdom/node
canvasEl&&canvasEl.getContext?this.lowerCanvasEl=canvasEl:this.lowerCanvasEl=fabric.util.getById(canvasEl)||this._createCanvasElement(),fabric.util.addClass(this.lowerCanvasEl,"lower-canvas"),this.interactive&&this._applyCanvasStyle(this.lowerCanvasEl),this.contextContainer=this.lowerCanvasEl.getContext("2d")},
/**
     * Returns canvas width (in px)
     * @return {Number}
     */
getWidth:function(){return this.width},
/**
     * Returns canvas height (in px)
     * @return {Number}
     */
getHeight:function(){return this.height},
/**
     * Sets width of this canvas instance
     * @param {Number|String} value                         Value to set width to
     * @param {Object}        [options]                     Options object
     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
     * @return {fabric.Canvas} instance
     * @chainable true
     */
setWidth:function(value,options){return this.setDimensions({width:value},options)},
/**
     * Sets height of this canvas instance
     * @param {Number|String} value                         Value to set height to
     * @param {Object}        [options]                     Options object
     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
     * @return {fabric.Canvas} instance
     * @chainable true
     */
setHeight:function(value,options){return this.setDimensions({height:value},options)},
/**
     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)
     * @param {Object}        dimensions                    Object with width/height properties
     * @param {Number|String} [dimensions.width]            Width of canvas element
     * @param {Number|String} [dimensions.height]           Height of canvas element
     * @param {Object}        [options]                     Options object
     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
setDimensions:function(dimensions,options){var cssValue;for(var prop in options=options||{},dimensions)cssValue=dimensions[prop],options.cssOnly||(this._setBackstoreDimension(prop,dimensions[prop]),cssValue+="px",this.hasLostContext=!0),options.backstoreOnly||this._setCssDimension(prop,cssValue);return this._isCurrentlyDrawing&&this.freeDrawingBrush&&this.freeDrawingBrush._setBrushStyles(),this._initRetinaScaling(),this._setImageSmoothing(),this.calcOffset(),options.cssOnly||this.requestRenderAll(),this},
/**
     * Helper for setting width/height
     * @private
     * @param {String} prop property (width|height)
     * @param {Number} value value to set property to
     * @return {fabric.Canvas} instance
     * @chainable true
     */
_setBackstoreDimension:function(prop,value){return this.lowerCanvasEl[prop]=value,this.upperCanvasEl&&(this.upperCanvasEl[prop]=value),this.cacheCanvasEl&&(this.cacheCanvasEl[prop]=value),this[prop]=value,this},
/**
     * Helper for setting css width/height
     * @private
     * @param {String} prop property (width|height)
     * @param {String} value value to set property to
     * @return {fabric.Canvas} instance
     * @chainable true
     */
_setCssDimension:function(prop,value){return this.lowerCanvasEl.style[prop]=value,this.upperCanvasEl&&(this.upperCanvasEl.style[prop]=value),this.wrapperEl&&(this.wrapperEl.style[prop]=value),this},
/**
     * Returns canvas zoom level
     * @return {Number}
     */
getZoom:function(){return this.viewportTransform[0]},
/**
     * Sets viewport transform of this canvas instance
     * @param {Array} vpt the transform in the form of context.transform
     * @return {fabric.Canvas} instance
     * @chainable true
     */
setViewportTransform:function(vpt){var object,i,len,activeObject=this._activeObject,ignoreVpt=!1,skipAbsolute=!0;for(this.viewportTransform=vpt,i=0,len=this._objects.length;i<len;i++)object=this._objects[i],object.group||object.setCoords(ignoreVpt,skipAbsolute);return activeObject&&"activeSelection"===activeObject.type&&activeObject.setCoords(ignoreVpt,skipAbsolute),this.calcViewportBoundaries(),this.renderOnAddRemove&&this.requestRenderAll(),this},
/**
     * Sets zoom level of this canvas instance, zoom centered around point
     * @param {fabric.Point} point to zoom with respect to
     * @param {Number} value to set zoom to, less than 1 zooms out
     * @return {fabric.Canvas} instance
     * @chainable true
     */
zoomToPoint:function(point,value){
// TODO: just change the scale, preserve other transformations
var before=point,vpt=this.viewportTransform.slice(0);point=transformPoint(point,invertTransform(this.viewportTransform)),vpt[0]=value,vpt[3]=value;var after=transformPoint(point,vpt);return vpt[4]+=before.x-after.x,vpt[5]+=before.y-after.y,this.setViewportTransform(vpt)},
/**
     * Sets zoom level of this canvas instance
     * @param {Number} value to set zoom to, less than 1 zooms out
     * @return {fabric.Canvas} instance
     * @chainable true
     */
setZoom:function(value){return this.zoomToPoint(new fabric.Point(0,0),value),this},
/**
     * Pan viewport so as to place point at top left corner of canvas
     * @param {fabric.Point} point to move to
     * @return {fabric.Canvas} instance
     * @chainable true
     */
absolutePan:function(point){var vpt=this.viewportTransform.slice(0);return vpt[4]=-point.x,vpt[5]=-point.y,this.setViewportTransform(vpt)},
/**
     * Pans viewpoint relatively
     * @param {fabric.Point} point (position vector) to move by
     * @return {fabric.Canvas} instance
     * @chainable true
     */
relativePan:function(point){return this.absolutePan(new fabric.Point(-point.x-this.viewportTransform[4],-point.y-this.viewportTransform[5]))},
/**
     * Returns &lt;canvas> element corresponding to this instance
     * @return {HTMLCanvasElement}
     */
getElement:function(){return this.lowerCanvasEl},
/**
     * @private
     * @param {fabric.Object} obj Object that was added
     */
_onObjectAdded:function(obj){this.stateful&&obj.setupState(),obj._set("canvas",this),obj.setCoords(),this.fire("object:added",{target:obj}),obj.fire("added")},
/**
     * @private
     * @param {fabric.Object} obj Object that was removed
     */
_onObjectRemoved:function(obj){this.fire("object:removed",{target:obj}),obj.fire("removed"),delete obj.canvas},
/**
     * Clears specified context of canvas element
     * @param {CanvasRenderingContext2D} ctx Context to clear
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
clearContext:function(ctx){return ctx.clearRect(0,0,this.width,this.height),this},
/**
     * Returns context of canvas where objects are drawn
     * @return {CanvasRenderingContext2D}
     */
getContext:function(){return this.contextContainer},
/**
     * Clears all contexts (background, main, top) of an instance
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
clear:function(){return this._objects.length=0,this.backgroundImage=null,this.overlayImage=null,this.backgroundColor="",this.overlayColor="",this._hasITextHandlers&&(this.off("mouse:up",this._mouseUpITextHandler),this._iTextInstances=null,this._hasITextHandlers=!1),this.clearContext(this.contextContainer),this.fire("canvas:cleared"),this.renderOnAddRemove&&this.requestRenderAll(),this},
/**
     * Renders the canvas
     * @return {fabric.Canvas} instance
     * @chainable
     */
renderAll:function(){var canvasToDrawOn=this.contextContainer;return this.renderCanvas(canvasToDrawOn,this._objects),this},
/**
     * Function created to be instance bound at initialization
     * used in requestAnimationFrame rendering
     * Let the fabricJS call it. If you call it manually you could have more
     * animationFrame stacking on to of each other
     * for an imperative rendering, use canvas.renderAll
     * @private
     * @return {fabric.Canvas} instance
     * @chainable
     */
renderAndReset:function(){this.isRendering=0,this.renderAll()},
/**
     * Append a renderAll request to next animation frame.
     * unless one is already in progress, in that case nothing is done
     * a boolean flag will avoid appending more.
     * @return {fabric.Canvas} instance
     * @chainable
     */
requestRenderAll:function(){return this.isRendering||(this.isRendering=fabric.util.requestAnimFrame(this.renderAndResetBound)),this},
/**
     * Calculate the position of the 4 corner of canvas with current viewportTransform.
     * helps to determinate when an object is in the current rendering viewport using
     * object absolute coordinates ( aCoords )
     * @return {Object} points.tl
     * @chainable
     */
calcViewportBoundaries:function(){var points={},width=this.width,height=this.height,iVpt=invertTransform(this.viewportTransform);return points.tl=transformPoint({x:0,y:0},iVpt),points.br=transformPoint({x:width,y:height},iVpt),points.tr=new fabric.Point(points.br.x,points.tl.y),points.bl=new fabric.Point(points.tl.x,points.br.y),this.vptCoords=points,points},cancelRequestedRender:function(){this.isRendering&&(fabric.util.cancelAnimFrame(this.isRendering),this.isRendering=0)},
/**
     * Renders background, objects, overlay and controls.
     * @param {CanvasRenderingContext2D} ctx
     * @param {Array} objects to render
     * @return {fabric.Canvas} instance
     * @chainable
     */
renderCanvas:function(ctx,objects){var v=this.viewportTransform,path=this.clipPath;this.cancelRequestedRender(),this.calcViewportBoundaries(),this.clearContext(ctx),this.fire("before:render",{ctx:ctx}),this.clipTo&&fabric.util.clipContext(this,ctx),this._renderBackground(ctx),ctx.save(),
//apply viewport transform once for all rendering process
ctx.transform(v[0],v[1],v[2],v[3],v[4],v[5]),this._renderObjects(ctx,objects),ctx.restore(),!this.controlsAboveOverlay&&this.interactive&&this.drawControls(ctx),this.clipTo&&ctx.restore(),path&&(path.canvas=this,
// needed to setup a couple of variables
path.shouldCache(),path._transformDone=!0,path.renderCache({forClipping:!0}),this.drawClipPathOnCanvas(ctx)),this._renderOverlay(ctx),this.controlsAboveOverlay&&this.interactive&&this.drawControls(ctx),this.fire("after:render",{ctx:ctx})},
/**
     * Paint the cached clipPath on the lowerCanvasEl
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
drawClipPathOnCanvas:function(ctx){var v=this.viewportTransform,path=this.clipPath;ctx.save(),ctx.transform(v[0],v[1],v[2],v[3],v[4],v[5]),
// DEBUG: uncomment this line, comment the following
// ctx.globalAlpha = 0.4;
ctx.globalCompositeOperation="destination-in",path.transform(ctx),ctx.scale(1/path.zoomX,1/path.zoomY),ctx.drawImage(path._cacheCanvas,-path.cacheTranslationX,-path.cacheTranslationY),ctx.restore()},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Array} objects to render
     */
_renderObjects:function(ctx,objects){var i,len;for(i=0,len=objects.length;i<len;++i)objects[i]&&objects[i].render(ctx)},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {string} property 'background' or 'overlay'
     */
_renderBackgroundOrOverlay:function(ctx,property){var fill=this[property+"Color"],object=this[property+"Image"],v=this.viewportTransform,needsVpt=this[property+"Vpt"];if(fill||object){if(fill){ctx.save(),ctx.beginPath(),ctx.moveTo(0,0),ctx.lineTo(this.width,0),ctx.lineTo(this.width,this.height),ctx.lineTo(0,this.height),ctx.closePath(),ctx.fillStyle=fill.toLive?fill.toLive(ctx,this):fill,needsVpt&&ctx.transform(v[0],v[1],v[2],v[3],v[4],v[5]),ctx.transform(1,0,0,1,fill.offsetX||0,fill.offsetY||0);var m=fill.gradientTransform||fill.patternTransform;m&&ctx.transform(m[0],m[1],m[2],m[3],m[4],m[5]),ctx.fill(),ctx.restore()}object&&(ctx.save(),needsVpt&&ctx.transform(v[0],v[1],v[2],v[3],v[4],v[5]),object.render(ctx),ctx.restore())}},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderBackground:function(ctx){this._renderBackgroundOrOverlay(ctx,"background")},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderOverlay:function(ctx){this._renderBackgroundOrOverlay(ctx,"overlay")},
/**
     * Returns coordinates of a center of canvas.
     * Returned value is an object with top and left properties
     * @return {Object} object with "top" and "left" number values
     */
getCenter:function(){return{top:this.height/2,left:this.width/2}},
/**
     * Centers object horizontally in the canvas
     * @param {fabric.Object} object Object to center horizontally
     * @return {fabric.Canvas} thisArg
     */
centerObjectH:function(object){return this._centerObject(object,new fabric.Point(this.getCenter().left,object.getCenterPoint().y))},
/**
     * Centers object vertically in the canvas
     * @param {fabric.Object} object Object to center vertically
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
centerObjectV:function(object){return this._centerObject(object,new fabric.Point(object.getCenterPoint().x,this.getCenter().top))},
/**
     * Centers object vertically and horizontally in the canvas
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
centerObject:function(object){var center=this.getCenter();return this._centerObject(object,new fabric.Point(center.left,center.top))},
/**
     * Centers object vertically and horizontally in the viewport
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
viewportCenterObject:function(object){var vpCenter=this.getVpCenter();return this._centerObject(object,vpCenter)},
/**
     * Centers object horizontally in the viewport, object.top is unchanged
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
viewportCenterObjectH:function(object){var vpCenter=this.getVpCenter();return this._centerObject(object,new fabric.Point(vpCenter.x,object.getCenterPoint().y)),this},
/**
     * Centers object Vertically in the viewport, object.top is unchanged
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
viewportCenterObjectV:function(object){var vpCenter=this.getVpCenter();return this._centerObject(object,new fabric.Point(object.getCenterPoint().x,vpCenter.y))},
/**
     * Calculate the point in canvas that correspond to the center of actual viewport.
     * @return {fabric.Point} vpCenter, viewport center
     * @chainable
     */
getVpCenter:function(){var center=this.getCenter(),iVpt=invertTransform(this.viewportTransform);return transformPoint({x:center.left,y:center.top},iVpt)},
/**
     * @private
     * @param {fabric.Object} object Object to center
     * @param {fabric.Point} center Center point
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
_centerObject:function(object,center){return object.setPositionByOrigin(center,"center","center"),object.setCoords(),this.renderOnAddRemove&&this.requestRenderAll(),this},
/**
     * Returs dataless JSON representation of canvas
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {String} json string
     */
toDatalessJSON:function(propertiesToInclude){return this.toDatalessObject(propertiesToInclude)},
/**
     * Returns object representation of canvas
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
toObject:function(propertiesToInclude){return this._toObjectMethod("toObject",propertiesToInclude)},
/**
     * Returns dataless object representation of canvas
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
toDatalessObject:function(propertiesToInclude){return this._toObjectMethod("toDatalessObject",propertiesToInclude)},
/**
     * @private
     */
_toObjectMethod:function(methodName,propertiesToInclude){var clipPath=this.clipPath,data={version:fabric.version,objects:this._toObjects(methodName,propertiesToInclude)};return clipPath&&(data.clipPath=this._toObject(this.clipPath,methodName,propertiesToInclude)),extend(data,this.__serializeBgOverlay(methodName,propertiesToInclude)),fabric.util.populateWithProperties(this,data,propertiesToInclude),data},
/**
     * @private
     */
_toObjects:function(methodName,propertiesToInclude){return this._objects.filter((function(object){return!object.excludeFromExport})).map((function(instance){return this._toObject(instance,methodName,propertiesToInclude)}),this)},
/**
     * @private
     */
_toObject:function(instance,methodName,propertiesToInclude){var originalValue;this.includeDefaultValues||(originalValue=instance.includeDefaultValues,instance.includeDefaultValues=!1);var object=instance[methodName](propertiesToInclude);return this.includeDefaultValues||(instance.includeDefaultValues=originalValue),object},
/**
     * @private
     */
__serializeBgOverlay:function(methodName,propertiesToInclude){var data={},bgImage=this.backgroundImage,overlay=this.overlayImage;return this.backgroundColor&&(data.background=this.backgroundColor.toObject?this.backgroundColor.toObject(propertiesToInclude):this.backgroundColor),this.overlayColor&&(data.overlay=this.overlayColor.toObject?this.overlayColor.toObject(propertiesToInclude):this.overlayColor),bgImage&&!bgImage.excludeFromExport&&(data.backgroundImage=this._toObject(bgImage,methodName,propertiesToInclude)),overlay&&!overlay.excludeFromExport&&(data.overlayImage=this._toObject(overlay,methodName,propertiesToInclude)),data},
/* _TO_SVG_START_ */
/**
     * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,
     * a zoomed canvas will then produce zoomed SVG output.
     * @type Boolean
     * @default
     */
svgViewportTransformation:!0,
/**
     * Returns SVG representation of canvas
     * @function
     * @param {Object} [options] Options object for SVG output
     * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included
     * @param {Object} [options.viewBox] SVG viewbox object
     * @param {Number} [options.viewBox.x] x-cooridnate of viewbox
     * @param {Number} [options.viewBox.y] y-coordinate of viewbox
     * @param {Number} [options.viewBox.width] Width of viewbox
     * @param {Number} [options.viewBox.height] Height of viewbox
     * @param {String} [options.encoding=UTF-8] Encoding of SVG output
     * @param {String} [options.width] desired width of svg with or without units
     * @param {String} [options.height] desired height of svg with or without units
     * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.
     * @return {String} SVG string
     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
     * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}
     * @example <caption>Normal SVG output</caption>
     * var svg = canvas.toSVG();
     * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>
     * var svg = canvas.toSVG({suppressPreamble: true});
     * @example <caption>SVG output with viewBox attribute</caption>
     * var svg = canvas.toSVG({
     *   viewBox: {
     *     x: 100,
     *     y: 100,
     *     width: 200,
     *     height: 300
     *   }
     * });
     * @example <caption>SVG output with different encoding (default: UTF-8)</caption>
     * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});
     * @example <caption>Modify SVG output with reviver function</caption>
     * var svg = canvas.toSVG(null, function(svg) {
     *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');
     * });
     */
toSVG:function(options,reviver){options||(options={}),options.reviver=reviver;var markup=[];return this._setSVGPreamble(markup,options),this._setSVGHeader(markup,options),this.clipPath&&markup.push('<g clip-path="url(#'+this.clipPath.clipPathId+')" >\n'),this._setSVGBgOverlayColor(markup,"background"),this._setSVGBgOverlayImage(markup,"backgroundImage",reviver),this._setSVGObjects(markup,reviver),this.clipPath&&markup.push("</g>\n"),this._setSVGBgOverlayColor(markup,"overlay"),this._setSVGBgOverlayImage(markup,"overlayImage",reviver),markup.push("</svg>"),markup.join("")},
/**
     * @private
     */
_setSVGPreamble:function(markup,options){options.suppressPreamble||markup.push('<?xml version="1.0" encoding="',options.encoding||"UTF-8",'" standalone="no" ?>\n','<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ','"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n')},
/**
     * @private
     */
_setSVGHeader:function(markup,options){var vpt,width=options.width||this.width,height=options.height||this.height,viewBox='viewBox="0 0 '+this.width+" "+this.height+'" ',NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS;options.viewBox?viewBox='viewBox="'+options.viewBox.x+" "+options.viewBox.y+" "+options.viewBox.width+" "+options.viewBox.height+'" ':this.svgViewportTransformation&&(vpt=this.viewportTransform,viewBox='viewBox="'+toFixed(-vpt[4]/vpt[0],NUM_FRACTION_DIGITS)+" "+toFixed(-vpt[5]/vpt[3],NUM_FRACTION_DIGITS)+" "+toFixed(this.width/vpt[0],NUM_FRACTION_DIGITS)+" "+toFixed(this.height/vpt[3],NUM_FRACTION_DIGITS)+'" '),markup.push("<svg ",'xmlns="http://www.w3.org/2000/svg" ','xmlns:xlink="http://www.w3.org/1999/xlink" ','version="1.1" ','width="',width,'" ','height="',height,'" ',viewBox,'xml:space="preserve">\n',"<desc>Created with Fabric.js ",fabric.version,"</desc>\n","<defs>\n",this.createSVGFontFacesMarkup(),this.createSVGRefElementsMarkup(),this.createSVGClipPathMarkup(options),"</defs>\n")},createSVGClipPathMarkup:function(options){var clipPath=this.clipPath;return clipPath?(clipPath.clipPathId="CLIPPATH_"+fabric.Object.__uid++,'<clipPath id="'+clipPath.clipPathId+'" >\n'+this.clipPath.toClipPathSVG(options.reviver)+"</clipPath>\n"):""},
/**
     * Creates markup containing SVG referenced elements like patterns, gradients etc.
     * @return {String}
     */
createSVGRefElementsMarkup:function(){var _this=this,markup=["background","overlay"].map((function(prop){var fill=_this[prop+"Color"];if(fill&&fill.toLive){var shouldTransform=_this[prop+"Vpt"],vpt=_this.viewportTransform,object={width:_this.width/(shouldTransform?vpt[0]:1),height:_this.height/(shouldTransform?vpt[3]:1)};return fill.toSVG(object,{additionalTransform:shouldTransform?fabric.util.matrixToSVG(vpt):""})}}));return markup.join("")},
/**
     * Creates markup containing SVG font faces,
     * font URLs for font faces must be collected by developers
     * and are not extracted from the DOM by fabricjs
     * @param {Array} objects Array of fabric objects
     * @return {String}
     */
createSVGFontFacesMarkup:function(){var obj,fontFamily,style,row,rowIndex,_char,charIndex,i,len,markup="",fontList={},fontPaths=fabric.fontPaths,objects=[];for(this._objects.forEach((function add(object){objects.push(object),object._objects&&object._objects.forEach(add)})),i=0,len=objects.length;i<len;i++)if(obj=objects[i],fontFamily=obj.fontFamily,-1!==obj.type.indexOf("text")&&!fontList[fontFamily]&&fontPaths[fontFamily]&&(fontList[fontFamily]=!0,obj.styles))for(rowIndex in style=obj.styles,style)for(charIndex in row=style[rowIndex],row)_char=row[charIndex],fontFamily=_char.fontFamily,!fontList[fontFamily]&&fontPaths[fontFamily]&&(fontList[fontFamily]=!0);for(var j in fontList)markup+=["\t\t@font-face {\n","\t\t\tfont-family: '",j,"';\n","\t\t\tsrc: url('",fontPaths[j],"');\n","\t\t}\n"].join("");return markup&&(markup=['\t<style type="text/css">',"<![CDATA[\n",markup,"]]>","</style>\n"].join("")),markup},
/**
     * @private
     */
_setSVGObjects:function(markup,reviver){var instance,i,len,objects=this._objects;for(i=0,len=objects.length;i<len;i++)instance=objects[i],instance.excludeFromExport||this._setSVGObject(markup,instance,reviver)},
/**
     * @private
     */
_setSVGObject:function(markup,instance,reviver){markup.push(instance.toSVG(reviver))},
/**
     * @private
     */
_setSVGBgOverlayImage:function(markup,property,reviver){this[property]&&!this[property].excludeFromExport&&this[property].toSVG&&markup.push(this[property].toSVG(reviver))},
/**
     * @private
     */
_setSVGBgOverlayColor:function(markup,property){var filler=this[property+"Color"],vpt=this.viewportTransform,finalWidth=this.width,finalHeight=this.height;if(filler)if(filler.toLive){var repeat=filler.repeat,iVpt=fabric.util.invertTransform(vpt),shouldInvert=this[property+"Vpt"],additionalTransform=shouldInvert?fabric.util.matrixToSVG(iVpt):"";markup.push('<rect transform="'+additionalTransform+" translate(",finalWidth/2,",",finalHeight/2,')"',' x="',filler.offsetX-finalWidth/2,'" y="',filler.offsetY-finalHeight/2,'" ','width="',"repeat-y"===repeat||"no-repeat"===repeat?filler.source.width:finalWidth,'" height="',"repeat-x"===repeat||"no-repeat"===repeat?filler.source.height:finalHeight,'" fill="url(#SVGID_'+filler.id+')"',"></rect>\n")}else markup.push('<rect x="0" y="0" width="100%" height="100%" ','fill="',filler,'"',"></rect>\n")},
/* _TO_SVG_END_ */
/**
     * Moves an object or the objects of a multiple selection
     * to the bottom of the stack of drawn objects
     * @param {fabric.Object} object Object to send to back
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
sendToBack:function(object){if(!object)return this;var i,obj,objs,activeSelection=this._activeObject;if(object===activeSelection&&"activeSelection"===object.type)for(objs=activeSelection._objects,i=objs.length;i--;)obj=objs[i],removeFromArray(this._objects,obj),this._objects.unshift(obj);else removeFromArray(this._objects,object),this._objects.unshift(object);return this.renderOnAddRemove&&this.requestRenderAll(),this},
/**
     * Moves an object or the objects of a multiple selection
     * to the top of the stack of drawn objects
     * @param {fabric.Object} object Object to send
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
bringToFront:function(object){if(!object)return this;var i,obj,objs,activeSelection=this._activeObject;if(object===activeSelection&&"activeSelection"===object.type)for(objs=activeSelection._objects,i=0;i<objs.length;i++)obj=objs[i],removeFromArray(this._objects,obj),this._objects.push(obj);else removeFromArray(this._objects,object),this._objects.push(object);return this.renderOnAddRemove&&this.requestRenderAll(),this},
/**
     * Moves an object or a selection down in stack of drawn objects
     * An optional paramter, intersecting allowes to move the object in behind
     * the first intersecting object. Where intersection is calculated with
     * bounding box. If no intersection is found, there will not be change in the
     * stack.
     * @param {fabric.Object} object Object to send
     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
sendBackwards:function(object,intersecting){if(!object)return this;var i,obj,idx,newIdx,objs,activeSelection=this._activeObject,objsMoved=0;if(object===activeSelection&&"activeSelection"===object.type)for(objs=activeSelection._objects,i=0;i<objs.length;i++)obj=objs[i],idx=this._objects.indexOf(obj),idx>0+objsMoved&&(newIdx=idx-1,removeFromArray(this._objects,obj),this._objects.splice(newIdx,0,obj)),objsMoved++;else idx=this._objects.indexOf(object),0!==idx&&(
// if object is not on the bottom of stack
newIdx=this._findNewLowerIndex(object,idx,intersecting),removeFromArray(this._objects,object),this._objects.splice(newIdx,0,object));return this.renderOnAddRemove&&this.requestRenderAll(),this},
/**
     * @private
     */
_findNewLowerIndex:function(object,idx,intersecting){var newIdx,i;if(intersecting)
// traverse down the stack looking for the nearest intersecting object
for(newIdx=idx,i=idx-1;i>=0;--i){var isIntersecting=object.intersectsWithObject(this._objects[i])||object.isContainedWithinObject(this._objects[i])||this._objects[i].isContainedWithinObject(object);if(isIntersecting){newIdx=i;break}}else newIdx=idx-1;return newIdx},
/**
     * Moves an object or a selection up in stack of drawn objects
     * An optional paramter, intersecting allowes to move the object in front
     * of the first intersecting object. Where intersection is calculated with
     * bounding box. If no intersection is found, there will not be change in the
     * stack.
     * @param {fabric.Object} object Object to send
     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
bringForward:function(object,intersecting){if(!object)return this;var i,obj,idx,newIdx,objs,activeSelection=this._activeObject,objsMoved=0;if(object===activeSelection&&"activeSelection"===object.type)for(objs=activeSelection._objects,i=objs.length;i--;)obj=objs[i],idx=this._objects.indexOf(obj),idx<this._objects.length-1-objsMoved&&(newIdx=idx+1,removeFromArray(this._objects,obj),this._objects.splice(newIdx,0,obj)),objsMoved++;else idx=this._objects.indexOf(object),idx!==this._objects.length-1&&(
// if object is not on top of stack (last item in an array)
newIdx=this._findNewUpperIndex(object,idx,intersecting),removeFromArray(this._objects,object),this._objects.splice(newIdx,0,object));return this.renderOnAddRemove&&this.requestRenderAll(),this},
/**
     * @private
     */
_findNewUpperIndex:function(object,idx,intersecting){var newIdx,i,len;if(intersecting)
// traverse up the stack looking for the nearest intersecting object
for(newIdx=idx,i=idx+1,len=this._objects.length;i<len;++i){var isIntersecting=object.intersectsWithObject(this._objects[i])||object.isContainedWithinObject(this._objects[i])||this._objects[i].isContainedWithinObject(object);if(isIntersecting){newIdx=i;break}}else newIdx=idx+1;return newIdx},
/**
     * Moves an object to specified level in stack of drawn objects
     * @param {fabric.Object} object Object to send
     * @param {Number} index Position to move to
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
moveTo:function(object,index){return removeFromArray(this._objects,object),this._objects.splice(index,0,object),this.renderOnAddRemove&&this.requestRenderAll()},
/**
     * Clears a canvas element and dispose objects
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
dispose:function(){
// cancel eventually ongoing renders
return this.isRendering&&(fabric.util.cancelAnimFrame(this.isRendering),this.isRendering=0),this.forEachObject((function(object){object.dispose&&object.dispose()})),this._objects=[],this.backgroundImage&&this.backgroundImage.dispose&&this.backgroundImage.dispose(),this.backgroundImage=null,this.overlayImage&&this.overlayImage.dispose&&this.overlayImage.dispose(),this.overlayImage=null,this._iTextInstances=null,this.contextContainer=null,fabric.util.cleanUpJsdomNode(this.lowerCanvasEl),this.lowerCanvasEl=void 0,this},
/**
     * Returns a string representation of an instance
     * @return {String} string representation of an instance
     */
toString:function(){return"#<fabric.Canvas ("+this.complexity()+"): { objects: "+this._objects.length+" }>"}}),extend(fabric.StaticCanvas.prototype,fabric.Observable),extend(fabric.StaticCanvas.prototype,fabric.Collection),extend(fabric.StaticCanvas.prototype,fabric.DataURLExporter),extend(fabric.StaticCanvas,/** @lends fabric.StaticCanvas */{
/**
     * @static
     * @type String
     * @default
     */
EMPTY_JSON:'{"objects": [], "background": "white"}',
/**
     * Provides a way to check support of some of the canvas methods
     * (either those of HTMLCanvasElement itself, or rendering context)
     *
     * @param {String} methodName Method to check support for;
     *                            Could be one of "setLineDash"
     * @return {Boolean | null} `true` if method is supported (or at least exists),
     *                          `null` if canvas element or context can not be initialized
     */
supports:function(methodName){var el=createCanvasElement();if(!el||!el.getContext)return null;var ctx=el.getContext("2d");if(!ctx)return null;switch(methodName){case"setLineDash":return"undefined"!==typeof ctx.setLineDash;default:return null}}}),
/**
   * Returns JSON representation of canvas
   * @function
   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
   * @return {String} JSON string
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}
   * @example <caption>JSON without additional properties</caption>
   * var json = canvas.toJSON();
   * @example <caption>JSON with additional properties included</caption>
   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);
   * @example <caption>JSON without default values</caption>
   * canvas.includeDefaultValues = false;
   * var json = canvas.toJSON();
   */
fabric.StaticCanvas.prototype.toJSON=fabric.StaticCanvas.prototype.toObject,fabric.isLikelyNode&&(fabric.StaticCanvas.prototype.createPNGStream=function(){var impl=getNodeCanvas(this.lowerCanvasEl);return impl&&impl.createPNGStream()},fabric.StaticCanvas.prototype.createJPEGStream=function(opts){var impl=getNodeCanvas(this.lowerCanvasEl);return impl&&impl.createJPEGStream(opts)})}}(),
/**
 * BaseBrush class
 * @class fabric.BaseBrush
 * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}
 */
fabric.BaseBrush=fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */{
/**
   * Color of a brush
   * @type String
   * @default
   */
color:"rgb(0, 0, 0)",
/**
   * Width of a brush, has to be a Number, no string literals
   * @type Number
   * @default
   */
width:1,
/**
   * Shadow object representing shadow of this shape.
   * <b>Backwards incompatibility note:</b> This property replaces "shadowColor" (String), "shadowOffsetX" (Number),
   * "shadowOffsetY" (Number) and "shadowBlur" (Number) since v1.2.12
   * @type fabric.Shadow
   * @default
   */
shadow:null,
/**
   * Line endings style of a brush (one of "butt", "round", "square")
   * @type String
   * @default
   */
strokeLineCap:"round",
/**
   * Corner style of a brush (one of "bevel", "round", "miter")
   * @type String
   * @default
   */
strokeLineJoin:"round",
/**
   * Maximum miter length (used for strokeLineJoin = "miter") of a brush's
   * @type Number
   * @default
   */
strokeMiterLimit:10,
/**
   * Stroke Dash Array.
   * @type Array
   * @default
   */
strokeDashArray:null,
/**
   * Sets shadow of an object
   * @param {Object|String} [options] Options object or string (e.g. "2px 2px 10px rgba(0,0,0,0.2)")
   * @return {fabric.Object} thisArg
   * @chainable
   */
setShadow:function(options){return this.shadow=new fabric.Shadow(options),this},
/**
   * Sets brush styles
   * @private
   */
_setBrushStyles:function(){var ctx=this.canvas.contextTop;ctx.strokeStyle=this.color,ctx.lineWidth=this.width,ctx.lineCap=this.strokeLineCap,ctx.miterLimit=this.strokeMiterLimit,ctx.lineJoin=this.strokeLineJoin,fabric.StaticCanvas.supports("setLineDash")&&ctx.setLineDash(this.strokeDashArray||[])},
/**
   * Sets the transformation on given context
   * @param {RenderingContext2d} ctx context to render on
   * @private
   */
_saveAndTransform:function(ctx){var v=this.canvas.viewportTransform;ctx.save(),ctx.transform(v[0],v[1],v[2],v[3],v[4],v[5])},
/**
   * Sets brush shadow styles
   * @private
   */
_setShadow:function(){if(this.shadow){var canvas=this.canvas,shadow=this.shadow,ctx=canvas.contextTop,zoom=canvas.getZoom();canvas&&canvas._isRetinaScaling()&&(zoom*=fabric.devicePixelRatio),ctx.shadowColor=shadow.color,ctx.shadowBlur=shadow.blur*zoom,ctx.shadowOffsetX=shadow.offsetX*zoom,ctx.shadowOffsetY=shadow.offsetY*zoom}},needsFullRender:function(){var color=new fabric.Color(this.color);return color.getAlpha()<1||!!this.shadow},
/**
   * Removes brush shadow styles
   * @private
   */
_resetShadow:function(){var ctx=this.canvas.contextTop;ctx.shadowColor="",ctx.shadowBlur=ctx.shadowOffsetX=ctx.shadowOffsetY=0}}),function(){
/**
   * PencilBrush class
   * @class fabric.PencilBrush
   * @extends fabric.BaseBrush
   */
fabric.PencilBrush=fabric.util.createClass(fabric.BaseBrush,/** @lends fabric.PencilBrush.prototype */{
/**
     * Discard points that are less than `decimate` pixel distant from each other
     * @type Number
     * @default 0.4
     */
decimate:.4,
/**
     * Constructor
     * @param {fabric.Canvas} canvas
     * @return {fabric.PencilBrush} Instance of a pencil brush
     */
initialize:function(canvas){this.canvas=canvas,this._points=[]},
/**
     * Invoked inside on mouse down and mouse move
     * @param {Object} pointer
     */
_drawSegment:function(ctx,p1,p2){var midPoint=p1.midPointFrom(p2);return ctx.quadraticCurveTo(p1.x,p1.y,midPoint.x,midPoint.y),midPoint},
/**
     * Inovoked on mouse down
     * @param {Object} pointer
     */
onMouseDown:function(pointer,options){this.canvas._isMainEvent(options.e)&&(this._prepareForDrawing(pointer),
// capture coordinates immediately
// this allows to draw dots (when movement never occurs)
this._captureDrawingPath(pointer),this._render())},
/**
     * Inovoked on mouse move
     * @param {Object} pointer
     */
onMouseMove:function(pointer,options){if(this.canvas._isMainEvent(options.e)&&this._captureDrawingPath(pointer)&&this._points.length>1)if(this.needsFullRender())
// redraw curve
// clear top canvas
this.canvas.clearContext(this.canvas.contextTop),this._render();else{var points=this._points,length=points.length,ctx=this.canvas.contextTop;
// draw the curve update
this._saveAndTransform(ctx),this.oldEnd&&(ctx.beginPath(),ctx.moveTo(this.oldEnd.x,this.oldEnd.y)),this.oldEnd=this._drawSegment(ctx,points[length-2],points[length-1],!0),ctx.stroke(),ctx.restore()}},
/**
     * Invoked on mouse up
     */
onMouseUp:function(options){return!this.canvas._isMainEvent(options.e)||(this.oldEnd=void 0,this._finalizeAndAddPath(),!1)},
/**
     * @private
     * @param {Object} pointer Actual mouse position related to the canvas.
     */
_prepareForDrawing:function(pointer){var p=new fabric.Point(pointer.x,pointer.y);this._reset(),this._addPoint(p),this.canvas.contextTop.moveTo(p.x,p.y)},
/**
     * @private
     * @param {fabric.Point} point Point to be added to points array
     */
_addPoint:function(point){return!(this._points.length>1&&point.eq(this._points[this._points.length-1]))&&(this._points.push(point),!0)},
/**
     * Clear points array and set contextTop canvas style.
     * @private
     */
_reset:function(){this._points=[],this._setBrushStyles(),this._setShadow()},
/**
     * @private
     * @param {Object} pointer Actual mouse position related to the canvas.
     */
_captureDrawingPath:function(pointer){var pointerPoint=new fabric.Point(pointer.x,pointer.y);return this._addPoint(pointerPoint)},
/**
     * Draw a smooth path on the topCanvas using quadraticCurveTo
     * @private
     */
_render:function(){var i,len,ctx=this.canvas.contextTop,p1=this._points[0],p2=this._points[1];
//if we only have 2 points in the path and they are the same
//it means that the user only clicked the canvas without moving the mouse
//then we should be drawing a dot. A path isn't drawn between two identical dots
//that's why we set them apart a bit
if(this._saveAndTransform(ctx),ctx.beginPath(),2===this._points.length&&p1.x===p2.x&&p1.y===p2.y){var width=this.width/1e3;p1=new fabric.Point(p1.x,p1.y),p2=new fabric.Point(p2.x,p2.y),p1.x-=width,p2.x+=width}for(ctx.moveTo(p1.x,p1.y),i=1,len=this._points.length;i<len;i++)
// we pick the point between pi + 1 & pi + 2 as the
// end point and p1 as our control point.
this._drawSegment(ctx,p1,p2),p1=this._points[i],p2=this._points[i+1];
// Draw last line as a straight line while
// we wait for the next point to be able to calculate
// the bezier control point
ctx.lineTo(p1.x,p1.y),ctx.stroke(),ctx.restore()},
/**
     * Converts points to SVG path
     * @param {Array} points Array of points
     * @return {String} SVG path
     */
convertPointsToSVGPath:function(points){var i,path=[],width=this.width/1e3,p1=new fabric.Point(points[0].x,points[0].y),p2=new fabric.Point(points[1].x,points[1].y),len=points.length,multSignX=1,multSignY=0,manyPoints=len>2;for(manyPoints&&(multSignX=points[2].x<p2.x?-1:points[2].x===p2.x?0:1,multSignY=points[2].y<p2.y?-1:points[2].y===p2.y?0:1),path.push("M ",p1.x-multSignX*width," ",p1.y-multSignY*width," "),i=1;i<len;i++){if(!p1.eq(p2)){var midPoint=p1.midPointFrom(p2);
// p1 is our bezier control point
// midpoint is our endpoint
// start point is p(i-1) value.
path.push("Q ",p1.x," ",p1.y," ",midPoint.x," ",midPoint.y," ")}p1=points[i],i+1<points.length&&(p2=points[i+1])}return manyPoints&&(multSignX=p1.x>points[i-2].x?1:p1.x===points[i-2].x?0:-1,multSignY=p1.y>points[i-2].y?1:p1.y===points[i-2].y?0:-1),path.push("L ",p1.x+multSignX*width," ",p1.y+multSignY*width),path},
/**
     * Creates fabric.Path object to add on canvas
     * @param {String} pathData Path data
     * @return {fabric.Path} Path to add on canvas
     */
createPath:function(pathData){var path=new fabric.Path(pathData,{fill:null,stroke:this.color,strokeWidth:this.width,strokeLineCap:this.strokeLineCap,strokeMiterLimit:this.strokeMiterLimit,strokeLineJoin:this.strokeLineJoin,strokeDashArray:this.strokeDashArray});return this.shadow&&(this.shadow.affectStroke=!0,path.setShadow(this.shadow)),path},
/**
     * Decimate poins array with the decimate value
     */
decimatePoints:function(points,distance){if(points.length<=2)return points;var i,cDistance,zoom=this.canvas.getZoom(),adjustedDistance=Math.pow(distance/zoom,2),l=points.length-1,lastPoint=points[0],newPoints=[lastPoint];for(i=1;i<l;i++)cDistance=Math.pow(lastPoint.x-points[i].x,2)+Math.pow(lastPoint.y-points[i].y,2),cDistance>=adjustedDistance&&(lastPoint=points[i],newPoints.push(lastPoint));return 1===newPoints.length&&newPoints.push(new fabric.Point(newPoints[0].x,newPoints[0].y)),newPoints},
/**
     * On mouseup after drawing the path on contextTop canvas
     * we use the points captured to create an new fabric path object
     * and add it to the fabric canvas.
     */
_finalizeAndAddPath:function(){var ctx=this.canvas.contextTop;ctx.closePath(),this.decimate&&(this._points=this.decimatePoints(this._points,this.decimate));var pathData=this.convertPointsToSVGPath(this._points).join("");if("M 0 0 Q 0 0 0 0 L 0 0"!==pathData){var path=this.createPath(pathData);this.canvas.clearContext(this.canvas.contextTop),this.canvas.add(path),this.canvas.requestRenderAll(),path.setCoords(),this._resetShadow(),
// fire event 'path' created
this.canvas.fire("path:created",{path:path})}else
// do not create 0 width/height paths, as they are
// rendered inconsistently across browsers
// Firefox 4, for example, renders a dot,
// whereas Chrome 10 renders nothing
this.canvas.requestRenderAll()}})}(),
/**
 * CircleBrush class
 * @class fabric.CircleBrush
 */
fabric.CircleBrush=fabric.util.createClass(fabric.BaseBrush,/** @lends fabric.CircleBrush.prototype */{
/**
   * Width of a brush
   * @type Number
   * @default
   */
width:10,
/**
   * Constructor
   * @param {fabric.Canvas} canvas
   * @return {fabric.CircleBrush} Instance of a circle brush
   */
initialize:function(canvas){this.canvas=canvas,this.points=[]},
/**
   * Invoked inside on mouse down and mouse move
   * @param {Object} pointer
   */
drawDot:function(pointer){var point=this.addPoint(pointer),ctx=this.canvas.contextTop;this._saveAndTransform(ctx),this.dot(ctx,point),ctx.restore()},dot:function(ctx,point){ctx.fillStyle=point.fill,ctx.beginPath(),ctx.arc(point.x,point.y,point.radius,0,2*Math.PI,!1),ctx.closePath(),ctx.fill()},
/**
   * Invoked on mouse down
   */
onMouseDown:function(pointer){this.points.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.drawDot(pointer)},
/**
   * Render the full state of the brush
   * @private
   */
_render:function(){var i,len,ctx=this.canvas.contextTop,points=this.points;for(this._saveAndTransform(ctx),i=0,len=points.length;i<len;i++)this.dot(ctx,points[i]);ctx.restore()},
/**
   * Invoked on mouse move
   * @param {Object} pointer
   */
onMouseMove:function(pointer){this.needsFullRender()?(this.canvas.clearContext(this.canvas.contextTop),this.addPoint(pointer),this._render()):this.drawDot(pointer)},
/**
   * Invoked on mouse up
   */
onMouseUp:function(){var i,len,originalRenderOnAddRemove=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=!1;var circles=[];for(i=0,len=this.points.length;i<len;i++){var point=this.points[i],circle=new fabric.Circle({radius:point.radius,left:point.x,top:point.y,originX:"center",originY:"center",fill:point.fill});this.shadow&&circle.setShadow(this.shadow),circles.push(circle)}var group=new fabric.Group(circles);group.canvas=this.canvas,this.canvas.add(group),this.canvas.fire("path:created",{path:group}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=originalRenderOnAddRemove,this.canvas.requestRenderAll()},
/**
   * @param {Object} pointer
   * @return {fabric.Point} Just added pointer point
   */
addPoint:function(pointer){var pointerPoint=new fabric.Point(pointer.x,pointer.y),circleRadius=fabric.util.getRandomInt(Math.max(0,this.width-20),this.width+20)/2,circleColor=new fabric.Color(this.color).setAlpha(fabric.util.getRandomInt(0,100)/100).toRgba();return pointerPoint.radius=circleRadius,pointerPoint.fill=circleColor,this.points.push(pointerPoint),pointerPoint}}),
/**
 * SprayBrush class
 * @class fabric.SprayBrush
 */
fabric.SprayBrush=fabric.util.createClass(fabric.BaseBrush,/** @lends fabric.SprayBrush.prototype */{
/**
   * Width of a spray
   * @type Number
   * @default
   */
width:10,
/**
   * Density of a spray (number of dots per chunk)
   * @type Number
   * @default
   */
density:20,
/**
   * Width of spray dots
   * @type Number
   * @default
   */
dotWidth:1,
/**
   * Width variance of spray dots
   * @type Number
   * @default
   */
dotWidthVariance:1,
/**
   * Whether opacity of a dot should be random
   * @type Boolean
   * @default
   */
randomOpacity:!1,
/**
   * Whether overlapping dots (rectangles) should be removed (for performance reasons)
   * @type Boolean
   * @default
   */
optimizeOverlapping:!0,
/**
   * Constructor
   * @param {fabric.Canvas} canvas
   * @return {fabric.SprayBrush} Instance of a spray brush
   */
initialize:function(canvas){this.canvas=canvas,this.sprayChunks=[]},
/**
   * Invoked on mouse down
   * @param {Object} pointer
   */
onMouseDown:function(pointer){this.sprayChunks.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.addSprayChunk(pointer),this.render(this.sprayChunkPoints)},
/**
   * Invoked on mouse move
   * @param {Object} pointer
   */
onMouseMove:function(pointer){this.addSprayChunk(pointer),this.render(this.sprayChunkPoints)},
/**
   * Invoked on mouse up
   */
onMouseUp:function(){var originalRenderOnAddRemove=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=!1;for(var rects=[],i=0,ilen=this.sprayChunks.length;i<ilen;i++)for(var sprayChunk=this.sprayChunks[i],j=0,jlen=sprayChunk.length;j<jlen;j++){var rect=new fabric.Rect({width:sprayChunk[j].width,height:sprayChunk[j].width,left:sprayChunk[j].x+1,top:sprayChunk[j].y+1,originX:"center",originY:"center",fill:this.color});rects.push(rect)}this.optimizeOverlapping&&(rects=this._getOptimizedRects(rects));var group=new fabric.Group(rects);this.shadow&&group.setShadow(this.shadow),this.canvas.add(group),this.canvas.fire("path:created",{path:group}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=originalRenderOnAddRemove,this.canvas.requestRenderAll()},
/**
   * @private
   * @param {Array} rects
   */
_getOptimizedRects:function(rects){
// avoid creating duplicate rects at the same coordinates
var key,i,len,uniqueRects={};for(i=0,len=rects.length;i<len;i++)key=rects[i].left+""+rects[i].top,uniqueRects[key]||(uniqueRects[key]=rects[i]);var uniqueRectsArray=[];for(key in uniqueRects)uniqueRectsArray.push(uniqueRects[key]);return uniqueRectsArray},
/**
   * Render new chunk of spray brush
   */
render:function(sprayChunk){var i,len,ctx=this.canvas.contextTop;for(ctx.fillStyle=this.color,this._saveAndTransform(ctx),i=0,len=sprayChunk.length;i<len;i++){var point=sprayChunk[i];"undefined"!==typeof point.opacity&&(ctx.globalAlpha=point.opacity),ctx.fillRect(point.x,point.y,point.width,point.width)}ctx.restore()},
/**
   * Render all spray chunks
   */
_render:function(){var i,ilen,ctx=this.canvas.contextTop;for(ctx.fillStyle=this.color,this._saveAndTransform(ctx),i=0,ilen=this.sprayChunks.length;i<ilen;i++)this.render(this.sprayChunks[i]);ctx.restore()},
/**
   * @param {Object} pointer
   */
addSprayChunk:function(pointer){this.sprayChunkPoints=[];var x,y,width,i,radius=this.width/2;for(i=0;i<this.density;i++){x=fabric.util.getRandomInt(pointer.x-radius,pointer.x+radius),y=fabric.util.getRandomInt(pointer.y-radius,pointer.y+radius),width=this.dotWidthVariance?fabric.util.getRandomInt(
// bottom clamp width to 1
Math.max(1,this.dotWidth-this.dotWidthVariance),this.dotWidth+this.dotWidthVariance):this.dotWidth;var point=new fabric.Point(x,y);point.width=width,this.randomOpacity&&(point.opacity=fabric.util.getRandomInt(0,100)/100),this.sprayChunkPoints.push(point)}this.sprayChunks.push(this.sprayChunkPoints)}}),
/**
 * PatternBrush class
 * @class fabric.PatternBrush
 * @extends fabric.BaseBrush
 */
fabric.PatternBrush=fabric.util.createClass(fabric.PencilBrush,/** @lends fabric.PatternBrush.prototype */{getPatternSrc:function(){var dotWidth=20,dotDistance=5,patternCanvas=fabric.util.createCanvasElement(),patternCtx=patternCanvas.getContext("2d");return patternCanvas.width=patternCanvas.height=dotWidth+dotDistance,patternCtx.fillStyle=this.color,patternCtx.beginPath(),patternCtx.arc(dotWidth/2,dotWidth/2,dotWidth/2,0,2*Math.PI,!1),patternCtx.closePath(),patternCtx.fill(),patternCanvas},getPatternSrcFunction:function(){return String(this.getPatternSrc).replace("this.color",'"'+this.color+'"')},
/**
   * Creates "pattern" instance property
   */
getPattern:function(){return this.canvas.contextTop.createPattern(this.source||this.getPatternSrc(),"repeat")},
/**
   * Sets brush styles
   */
_setBrushStyles:function(){this.callSuper("_setBrushStyles"),this.canvas.contextTop.strokeStyle=this.getPattern()},
/**
   * Creates path
   */
createPath:function(pathData){var path=this.callSuper("createPath",pathData),topLeft=path._getLeftTopCoords().scalarAdd(path.strokeWidth/2);return path.stroke=new fabric.Pattern({source:this.source||this.getPatternSrcFunction(),offsetX:-topLeft.x,offsetY:-topLeft.y}),path}}),function(){var getPointer=fabric.util.getPointer,degreesToRadians=fabric.util.degreesToRadians,radiansToDegrees=fabric.util.radiansToDegrees,atan2=Math.atan2,abs=Math.abs,supportLineDash=fabric.StaticCanvas.supports("setLineDash"),STROKE_OFFSET=.5;
/**
   * Canvas class
   * @class fabric.Canvas
   * @extends fabric.StaticCanvas
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}
   * @see {@link fabric.Canvas#initialize} for constructor definition
   *
   * @fires object:modified at the end of a transform or any change when statefull is true
   * @fires object:rotated at the end of a rotation transform
   * @fires object:scaled at the end of a scale transform
   * @fires object:moved at the end of translation transform
   * @fires object:skewed at the end of a skew transform
   * @fires object:rotating while an object is being rotated from the control
   * @fires object:scaling while an object is being scaled by controls
   * @fires object:moving while an object is being dragged
   * @fires object:skewing while an object is being skewed from the controls
   * @fires object:selected this event is deprecated. use selection:created
   *
   * @fires before:transform before a transform is is started
   * @fires before:selection:cleared
   * @fires selection:cleared
   * @fires selection:updated
   * @fires selection:created
   *
   * @fires path:created after a drawing operation ends and the path is added
   * @fires mouse:down
   * @fires mouse:move
   * @fires mouse:up
   * @fires mouse:down:before  on mouse down, before the inner fabric logic runs
   * @fires mouse:move:before on mouse move, before the inner fabric logic runs
   * @fires mouse:up:before on mouse up, before the inner fabric logic runs
   * @fires mouse:over
   * @fires mouse:out
   * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.
   *
   * @fires dragover
   * @fires dragenter
   * @fires dragleave
   * @fires drop
   * @fires after:render at the end of the render process, receives the context in the callback
   * @fires before:render at start the render process, receives the context in the callback
   *
   */
// copying static properties manually to work around Opera's bug,
// where "prototype" property is enumerable and overrides existing prototype
for(var prop in fabric.Canvas=fabric.util.createClass(fabric.StaticCanvas,/** @lends fabric.Canvas.prototype */{
/**
     * Constructor
     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */
initialize:function(el,options){options||(options={}),this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(el,options),this._initInteractive(),this._createCacheCanvas()},
/**
     * When true, objects can be transformed by one side (unproportionally)
     * @type Boolean
     * @default
     */
uniScaleTransform:!1,
/**
     * Indicates which key enable unproportional scaling
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled feature disabled.
     * @since 1.6.2
     * @type String
     * @default
     */
uniScaleKey:"shiftKey",
/**
     * When true, objects use center point as the origin of scale transformation.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */
centeredScaling:!1,
/**
     * When true, objects use center point as the origin of rotate transformation.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */
centeredRotation:!1,
/**
     * Indicates which key enable centered Transform
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled feature disabled.
     * @since 1.6.2
     * @type String
     * @default
     */
centeredKey:"altKey",
/**
     * Indicates which key enable alternate action on corner
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled feature disabled.
     * @since 1.6.2
     * @type String
     * @default
     */
altActionKey:"shiftKey",
/**
     * Indicates that canvas is interactive. This property should not be changed.
     * @type Boolean
     * @default
     */
interactive:!0,
/**
     * Indicates whether group selection should be enabled
     * @type Boolean
     * @default
     */
selection:!0,
/**
     * Indicates which key or keys enable multiple click selection
     * Pass value as a string or array of strings
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or empty or containing any other string that is not a modifier key
     * feature is disabled.
     * @since 1.6.2
     * @type String|Array
     * @default
     */
selectionKey:"shiftKey",
/**
     * Indicates which key enable alternative selection
     * in case of target overlapping with active object
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * For a series of reason that come from the general expectations on how
     * things should work, this feature works only for preserveObjectStacking true.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled.
     * @since 1.6.5
     * @type null|String
     * @default
     */
altSelectionKey:null,
/**
     * Color of selection
     * @type String
     * @default
     */
selectionColor:"rgba(100, 100, 255, 0.3)",// blue
/**
     * Default dash array pattern
     * If not empty the selection border is dashed
     * @type Array
     */
selectionDashArray:[],
/**
     * Color of the border of selection (usually slightly darker than color of selection itself)
     * @type String
     * @default
     */
selectionBorderColor:"rgba(255, 255, 255, 0.3)",
/**
     * Width of a line used in object/group selection
     * @type Number
     * @default
     */
selectionLineWidth:1,
/**
     * Select only shapes that are fully contained in the dragged selection rectangle.
     * @type Boolean
     * @default
     */
selectionFullyContained:!1,
/**
     * Default cursor value used when hovering over an object on canvas
     * @type String
     * @default
     */
hoverCursor:"move",
/**
     * Default cursor value used when moving an object on canvas
     * @type String
     * @default
     */
moveCursor:"move",
/**
     * Default cursor value used for the entire canvas
     * @type String
     * @default
     */
defaultCursor:"default",
/**
     * Cursor value used during free drawing
     * @type String
     * @default
     */
freeDrawingCursor:"crosshair",
/**
     * Cursor value used for rotation point
     * @type String
     * @default
     */
rotationCursor:"crosshair",
/**
     * Cursor value used for disabled elements ( corners with disabled action )
     * @type String
     * @since 2.0.0
     * @default
     */
notAllowedCursor:"not-allowed",
/**
     * Default element class that's given to wrapper (div) element of canvas
     * @type String
     * @default
     */
containerClass:"canvas-container",
/**
     * When true, object detection happens on per-pixel basis rather than on per-bounding-box
     * @type Boolean
     * @default
     */
perPixelTargetFind:!1,
/**
     * Number of pixels around target pixel to tolerate (consider active) during object detection
     * @type Number
     * @default
     */
targetFindTolerance:0,
/**
     * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.
     * @type Boolean
     * @default
     */
skipTargetFind:!1,
/**
     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.
     * After mousedown, mousemove creates a shape,
     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.
     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}
     * @type Boolean
     * @default
     */
isDrawingMode:!1,
/**
     * Indicates whether objects should remain in current stack position when selected.
     * When false objects are brought to top and rendered as part of the selection group
     * @type Boolean
     * @default
     */
preserveObjectStacking:!1,
/**
     * Indicates the angle that an object will lock to while rotating.
     * @type Number
     * @since 1.6.7
     * @default
     */
snapAngle:0,
/**
     * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.
     * When `null`, the snapThreshold will default to the snapAngle.
     * @type null|Number
     * @since 1.6.7
     * @default
     */
snapThreshold:null,
/**
     * Indicates if the right click on canvas can output the context menu or not
     * @type Boolean
     * @since 1.6.5
     * @default
     */
stopContextMenu:!1,
/**
     * Indicates if the canvas can fire right click events
     * @type Boolean
     * @since 1.6.5
     * @default
     */
fireRightClick:!1,
/**
     * Indicates if the canvas can fire middle click events
     * @type Boolean
     * @since 1.7.8
     * @default
     */
fireMiddleClick:!1,
/**
     * Keep track of the subTargets for Mouse Events
     * @type fabric.Object[]
     */
targets:[],
/**
     * Keep track of the hovered target
     * @type fabric.Object
     * @private
     */
_hoveredTarget:null,
/**
     * hold the list of nested targets hovered
     * @type fabric.Object[]
     * @private
     */
_hoveredTargets:[],
/**
     * @private
     */
_initInteractive:function(){this._currentTransform=null,this._groupSelector=null,this._initWrapperElement(),this._createUpperCanvas(),this._initEventListeners(),this._initRetinaScaling(),this.freeDrawingBrush=fabric.PencilBrush&&new fabric.PencilBrush(this),this.calcOffset()},
/**
     * Divides objects in two groups, one to render immediately
     * and one to render as activeGroup.
     * @return {Array} objects to render immediately and pushes the other in the activeGroup.
     */
_chooseObjectsToRender:function(){var object,objsToRender,activeGroupObjects,activeObjects=this.getActiveObjects();if(activeObjects.length>0&&!this.preserveObjectStacking){objsToRender=[],activeGroupObjects=[];for(var i=0,length=this._objects.length;i<length;i++)object=this._objects[i],-1===activeObjects.indexOf(object)?objsToRender.push(object):activeGroupObjects.push(object);activeObjects.length>1&&(this._activeObject._objects=activeGroupObjects),objsToRender.push.apply(objsToRender,activeGroupObjects)}else objsToRender=this._objects;return objsToRender},
/**
     * Renders both the top canvas and the secondary container canvas.
     * @return {fabric.Canvas} instance
     * @chainable
     */
renderAll:function(){!this.contextTopDirty||this._groupSelector||this.isDrawingMode||(this.clearContext(this.contextTop),this.contextTopDirty=!1),this.hasLostContext&&this.renderTopLayer(this.contextTop);var canvasToDrawOn=this.contextContainer;return this.renderCanvas(canvasToDrawOn,this._chooseObjectsToRender()),this},renderTopLayer:function(ctx){ctx.save(),this.isDrawingMode&&this._isCurrentlyDrawing&&(this.freeDrawingBrush&&this.freeDrawingBrush._render(),this.contextTopDirty=!0),
// we render the top context - last object
this.selection&&this._groupSelector&&(this._drawSelection(ctx),this.contextTopDirty=!0),ctx.restore()},
/**
     * Method to render only the top canvas.
     * Also used to render the group selection box.
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
renderTop:function(){var ctx=this.contextTop;return this.clearContext(ctx),this.renderTopLayer(ctx),this.fire("after:render"),this},
/**
     * Resets the current transform to its original values and chooses the type of resizing based on the event
     * @private
     */
_resetCurrentTransform:function(){var t=this._currentTransform;t.target.set({scaleX:t.original.scaleX,scaleY:t.original.scaleY,skewX:t.original.skewX,skewY:t.original.skewY,left:t.original.left,top:t.original.top}),this._shouldCenterTransform(t.target)?("center"!==t.originX&&("right"===t.originX?t.mouseXSign=-1:t.mouseXSign=1),"center"!==t.originY&&("bottom"===t.originY?t.mouseYSign=-1:t.mouseYSign=1),t.originX="center",t.originY="center"):(t.originX=t.original.originX,t.originY=t.original.originY)},
/**
     * Checks if point is contained within an area of given object
     * @param {Event} e Event object
     * @param {fabric.Object} target Object to test against
     * @param {Object} [point] x,y object of point coordinates we want to check.
     * @return {Boolean} true if point is contained within an area of given object
     */
containsPoint:function(e,target,point){var xy,ignoreZoom=!0,pointer=point||this.getPointer(e,ignoreZoom);
// http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html
// http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html
return xy=target.group&&target.group===this._activeObject&&"activeSelection"===target.group.type?this._normalizePointer(target.group,pointer):{x:pointer.x,y:pointer.y},target.containsPoint(xy)||target._findTargetCorner(pointer)},
/**
     * @private
     */
_normalizePointer:function(object,pointer){var m=object.calcTransformMatrix(),invertedM=fabric.util.invertTransform(m),vptPointer=this.restorePointerVpt(pointer);return fabric.util.transformPoint(vptPointer,invertedM)},
/**
     * Returns true if object is transparent at a certain location
     * @param {fabric.Object} target Object to check
     * @param {Number} x Left coordinate
     * @param {Number} y Top coordinate
     * @return {Boolean}
     */
isTargetTransparent:function(target,x,y){
// in case the target is the activeObject, we cannot execute this optimization
// because we need to draw controls too.
if(target.shouldCache()&&target._cacheCanvas&&target!==this._activeObject){var normalizedPointer=this._normalizePointer(target,{x:x,y:y}),targetRelativeX=Math.max(target.cacheTranslationX+normalizedPointer.x*target.zoomX,0),targetRelativeY=Math.max(target.cacheTranslationY+normalizedPointer.y*target.zoomY,0),isTransparent=fabric.util.isTransparent(target._cacheContext,Math.round(targetRelativeX),Math.round(targetRelativeY),this.targetFindTolerance);return isTransparent}var ctx=this.contextCache,originalColor=target.selectionBackgroundColor,v=this.viewportTransform;target.selectionBackgroundColor="",this.clearContext(ctx),ctx.save(),ctx.transform(v[0],v[1],v[2],v[3],v[4],v[5]),target.render(ctx),ctx.restore(),target===this._activeObject&&target._renderControls(ctx,{hasBorders:!1,transparentCorners:!1},{hasBorders:!1}),target.selectionBackgroundColor=originalColor;isTransparent=fabric.util.isTransparent(ctx,x,y,this.targetFindTolerance);return isTransparent},
/**
     * takes an event and determins if selection key has been pressed
     * @private
     * @param {Event} e Event object
     */
_isSelectionKeyPressed:function(e){var selectionKeyPressed=!1;return selectionKeyPressed="[object Array]"===Object.prototype.toString.call(this.selectionKey)?!!this.selectionKey.find((function(key){return!0===e[key]})):e[this.selectionKey],selectionKeyPressed},
/**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     */
_shouldClearSelection:function(e,target){var activeObjects=this.getActiveObjects(),activeObject=this._activeObject;return!target||target&&activeObject&&activeObjects.length>1&&-1===activeObjects.indexOf(target)&&activeObject!==target&&!this._isSelectionKeyPressed(e)||target&&!target.evented||target&&!target.selectable&&activeObject&&activeObject!==target},
/**
     * centeredScaling from object can't override centeredScaling from canvas.
     * this should be fixed, since object setting should take precedence over canvas.
     * @private
     * @param {fabric.Object} target
     */
_shouldCenterTransform:function(target){if(target){var centerTransform,t=this._currentTransform;return"scale"===t.action||"scaleX"===t.action||"scaleY"===t.action?centerTransform=this.centeredScaling||target.centeredScaling:"rotate"===t.action&&(centerTransform=this.centeredRotation||target.centeredRotation),centerTransform?!t.altKey:t.altKey}},
/**
     * @private
     */
_getOriginFromCorner:function(target,corner){var origin={x:target.originX,y:target.originY};return"ml"===corner||"tl"===corner||"bl"===corner?origin.x="right":"mr"!==corner&&"tr"!==corner&&"br"!==corner||(origin.x="left"),"tl"===corner||"mt"===corner||"tr"===corner?origin.y="bottom":"bl"!==corner&&"mb"!==corner&&"br"!==corner||(origin.y="top"),origin},
/**
     * @private
     * @param {Boolean} alreadySelected true if target is already selected
     * @param {String} corner a string representing the corner ml, mr, tl ...
     * @param {Event} e Event object
     * @param {fabric.Object} [target] inserted back to help overriding. Unused
     */
_getActionFromCorner:function(alreadySelected,corner,e/* target */){if(!corner||!alreadySelected)return"drag";switch(corner){case"mtr":return"rotate";case"ml":case"mr":return e[this.altActionKey]?"skewY":"scaleX";case"mt":case"mb":return e[this.altActionKey]?"skewX":"scaleY";default:return"scale"}},
/**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     */
_setupCurrentTransform:function(e,target,alreadySelected){if(target){var pointer=this.getPointer(e),corner=target._findTargetCorner(this.getPointer(e,!0)),action=this._getActionFromCorner(alreadySelected,corner,e,target),origin=this._getOriginFromCorner(target,corner);this._currentTransform={target:target,action:action,corner:corner,scaleX:target.scaleX,scaleY:target.scaleY,skewX:target.skewX,skewY:target.skewY,
// used by transation
offsetX:pointer.x-target.left,offsetY:pointer.y-target.top,originX:origin.x,originY:origin.y,ex:pointer.x,ey:pointer.y,lastX:pointer.x,lastY:pointer.y,
// unsure they are usefull anymore.
// left: target.left,
// top: target.top,
theta:degreesToRadians(target.angle),
// end of unsure
width:target.width*target.scaleX,mouseXSign:1,mouseYSign:1,shiftKey:e.shiftKey,altKey:e[this.centeredKey],original:fabric.util.saveObjectTransform(target)},this._currentTransform.original.originX=origin.x,this._currentTransform.original.originY=origin.y,this._resetCurrentTransform(),this._beforeTransform(e)}},
/**
     * Translates object by "setting" its left/top
     * @private
     * @param {Number} x pointer's x coordinate
     * @param {Number} y pointer's y coordinate
     * @return {Boolean} true if the translation occurred
     */
_translateObject:function(x,y){var transform=this._currentTransform,target=transform.target,newLeft=x-transform.offsetX,newTop=y-transform.offsetY,moveX=!target.get("lockMovementX")&&target.left!==newLeft,moveY=!target.get("lockMovementY")&&target.top!==newTop;return moveX&&target.set("left",newLeft),moveY&&target.set("top",newTop),moveX||moveY},
/**
     * Check if we are increasing a positive skew or lower it,
     * checking mouse direction and pressed corner.
     * @private
     */
_changeSkewTransformOrigin:function(mouseMove,t,by){var property="originX",origins={0:"center"},skew=t.target.skewX,originA="left",originB="right",corner="mt"===t.corner||"ml"===t.corner?1:-1,flipSign=1;mouseMove=mouseMove>0?1:-1,"y"===by&&(skew=t.target.skewY,originA="top",originB="bottom",property="originY"),origins[-1]=originA,origins[1]=originB,t.target.flipX&&(flipSign*=-1),t.target.flipY&&(flipSign*=-1),0===skew?(t.skewSign=-corner*mouseMove*flipSign,t[property]=origins[-mouseMove]):(skew=skew>0?1:-1,t.skewSign=skew,t[property]=origins[skew*corner*flipSign])},
/**
     * Skew object by mouse events
     * @private
     * @param {Number} x pointer's x coordinate
     * @param {Number} y pointer's y coordinate
     * @param {String} by Either 'x' or 'y'
     * @return {Boolean} true if the skewing occurred
     */
_skewObject:function(x,y,by){var t=this._currentTransform,target=t.target,skewed=!1,lockSkewingX=target.get("lockSkewingX"),lockSkewingY=target.get("lockSkewingY");if(lockSkewingX&&"x"===by||lockSkewingY&&"y"===by)return!1;
// Get the constraint point
var actualMouseByOrigin,constraintPosition,center=target.getCenterPoint(),actualMouseByCenter=target.toLocalPoint(new fabric.Point(x,y),"center","center")[by],lastMouseByCenter=target.toLocalPoint(new fabric.Point(t.lastX,t.lastY),"center","center")[by],dim=target._getTransformedDimensions();return this._changeSkewTransformOrigin(actualMouseByCenter-lastMouseByCenter,t,by),actualMouseByOrigin=target.toLocalPoint(new fabric.Point(x,y),t.originX,t.originY)[by],constraintPosition=target.translateToOriginPoint(center,t.originX,t.originY),
// Actually skew the object
skewed=this._setObjectSkew(actualMouseByOrigin,t,by,dim),t.lastX=x,t.lastY=y,
// Make sure the constraints apply
target.setPositionByOrigin(constraintPosition,t.originX,t.originY),skewed},
/**
     * Set object skew
     * @private
     * @return {Boolean} true if the skewing occurred
     */
_setObjectSkew:function(localMouse,transform,by,_dim){var newValue,newDim,dimNoSkew,otherBy,_otherBy,_by,newDimMouse,skewX,skewY,target=transform.target,skewed=!1,skewSign=transform.skewSign;return"x"===by?(otherBy="y",_otherBy="Y",_by="X",skewX=0,skewY=target.skewY):(otherBy="x",_otherBy="X",_by="Y",skewX=target.skewX,skewY=0),dimNoSkew=target._getTransformedDimensions(skewX,skewY),newDimMouse=2*Math.abs(localMouse)-dimNoSkew[by],newDimMouse<=2?newValue=0:(newValue=skewSign*Math.atan(newDimMouse/target["scale"+_by]/(dimNoSkew[otherBy]/target["scale"+_otherBy])),newValue=fabric.util.radiansToDegrees(newValue)),skewed=target["skew"+_by]!==newValue,target.set("skew"+_by,newValue),0!==target["skew"+_otherBy]&&(newDim=target._getTransformedDimensions(),newValue=_dim[otherBy]/newDim[otherBy]*target["scale"+_otherBy],target.set("scale"+_otherBy,newValue)),skewed},
/**
     * Scales object by invoking its scaleX/scaleY methods
     * @private
     * @param {Number} x pointer's x coordinate
     * @param {Number} y pointer's y coordinate
     * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.
     *                    When not provided, an object is scaled by both dimensions equally
     * @return {Boolean} true if the scaling occurred
     */
_scaleObject:function(x,y,by){var t=this._currentTransform,target=t.target,lockScalingX=target.lockScalingX,lockScalingY=target.lockScalingY,lockScalingFlip=target.lockScalingFlip;if(lockScalingX&&lockScalingY)return!1;
// Get the constraint point
var constraintPosition=target.translateToOriginPoint(target.getCenterPoint(),t.originX,t.originY),localMouse=target.toLocalPoint(new fabric.Point(x,y),t.originX,t.originY),dim=target._getTransformedDimensions(),scaled=!1;return this._setLocalMouse(localMouse,t),
// Actually scale the object
scaled=this._setObjectScale(localMouse,t,lockScalingX,lockScalingY,by,lockScalingFlip,dim),
// Make sure the constraints apply
target.setPositionByOrigin(constraintPosition,t.originX,t.originY),scaled},
/**
     * @private
     * @return {Boolean} true if the scaling occurred
     */
_setObjectScale:function(localMouse,transform,lockScalingX,lockScalingY,by,lockScalingFlip,_dim){var target=transform.target,forbidScalingX=!1,forbidScalingY=!1,scaled=!1,scaleX=localMouse.x*target.scaleX/_dim.x,scaleY=localMouse.y*target.scaleY/_dim.y,changeX=target.scaleX!==scaleX,changeY=target.scaleY!==scaleY;if(transform.newScaleX=scaleX,transform.newScaleY=scaleY,fabric.Textbox&&"x"===by&&target instanceof fabric.Textbox){var w=target.width*(localMouse.x/_dim.x);return w>=target.getMinWidth()&&(scaled=w!==target.width,target.set("width",w),scaled)}return lockScalingFlip&&scaleX<=0&&scaleX<target.scaleX&&(forbidScalingX=!0,localMouse.x=0),lockScalingFlip&&scaleY<=0&&scaleY<target.scaleY&&(forbidScalingY=!0,localMouse.y=0),"equally"!==by||lockScalingX||lockScalingY?by?"x"!==by||target.get("lockUniScaling")?"y"!==by||target.get("lockUniScaling")||forbidScalingY||lockScalingY||target.set("scaleY",scaleY)&&(scaled=changeY):forbidScalingX||lockScalingX||target.set("scaleX",scaleX)&&(scaled=changeX):(forbidScalingX||lockScalingX||target.set("scaleX",scaleX)&&(scaled=scaled||changeX),forbidScalingY||lockScalingY||target.set("scaleY",scaleY)&&(scaled=scaled||changeY)):scaled=this._scaleObjectEqually(localMouse,target,transform,_dim),forbidScalingX||forbidScalingY||this._flipObject(transform,by),scaled},
/**
     * @private
     * @return {Boolean} true if the scaling occurred
     */
_scaleObjectEqually:function(localMouse,target,transform,_dim){var scaled,newScaleX,newScaleY,dist=localMouse.y+localMouse.x,lastDist=_dim.y*transform.original.scaleY/target.scaleY+_dim.x*transform.original.scaleX/target.scaleX,signX=localMouse.x<0?-1:1,signY=localMouse.y<0?-1:1;
// We use transform.scaleX/Y instead of target.scaleX/Y
// because the object may have a min scale and we'll loose the proportions
return newScaleX=signX*Math.abs(transform.original.scaleX*dist/lastDist),newScaleY=signY*Math.abs(transform.original.scaleY*dist/lastDist),scaled=newScaleX!==target.scaleX||newScaleY!==target.scaleY,target.set("scaleX",newScaleX),target.set("scaleY",newScaleY),scaled},
/**
     * @private
     */
_flipObject:function(transform,by){transform.newScaleX<0&&"y"!==by&&("left"===transform.originX?transform.originX="right":"right"===transform.originX&&(transform.originX="left")),transform.newScaleY<0&&"x"!==by&&("top"===transform.originY?transform.originY="bottom":"bottom"===transform.originY&&(transform.originY="top"))},
/**
     * @private
     */
_setLocalMouse:function(localMouse,t){var target=t.target,zoom=this.getZoom(),padding=target.padding/zoom;"right"===t.originX?localMouse.x*=-1:"center"===t.originX&&(localMouse.x*=2*t.mouseXSign,localMouse.x<0&&(t.mouseXSign=-t.mouseXSign)),"bottom"===t.originY?localMouse.y*=-1:"center"===t.originY&&(localMouse.y*=2*t.mouseYSign,localMouse.y<0&&(t.mouseYSign=-t.mouseYSign)),
// adjust the mouse coordinates when dealing with padding
abs(localMouse.x)>padding?localMouse.x<0?localMouse.x+=padding:localMouse.x-=padding:// mouse is within the padding, set to 0
localMouse.x=0,abs(localMouse.y)>padding?localMouse.y<0?localMouse.y+=padding:localMouse.y-=padding:localMouse.y=0},
/**
     * Rotates object by invoking its rotate method
     * @private
     * @param {Number} x pointer's x coordinate
     * @param {Number} y pointer's y coordinate
     * @return {Boolean} true if the rotation occurred
     */
_rotateObject:function(x,y){var t=this._currentTransform,target=t.target,constraintPosition=target.translateToOriginPoint(target.getCenterPoint(),t.originX,t.originY);if(target.lockRotation)return!1;var lastAngle=atan2(t.ey-constraintPosition.y,t.ex-constraintPosition.x),curAngle=atan2(y-constraintPosition.y,x-constraintPosition.x),angle=radiansToDegrees(curAngle-lastAngle+t.theta),hasRotated=!0;if(target.snapAngle>0){var snapAngle=target.snapAngle,snapThreshold=target.snapThreshold||snapAngle,rightAngleLocked=Math.ceil(angle/snapAngle)*snapAngle,leftAngleLocked=Math.floor(angle/snapAngle)*snapAngle;Math.abs(angle-leftAngleLocked)<snapThreshold?angle=leftAngleLocked:Math.abs(angle-rightAngleLocked)<snapThreshold&&(angle=rightAngleLocked)}
// normalize angle to positive value
return angle<0&&(angle=360+angle),angle%=360,target.angle===angle?hasRotated=!1:(
// rotation only happen here
target.angle=angle,
// Make sure the constraints apply
target.setPositionByOrigin(constraintPosition,t.originX,t.originY)),hasRotated},
/**
     * Set the cursor type of the canvas element
     * @param {String} value Cursor type of the canvas element.
     * @see http://www.w3.org/TR/css3-ui/#cursor
     */
setCursor:function(value){this.upperCanvasEl.style.cursor=value},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx to draw the selection on
     */
_drawSelection:function(ctx){var groupSelector=this._groupSelector,left=groupSelector.left,top=groupSelector.top,aleft=abs(left),atop=abs(top);if(this.selectionColor&&(ctx.fillStyle=this.selectionColor,ctx.fillRect(groupSelector.ex-(left>0?0:-left),groupSelector.ey-(top>0?0:-top),aleft,atop)),this.selectionLineWidth&&this.selectionBorderColor)
// selection border
if(ctx.lineWidth=this.selectionLineWidth,ctx.strokeStyle=this.selectionBorderColor,this.selectionDashArray.length>1&&!supportLineDash){var px=groupSelector.ex+STROKE_OFFSET-(left>0?0:aleft),py=groupSelector.ey+STROKE_OFFSET-(top>0?0:atop);ctx.beginPath(),fabric.util.drawDashedLine(ctx,px,py,px+aleft,py,this.selectionDashArray),fabric.util.drawDashedLine(ctx,px,py+atop-1,px+aleft,py+atop-1,this.selectionDashArray),fabric.util.drawDashedLine(ctx,px,py,px,py+atop,this.selectionDashArray),fabric.util.drawDashedLine(ctx,px+aleft-1,py,px+aleft-1,py+atop,this.selectionDashArray),ctx.closePath(),ctx.stroke()}else fabric.Object.prototype._setLineDash.call(this,ctx,this.selectionDashArray),ctx.strokeRect(groupSelector.ex+STROKE_OFFSET-(left>0?0:aleft),groupSelector.ey+STROKE_OFFSET-(top>0?0:atop),aleft,atop)},
/**
     * Method that determines what object we are clicking on
     * the skipGroup parameter is for internal use, is needed for shift+click action
     * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target
     * or the outside part of the corner.
     * @param {Event} e mouse event
     * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through
     * @return {fabric.Object} the target found
     */
findTarget:function(e,skipGroup){if(!this.skipTargetFind){var activeTarget,activeTargetSubs,ignoreZoom=!0,pointer=this.getPointer(e,ignoreZoom),activeObject=this._activeObject,aObjects=this.getActiveObjects();
// first check current group (if one exists)
// active group does not check sub targets like normal groups.
// if active group just exits.
if(this.targets=[],aObjects.length>1&&!skipGroup&&activeObject===this._searchPossibleTargets([activeObject],pointer))return activeObject;
// if we hit the corner of an activeObject, let's return that.
if(1===aObjects.length&&activeObject._findTargetCorner(pointer))return activeObject;if(1===aObjects.length&&activeObject===this._searchPossibleTargets([activeObject],pointer)){if(!this.preserveObjectStacking)return activeObject;activeTarget=activeObject,activeTargetSubs=this.targets,this.targets=[]}var target=this._searchPossibleTargets(this._objects,pointer);return e[this.altSelectionKey]&&target&&activeTarget&&target!==activeTarget&&(target=activeTarget,this.targets=activeTargetSubs),target}},
/**
     * Checks point is inside the object.
     * @param {Object} [pointer] x,y object of point coordinates we want to check.
     * @param {fabric.Object} obj Object to test against
     * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.
     * @return {Boolean} true if point is contained within an area of given object
     * @private
     */
_checkTarget:function(pointer,obj,globalPointer){if(obj&&obj.visible&&obj.evented&&this.containsPoint(null,obj,pointer)){if(!this.perPixelTargetFind&&!obj.perPixelTargetFind||obj.isEditing)return!0;var isTransparent=this.isTargetTransparent(obj,globalPointer.x,globalPointer.y);if(!isTransparent)return!0}},
/**
     * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted
     * @param {Array} [objects] objects array to look into
     * @param {Object} [pointer] x,y object of point coordinates we want to check.
     * @return {fabric.Object} object that contains pointer
     * @private
     */
_searchPossibleTargets:function(objects,pointer){
// Cache all targets where their bounding box contains point.
var target,subTarget,i=objects.length;
// Do not check for currently grouped objects, since we check the parent group itself.
// until we call this function specifically to search inside the activeGroup
while(i--){var objToCheck=objects[i],pointerToUse=objToCheck.group&&"activeSelection"!==objToCheck.group.type?this._normalizePointer(objToCheck.group,pointer):pointer;if(this._checkTarget(pointerToUse,objToCheck,pointer)){target=objects[i],target.subTargetCheck&&target instanceof fabric.Group&&(subTarget=this._searchPossibleTargets(target._objects,pointer),subTarget&&this.targets.push(subTarget));break}}return target},
/**
     * Returns pointer coordinates without the effect of the viewport
     * @param {Object} pointer with "x" and "y" number values
     * @return {Object} object with "x" and "y" number values
     */
restorePointerVpt:function(pointer){return fabric.util.transformPoint(pointer,fabric.util.invertTransform(this.viewportTransform))},
/**
     * Returns pointer coordinates relative to canvas.
     * Can return coordinates with or without viewportTransform.
     * ignoreZoom false gives back coordinates that represent
     * the point clicked on canvas element.
     * ignoreZoom true gives back coordinates after being processed
     * by the viewportTransform ( sort of coordinates of what is displayed
     * on the canvas where you are clicking.
     * ignoreZoom true = HTMLElement coordinates relative to top,left
     * ignoreZoom false, default = fabric space coordinates, the same used for shape position
     * To interact with your shapes top and left you want to use ignoreZoom true
     * most of the time, while ignoreZoom false will give you coordinates
     * compatible with the object.oCoords system.
     * of the time.
     * @param {Event} e
     * @param {Boolean} ignoreZoom
     * @return {Object} object with "x" and "y" number values
     */
getPointer:function(e,ignoreZoom){
// return cached values if we are in the event processing chain
if(this._absolutePointer&&!ignoreZoom)return this._absolutePointer;if(this._pointer&&ignoreZoom)return this._pointer;var cssScale,pointer=getPointer(e),upperCanvasEl=this.upperCanvasEl,bounds=upperCanvasEl.getBoundingClientRect(),boundsWidth=bounds.width||0,boundsHeight=bounds.height||0;boundsWidth&&boundsHeight||("top"in bounds&&"bottom"in bounds&&(boundsHeight=Math.abs(bounds.top-bounds.bottom)),"right"in bounds&&"left"in bounds&&(boundsWidth=Math.abs(bounds.right-bounds.left))),this.calcOffset(),pointer.x=pointer.x-this._offset.left,pointer.y=pointer.y-this._offset.top,ignoreZoom||(pointer=this.restorePointerVpt(pointer));var retinaScaling=this.getRetinaScaling();return 1!==retinaScaling&&(pointer.x/=retinaScaling,pointer.y/=retinaScaling),
// If bounds are not available (i.e. not visible), do not apply scale.
cssScale=0===boundsWidth||0===boundsHeight?{width:1,height:1}:{width:upperCanvasEl.width/boundsWidth,height:upperCanvasEl.height/boundsHeight},{x:pointer.x*cssScale.width,y:pointer.y*cssScale.height}},
/**
     * @private
     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized
     */
_createUpperCanvas:function(){var lowerCanvasClass=this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/,""),lowerCanvasEl=this.lowerCanvasEl,upperCanvasEl=this.upperCanvasEl;
// there is no need to create a new upperCanvas element if we have already one.
upperCanvasEl?upperCanvasEl.className="":(upperCanvasEl=this._createCanvasElement(),this.upperCanvasEl=upperCanvasEl),fabric.util.addClass(upperCanvasEl,"upper-canvas "+lowerCanvasClass),this.wrapperEl.appendChild(upperCanvasEl),this._copyCanvasStyle(lowerCanvasEl,upperCanvasEl),this._applyCanvasStyle(upperCanvasEl),this.contextTop=upperCanvasEl.getContext("2d")},
/**
     * @private
     */
_createCacheCanvas:function(){this.cacheCanvasEl=this._createCanvasElement(),this.cacheCanvasEl.setAttribute("width",this.width),this.cacheCanvasEl.setAttribute("height",this.height),this.contextCache=this.cacheCanvasEl.getContext("2d")},
/**
     * @private
     */
_initWrapperElement:function(){this.wrapperEl=fabric.util.wrapElement(this.lowerCanvasEl,"div",{class:this.containerClass}),fabric.util.setStyle(this.wrapperEl,{width:this.width+"px",height:this.height+"px",position:"relative"}),fabric.util.makeElementUnselectable(this.wrapperEl)},
/**
     * @private
     * @param {HTMLElement} element canvas element to apply styles on
     */
_applyCanvasStyle:function(element){var width=this.width||element.width,height=this.height||element.height;fabric.util.setStyle(element,{position:"absolute",width:width+"px",height:height+"px",left:0,top:0,"touch-action":this.allowTouchScrolling?"manipulation":"none","-ms-touch-action":this.allowTouchScrolling?"manipulation":"none"}),element.width=width,element.height=height,fabric.util.makeElementUnselectable(element)},
/**
     * Copy the entire inline style from one element (fromEl) to another (toEl)
     * @private
     * @param {Element} fromEl Element style is copied from
     * @param {Element} toEl Element copied style is applied to
     */
_copyCanvasStyle:function(fromEl,toEl){toEl.style.cssText=fromEl.style.cssText},
/**
     * Returns context of canvas where object selection is drawn
     * @return {CanvasRenderingContext2D}
     */
getSelectionContext:function(){return this.contextTop},
/**
     * Returns &lt;canvas> element on which object selection is drawn
     * @return {HTMLCanvasElement}
     */
getSelectionElement:function(){return this.upperCanvasEl},
/**
     * Returns currently active object
     * @return {fabric.Object} active object
     */
getActiveObject:function(){return this._activeObject},
/**
     * Returns an array with the current selected objects
     * @return {fabric.Object} active object
     */
getActiveObjects:function(){var active=this._activeObject;return active?"activeSelection"===active.type&&active._objects?active._objects.slice(0):[active]:[]},
/**
     * @private
     * @param {fabric.Object} obj Object that was removed
     */
_onObjectRemoved:function(obj){
// removing active object should fire "selection:cleared" events
obj===this._activeObject&&(this.fire("before:selection:cleared",{target:obj}),this._discardActiveObject(),this.fire("selection:cleared",{target:obj}),obj.fire("deselected")),obj===this._hoveredTarget&&(this._hoveredTarget=null,this._hoveredTargets=[]),this.callSuper("_onObjectRemoved",obj)},
/**
     * @private
     * Compares the old activeObject with the current one and fires correct events
     * @param {fabric.Object} obj old activeObject
     */
_fireSelectionEvents:function(oldObjects,e){var somethingChanged=!1,objects=this.getActiveObjects(),added=[],removed=[],opt={e:e};oldObjects.forEach((function(oldObject){-1===objects.indexOf(oldObject)&&(somethingChanged=!0,oldObject.fire("deselected",opt),removed.push(oldObject))})),objects.forEach((function(object){-1===oldObjects.indexOf(object)&&(somethingChanged=!0,object.fire("selected",opt),added.push(object))})),oldObjects.length>0&&objects.length>0?(opt.selected=added,opt.deselected=removed,
// added for backward compatibility
opt.updated=added[0]||removed[0],opt.target=this._activeObject,somethingChanged&&this.fire("selection:updated",opt)):objects.length>0?(
// deprecated event
1===objects.length&&(opt.target=added[0],this.fire("object:selected",opt)),opt.selected=added,
// added for backward compatibility
opt.target=this._activeObject,this.fire("selection:created",opt)):oldObjects.length>0&&(opt.deselected=removed,this.fire("selection:cleared",opt))},
/**
     * Sets given object as the only active object on canvas
     * @param {fabric.Object} object Object to set as an active one
     * @param {Event} [e] Event (passed along when firing "object:selected")
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
setActiveObject:function(object,e){var currentActives=this.getActiveObjects();return this._setActiveObject(object,e),this._fireSelectionEvents(currentActives,e),this},
/**
     * @private
     * @param {Object} object to set as active
     * @param {Event} [e] Event (passed along when firing "object:selected")
     * @return {Boolean} true if the selection happened
     */
_setActiveObject:function(object,e){return this._activeObject!==object&&(!!this._discardActiveObject(e,object)&&(!object.onSelect({e:e})&&(this._activeObject=object,!0)))},
/**
     * @private
     */
_discardActiveObject:function(e,object){var obj=this._activeObject;if(obj){
// onDeselect return TRUE to cancel selection;
if(obj.onDeselect({e:e,object:object}))return!1;this._activeObject=null}return!0},
/**
     * Discards currently active object and fire events. If the function is called by fabric
     * as a consequence of a mouse event, the event is passed as a parameter and
     * sent to the fire function for the custom events. When used as a method the
     * e param does not have any application.
     * @param {event} e
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
discardActiveObject:function(e){var currentActives=this.getActiveObjects(),activeObject=this.getActiveObject();return currentActives.length&&this.fire("before:selection:cleared",{target:activeObject,e:e}),this._discardActiveObject(e),this._fireSelectionEvents(currentActives,e),this},
/**
     * Clears a canvas element and removes all event listeners
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
dispose:function(){var wrapper=this.wrapperEl;return this.removeListeners(),wrapper.removeChild(this.upperCanvasEl),wrapper.removeChild(this.lowerCanvasEl),this.contextCache=null,this.contextTop=null,["upperCanvasEl","cacheCanvasEl"].forEach(function(element){fabric.util.cleanUpJsdomNode(this[element]),this[element]=void 0}.bind(this)),wrapper.parentNode&&wrapper.parentNode.replaceChild(this.lowerCanvasEl,this.wrapperEl),delete this.wrapperEl,fabric.StaticCanvas.prototype.dispose.call(this),this},
/**
     * Clears all contexts (background, main, top) of an instance
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
clear:function(){
// this.discardActiveGroup();
return this.discardActiveObject(),this.clearContext(this.contextTop),this.callSuper("clear")},
/**
     * Draws objects' controls (borders/controls)
     * @param {CanvasRenderingContext2D} ctx Context to render controls on
     */
drawControls:function(ctx){var activeObject=this._activeObject;activeObject&&activeObject._renderControls(ctx)},
/**
     * @private
     */
_toObject:function(instance,methodName,propertiesToInclude){
//If the object is part of the current selection group, it should
//be transformed appropriately
//i.e. it should be serialised as it would appear if the selection group
//were to be destroyed.
var originalProperties=this._realizeGroupTransformOnObject(instance),object=this.callSuper("_toObject",instance,methodName,propertiesToInclude);
//Undo the damage we did by changing all of its properties
return this._unwindGroupTransformOnObject(instance,originalProperties),object},
/**
     * Realises an object's group transformation on it
     * @private
     * @param {fabric.Object} [instance] the object to transform (gets mutated)
     * @returns the original values of instance which were changed
     */
_realizeGroupTransformOnObject:function(instance){if(instance.group&&"activeSelection"===instance.group.type&&this._activeObject===instance.group){var layoutProps=["angle","flipX","flipY","left","scaleX","scaleY","skewX","skewY","top"],originalValues={};
//Copy all the positionally relevant properties across now
return layoutProps.forEach((function(prop){originalValues[prop]=instance[prop]})),this._activeObject.realizeTransform(instance),originalValues}return null},
/**
     * Restores the changed properties of instance
     * @private
     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)
     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject
     */
_unwindGroupTransformOnObject:function(instance,originalValues){originalValues&&instance.set(originalValues)},
/**
     * @private
     */
_setSVGObject:function(markup,instance,reviver){
//If the object is in a selection group, simulate what would happen to that
//object when the group is deselected
var originalProperties=this._realizeGroupTransformOnObject(instance);this.callSuper("_setSVGObject",markup,instance,reviver),this._unwindGroupTransformOnObject(instance,originalProperties)},setViewportTransform:function(vpt){this.renderOnAddRemove&&this._activeObject&&this._activeObject.isEditing&&this._activeObject.clearContextTop(),fabric.StaticCanvas.prototype.setViewportTransform.call(this,vpt)}}),fabric.StaticCanvas)"prototype"!==prop&&(fabric.Canvas[prop]=fabric.StaticCanvas[prop])}(),function(){var cursorOffset={mt:0,// n
tr:1,// ne
mr:2,// e
br:3,// se
mb:4,// s
bl:5,// sw
ml:6,// w
tl:7},addListener=fabric.util.addListener,removeListener=fabric.util.removeListener,RIGHT_CLICK=3,MIDDLE_CLICK=2,LEFT_CLICK=1,addEventOptions={passive:!1};function checkClick(e,value){return e.button&&e.button===value-1}fabric.util.object.extend(fabric.Canvas.prototype,/** @lends fabric.Canvas.prototype */{
/**
     * Map of cursor style values for each of the object controls
     * @private
     */
cursorMap:["n-resize","ne-resize","e-resize","se-resize","s-resize","sw-resize","w-resize","nw-resize"],
/**
     * Contains the id of the touch event that owns the fabric transform
     * @type Number
     * @private
     */
mainTouchId:null,
/**
     * Adds mouse listeners to canvas
     * @private
     */
_initEventListeners:function(){
// in case we initialized the class twice. This should not happen normally
// but in some kind of applications where the canvas element may be changed
// this is a workaround to having double listeners.
this.removeListeners(),this._bindEvents(),this.addOrRemove(addListener,"add")},
/**
     * return an event prefix pointer or mouse.
     * @private
     */
_getEventPrefix:function(){return this.enablePointerEvents?"pointer":"mouse"},addOrRemove:function(functor,eventjsFunctor){var canvasElement=this.upperCanvasEl,eventTypePrefix=this._getEventPrefix();functor(fabric.window,"resize",this._onResize),functor(canvasElement,eventTypePrefix+"down",this._onMouseDown),functor(canvasElement,eventTypePrefix+"move",this._onMouseMove,addEventOptions),functor(canvasElement,eventTypePrefix+"out",this._onMouseOut),functor(canvasElement,eventTypePrefix+"enter",this._onMouseEnter),functor(canvasElement,"wheel",this._onMouseWheel),functor(canvasElement,"contextmenu",this._onContextMenu),functor(canvasElement,"dblclick",this._onDoubleClick),functor(canvasElement,"dragover",this._onDragOver),functor(canvasElement,"dragenter",this._onDragEnter),functor(canvasElement,"dragleave",this._onDragLeave),functor(canvasElement,"drop",this._onDrop),this.enablePointerEvents||functor(canvasElement,"touchstart",this._onTouchStart,addEventOptions),"undefined"!==typeof eventjs&&eventjsFunctor in eventjs&&(eventjs[eventjsFunctor](canvasElement,"gesture",this._onGesture),eventjs[eventjsFunctor](canvasElement,"drag",this._onDrag),eventjs[eventjsFunctor](canvasElement,"orientation",this._onOrientationChange),eventjs[eventjsFunctor](canvasElement,"shake",this._onShake),eventjs[eventjsFunctor](canvasElement,"longpress",this._onLongPress))},
/**
     * Removes all event listeners
     */
removeListeners:function(){this.addOrRemove(removeListener,"remove");
// if you dispose on a mouseDown, before mouse up, you need to clean document to...
var eventTypePrefix=this._getEventPrefix();removeListener(fabric.document,eventTypePrefix+"up",this._onMouseUp),removeListener(fabric.document,"touchend",this._onTouchEnd,addEventOptions),removeListener(fabric.document,eventTypePrefix+"move",this._onMouseMove,addEventOptions),removeListener(fabric.document,"touchmove",this._onMouseMove,addEventOptions)},
/**
     * @private
     */
_bindEvents:function(){this.eventsBound||(this._onMouseDown=this._onMouseDown.bind(this),this._onTouchStart=this._onTouchStart.bind(this),this._onMouseMove=this._onMouseMove.bind(this),this._onMouseUp=this._onMouseUp.bind(this),this._onTouchEnd=this._onTouchEnd.bind(this),this._onResize=this._onResize.bind(this),this._onGesture=this._onGesture.bind(this),this._onDrag=this._onDrag.bind(this),this._onShake=this._onShake.bind(this),this._onLongPress=this._onLongPress.bind(this),this._onOrientationChange=this._onOrientationChange.bind(this),this._onMouseWheel=this._onMouseWheel.bind(this),this._onMouseOut=this._onMouseOut.bind(this),this._onMouseEnter=this._onMouseEnter.bind(this),this._onContextMenu=this._onContextMenu.bind(this),this._onDoubleClick=this._onDoubleClick.bind(this),this._onDragOver=this._onDragOver.bind(this),this._onDragEnter=this._simpleEventHandler.bind(this,"dragenter"),this._onDragLeave=this._simpleEventHandler.bind(this,"dragleave"),this._onDrop=this._simpleEventHandler.bind(this,"drop"),this.eventsBound=!0)},
/**
     * @private
     * @param {Event} [e] Event object fired on Event.js gesture
     * @param {Event} [self] Inner Event object
     */
_onGesture:function(e,self){this.__onTransformGesture&&this.__onTransformGesture(e,self)},
/**
     * @private
     * @param {Event} [e] Event object fired on Event.js drag
     * @param {Event} [self] Inner Event object
     */
_onDrag:function(e,self){this.__onDrag&&this.__onDrag(e,self)},
/**
     * @private
     * @param {Event} [e] Event object fired on wheel event
     */
_onMouseWheel:function(e){this.__onMouseWheel(e)},
/**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
_onMouseOut:function(e){var target=this._hoveredTarget;this.fire("mouse:out",{target:target,e:e}),this._hoveredTarget=null,target&&target.fire("mouseout",{e:e});var _this=this;this._hoveredTargets.forEach((function(_target){_this.fire("mouse:out",{target:target,e:e}),_target&&target.fire("mouseout",{e:e})})),this._hoveredTargets=[],this._iTextInstances&&this._iTextInstances.forEach((function(obj){obj.isEditing&&obj.hiddenTextarea.focus()}))},
/**
     * @private
     * @param {Event} e Event object fired on mouseenter
     */
_onMouseEnter:function(e){
// This find target and consequent 'mouse:over' is used to
// clear old instances on hovered target.
// calling findTarget has the side effect of killing target.__corner.
// as a short term fix we are not firing this if we are currently transforming.
// as a long term fix we need to separate the action of finding a target with the
// side effects we added to it.
this.currentTransform||this.findTarget(e)||(this.fire("mouse:over",{target:null,e:e}),this._hoveredTarget=null,this._hoveredTargets=[])},
/**
     * @private
     * @param {Event} [e] Event object fired on Event.js orientation change
     * @param {Event} [self] Inner Event object
     */
_onOrientationChange:function(e,self){this.__onOrientationChange&&this.__onOrientationChange(e,self)},
/**
     * @private
     * @param {Event} [e] Event object fired on Event.js shake
     * @param {Event} [self] Inner Event object
     */
_onShake:function(e,self){this.__onShake&&this.__onShake(e,self)},
/**
     * @private
     * @param {Event} [e] Event object fired on Event.js shake
     * @param {Event} [self] Inner Event object
     */
_onLongPress:function(e,self){this.__onLongPress&&this.__onLongPress(e,self)},
/**
     * prevent default to allow drop event to be fired
     * @private
     * @param {Event} [e] Event object fired on Event.js shake
     */
_onDragOver:function(e){e.preventDefault();var target=this._simpleEventHandler("dragover",e);this._fireEnterLeaveEvents(target,e)},
/**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
_onContextMenu:function(e){return this.stopContextMenu&&(e.stopPropagation(),e.preventDefault()),!1},
/**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
_onDoubleClick:function(e){this._cacheTransformEventData(e),this._handleEvent(e,"dblclick"),this._resetTransformEventData(e)},
/**
     * Return a the id of an event.
     * returns either the pointerId or the identifier or 0 for the mouse event
     * @private
     * @param {Event} evt Event object
     */
getPointerId:function(evt){var changedTouches=evt.changedTouches;return changedTouches?changedTouches[0]&&changedTouches[0].identifier:this.enablePointerEvents?evt.pointerId:-1},
/**
     * Determines if an event has the id of the event that is considered main
     * @private
     * @param {evt} event Event object
     */
_isMainEvent:function(evt){return!0===evt.isPrimary||!1!==evt.isPrimary&&("touchend"===evt.type&&0===evt.touches.length||(!evt.changedTouches||evt.changedTouches[0].identifier===this.mainTouchId))},
/**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
_onTouchStart:function(e){e.preventDefault(),null===this.mainTouchId&&(this.mainTouchId=this.getPointerId(e)),this.__onMouseDown(e),this._resetTransformEventData();var canvasElement=this.upperCanvasEl,eventTypePrefix=this._getEventPrefix();addListener(fabric.document,"touchend",this._onTouchEnd,addEventOptions),addListener(fabric.document,"touchmove",this._onMouseMove,addEventOptions),
// Unbind mousedown to prevent double triggers from touch devices
removeListener(canvasElement,eventTypePrefix+"down",this._onMouseDown)},
/**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
_onMouseDown:function(e){this.__onMouseDown(e),this._resetTransformEventData();var canvasElement=this.upperCanvasEl,eventTypePrefix=this._getEventPrefix();removeListener(canvasElement,eventTypePrefix+"move",this._onMouseMove,addEventOptions),addListener(fabric.document,eventTypePrefix+"up",this._onMouseUp),addListener(fabric.document,eventTypePrefix+"move",this._onMouseMove,addEventOptions)},
/**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
_onTouchEnd:function(e){if(!(e.touches.length>0)){this.__onMouseUp(e),this._resetTransformEventData(),this.mainTouchId=null;var eventTypePrefix=this._getEventPrefix();removeListener(fabric.document,"touchend",this._onTouchEnd,addEventOptions),removeListener(fabric.document,"touchmove",this._onMouseMove,addEventOptions);var _this=this;this._willAddMouseDown&&clearTimeout(this._willAddMouseDown),this._willAddMouseDown=setTimeout((function(){
// Wait 400ms before rebinding mousedown to prevent double triggers
// from touch devices
addListener(_this.upperCanvasEl,eventTypePrefix+"down",_this._onMouseDown),_this._willAddMouseDown=0}),400)}},
/**
     * @private
     * @param {Event} e Event object fired on mouseup
     */
_onMouseUp:function(e){this.__onMouseUp(e),this._resetTransformEventData();var canvasElement=this.upperCanvasEl,eventTypePrefix=this._getEventPrefix();this._isMainEvent(e)&&(removeListener(fabric.document,eventTypePrefix+"up",this._onMouseUp),removeListener(fabric.document,eventTypePrefix+"move",this._onMouseMove,addEventOptions),addListener(canvasElement,eventTypePrefix+"move",this._onMouseMove,addEventOptions))},
/**
     * @private
     * @param {Event} e Event object fired on mousemove
     */
_onMouseMove:function(e){!this.allowTouchScrolling&&e.preventDefault&&e.preventDefault(),this.__onMouseMove(e)},
/**
     * @private
     */
_onResize:function(){this.calcOffset()},
/**
     * Decides whether the canvas should be redrawn in mouseup and mousedown events.
     * @private
     * @param {Object} target
     */
_shouldRender:function(target){var activeObject=this._activeObject;return!!(!!activeObject!==!!target||activeObject&&target&&activeObject!==target)||(activeObject&&activeObject.isEditing,!1)},
/**
     * Method that defines the actions when mouse is released on canvas.
     * The method resets the currentTransform parameters, store the image corner
     * position in the image object and render the canvas on top.
     * @private
     * @param {Event} e Event object fired on mouseup
     */
__onMouseUp:function(e){var target,transform=this._currentTransform,groupSelector=this._groupSelector,shouldRender=!1,isClick=!groupSelector||0===groupSelector.left&&0===groupSelector.top;
// if right/middle click just fire events and return
// target undefined will make the _handleEvent search the target
if(this._cacheTransformEventData(e),target=this._target,this._handleEvent(e,"up:before"),!checkClick(e,RIGHT_CLICK))return checkClick(e,MIDDLE_CLICK)?(this.fireMiddleClick&&this._handleEvent(e,"up",MIDDLE_CLICK,isClick),void this._resetTransformEventData()):void(this.isDrawingMode&&this._isCurrentlyDrawing?this._onMouseUpInDrawingMode(e):this._isMainEvent(e)&&(transform&&(this._finalizeCurrentTransform(e),shouldRender=transform.actionPerformed),isClick||(this._maybeGroupObjects(e),shouldRender||(shouldRender=this._shouldRender(target))),target&&(target.isMoving=!1),this._setCursorFromEvent(e,target),this._handleEvent(e,"up",LEFT_CLICK,isClick),this._groupSelector=null,this._currentTransform=null,
// reset the target information about which corner is selected
target&&(target.__corner=0),shouldRender?this.requestRenderAll():isClick||this.renderTop()));this.fireRightClick&&this._handleEvent(e,"up",RIGHT_CLICK,isClick)},
/**
     * @private
     * Handle event firing for target and subtargets
     * @param {Event} e event from mouse
     * @param {String} eventType event to fire (up, down or move)
     * @return {Fabric.Object} target return the the target found, for internal reasons.
     */
_simpleEventHandler:function(eventType,e){var target=this.findTarget(e),targets=this.targets,options={e:e,target:target,subTargets:targets};if(this.fire(eventType,options),target&&target.fire(eventType,options),!targets)return target;for(var i=0;i<targets.length;i++)targets[i].fire(eventType,options);return target},
/**
     * @private
     * Handle event firing for target and subtargets
     * @param {Event} e event from mouse
     * @param {String} eventType event to fire (up, down or move)
     * @param {fabric.Object} targetObj receiving event
     * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right
     * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.
     */
_handleEvent:function(e,eventType,button,isClick){var target=this._target,targets=this.targets||[],options={e:e,target:target,subTargets:targets,button:button||LEFT_CLICK,isClick:isClick||!1,pointer:this._pointer,absolutePointer:this._absolutePointer,transform:this._currentTransform};this.fire("mouse:"+eventType,options),target&&target.fire("mouse"+eventType,options);for(var i=0;i<targets.length;i++)targets[i].fire("mouse"+eventType,options)},
/**
     * @private
     * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event
     */
_finalizeCurrentTransform:function(e){var eventName,transform=this._currentTransform,target=transform.target,options={e:e,target:target,transform:transform};target._scaling&&(target._scaling=!1),target.setCoords(),(transform.actionPerformed||this.stateful&&target.hasStateChanged())&&(transform.actionPerformed&&(eventName=this._addEventOptions(options,transform),this._fire(eventName,options)),this._fire("modified",options))},
/**
     * Mutate option object in order to add by property and give back the event name.
     * @private
     * @param {Object} options to mutate
     * @param {Object} transform to inspect action from
     */
_addEventOptions:function(options,transform){
// we can probably add more details at low cost
// scale change, rotation changes, translation changes
var eventName,by;switch(transform.action){case"scaleX":eventName="scaled",by="x";break;case"scaleY":eventName="scaled",by="y";break;case"skewX":eventName="skewed",by="x";break;case"skewY":eventName="skewed",by="y";break;case"scale":eventName="scaled",by="equally";break;case"rotate":eventName="rotated";break;case"drag":eventName="moved";break}return options.by=by,eventName},
/**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
_onMouseDownInDrawingMode:function(e){this._isCurrentlyDrawing=!0,this.getActiveObject()&&this.discardActiveObject(e).requestRenderAll(),this.clipTo&&fabric.util.clipContext(this,this.contextTop);var pointer=this.getPointer(e);this.freeDrawingBrush.onMouseDown(pointer,{e:e,pointer:pointer}),this._handleEvent(e,"down")},
/**
     * @private
     * @param {Event} e Event object fired on mousemove
     */
_onMouseMoveInDrawingMode:function(e){if(this._isCurrentlyDrawing){var pointer=this.getPointer(e);this.freeDrawingBrush.onMouseMove(pointer,{e:e,pointer:pointer})}this.setCursor(this.freeDrawingCursor),this._handleEvent(e,"move")},
/**
     * @private
     * @param {Event} e Event object fired on mouseup
     */
_onMouseUpInDrawingMode:function(e){this.clipTo&&this.contextTop.restore();var pointer=this.getPointer(e);this._isCurrentlyDrawing=this.freeDrawingBrush.onMouseUp({e:e,pointer:pointer}),this._handleEvent(e,"up")},
/**
     * Method that defines the actions when mouse is clicked on canvas.
     * The method inits the currentTransform parameters and renders all the
     * canvas so the current image can be placed on the top canvas and the rest
     * in on the container one.
     * @private
     * @param {Event} e Event object fired on mousedown
     */
__onMouseDown:function(e){this._cacheTransformEventData(e),this._handleEvent(e,"down:before");var target=this._target;
// if right click just fire events
if(checkClick(e,RIGHT_CLICK))this.fireRightClick&&this._handleEvent(e,"down",RIGHT_CLICK);else if(checkClick(e,MIDDLE_CLICK))this.fireMiddleClick&&this._handleEvent(e,"down",MIDDLE_CLICK);else if(this.isDrawingMode)this._onMouseDownInDrawingMode(e);else if(this._isMainEvent(e)&&!this._currentTransform)
// ignore if some object is being transformed at this moment
{var pointer=this._pointer;
// save pointer for check in __onMouseUp event
this._previousPointer=pointer;var shouldRender=this._shouldRender(target),shouldGroup=this._shouldGroup(e,target);if(this._shouldClearSelection(e,target)?this.discardActiveObject(e):shouldGroup&&(this._handleGrouping(e,target),target=this._activeObject),!this.selection||target&&(target.selectable||target.isEditing||target===this._activeObject)||(this._groupSelector={ex:pointer.x,ey:pointer.y,top:0,left:0}),target){var alreadySelected=target===this._activeObject;target.selectable&&this.setActiveObject(target,e),target!==this._activeObject||!target.__corner&&shouldGroup||this._setupCurrentTransform(e,target,alreadySelected)}this._handleEvent(e,"down"),
// we must renderAll so that we update the visuals
(shouldRender||shouldGroup)&&this.requestRenderAll()}},
/**
     * reset cache form common information needed during event processing
     * @private
     */
_resetTransformEventData:function(){this._target=null,this._pointer=null,this._absolutePointer=null},
/**
     * Cache common information needed during event processing
     * @private
     * @param {Event} e Event object fired on event
     */
_cacheTransformEventData:function(e){
// reset in order to avoid stale caching
this._resetTransformEventData(),this._pointer=this.getPointer(e,!0),this._absolutePointer=this.restorePointerVpt(this._pointer),this._target=this._currentTransform?this._currentTransform.target:this.findTarget(e)||null},
/**
     * @private
     */
_beforeTransform:function(e){var t=this._currentTransform;this.stateful&&t.target.saveState(),this.fire("before:transform",{e:e,transform:t}),
// determine if it's a drag or rotate case
t.corner&&this.onBeforeScaleRotate(t.target)},
/**
     * Method that defines the actions when mouse is hovering the canvas.
     * The currentTransform parameter will define whether the user is rotating/scaling/translating
     * an image or neither of them (only hovering). A group selection is also possible and would cancel
     * all any other type of action.
     * In case of an image transformation only the top canvas will be rendered.
     * @private
     * @param {Event} e Event object fired on mousemove
     */
__onMouseMove:function(e){var target,pointer;if(this._handleEvent(e,"move:before"),this._cacheTransformEventData(e),this.isDrawingMode)this._onMouseMoveInDrawingMode(e);else if(this._isMainEvent(e)){var groupSelector=this._groupSelector;
// We initially clicked in an empty area, so we draw a box for multiple selection
groupSelector?(pointer=this._pointer,groupSelector.left=pointer.x-groupSelector.ex,groupSelector.top=pointer.y-groupSelector.ey,this.renderTop()):this._currentTransform?this._transformObject(e):(target=this.findTarget(e)||null,this._setCursorFromEvent(e,target),this._fireOverOutEvents(target,e)),this._handleEvent(e,"move"),this._resetTransformEventData()}},
/**
     * Manage the mouseout, mouseover events for the fabric object on the canvas
     * @param {Fabric.Object} target the target where the target from the mousemove event
     * @param {Event} e Event object fired on mousemove
     * @private
     */
_fireOverOutEvents:function(target,e){var _hoveredTarget=this._hoveredTarget,_hoveredTargets=this._hoveredTargets,targets=this.targets,length=Math.max(_hoveredTargets.length,targets.length);this.fireSyntheticInOutEvents(target,e,{oldTarget:_hoveredTarget,evtOut:"mouseout",canvasEvtOut:"mouse:out",evtIn:"mouseover",canvasEvtIn:"mouse:over"});for(var i=0;i<length;i++)this.fireSyntheticInOutEvents(targets[i],e,{oldTarget:_hoveredTargets[i],evtOut:"mouseout",evtIn:"mouseover"});this._hoveredTarget=target,this._hoveredTargets=this.targets.concat()},
/**
     * Manage the dragEnter, dragLeave events for the fabric objects on the canvas
     * @param {Fabric.Object} target the target where the target from the onDrag event
     * @param {Event} e Event object fired on ondrag
     * @private
     */
_fireEnterLeaveEvents:function(target,e){var _draggedoverTarget=this._draggedoverTarget,_hoveredTargets=this._hoveredTargets,targets=this.targets,length=Math.max(_hoveredTargets.length,targets.length);this.fireSyntheticInOutEvents(target,e,{oldTarget:_draggedoverTarget,evtOut:"dragleave",evtIn:"dragenter"});for(var i=0;i<length;i++)this.fireSyntheticInOutEvents(targets[i],e,{oldTarget:_hoveredTargets[i],evtOut:"dragleave",evtIn:"dragenter"});this._draggedoverTarget=target},
/**
     * Manage the synthetic in/out events for the fabric objects on the canvas
     * @param {Fabric.Object} target the target where the target from the supported events
     * @param {Event} e Event object fired
     * @param {Object} config configuration for the function to work
     * @param {String} config.targetName property on the canvas where the old target is stored
     * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out
     * @param {String} config.evtOut name of the event to fire for out
     * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in
     * @param {String} config.evtIn name of the event to fire for in
     * @private
     */
fireSyntheticInOutEvents:function(target,e,config){var inOpt,outOpt,outFires,inFires,oldTarget=config.oldTarget,targetChanged=oldTarget!==target,canvasEvtIn=config.canvasEvtIn,canvasEvtOut=config.canvasEvtOut;targetChanged&&(inOpt={e:e,target:target,previousTarget:oldTarget},outOpt={e:e,target:oldTarget,nextTarget:target}),inFires=target&&targetChanged,outFires=oldTarget&&targetChanged,outFires&&(canvasEvtOut&&this.fire(canvasEvtOut,outOpt),oldTarget.fire(config.evtOut,outOpt)),inFires&&(canvasEvtIn&&this.fire(canvasEvtIn,inOpt),target.fire(config.evtIn,inOpt))},
/**
     * Method that defines actions when an Event Mouse Wheel
     * @param {Event} e Event object fired on mouseup
     */
__onMouseWheel:function(e){this._cacheTransformEventData(e),this._handleEvent(e,"wheel"),this._resetTransformEventData()},
/**
     * @private
     * @param {Event} e Event fired on mousemove
     */
_transformObject:function(e){var pointer=this.getPointer(e),transform=this._currentTransform;transform.reset=!1,transform.target.isMoving=!0,transform.shiftKey=e.shiftKey,transform.altKey=e[this.centeredKey],this._beforeScaleTransform(e,transform),this._performTransformAction(e,transform,pointer),transform.actionPerformed&&this.requestRenderAll()},
/**
     * @private
     */
_performTransformAction:function(e,transform,pointer){var x=pointer.x,y=pointer.y,action=transform.action,actionPerformed=!1,options={target:transform.target,e:e,transform:transform,pointer:pointer};"rotate"===action?(actionPerformed=this._rotateObject(x,y))&&this._fire("rotating",options):"scale"===action?(actionPerformed=this._onScale(e,transform,x,y))&&this._fire("scaling",options):"scaleX"===action?(actionPerformed=this._scaleObject(x,y,"x"))&&this._fire("scaling",options):"scaleY"===action?(actionPerformed=this._scaleObject(x,y,"y"))&&this._fire("scaling",options):"skewX"===action?(actionPerformed=this._skewObject(x,y,"x"))&&this._fire("skewing",options):"skewY"===action?(actionPerformed=this._skewObject(x,y,"y"))&&this._fire("skewing",options):(actionPerformed=this._translateObject(x,y),actionPerformed&&(this._fire("moving",options),this.setCursor(options.target.moveCursor||this.moveCursor))),transform.actionPerformed=transform.actionPerformed||actionPerformed},
/**
     * @private
     */
_fire:function(eventName,options){this.fire("object:"+eventName,options),options.target.fire(eventName,options)},
/**
     * @private
     */
_beforeScaleTransform:function(e,transform){if("scale"===transform.action||"scaleX"===transform.action||"scaleY"===transform.action){var centerTransform=this._shouldCenterTransform(transform.target);
// Switch from a normal resize to center-based
(centerTransform&&("center"!==transform.originX||"center"!==transform.originY)||
// Switch from center-based resize to normal one
!centerTransform&&"center"===transform.originX&&"center"===transform.originY)&&(this._resetCurrentTransform(),transform.reset=!0)}},
/**
     * @private
     * @param {Event} e Event object
     * @param {Object} transform current transform
     * @param {Number} x mouse position x from origin
     * @param {Number} y mouse position y from origin
     * @return {Boolean} true if the scaling occurred
     */
_onScale:function(e,transform,x,y){return this._isUniscalePossible(e,transform.target)?(transform.currentAction="scale",this._scaleObject(x,y)):(
// Switch from a normal resize to proportional
transform.reset||"scale"!==transform.currentAction||this._resetCurrentTransform(),transform.currentAction="scaleEqually",this._scaleObject(x,y,"equally"))},
/**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target current target
     * @return {Boolean} true if unproportional scaling is possible
     */
_isUniscalePossible:function(e,target){return(e[this.uniScaleKey]||this.uniScaleTransform)&&!target.get("lockUniScaling")},
/**
     * Sets the cursor depending on where the canvas is being hovered.
     * Note: very buggy in Opera
     * @param {Event} e Event object
     * @param {Object} target Object that the mouse is hovering, if so.
     */
_setCursorFromEvent:function(e,target){if(!target)return this.setCursor(this.defaultCursor),!1;var hoverCursor=target.hoverCursor||this.hoverCursor,activeSelection=this._activeObject&&"activeSelection"===this._activeObject.type?this._activeObject:null,
// only show proper corner when group selection is not active
corner=(!activeSelection||!activeSelection.contains(target))&&target._findTargetCorner(this.getPointer(e,!0));corner?this.setCursor(this.getCornerCursor(corner,target,e)):(target.subTargetCheck&&
// hoverCursor should come from top-most subTarget,
// so we walk the array backwards
this.targets.concat().reverse().map((function(_target){hoverCursor=_target.hoverCursor||hoverCursor})),this.setCursor(hoverCursor))},
/**
     * @private
     */
getCornerCursor:function(corner,target,e){return this.actionIsDisabled(corner,target,e)?this.notAllowedCursor:corner in cursorOffset?this._getRotatedCornerCursor(corner,target,e):"mtr"===corner&&target.hasRotatingPoint?this.rotationCursor:this.defaultCursor},actionIsDisabled:function(corner,target,e){return"mt"===corner||"mb"===corner?e[this.altActionKey]?target.lockSkewingX:target.lockScalingY:"ml"===corner||"mr"===corner?e[this.altActionKey]?target.lockSkewingY:target.lockScalingX:"mtr"===corner?target.lockRotation:this._isUniscalePossible(e,target)?target.lockScalingX&&target.lockScalingY:target.lockScalingX||target.lockScalingY},
/**
     * @private
     */
_getRotatedCornerCursor:function(corner,target,e){var n=Math.round(target.angle%360/45);return n<0&&(n+=8),n+=cursorOffset[corner],e[this.altActionKey]&&cursorOffset[corner]%2===0&&(
//if we are holding shift and we are on a mx corner...
n+=2),
// normalize n to be from 0 to 7
n%=8,this.cursorMap[n]}})}(),function(){var min=Math.min,max=Math.max;fabric.util.object.extend(fabric.Canvas.prototype,/** @lends fabric.Canvas.prototype */{
/**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     * @return {Boolean}
     */
_shouldGroup:function(e,target){var activeObject=this._activeObject;return activeObject&&this._isSelectionKeyPressed(e)&&target&&target.selectable&&this.selection&&(activeObject!==target||"activeSelection"===activeObject.type)&&!target.onSelect({e:e})},
/**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     */
_handleGrouping:function(e,target){var activeObject=this._activeObject;
// avoid multi select when shift click on a corner
activeObject.__corner||(target!==activeObject||(
// if it's a group, find target again, using activeGroup objects
target=this.findTarget(e,!0),target&&target.selectable))&&(activeObject&&"activeSelection"===activeObject.type?this._updateActiveSelection(target,e):this._createActiveSelection(target,e))},
/**
     * @private
     */
_updateActiveSelection:function(target,e){var activeSelection=this._activeObject,currentActiveObjects=activeSelection._objects.slice(0);activeSelection.contains(target)?(activeSelection.removeWithUpdate(target),this._hoveredTarget=target,this._hoveredTargets=this.targets.concat(),1===activeSelection.size()&&
// activate last remaining object
this._setActiveObject(activeSelection.item(0),e)):(activeSelection.addWithUpdate(target),this._hoveredTarget=activeSelection,this._hoveredTargets=this.targets.concat()),this._fireSelectionEvents(currentActiveObjects,e)},
/**
     * @private
     */
_createActiveSelection:function(target,e){var currentActives=this.getActiveObjects(),group=this._createGroup(target);this._hoveredTarget=group,
// ISSUE 4115: should we consider subTargets here?
// this._hoveredTargets = [];
// this._hoveredTargets = this.targets.concat();
this._setActiveObject(group,e),this._fireSelectionEvents(currentActives,e)},
/**
     * @private
     * @param {Object} target
     */
_createGroup:function(target){var objects=this._objects,isActiveLower=objects.indexOf(this._activeObject)<objects.indexOf(target),groupObjects=isActiveLower?[this._activeObject,target]:[target,this._activeObject];return this._activeObject.isEditing&&this._activeObject.exitEditing(),new fabric.ActiveSelection(groupObjects,{canvas:this})},
/**
     * @private
     * @param {Event} e mouse event
     */
_groupSelectedObjects:function(e){var aGroup,group=this._collectObjects(e);
// do not create group for 1 element only
1===group.length?this.setActiveObject(group[0],e):group.length>1&&(aGroup=new fabric.ActiveSelection(group.reverse(),{canvas:this}),this.setActiveObject(aGroup,e))},
/**
     * @private
     */
_collectObjects:function(e){
// we iterate reverse order to collect top first in case of click.
for(var currentObject,group=[],x1=this._groupSelector.ex,y1=this._groupSelector.ey,x2=x1+this._groupSelector.left,y2=y1+this._groupSelector.top,selectionX1Y1=new fabric.Point(min(x1,x2),min(y1,y2)),selectionX2Y2=new fabric.Point(max(x1,x2),max(y1,y2)),allowIntersect=!this.selectionFullyContained,isClick=x1===x2&&y1===y2,i=this._objects.length;i--;)if(currentObject=this._objects[i],currentObject&&currentObject.selectable&&currentObject.visible&&(allowIntersect&&currentObject.intersectsWithRect(selectionX1Y1,selectionX2Y2)||currentObject.isContainedWithinRect(selectionX1Y1,selectionX2Y2)||allowIntersect&&currentObject.containsPoint(selectionX1Y1)||allowIntersect&&currentObject.containsPoint(selectionX2Y2))&&(group.push(currentObject),isClick))break;return group.length>1&&(group=group.filter((function(object){return!object.onSelect({e:e})}))),group},
/**
     * @private
     */
_maybeGroupObjects:function(e){this.selection&&this._groupSelector&&this._groupSelectedObjects(e),this.setCursor(this.defaultCursor),
// clear selection and current transformation
this._groupSelector=null}})}(),function(){fabric.util.object.extend(fabric.StaticCanvas.prototype,/** @lends fabric.StaticCanvas.prototype */{
/**
     * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately
     * @param {Object} [options] Options object
     * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
     * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent
     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0
     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
     * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}
     * @example <caption>Generate jpeg dataURL with lower quality</caption>
     * var dataURL = canvas.toDataURL({
     *   format: 'jpeg',
     *   quality: 0.8
     * });
     * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>
     * var dataURL = canvas.toDataURL({
     *   format: 'png',
     *   left: 100,
     *   top: 100,
     *   width: 200,
     *   height: 200
     * });
     * @example <caption>Generate double scaled png dataURL</caption>
     * var dataURL = canvas.toDataURL({
     *   format: 'png',
     *   multiplier: 2
     * });
     */
toDataURL:function(options){options||(options={});var format=options.format||"png",quality=options.quality||1,multiplier=(options.multiplier||1)*(options.enableRetinaScaling?this.getRetinaScaling():1),canvasEl=this.toCanvasElement(multiplier,options);return fabric.util.toDataURL(canvasEl,format,quality)},
/**
     * Create a new HTMLCanvas element painted with the current canvas content.
     * No need to resize the actual one or repaint it.
     * Will transfer object ownership to a new canvas, paint it, and set everything back.
     * This is an intermediary step used to get to a dataUrl but also it is useful to
     * create quick image copies of a canvas without passing for the dataUrl string
     * @param {Number} [multiplier] a zoom factor.
     * @param {Object} [cropping] Cropping informations
     * @param {Number} [cropping.left] Cropping left offset.
     * @param {Number} [cropping.top] Cropping top offset.
     * @param {Number} [cropping.width] Cropping width.
     * @param {Number} [cropping.height] Cropping height.
     */
toCanvasElement:function(multiplier,cropping){multiplier=multiplier||1,cropping=cropping||{};var scaledWidth=(cropping.width||this.width)*multiplier,scaledHeight=(cropping.height||this.height)*multiplier,zoom=this.getZoom(),originalWidth=this.width,originalHeight=this.height,newZoom=zoom*multiplier,vp=this.viewportTransform,translateX=(vp[4]-(cropping.left||0))*multiplier,translateY=(vp[5]-(cropping.top||0))*multiplier,originalInteractive=this.interactive,newVp=[newZoom,0,0,newZoom,translateX,translateY],originalRetina=this.enableRetinaScaling,canvasEl=fabric.util.createCanvasElement(),originalContextTop=this.contextTop;return canvasEl.width=scaledWidth,canvasEl.height=scaledHeight,this.contextTop=null,this.enableRetinaScaling=!1,this.interactive=!1,this.viewportTransform=newVp,this.width=scaledWidth,this.height=scaledHeight,this.calcViewportBoundaries(),this.renderCanvas(canvasEl.getContext("2d"),this._objects),this.viewportTransform=vp,this.width=originalWidth,this.height=originalHeight,this.calcViewportBoundaries(),this.interactive=originalInteractive,this.enableRetinaScaling=originalRetina,this.contextTop=originalContextTop,canvasEl}})}(),fabric.util.object.extend(fabric.StaticCanvas.prototype,/** @lends fabric.StaticCanvas.prototype */{
/**
   * Populates canvas with data from the specified dataless JSON.
   * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}
   * @deprecated since 1.2.2
   * @param {String|Object} json JSON string or object
   * @param {Function} callback Callback, invoked when json is parsed
   *                            and corresponding objects (e.g: {@link fabric.Image})
   *                            are initialized
   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.
   * @return {fabric.Canvas} instance
   * @chainable
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}
   */
loadFromDatalessJSON:function(json,callback,reviver){return this.loadFromJSON(json,callback,reviver)},
/**
   * Populates canvas with data from the specified JSON.
   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}
   * @param {String|Object} json JSON string or object
   * @param {Function} callback Callback, invoked when json is parsed
   *                            and corresponding objects (e.g: {@link fabric.Image})
   *                            are initialized
   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.
   * @return {fabric.Canvas} instance
   * @chainable
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}
   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}
   * @example <caption>loadFromJSON</caption>
   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));
   * @example <caption>loadFromJSON with reviver</caption>
   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {
   *   // `o` = json object
   *   // `object` = fabric.Object instance
   *   // ... do some stuff ...
   * });
   */
loadFromJSON:function(json,callback,reviver){if(json){
// serialize if it wasn't already
var serialized="string"===typeof json?JSON.parse(json):fabric.util.object.clone(json),_this=this,clipPath=serialized.clipPath,renderOnAddRemove=this.renderOnAddRemove;return this.renderOnAddRemove=!1,delete serialized.clipPath,this._enlivenObjects(serialized.objects,(function(enlivenedObjects){_this.clear(),_this._setBgOverlay(serialized,(function(){clipPath?_this._enlivenObjects([clipPath],(function(enlivenedCanvasClip){_this.clipPath=enlivenedCanvasClip[0],_this.__setupCanvas.call(_this,serialized,enlivenedObjects,renderOnAddRemove,callback)})):_this.__setupCanvas.call(_this,serialized,enlivenedObjects,renderOnAddRemove,callback)}))}),reviver),this}},
/**
   * @private
   * @param {Object} serialized Object with background and overlay information
   * @param {Array} restored canvas objects
   * @param {Function} cached renderOnAddRemove callback
   * @param {Function} callback Invoked after all background and overlay images/patterns loaded
   */
__setupCanvas:function(serialized,enlivenedObjects,renderOnAddRemove,callback){var _this=this;enlivenedObjects.forEach((function(obj,index){
// we splice the array just in case some custom classes restored from JSON
// will add more object to canvas at canvas init.
_this.insertAt(obj,index)})),this.renderOnAddRemove=renderOnAddRemove,
// remove parts i cannot set as options
delete serialized.objects,delete serialized.backgroundImage,delete serialized.overlayImage,delete serialized.background,delete serialized.overlay,
// this._initOptions does too many things to just
// call it. Normally loading an Object from JSON
// create the Object instance. Here the Canvas is
// already an instance and we are just loading things over it
this._setOptions(serialized),this.renderAll(),callback&&callback()},
/**
   * @private
   * @param {Object} serialized Object with background and overlay information
   * @param {Function} callback Invoked after all background and overlay images/patterns loaded
   */
_setBgOverlay:function(serialized,callback){var loaded={backgroundColor:!1,overlayColor:!1,backgroundImage:!1,overlayImage:!1};if(serialized.backgroundImage||serialized.overlayImage||serialized.background||serialized.overlay){var cbIfLoaded=function(){loaded.backgroundImage&&loaded.overlayImage&&loaded.backgroundColor&&loaded.overlayColor&&callback&&callback()};this.__setBgOverlay("backgroundImage",serialized.backgroundImage,loaded,cbIfLoaded),this.__setBgOverlay("overlayImage",serialized.overlayImage,loaded,cbIfLoaded),this.__setBgOverlay("backgroundColor",serialized.background,loaded,cbIfLoaded),this.__setBgOverlay("overlayColor",serialized.overlay,loaded,cbIfLoaded)}else callback&&callback()},
/**
   * @private
   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)
   * @param {(Object|String)} value Value to set
   * @param {Object} loaded Set loaded property to true if property is set
   * @param {Object} callback Callback function to invoke after property is set
   */
__setBgOverlay:function(property,value,loaded,callback){var _this=this;if(!value)return loaded[property]=!0,void(callback&&callback());"backgroundImage"===property||"overlayImage"===property?fabric.util.enlivenObjects([value],(function(enlivedObject){_this[property]=enlivedObject[0],loaded[property]=!0,callback&&callback()})):this["set"+fabric.util.string.capitalize(property,!0)](value,(function(){loaded[property]=!0,callback&&callback()}))},
/**
   * @private
   * @param {Array} objects
   * @param {Function} callback
   * @param {Function} [reviver]
   */
_enlivenObjects:function(objects,callback,reviver){objects&&0!==objects.length?fabric.util.enlivenObjects(objects,(function(enlivenedObjects){callback&&callback(enlivenedObjects)}),null,reviver):callback&&callback([])},
/**
   * @private
   * @param {String} format
   * @param {Function} callback
   */
_toDataURL:function(format,callback){this.clone((function(clone){callback(clone.toDataURL(format))}))},
/**
   * @private
   * @param {String} format
   * @param {Number} multiplier
   * @param {Function} callback
   */
_toDataURLWithMultiplier:function(format,multiplier,callback){this.clone((function(clone){callback(clone.toDataURLWithMultiplier(format,multiplier))}))},
/**
   * Clones canvas instance
   * @param {Object} [callback] Receives cloned instance as a first argument
   * @param {Array} [properties] Array of properties to include in the cloned canvas and children
   */
clone:function(callback,properties){var data=JSON.stringify(this.toJSON(properties));this.cloneWithoutData((function(clone){clone.loadFromJSON(data,(function(){callback&&callback(clone)}))}))},
/**
   * Clones canvas instance without cloning existing data.
   * This essentially copies canvas dimensions, clipping properties, etc.
   * but leaves data empty (so that you can populate it with your own)
   * @param {Object} [callback] Receives cloned instance as a first argument
   */
cloneWithoutData:function(callback){var el=fabric.util.createCanvasElement();el.width=this.width,el.height=this.height;var clone=new fabric.Canvas(el);clone.clipTo=this.clipTo,this.backgroundImage?(clone.setBackgroundImage(this.backgroundImage.src,(function(){clone.renderAll(),callback&&callback(clone)})),clone.backgroundImageOpacity=this.backgroundImageOpacity,clone.backgroundImageStretch=this.backgroundImageStretch):callback&&callback(clone)}}),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,clone=fabric.util.object.clone,toFixed=fabric.util.toFixed,capitalize=fabric.util.string.capitalize,degreesToRadians=fabric.util.degreesToRadians,supportsLineDash=fabric.StaticCanvas.supports("setLineDash"),objectCaching=!fabric.isLikelyNode,ALIASING_LIMIT=2;fabric.Object||(
/**
   * Root object class from which all 2d shape classes inherit from
   * @class fabric.Object
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}
   * @see {@link fabric.Object#initialize} for constructor definition
   *
   * @fires added
   * @fires removed
   *
   * @fires selected
   * @fires deselected
   * @fires modified
   * @fires modified
   * @fires moved
   * @fires scaled
   * @fires rotated
   * @fires skewed
   *
   * @fires rotating
   * @fires scaling
   * @fires moving
   * @fires skewing
   *
   * @fires mousedown
   * @fires mouseup
   * @fires mouseover
   * @fires mouseout
   * @fires mousewheel
   * @fires mousedblclick
   *
   * @fires dragover
   * @fires dragenter
   * @fires dragleave
   * @fires drop
   */
fabric.Object=fabric.util.createClass(fabric.CommonMethods,/** @lends fabric.Object.prototype */{
/**
     * Type of an object (rect, circle, path, etc.).
     * Note that this property is meant to be read-only and not meant to be modified.
     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.
     * @type String
     * @default
     */
type:"object",
/**
     * Horizontal origin of transformation of an object (one of "left", "right", "center")
     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups
     * @type String
     * @default
     */
originX:"left",
/**
     * Vertical origin of transformation of an object (one of "top", "bottom", "center")
     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups
     * @type String
     * @default
     */
originY:"top",
/**
     * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}
     * @type Number
     * @default
     */
top:0,
/**
     * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}
     * @type Number
     * @default
     */
left:0,
/**
     * Object width
     * @type Number
     * @default
     */
width:0,
/**
     * Object height
     * @type Number
     * @default
     */
height:0,
/**
     * Object scale factor (horizontal)
     * @type Number
     * @default
     */
scaleX:1,
/**
     * Object scale factor (vertical)
     * @type Number
     * @default
     */
scaleY:1,
/**
     * When true, an object is rendered as flipped horizontally
     * @type Boolean
     * @default
     */
flipX:!1,
/**
     * When true, an object is rendered as flipped vertically
     * @type Boolean
     * @default
     */
flipY:!1,
/**
     * Opacity of an object
     * @type Number
     * @default
     */
opacity:1,
/**
     * Angle of rotation of an object (in degrees)
     * @type Number
     * @default
     */
angle:0,
/**
     * Angle of skew on x axes of an object (in degrees)
     * @type Number
     * @default
     */
skewX:0,
/**
     * Angle of skew on y axes of an object (in degrees)
     * @type Number
     * @default
     */
skewY:0,
/**
     * Size of object's controlling corners (in pixels)
     * @type Number
     * @default
     */
cornerSize:13,
/**
     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)
     * @type Boolean
     * @default
     */
transparentCorners:!0,
/**
     * Default cursor value used when hovering over this object on canvas
     * @type String
     * @default
     */
hoverCursor:null,
/**
     * Default cursor value used when moving this object on canvas
     * @type String
     * @default
     */
moveCursor:null,
/**
     * Padding between object and its controlling borders (in pixels)
     * @type Number
     * @default
     */
padding:0,
/**
     * Color of controlling borders of an object (when it's active)
     * @type String
     * @default
     */
borderColor:"rgba(102,153,255,0.75)",
/**
     * Array specifying dash pattern of an object's borders (hasBorder must be true)
     * @since 1.6.2
     * @type Array
     */
borderDashArray:null,
/**
     * Color of controlling corners of an object (when it's active)
     * @type String
     * @default
     */
cornerColor:"rgba(102,153,255,0.5)",
/**
     * Color of controlling corners of an object (when it's active and transparentCorners false)
     * @since 1.6.2
     * @type String
     * @default
     */
cornerStrokeColor:null,
/**
     * Specify style of control, 'rect' or 'circle'
     * @since 1.6.2
     * @type String
     */
cornerStyle:"rect",
/**
     * Array specifying dash pattern of an object's control (hasBorder must be true)
     * @since 1.6.2
     * @type Array
     */
cornerDashArray:null,
/**
     * When true, this object will use center point as the origin of transformation
     * when being scaled via the controls.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */
centeredScaling:!1,
/**
     * When true, this object will use center point as the origin of transformation
     * when being rotated via the controls.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */
centeredRotation:!0,
/**
     * Color of object's fill
     * takes css colors https://www.w3.org/TR/css-color-3/
     * @type String
     * @default
     */
fill:"rgb(0,0,0)",
/**
     * Fill rule used to fill an object
     * accepted values are nonzero, evenodd
     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)
     * @type String
     * @default
     */
fillRule:"nonzero",
/**
     * Composite rule used for canvas globalCompositeOperation
     * @type String
     * @default
     */
globalCompositeOperation:"source-over",
/**
     * Background color of an object.
     * takes css colors https://www.w3.org/TR/css-color-3/
     * @type String
     * @default
     */
backgroundColor:"",
/**
     * Selection Background color of an object. colored layer behind the object when it is active.
     * does not mix good with globalCompositeOperation methods.
     * @type String
     * @default
     */
selectionBackgroundColor:"",
/**
     * When defined, an object is rendered via stroke and this property specifies its color
     * takes css colors https://www.w3.org/TR/css-color-3/
     * @type String
     * @default
     */
stroke:null,
/**
     * Width of a stroke used to render this object
     * @type Number
     * @default
     */
strokeWidth:1,
/**
     * Array specifying dash pattern of an object's stroke (stroke must be defined)
     * @type Array
     */
strokeDashArray:null,
/**
     * Line offset of an object's stroke
     * @type Number
     * @default
     */
strokeDashOffset:0,
/**
     * Line endings style of an object's stroke (one of "butt", "round", "square")
     * @type String
     * @default
     */
strokeLineCap:"butt",
/**
     * Corner style of an object's stroke (one of "bevil", "round", "miter")
     * @type String
     * @default
     */
strokeLineJoin:"miter",
/**
     * Maximum miter length (used for strokeLineJoin = "miter") of an object's stroke
     * @type Number
     * @default
     */
strokeMiterLimit:4,
/**
     * Shadow object representing shadow of this shape
     * @type fabric.Shadow
     * @default
     */
shadow:null,
/**
     * Opacity of object's controlling borders when object is active and moving
     * @type Number
     * @default
     */
borderOpacityWhenMoving:.4,
/**
     * Scale factor of object's controlling borders
     * bigger number will make a thicker border
     * border is 1, so this is basically a border tickness
     * since there is no way to change the border itself.
     * @type Number
     * @default
     */
borderScaleFactor:1,
/**
     * Transform matrix (similar to SVG's transform matrix)
     * This property has been depreacted. Since caching and and qrDecompose this
     * property can be handled with the standard top,left,scaleX,scaleY,angle and skewX.
     * A documentation example on how to parse and merge a transformMatrix will be provided before
     * completely removing it in fabric 4.0
     * If you are starting a project now, DO NOT use it.
     * @deprecated since 3.2.0
     * @type Array
     */
transformMatrix:null,
/**
     * Minimum allowed scale value of an object
     * @type Number
     * @default
     */
minScaleLimit:0,
/**
     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).
     * But events still fire on it.
     * @type Boolean
     * @default
     */
selectable:!0,
/**
     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4
     * @type Boolean
     * @default
     */
evented:!0,
/**
     * When set to `false`, an object is not rendered on canvas
     * @type Boolean
     * @default
     */
visible:!0,
/**
     * When set to `false`, object's controls are not displayed and can not be used to manipulate object
     * @type Boolean
     * @default
     */
hasControls:!0,
/**
     * When set to `false`, object's controlling borders are not rendered
     * @type Boolean
     * @default
     */
hasBorders:!0,
/**
     * When set to `false`, object's controlling rotating point will not be visible or selectable
     * @type Boolean
     * @default
     */
hasRotatingPoint:!0,
/**
     * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)
     * @type Number
     * @default
     */
rotatingPointOffset:40,
/**
     * When set to `true`, objects are "found" on canvas on per-pixel basis rather than according to bounding box
     * @type Boolean
     * @default
     */
perPixelTargetFind:!1,
/**
     * When `false`, default object's values are not included in its serialization
     * @type Boolean
     * @default
     */
includeDefaultValues:!0,
/**
     * Function that determines clipping of an object (context is passed as a first argument).
     * If you are using code minification, ctx argument can be minified/manglied you should use
     * as a workaround `var ctx = arguments[0];` in the function;
     * Note that context origin is at the object's center point (not left/top corner)
     * @deprecated since 2.0.0
     * @type Function
     */
clipTo:null,
/**
     * When `true`, object horizontal movement is locked
     * @type Boolean
     * @default
     */
lockMovementX:!1,
/**
     * When `true`, object vertical movement is locked
     * @type Boolean
     * @default
     */
lockMovementY:!1,
/**
     * When `true`, object rotation is locked
     * @type Boolean
     * @default
     */
lockRotation:!1,
/**
     * When `true`, object horizontal scaling is locked
     * @type Boolean
     * @default
     */
lockScalingX:!1,
/**
     * When `true`, object vertical scaling is locked
     * @type Boolean
     * @default
     */
lockScalingY:!1,
/**
     * When `true`, object non-uniform scaling is locked
     * @type Boolean
     * @default
     */
lockUniScaling:!1,
/**
     * When `true`, object horizontal skewing is locked
     * @type Boolean
     * @default
     */
lockSkewingX:!1,
/**
     * When `true`, object vertical skewing is locked
     * @type Boolean
     * @default
     */
lockSkewingY:!1,
/**
     * When `true`, object cannot be flipped by scaling into negative values
     * @type Boolean
     * @default
     */
lockScalingFlip:!1,
/**
     * When `true`, object is not exported in OBJECT/JSON
     * @since 1.6.3
     * @type Boolean
     * @default
     */
excludeFromExport:!1,
/**
     * When `true`, object is cached on an additional canvas.
     * When `false`, object is not cached unless necessary ( clipPath )
     * default to true
     * @since 1.7.0
     * @type Boolean
     * @default true
     */
objectCaching:objectCaching,
/**
     * When `true`, object properties are checked for cache invalidation. In some particular
     * situation you may want this to be disabled ( spray brush, very big, groups)
     * or if your application does not allow you to modify properties for groups child you want
     * to disable it for groups.
     * default to false
     * since 1.7.0
     * @type Boolean
     * @default false
     */
statefullCache:!1,
/**
     * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled
     * too much and will be redrawn with correct details at the end of scaling.
     * this setting is performance and application dependant.
     * default to true
     * since 1.7.0
     * @type Boolean
     * @default true
     */
noScaleCache:!0,
/**
     * When `false`, the stoke width will scale with the object.
     * When `true`, the stroke will always match the exact pixel size entered for stroke width.
     * default to false
     * @since 2.6.0
     * @type Boolean
     * @default false
     * @type Boolean
     * @default false
     */
strokeUniform:!1,
/**
     * When set to `true`, object's cache will be rerendered next render call.
     * since 1.7.0
     * @type Boolean
     * @default true
     */
dirty:!0,
/**
     * keeps the value of the last hovered corner during mouse move.
     * 0 is no corner, or 'mt', 'ml', 'mtr' etc..
     * It should be private, but there is no harm in using it as
     * a read-only property.
     * @type number|string|any
     * @default 0
     */
__corner:0,
/**
     * Determines if the fill or the stroke is drawn first (one of "fill" or "stroke")
     * @type String
     * @default
     */
paintFirst:"fill",
/**
     * List of properties to consider when checking if state
     * of an object is changed (fabric.Object#hasStateChanged)
     * as well as for history (undo/redo) purposes
     * @type Array
     */
stateProperties:"top left width height scaleX scaleY flipX flipY originX originY transformMatrix stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit angle opacity fill globalCompositeOperation shadow clipTo visible backgroundColor skewX skewY fillRule paintFirst clipPath strokeUniform".split(" "),
/**
     * List of properties to consider when checking if cache needs refresh
     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single
     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty
     * and refreshed at the next render
     * @type Array
     */
cacheProperties:"fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath".split(" "),
/**
     * a fabricObject that, without stroke define a clipping area with their shape. filled in black
     * the clipPath object gets used when the object has rendered, and the context is placed in the center
     * of the object cacheCanvas.
     * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'
     * @type fabric.Object
     */
clipPath:void 0,
/**
     * Meaningful ONLY when the object is used as clipPath.
     * if true, the clipPath will make the object clip to the outside of the clipPath
     * since 2.4.0
     * @type boolean
     * @default false
     */
inverted:!1,
/**
     * Meaningful ONLY when the object is used as clipPath.
     * if true, the clipPath will have its top and left relative to canvas, and will
     * not be influenced by the object transform. This will make the clipPath relative
     * to the canvas, but clipping just a particular object.
     * WARNING this is beta, this feature may change or be renamed.
     * since 2.4.0
     * @type boolean
     * @default false
     */
absolutePositioned:!1,
/**
     * Constructor
     * @param {Object} [options] Options object
     */
initialize:function(options){options&&this.setOptions(options)},
/**
     * Create a the canvas used to keep the cached copy of the object
     * @private
     */
_createCacheCanvas:function(){this._cacheProperties={},this._cacheCanvas=fabric.util.createCanvasElement(),this._cacheContext=this._cacheCanvas.getContext("2d"),this._updateCacheCanvas(),
// if canvas gets created, is empty, so dirty.
this.dirty=!0},
/**
     * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal
     * and each side do not cross fabric.cacheSideLimit
     * those numbers are configurable so that you can get as much detail as you want
     * making bargain with performances.
     * @param {Object} dims
     * @param {Object} dims.width width of canvas
     * @param {Object} dims.height height of canvas
     * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache
     * @return {Object}.width width of canvas
     * @return {Object}.height height of canvas
     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
     */
_limitCacheSize:function(dims){var perfLimitSizeTotal=fabric.perfLimitSizeTotal,width=dims.width,height=dims.height,max=fabric.maxCacheSideLimit,min=fabric.minCacheSideLimit;if(width<=max&&height<=max&&width*height<=perfLimitSizeTotal)return width<min&&(dims.width=min),height<min&&(dims.height=min),dims;var ar=width/height,limitedDims=fabric.util.limitDimsByArea(ar,perfLimitSizeTotal),capValue=fabric.util.capValue,x=capValue(min,limitedDims.x,max),y=capValue(min,limitedDims.y,max);return width>x&&(dims.zoomX/=width/x,dims.width=x,dims.capped=!0),height>y&&(dims.zoomY/=height/y,dims.height=y,dims.capped=!0),dims},
/**
     * Return the dimension and the zoom level needed to create a cache canvas
     * big enough to host the object to be cached.
     * @private
     * @return {Object}.x width of object to be cached
     * @return {Object}.y height of object to be cached
     * @return {Object}.width width of canvas
     * @return {Object}.height height of canvas
     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
     */
_getCacheCanvasDimensions:function(){var objectScale=this.getTotalObjectScaling(),
// caculate dimensions without skewing
dim=this._getTransformedDimensions(0,0),neededX=dim.x*objectScale.scaleX/this.scaleX,neededY=dim.y*objectScale.scaleY/this.scaleY;return{
// for sure this ALIASING_LIMIT is slightly creating problem
// in situation in which the cache canvas gets an upper limit
// also objectScale contains already scaleX and scaleY
width:neededX+ALIASING_LIMIT,height:neededY+ALIASING_LIMIT,zoomX:objectScale.scaleX,zoomY:objectScale.scaleY,x:neededX,y:neededY}},
/**
     * Update width and height of the canvas for cache
     * returns true or false if canvas needed resize.
     * @private
     * @return {Boolean} true if the canvas has been resized
     */
_updateCacheCanvas:function(){var targetCanvas=this.canvas;if(this.noScaleCache&&targetCanvas&&targetCanvas._currentTransform){var target=targetCanvas._currentTransform.target,action=targetCanvas._currentTransform.action;if(this===target&&action.slice&&"scale"===action.slice(0,5))return!1}var drawingWidth,drawingHeight,canvas=this._cacheCanvas,dims=this._limitCacheSize(this._getCacheCanvasDimensions()),minCacheSize=fabric.minCacheSideLimit,width=dims.width,height=dims.height,zoomX=dims.zoomX,zoomY=dims.zoomY,dimensionsChanged=width!==this.cacheWidth||height!==this.cacheHeight,zoomChanged=this.zoomX!==zoomX||this.zoomY!==zoomY,shouldRedraw=dimensionsChanged||zoomChanged,additionalWidth=0,additionalHeight=0,shouldResizeCanvas=!1;if(dimensionsChanged){var canvasWidth=this._cacheCanvas.width,canvasHeight=this._cacheCanvas.height,sizeGrowing=width>canvasWidth||height>canvasHeight,sizeShrinking=(width<.9*canvasWidth||height<.9*canvasHeight)&&canvasWidth>minCacheSize&&canvasHeight>minCacheSize;shouldResizeCanvas=sizeGrowing||sizeShrinking,sizeGrowing&&!dims.capped&&(width>minCacheSize||height>minCacheSize)&&(additionalWidth=.1*width,additionalHeight=.1*height)}return!!shouldRedraw&&(shouldResizeCanvas?(canvas.width=Math.ceil(width+additionalWidth),canvas.height=Math.ceil(height+additionalHeight)):(this._cacheContext.setTransform(1,0,0,1,0,0),this._cacheContext.clearRect(0,0,canvas.width,canvas.height)),drawingWidth=dims.x/2,drawingHeight=dims.y/2,this.cacheTranslationX=Math.round(canvas.width/2-drawingWidth)+drawingWidth,this.cacheTranslationY=Math.round(canvas.height/2-drawingHeight)+drawingHeight,this.cacheWidth=width,this.cacheHeight=height,this._cacheContext.translate(this.cacheTranslationX,this.cacheTranslationY),this._cacheContext.scale(zoomX,zoomY),this.zoomX=zoomX,this.zoomY=zoomY,!0)},
/**
     * Sets object's properties from options
     * @param {Object} [options] Options object
     */
setOptions:function(options){this._setOptions(options),this._initGradient(options.fill,"fill"),this._initGradient(options.stroke,"stroke"),this._initClipping(options),this._initPattern(options.fill,"fill"),this._initPattern(options.stroke,"stroke")},
/**
     * Transforms context when rendering an object
     * @param {CanvasRenderingContext2D} ctx Context
     */
transform:function(ctx){var m;m=this.group&&!this.group._transformDone?this.calcTransformMatrix():this.calcOwnMatrix(),ctx.transform(m[0],m[1],m[2],m[3],m[4],m[5])},
/**
     * Returns an object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */
toObject:function(propertiesToInclude){var NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS,object={type:this.type,version:fabric.version,originX:this.originX,originY:this.originY,left:toFixed(this.left,NUM_FRACTION_DIGITS),top:toFixed(this.top,NUM_FRACTION_DIGITS),width:toFixed(this.width,NUM_FRACTION_DIGITS),height:toFixed(this.height,NUM_FRACTION_DIGITS),fill:this.fill&&this.fill.toObject?this.fill.toObject():this.fill,stroke:this.stroke&&this.stroke.toObject?this.stroke.toObject():this.stroke,strokeWidth:toFixed(this.strokeWidth,NUM_FRACTION_DIGITS),strokeDashArray:this.strokeDashArray?this.strokeDashArray.concat():this.strokeDashArray,strokeLineCap:this.strokeLineCap,strokeDashOffset:this.strokeDashOffset,strokeLineJoin:this.strokeLineJoin,
// TODO: add this before release
// strokeUniform:            this.strokeUniform,
strokeMiterLimit:toFixed(this.strokeMiterLimit,NUM_FRACTION_DIGITS),scaleX:toFixed(this.scaleX,NUM_FRACTION_DIGITS),scaleY:toFixed(this.scaleY,NUM_FRACTION_DIGITS),angle:toFixed(this.angle,NUM_FRACTION_DIGITS),flipX:this.flipX,flipY:this.flipY,opacity:toFixed(this.opacity,NUM_FRACTION_DIGITS),shadow:this.shadow&&this.shadow.toObject?this.shadow.toObject():this.shadow,visible:this.visible,clipTo:this.clipTo&&String(this.clipTo),backgroundColor:this.backgroundColor,fillRule:this.fillRule,paintFirst:this.paintFirst,globalCompositeOperation:this.globalCompositeOperation,transformMatrix:this.transformMatrix?this.transformMatrix.concat():null,skewX:toFixed(this.skewX,NUM_FRACTION_DIGITS),skewY:toFixed(this.skewY,NUM_FRACTION_DIGITS)};return this.clipPath&&(object.clipPath=this.clipPath.toObject(propertiesToInclude),object.clipPath.inverted=this.clipPath.inverted,object.clipPath.absolutePositioned=this.clipPath.absolutePositioned),fabric.util.populateWithProperties(this,object,propertiesToInclude),this.includeDefaultValues||(object=this._removeDefaultValues(object)),object},
/**
     * Returns (dataless) object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */
toDatalessObject:function(propertiesToInclude){
// will be overwritten by subclasses
return this.toObject(propertiesToInclude)},
/**
     * @private
     * @param {Object} object
     */
_removeDefaultValues:function(object){var prototype=fabric.util.getKlass(object.type).prototype,stateProperties=prototype.stateProperties;return stateProperties.forEach((function(prop){if("left"!==prop&&"top"!==prop){object[prop]===prototype[prop]&&delete object[prop];var isArray="[object Array]"===Object.prototype.toString.call(object[prop])&&"[object Array]"===Object.prototype.toString.call(prototype[prop]);
// basically a check for [] === []
isArray&&0===object[prop].length&&0===prototype[prop].length&&delete object[prop]}})),object},
/**
     * Returns a string representation of an instance
     * @return {String}
     */
toString:function(){return"#<fabric."+capitalize(this.type)+">"},
/**
     * Return the object scale factor counting also the group scaling
     * @return {Object} object with scaleX and scaleY properties
     */
getObjectScaling:function(){var options=fabric.util.qrDecompose(this.calcTransformMatrix());return{scaleX:Math.abs(options.scaleX),scaleY:Math.abs(options.scaleY)}},
/**
     * Return the object scale factor counting also the group scaling, zoom and retina
     * @return {Object} object with scaleX and scaleY properties
     */
getTotalObjectScaling:function(){var scale=this.getObjectScaling(),scaleX=scale.scaleX,scaleY=scale.scaleY;if(this.canvas){var zoom=this.canvas.getZoom(),retina=this.canvas.getRetinaScaling();scaleX*=zoom*retina,scaleY*=zoom*retina}return{scaleX:scaleX,scaleY:scaleY}},
/**
     * Return the object opacity counting also the group property
     * @return {Number}
     */
getObjectOpacity:function(){var opacity=this.opacity;return this.group&&(opacity*=this.group.getObjectOpacity()),opacity},
/**
     * @private
     * @param {String} key
     * @param {*} value
     * @return {fabric.Object} thisArg
     */
_set:function(key,value){var shouldConstrainValue="scaleX"===key||"scaleY"===key,isChanged=this[key]!==value,groupNeedsUpdate=!1;return shouldConstrainValue&&(value=this._constrainScale(value)),"scaleX"===key&&value<0?(this.flipX=!this.flipX,value*=-1):"scaleY"===key&&value<0?(this.flipY=!this.flipY,value*=-1):"shadow"!==key||!value||value instanceof fabric.Shadow?"dirty"===key&&this.group&&this.group.set("dirty",value):value=new fabric.Shadow(value),this[key]=value,isChanged&&(groupNeedsUpdate=this.group&&this.group.isOnACache(),this.cacheProperties.indexOf(key)>-1?(this.dirty=!0,groupNeedsUpdate&&this.group.set("dirty",!0)):groupNeedsUpdate&&this.stateProperties.indexOf(key)>-1&&this.group.set("dirty",!0)),this},
/**
     * This callback function is called by the parent group of an object every
     * time a non-delegated property changes on the group. It is passed the key
     * and value as parameters. Not adding in this function's signature to avoid
     * Travis build error about unused variables.
     */
setOnGroup:function(){
// implemented by sub-classes, as needed.
},
/**
     * Retrieves viewportTransform from Object's canvas if possible
     * @method getViewportTransform
     * @memberOf fabric.Object.prototype
     * @return {Array}
     */
getViewportTransform:function(){return this.canvas&&this.canvas.viewportTransform?this.canvas.viewportTransform:fabric.iMatrix.concat()},
/*
     * @private
     * return if the object would be visible in rendering
     * @memberOf fabric.Object.prototype
     * @return {Boolean}
     */
isNotVisible:function(){return 0===this.opacity||0===this.width&&0===this.height&&0===this.strokeWidth||!this.visible},
/**
     * Renders an object on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
render:function(ctx){
// do not render if width/height are zeros or object is not visible
this.isNotVisible()||this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(ctx.save(),this._setupCompositeOperation(ctx),this.drawSelectionBackground(ctx),this.transform(ctx),this._setOpacity(ctx),this._setShadow(ctx,this),this.transformMatrix&&ctx.transform.apply(ctx,this.transformMatrix),this.clipTo&&fabric.util.clipContext(this,ctx),this.shouldCache()?(this.renderCache(),this.drawCacheOnCanvas(ctx)):(this._removeCacheCanvas(),this.dirty=!1,this.drawObject(ctx),this.objectCaching&&this.statefullCache&&this.saveState({propertySet:"cacheProperties"})),this.clipTo&&ctx.restore(),ctx.restore())},renderCache:function(options){options=options||{},this._cacheCanvas||this._createCacheCanvas(),this.isCacheDirty()&&(this.statefullCache&&this.saveState({propertySet:"cacheProperties"}),this.drawObject(this._cacheContext,options.forClipping),this.dirty=!1)},
/**
     * Remove cacheCanvas and its dimensions from the objects
     */
_removeCacheCanvas:function(){this._cacheCanvas=null,this.cacheWidth=0,this.cacheHeight=0},
/**
     * return true if the object will draw a stroke
     * Does not consider text styles. This is just a shortcut used at rendering time
     * We want it to be an aproximation and be fast.
     * wrote to avoid extra caching, it has to return true when stroke happens,
     * can guess when it will not happen at 100% chance, does not matter if it misses
     * some use case where the stroke is invisible.
     * @since 3.0.0
     * @returns Boolean
     */
hasStroke:function(){return this.stroke&&"transparent"!==this.stroke&&0!==this.strokeWidth},
/**
     * return true if the object will draw a fill
     * Does not consider text styles. This is just a shortcut used at rendering time
     * We want it to be an aproximation and be fast.
     * wrote to avoid extra caching, it has to return true when fill happens,
     * can guess when it will not happen at 100% chance, does not matter if it misses
     * some use case where the fill is invisible.
     * @since 3.0.0
     * @returns Boolean
     */
hasFill:function(){return this.fill&&"transparent"!==this.fill},
/**
     * When set to `true`, force the object to have its own cache, even if it is inside a group
     * it may be needed when your object behave in a particular way on the cache and always needs
     * its own isolated canvas to render correctly.
     * Created to be overridden
     * since 1.7.12
     * @returns Boolean
     */
needsItsOwnCache:function(){return!("stroke"!==this.paintFirst||!this.hasFill()||!this.hasStroke()||"object"!==typeof this.shadow)||!!this.clipPath},
/**
     * Decide if the object should cache or not. Create its own cache level
     * objectCaching is a global flag, wins over everything
     * needsItsOwnCache should be used when the object drawing method requires
     * a cache step. None of the fabric classes requires it.
     * Generally you do not cache objects in groups because the group outside is cached.
     * Read as: cache if is needed, or if the feature is enabled but we are not already caching.
     * @return {Boolean}
     */
shouldCache:function(){return this.ownCaching=this.needsItsOwnCache()||this.objectCaching&&(!this.group||!this.group.isOnACache()),this.ownCaching},
/**
     * Check if this object or a child object will cast a shadow
     * used by Group.shouldCache to know if child has a shadow recursively
     * @return {Boolean}
     */
willDrawShadow:function(){return!!this.shadow&&(0!==this.shadow.offsetX||0!==this.shadow.offsetY)},
/**
     * Execute the drawing operation for an object clipPath
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
drawClipPathOnCache:function(ctx){var path=this.clipPath;
//ctx.scale(1 / 2, 1 / 2);
if(ctx.save(),
// DEBUG: uncomment this line, comment the following
// ctx.globalAlpha = 0.4
path.inverted?ctx.globalCompositeOperation="destination-out":ctx.globalCompositeOperation="destination-in",path.absolutePositioned){var m=fabric.util.invertTransform(this.calcTransformMatrix());ctx.transform(m[0],m[1],m[2],m[3],m[4],m[5])}path.transform(ctx),ctx.scale(1/path.zoomX,1/path.zoomY),ctx.drawImage(path._cacheCanvas,-path.cacheTranslationX,-path.cacheTranslationY),ctx.restore()},
/**
     * Execute the drawing operation for an object on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
drawObject:function(ctx,forClipping){var originalFill=this.fill,originalStroke=this.stroke;forClipping?(this.fill="black",this.stroke="",this._setClippingProperties(ctx)):(this._renderBackground(ctx),this._setStrokeStyles(ctx,this),this._setFillStyles(ctx,this)),this._render(ctx),this._drawClipPath(ctx),this.fill=originalFill,this.stroke=originalStroke},_drawClipPath:function(ctx){var path=this.clipPath;path&&(
// needed to setup a couple of variables
// path canvas gets overridden with this one.
// TODO find a better solution?
path.canvas=this.canvas,path.shouldCache(),path._transformDone=!0,path.renderCache({forClipping:!0}),this.drawClipPathOnCache(ctx))},
/**
     * Paint the cached copy of the object on the target context.
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
drawCacheOnCanvas:function(ctx){ctx.scale(1/this.zoomX,1/this.zoomY),ctx.drawImage(this._cacheCanvas,-this.cacheTranslationX,-this.cacheTranslationY)},
/**
     * Check if cache is dirty
     * @param {Boolean} skipCanvas skip canvas checks because this object is painted
     * on parent canvas.
     */
isCacheDirty:function(skipCanvas){if(this.isNotVisible())return!1;if(this._cacheCanvas&&!skipCanvas&&this._updateCacheCanvas())
// in this case the context is already cleared.
return!0;if(this.dirty||this.clipPath&&this.clipPath.absolutePositioned||this.statefullCache&&this.hasStateChanged("cacheProperties")){if(this._cacheCanvas&&!skipCanvas){var width=this.cacheWidth/this.zoomX,height=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-width/2,-height/2,width,height)}return!0}return!1},
/**
     * Draws a background for the object big as its untransformed dimensions
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderBackground:function(ctx){if(this.backgroundColor){var dim=this._getNonTransformedDimensions();ctx.fillStyle=this.backgroundColor,ctx.fillRect(-dim.x/2,-dim.y/2,dim.x,dim.y),
// if there is background color no other shadows
// should be casted
this._removeShadow(ctx)}},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_setOpacity:function(ctx){this.group&&!this.group._transformDone?ctx.globalAlpha=this.getObjectOpacity():ctx.globalAlpha*=this.opacity},_setStrokeStyles:function(ctx,decl){decl.stroke&&(ctx.lineWidth=decl.strokeWidth,ctx.lineCap=decl.strokeLineCap,ctx.lineDashOffset=decl.strokeDashOffset,ctx.lineJoin=decl.strokeLineJoin,ctx.miterLimit=decl.strokeMiterLimit,ctx.strokeStyle=decl.stroke.toLive?decl.stroke.toLive(ctx,this):decl.stroke)},_setFillStyles:function(ctx,decl){decl.fill&&(ctx.fillStyle=decl.fill.toLive?decl.fill.toLive(ctx,this):decl.fill)},_setClippingProperties:function(ctx){ctx.globalAlpha=1,ctx.strokeStyle="transparent",ctx.fillStyle="#000000"},
/**
     * @private
     * Sets line dash
     * @param {CanvasRenderingContext2D} ctx Context to set the dash line on
     * @param {Array} dashArray array representing dashes
     * @param {Function} alternative function to call if browser does not support lineDash
     */
_setLineDash:function(ctx,dashArray,alternative){dashArray&&0!==dashArray.length&&(
// Spec requires the concatenation of two copies the dash list when the number of elements is odd
1&dashArray.length&&dashArray.push.apply(dashArray,dashArray),supportsLineDash?ctx.setLineDash(dashArray):alternative&&alternative(ctx))},
/**
     * Renders controls and borders for the object
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Object} [styleOverride] properties to override the object style
     */
_renderControls:function(ctx,styleOverride){var options,drawBorders,drawControls,vpt=this.getViewportTransform(),matrix=this.calcTransformMatrix();styleOverride=styleOverride||{},drawBorders="undefined"!==typeof styleOverride.hasBorders?styleOverride.hasBorders:this.hasBorders,drawControls="undefined"!==typeof styleOverride.hasControls?styleOverride.hasControls:this.hasControls,matrix=fabric.util.multiplyTransformMatrices(vpt,matrix),options=fabric.util.qrDecompose(matrix),ctx.save(),ctx.translate(options.translateX,options.translateY),ctx.lineWidth=1*this.borderScaleFactor,this.group||(ctx.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1),styleOverride.forActiveSelection?(ctx.rotate(degreesToRadians(options.angle)),drawBorders&&this.drawBordersInGroup(ctx,options,styleOverride)):(ctx.rotate(degreesToRadians(this.angle)),drawBorders&&this.drawBorders(ctx,styleOverride)),drawControls&&this.drawControls(ctx,styleOverride),ctx.restore()},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_setShadow:function(ctx){if(this.shadow){var scaling,shadow=this.shadow,canvas=this.canvas,multX=canvas&&canvas.viewportTransform[0]||1,multY=canvas&&canvas.viewportTransform[3]||1;scaling=shadow.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),canvas&&canvas._isRetinaScaling()&&(multX*=fabric.devicePixelRatio,multY*=fabric.devicePixelRatio),ctx.shadowColor=shadow.color,ctx.shadowBlur=shadow.blur*fabric.browserShadowBlurConstant*(multX+multY)*(scaling.scaleX+scaling.scaleY)/4,ctx.shadowOffsetX=shadow.offsetX*multX*scaling.scaleX,ctx.shadowOffsetY=shadow.offsetY*multY*scaling.scaleY}},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_removeShadow:function(ctx){this.shadow&&(ctx.shadowColor="",ctx.shadowBlur=ctx.shadowOffsetX=ctx.shadowOffsetY=0)},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Object} filler fabric.Pattern or fabric.Gradient
     * @return {Object} offset.offsetX offset for text rendering
     * @return {Object} offset.offsetY offset for text rendering
     */
_applyPatternGradientTransform:function(ctx,filler){if(!filler||!filler.toLive)return{offsetX:0,offsetY:0};var t=filler.gradientTransform||filler.patternTransform,offsetX=-this.width/2+filler.offsetX||0,offsetY=-this.height/2+filler.offsetY||0;return"percentage"===filler.gradientUnits?ctx.transform(this.width,0,0,this.height,offsetX,offsetY):ctx.transform(1,0,0,1,offsetX,offsetY),t&&ctx.transform(t[0],t[1],t[2],t[3],t[4],t[5]),{offsetX:offsetX,offsetY:offsetY}},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderPaintInOrder:function(ctx){"stroke"===this.paintFirst?(this._renderStroke(ctx),this._renderFill(ctx)):(this._renderFill(ctx),this._renderStroke(ctx))},
/**
     * @private
     * function that actually render something on the context.
     * empty here to allow Obects to work on tests to benchmark fabric functionalites
     * not related to rendering
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_render:function(){},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderFill:function(ctx){this.fill&&(ctx.save(),this._applyPatternGradientTransform(ctx,this.fill),"evenodd"===this.fillRule?ctx.fill("evenodd"):ctx.fill(),ctx.restore())},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderStroke:function(ctx){if(this.stroke&&0!==this.strokeWidth){if(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(ctx),ctx.save(),this.strokeUniform&&this.group){var scaling=this.getObjectScaling();ctx.scale(1/scaling.scaleX,1/scaling.scaleY)}else this.strokeUniform&&ctx.scale(1/this.scaleX,1/this.scaleY);this._setLineDash(ctx,this.strokeDashArray,this._renderDashedStroke),this.stroke.toLive&&"percentage"===this.stroke.gradientUnits?
// need to transform gradient in a pattern.
// this is a slow process. If you are hitting this codepath, and the object
// is not using caching, you should consider switching it on.
// we need a canvas as big as the current object caching canvas.
this._applyPatternForTransformedGradient(ctx,this.stroke):this._applyPatternGradientTransform(ctx,this.stroke),ctx.stroke(),ctx.restore()}},
/**
     * This function try to patch the missing gradientTransform on canvas gradients.
     * transforming a context to transform the gradient, is going to transform the stroke too.
     * we want to transform the gradient but not the stroke operation, so we create
     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.
     * this method has drwabacks: is slow, is in low resolution, needs a patch for when the size
     * is limited.
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {fabric.Gradient} filler a fabric gradient instance
     */
_applyPatternForTransformedGradient:function(ctx,filler){var pCtx,dims=this._limitCacheSize(this._getCacheCanvasDimensions()),pCanvas=fabric.util.createCanvasElement(),retinaScaling=this.canvas.getRetinaScaling(),width=dims.x/this.scaleX/retinaScaling,height=dims.y/this.scaleY/retinaScaling;pCanvas.width=width,pCanvas.height=height,pCtx=pCanvas.getContext("2d"),pCtx.beginPath(),pCtx.moveTo(0,0),pCtx.lineTo(width,0),pCtx.lineTo(width,height),pCtx.lineTo(0,height),pCtx.closePath(),pCtx.translate(width/2,height/2),pCtx.scale(dims.zoomX/this.scaleX/retinaScaling,dims.zoomY/this.scaleY/retinaScaling),this._applyPatternGradientTransform(pCtx,filler),pCtx.fillStyle=filler.toLive(ctx),pCtx.fill(),ctx.translate(-this.width/2-this.strokeWidth/2,-this.height/2-this.strokeWidth/2),ctx.scale(retinaScaling*this.scaleX/dims.zoomX,retinaScaling*this.scaleY/dims.zoomY),ctx.strokeStyle=pCtx.createPattern(pCanvas,"no-repeat")},
/**
     * This function is an helper for svg import. it returns the center of the object in the svg
     * untransformed coordinates
     * @private
     * @return {Object} center point from element coordinates
     */
_findCenterFromElement:function(){return{x:this.left+this.width/2,y:this.top+this.height/2}},
/**
     * This function is an helper for svg import. it decompose the transformMatrix
     * and assign properties to object.
     * untransformed coordinates
     * @private
     * @chainable
     */
_assignTransformMatrixProps:function(){if(this.transformMatrix){var options=fabric.util.qrDecompose(this.transformMatrix);this.flipX=!1,this.flipY=!1,this.set("scaleX",options.scaleX),this.set("scaleY",options.scaleY),this.angle=options.angle,this.skewX=options.skewX,this.skewY=0}},
/**
     * This function is an helper for svg import. it removes the transform matrix
     * and set to object properties that fabricjs can handle
     * @private
     * @param {Object} preserveAspectRatioOptions
     * @return {thisArg}
     */
_removeTransformMatrix:function(preserveAspectRatioOptions){var center=this._findCenterFromElement();this.transformMatrix&&(this._assignTransformMatrixProps(),center=fabric.util.transformPoint(center,this.transformMatrix)),this.transformMatrix=null,preserveAspectRatioOptions&&(this.scaleX*=preserveAspectRatioOptions.scaleX,this.scaleY*=preserveAspectRatioOptions.scaleY,this.cropX=preserveAspectRatioOptions.cropX,this.cropY=preserveAspectRatioOptions.cropY,center.x+=preserveAspectRatioOptions.offsetLeft,center.y+=preserveAspectRatioOptions.offsetTop,this.width=preserveAspectRatioOptions.width,this.height=preserveAspectRatioOptions.height),this.setPositionByOrigin(center,"center","center")},
/**
     * Clones an instance, using a callback method will work for every object.
     * @param {Function} callback Callback is invoked with a clone as a first argument
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     */
clone:function(callback,propertiesToInclude){var objectForm=this.toObject(propertiesToInclude);this.constructor.fromObject?this.constructor.fromObject(objectForm,callback):fabric.Object._fromObject("Object",objectForm,callback)},
/**
     * Creates an instance of fabric.Image out of an object
     * could make use of both toDataUrl or toCanvasElement.
     * @param {Function} callback callback, invoked with an instance as a first argument
     * @param {Object} [options] for clone as image, passed to toDataURL
     * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
     * @param {Number} [options.multiplier=1] Multiplier to scale by
     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
     * @return {fabric.Object} thisArg
     */
cloneAsImage:function(callback,options){var canvasEl=this.toCanvasElement(options);return callback&&callback(new fabric.Image(canvasEl)),this},
/**
     * Converts an object into a HTMLCanvas element
     * @param {Object} options Options object
     * @param {Number} [options.multiplier=1] Multiplier to scale by
     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
     * @return {HTMLCanvasElement} Returns DOM element <canvas> with the fabric.Object
     */
toCanvasElement:function(options){options||(options={});var utils=fabric.util,origParams=utils.saveObjectTransform(this),originalGroup=this.group,originalShadow=this.shadow,abs=Math.abs,multiplier=(options.multiplier||1)*(options.enableRetinaScaling?fabric.devicePixelRatio:1);delete this.group,options.withoutTransform&&utils.resetObjectTransform(this),options.withoutShadow&&(this.shadow=null);var scaling,shadowBlur,width,height,el=fabric.util.createCanvasElement(),
// skip canvas zoom and calculate with setCoords now.
boundingRect=this.getBoundingRect(!0,!0),shadow=this.shadow,shadowOffset={x:0,y:0};shadow&&(shadowBlur=shadow.blur,scaling=shadow.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),
// consider non scaling shadow.
shadowOffset.x=2*Math.round(abs(shadow.offsetX)+shadowBlur)*abs(scaling.scaleX),shadowOffset.y=2*Math.round(abs(shadow.offsetY)+shadowBlur)*abs(scaling.scaleY)),width=boundingRect.width+shadowOffset.x,height=boundingRect.height+shadowOffset.y,
// if the current width/height is not an integer
// we need to make it so.
el.width=Math.ceil(width),el.height=Math.ceil(height);var canvas=new fabric.StaticCanvas(el,{enableRetinaScaling:!1,renderOnAddRemove:!1,skipOffscreen:!1});"jpeg"===options.format&&(canvas.backgroundColor="#fff"),this.setPositionByOrigin(new fabric.Point(canvas.width/2,canvas.height/2),"center","center");var originalCanvas=this.canvas;canvas.add(this);var canvasEl=canvas.toCanvasElement(multiplier||1,options);return this.shadow=originalShadow,this.set("canvas",originalCanvas),originalGroup&&(this.group=originalGroup),this.set(origParams).setCoords(),
// canvas.dispose will call image.dispose that will nullify the elements
// since this canvas is a simple element for the process, we remove references
// to objects in this way in order to avoid object trashing.
canvas._objects=[],canvas.dispose(),canvas=null,canvasEl},
/**
     * Converts an object into a data-url-like string
     * @param {Object} options Options object
     * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
     * @param {Number} [options.multiplier=1] Multiplier to scale by
     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
     */
toDataURL:function(options){return options||(options={}),fabric.util.toDataURL(this.toCanvasElement(options),options.format||"png",options.quality||1)},
/**
     * Returns true if specified type is identical to the type of an instance
     * @param {String} type Type to check against
     * @return {Boolean}
     */
isType:function(type){return this.type===type},
/**
     * Returns complexity of an instance
     * @return {Number} complexity of this instance (is 1 unless subclassed)
     */
complexity:function(){return 1},
/**
     * Returns a JSON representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} JSON
     */
toJSON:function(propertiesToInclude){
// delegate, not alias
return this.toObject(propertiesToInclude)},
/**
     * Sets gradient (fill or stroke) of an object
     * percentages for x1,x2,y1,y2,r1,r2 together with gradientUnits 'pixels', are not supported.
     * <b>Backwards incompatibility note:</b> This method was named "setGradientFill" until v1.1.0
     * @param {String} property Property name 'stroke' or 'fill'
     * @param {Object} [options] Options object
     * @param {String} [options.type] Type of gradient 'radial' or 'linear'
     * @param {Number} [options.x1=0] x-coordinate of start point
     * @param {Number} [options.y1=0] y-coordinate of start point
     * @param {Number} [options.x2=0] x-coordinate of end point
     * @param {Number} [options.y2=0] y-coordinate of end point
     * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)
     * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)
     * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}
     * @param {Object} [options.gradientTransform] transformMatrix for gradient
     * @return {fabric.Object} thisArg
     * @chainable
     * @deprecated since 3.4.0
     * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}
     * @example <caption>Set linear gradient</caption>
     * object.setGradient('fill', {
     *   type: 'linear',
     *   x1: -object.width / 2,
     *   y1: 0,
     *   x2: object.width / 2,
     *   y2: 0,
     *   colorStops: {
     *     0: 'red',
     *     0.5: '#005555',
     *     1: 'rgba(0,0,255,0.5)'
     *   }
     * });
     * canvas.renderAll();
     * @example <caption>Set radial gradient</caption>
     * object.setGradient('fill', {
     *   type: 'radial',
     *   x1: 0,
     *   y1: 0,
     *   x2: 0,
     *   y2: 0,
     *   r1: object.width / 2,
     *   r2: 10,
     *   colorStops: {
     *     0: 'red',
     *     0.5: '#005555',
     *     1: 'rgba(0,0,255,0.5)'
     *   }
     * });
     * canvas.renderAll();
     */
setGradient:function(property,options){options||(options={});var gradient={colorStops:[]};return gradient.type=options.type||(options.r1||options.r2?"radial":"linear"),gradient.coords={x1:options.x1,y1:options.y1,x2:options.x2,y2:options.y2},gradient.gradientUnits=options.gradientUnits||"pixels",(options.r1||options.r2)&&(gradient.coords.r1=options.r1,gradient.coords.r2=options.r2),gradient.gradientTransform=options.gradientTransform,fabric.Gradient.prototype.addColorStop.call(gradient,options.colorStops),this.set(property,fabric.Gradient.forObject(this,gradient))},
/**
     * Sets pattern fill of an object
     * @param {Object} options Options object
     * @param {(String|HTMLImageElement)} options.source Pattern source
     * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)
     * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner
     * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner
     * @param {Function} [callback] Callback to invoke when image set as a pattern
     * @return {fabric.Object} thisArg
     * @chainable
     * @deprecated since 3.5.0
     * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}
     * @example <caption>Set pattern</caption>
     * object.setPatternFill({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
     *   repeat: 'repeat'
     * },canvas.renderAll.bind(canvas));
     */
setPatternFill:function(options,callback){return this.set("fill",new fabric.Pattern(options,callback))},
/**
     * Sets {@link fabric.Object#shadow|shadow} of an object
     * @param {Object|String} [options] Options object or string (e.g. "2px 2px 10px rgba(0,0,0,0.2)")
     * @param {String} [options.color=rgb(0,0,0)] Shadow color
     * @param {Number} [options.blur=0] Shadow blur
     * @param {Number} [options.offsetX=0] Shadow horizontal offset
     * @param {Number} [options.offsetY=0] Shadow vertical offset
     * @return {fabric.Object} thisArg
     * @chainable
     * @deprecated since 3.5.0
     * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}
     * @example <caption>Set shadow with string notation</caption>
     * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');
     * canvas.renderAll();
     * @example <caption>Set shadow with object notation</caption>
     * object.setShadow({
     *   color: 'red',
     *   blur: 10,
     *   offsetX: 20,
     *   offsetY: 20
     * });
     * canvas.renderAll();
     */
setShadow:function(options){return this.set("shadow",options?new fabric.Shadow(options):null)},
/**
     * Sets "color" of an instance (alias of `set('fill', &hellip;)`)
     * @param {String} color Color value
     * @return {fabric.Object} thisArg
     * @deprecated since 3.5.0
     * @chainable
     */
setColor:function(color){return this.set("fill",color),this},
/**
     * Sets "angle" of an instance with centered rotation
     * @param {Number} angle Angle value (in degrees)
     * @return {fabric.Object} thisArg
     * @chainable
     */
rotate:function(angle){var shouldCenterOrigin=("center"!==this.originX||"center"!==this.originY)&&this.centeredRotation;return shouldCenterOrigin&&this._setOriginToCenter(),this.set("angle",angle),shouldCenterOrigin&&this._resetOrigin(),this},
/**
     * Centers object horizontally on canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
centerH:function(){return this.canvas&&this.canvas.centerObjectH(this),this},
/**
     * Centers object horizontally on current viewport of canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
viewportCenterH:function(){return this.canvas&&this.canvas.viewportCenterObjectH(this),this},
/**
     * Centers object vertically on canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
centerV:function(){return this.canvas&&this.canvas.centerObjectV(this),this},
/**
     * Centers object vertically on current viewport of canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
viewportCenterV:function(){return this.canvas&&this.canvas.viewportCenterObjectV(this),this},
/**
     * Centers object vertically and horizontally on canvas to which is was added last
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
center:function(){return this.canvas&&this.canvas.centerObject(this),this},
/**
     * Centers object on current viewport of canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
viewportCenter:function(){return this.canvas&&this.canvas.viewportCenterObject(this),this},
/**
     * Returns coordinates of a pointer relative to an object
     * @param {Event} e Event to operate upon
     * @param {Object} [pointer] Pointer to operate upon (instead of event)
     * @return {Object} Coordinates of a pointer (x, y)
     */
getLocalPointer:function(e,pointer){pointer=pointer||this.canvas.getPointer(e);var pClicked=new fabric.Point(pointer.x,pointer.y),objectLeftTop=this._getLeftTopCoords();return this.angle&&(pClicked=fabric.util.rotatePoint(pClicked,objectLeftTop,degreesToRadians(-this.angle))),{x:pClicked.x-objectLeftTop.x,y:pClicked.y-objectLeftTop.y}},
/**
     * Sets canvas globalCompositeOperation for specific object
     * custom composition operation for the particular object can be specified using globalCompositeOperation property
     * @param {CanvasRenderingContext2D} ctx Rendering canvas context
     */
_setupCompositeOperation:function(ctx){this.globalCompositeOperation&&(ctx.globalCompositeOperation=this.globalCompositeOperation)}}),fabric.util.createAccessors&&fabric.util.createAccessors(fabric.Object),extend(fabric.Object.prototype,fabric.Observable),
/**
   * Defines the number of fraction digits to use when serializing object values.
   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.
   * @static
   * @memberOf fabric.Object
   * @constant
   * @type Number
   */
fabric.Object.NUM_FRACTION_DIGITS=2,fabric.Object._fromObject=function(className,object,callback,extraParam){var klass=fabric[className];object=clone(object,!0),fabric.util.enlivenPatterns([object.fill,object.stroke],(function(patterns){"undefined"!==typeof patterns[0]&&(object.fill=patterns[0]),"undefined"!==typeof patterns[1]&&(object.stroke=patterns[1]),fabric.util.enlivenObjects([object.clipPath],(function(enlivedProps){object.clipPath=enlivedProps[0];var instance=extraParam?new klass(object[extraParam],object):new klass(object);callback&&callback(instance)}))}))},
/**
   * Unique id used internally when creating SVG elements
   * @static
   * @memberOf fabric.Object
   * @type Number
   */
fabric.Object.__uid=0)}(exports),function(){var degreesToRadians=fabric.util.degreesToRadians,originXOffset={left:-.5,center:0,right:.5},originYOffset={top:-.5,center:0,bottom:.5};fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{
/**
     * Translates the coordinates from a set of origin to another (based on the object's dimensions)
     * @param {fabric.Point} point The point which corresponds to the originX and originY params
     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'
     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */
translateToGivenOrigin:function(point,fromOriginX,fromOriginY,toOriginX,toOriginY){var offsetX,offsetY,dim,x=point.x,y=point.y;return"string"===typeof fromOriginX?fromOriginX=originXOffset[fromOriginX]:fromOriginX-=.5,"string"===typeof toOriginX?toOriginX=originXOffset[toOriginX]:toOriginX-=.5,offsetX=toOriginX-fromOriginX,"string"===typeof fromOriginY?fromOriginY=originYOffset[fromOriginY]:fromOriginY-=.5,"string"===typeof toOriginY?toOriginY=originYOffset[toOriginY]:toOriginY-=.5,offsetY=toOriginY-fromOriginY,(offsetX||offsetY)&&(dim=this._getTransformedDimensions(),x=point.x+offsetX*dim.x,y=point.y+offsetY*dim.y),new fabric.Point(x,y)},
/**
     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)
     * @param {fabric.Point} point The point which corresponds to the originX and originY params
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */
translateToCenterPoint:function(point,originX,originY){var p=this.translateToGivenOrigin(point,originX,originY,"center","center");return this.angle?fabric.util.rotatePoint(p,point,degreesToRadians(this.angle)):p},
/**
     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)
     * @param {fabric.Point} center The point which corresponds to center of the object
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */
translateToOriginPoint:function(center,originX,originY){var p=this.translateToGivenOrigin(center,"center","center",originX,originY);return this.angle?fabric.util.rotatePoint(p,center,degreesToRadians(this.angle)):p},
/**
     * Returns the real center coordinates of the object
     * @return {fabric.Point}
     */
getCenterPoint:function(){var leftTop=new fabric.Point(this.left,this.top);return this.translateToCenterPoint(leftTop,this.originX,this.originY)},
/**
     * Returns the coordinates of the object based on center coordinates
     * @param {fabric.Point} point The point which corresponds to the originX and originY params
     * @return {fabric.Point}
     */
// getOriginPoint: function(center) {
//   return this.translateToOriginPoint(center, this.originX, this.originY);
// },
/**
     * Returns the coordinates of the object as if it has a different origin
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */
getPointByOrigin:function(originX,originY){var center=this.getCenterPoint();return this.translateToOriginPoint(center,originX,originY)},
/**
     * Returns the point in local coordinates
     * @param {fabric.Point} point The point relative to the global coordinate system
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */
toLocalPoint:function(point,originX,originY){var p,p2,center=this.getCenterPoint();return p="undefined"!==typeof originX&&"undefined"!==typeof originY?this.translateToGivenOrigin(center,"center","center",originX,originY):new fabric.Point(this.left,this.top),p2=new fabric.Point(point.x,point.y),this.angle&&(p2=fabric.util.rotatePoint(p2,center,-degreesToRadians(this.angle))),p2.subtractEquals(p)},
/**
     * Returns the point in global coordinates
     * @param {fabric.Point} The point relative to the local coordinate system
     * @return {fabric.Point}
     */
// toGlobalPoint: function(point) {
//   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));
// },
/**
     * Sets the position of the object taking into consideration the object's origin
     * @param {fabric.Point} pos The new position of the object
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {void}
     */
setPositionByOrigin:function(pos,originX,originY){var center=this.translateToCenterPoint(pos,originX,originY),position=this.translateToOriginPoint(center,this.originX,this.originY);this.set("left",position.x),this.set("top",position.y)},
/**
     * @param {String} to One of 'left', 'center', 'right'
     */
adjustPosition:function(to){var offsetFrom,offsetTo,angle=degreesToRadians(this.angle),hypotFull=this.getScaledWidth(),xFull=fabric.util.cos(angle)*hypotFull,yFull=fabric.util.sin(angle)*hypotFull;
//TODO: this function does not consider mixed situation like top, center.
offsetFrom="string"===typeof this.originX?originXOffset[this.originX]:this.originX-.5,offsetTo="string"===typeof to?originXOffset[to]:to-.5,this.left+=xFull*(offsetTo-offsetFrom),this.top+=yFull*(offsetTo-offsetFrom),this.setCoords(),this.originX=to},
/**
     * Sets the origin/position of the object to it's center point
     * @private
     * @return {void}
     */
_setOriginToCenter:function(){this._originalOriginX=this.originX,this._originalOriginY=this.originY;var center=this.getCenterPoint();this.originX="center",this.originY="center",this.left=center.x,this.top=center.y},
/**
     * Resets the origin/position of the object to it's original origin
     * @private
     * @return {void}
     */
_resetOrigin:function(){var originPoint=this.translateToOriginPoint(this.getCenterPoint(),this._originalOriginX,this._originalOriginY);this.originX=this._originalOriginX,this.originY=this._originalOriginY,this.left=originPoint.x,this.top=originPoint.y,this._originalOriginX=null,this._originalOriginY=null},
/**
     * @private
     */
_getLeftTopCoords:function(){return this.translateToOriginPoint(this.getCenterPoint(),"left","top")}})}(),function(){function getCoords(coords){return[new fabric.Point(coords.tl.x,coords.tl.y),new fabric.Point(coords.tr.x,coords.tr.y),new fabric.Point(coords.br.x,coords.br.y),new fabric.Point(coords.bl.x,coords.bl.y)]}var degreesToRadians=fabric.util.degreesToRadians,multiplyMatrices=fabric.util.multiplyTransformMatrices,transformPoint=fabric.util.transformPoint;fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{
/**
     * Describe object's corner position in canvas element coordinates.
     * properties are tl,mt,tr,ml,mr,bl,mb,br,mtr for the main controls.
     * each property is an object with x, y and corner.
     * The `corner` property contains in a similar manner the 4 points of the
     * interactive area of the corner.
     * The coordinates depends from this properties: width, height, scaleX, scaleY
     * skewX, skewY, angle, strokeWidth, viewportTransform, top, left, padding.
     * The coordinates get updated with @method setCoords.
     * You can calculate them without updating with @method calcCoords;
     * @memberOf fabric.Object.prototype
     */
oCoords:null,
/**
     * Describe object's corner position in canvas object absolute coordinates
     * properties are tl,tr,bl,br and describe the four main corner.
     * each property is an object with x, y, instance of Fabric.Point.
     * The coordinates depends from this properties: width, height, scaleX, scaleY
     * skewX, skewY, angle, strokeWidth, top, left.
     * Those coordinates are useful to understand where an object is. They get updated
     * with oCoords but they do not need to be updated when zoom or panning change.
     * The coordinates get updated with @method setCoords.
     * You can calculate them without updating with @method calcCoords(true);
     * @memberOf fabric.Object.prototype
     */
aCoords:null,
/**
     * storage for object transform matrix
     */
ownMatrixCache:null,
/**
     * storage for object full transform matrix
     */
matrixCache:null,
/**
     * return correct set of coordinates for intersection
     */
getCoords:function(absolute,calculate){this.oCoords||this.setCoords();var coords=absolute?this.aCoords:this.oCoords;return getCoords(calculate?this.calcCoords(absolute):coords)},
/**
     * Checks if object intersects with an area formed by 2 points
     * @param {Object} pointTL top-left point of area
     * @param {Object} pointBR bottom-right point of area
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object intersects with an area formed by 2 points
     */
intersectsWithRect:function(pointTL,pointBR,absolute,calculate){var coords=this.getCoords(absolute,calculate),intersection=fabric.Intersection.intersectPolygonRectangle(coords,pointTL,pointBR);return"Intersection"===intersection.status},
/**
     * Checks if object intersects with another object
     * @param {Object} other Object to test
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object intersects with another object
     */
intersectsWithObject:function(other,absolute,calculate){var intersection=fabric.Intersection.intersectPolygonPolygon(this.getCoords(absolute,calculate),other.getCoords(absolute,calculate));return"Intersection"===intersection.status||other.isContainedWithinObject(this,absolute,calculate)||this.isContainedWithinObject(other,absolute,calculate)},
/**
     * Checks if object is fully contained within area of another object
     * @param {Object} other Object to test
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object is fully contained within area of another object
     */
isContainedWithinObject:function(other,absolute,calculate){for(var points=this.getCoords(absolute,calculate),i=0,lines=other._getImageLines(calculate?other.calcCoords(absolute):absolute?other.aCoords:other.oCoords);i<4;i++)if(!other.containsPoint(points[i],lines))return!1;return!0},
/**
     * Checks if object is fully contained within area formed by 2 points
     * @param {Object} pointTL top-left point of area
     * @param {Object} pointBR bottom-right point of area
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object is fully contained within area formed by 2 points
     */
isContainedWithinRect:function(pointTL,pointBR,absolute,calculate){var boundingRect=this.getBoundingRect(absolute,calculate);return boundingRect.left>=pointTL.x&&boundingRect.left+boundingRect.width<=pointBR.x&&boundingRect.top>=pointTL.y&&boundingRect.top+boundingRect.height<=pointBR.y},
/**
     * Checks if point is inside the object
     * @param {fabric.Point} point Point to check against
     * @param {Object} [lines] object returned from @method _getImageLines
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if point is inside the object
     */
containsPoint:function(point,lines,absolute,calculate){lines=lines||this._getImageLines(calculate?this.calcCoords(absolute):absolute?this.aCoords:this.oCoords);
// if xPoints is odd then point is inside the object
var xPoints=this._findCrossPoints(point,lines);return 0!==xPoints&&xPoints%2===1},
/**
     * Checks if object is contained within the canvas with current viewportTransform
     * the check is done stopping at first point that appears on screen
     * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords
     * @return {Boolean} true if object is fully or partially contained within canvas
     */
isOnScreen:function(calculate){if(!this.canvas)return!1;for(var point,pointTL=this.canvas.vptCoords.tl,pointBR=this.canvas.vptCoords.br,points=this.getCoords(!0,calculate),i=0;i<4;i++)if(point=points[i],point.x<=pointBR.x&&point.x>=pointTL.x&&point.y<=pointBR.y&&point.y>=pointTL.y)return!0;
// no points on screen, check intersection with absolute coordinates
return!!this.intersectsWithRect(pointTL,pointBR,!0,calculate)||this._containsCenterOfCanvas(pointTL,pointBR,calculate)},
/**
     * Checks if the object contains the midpoint between canvas extremities
     * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen
     * @private
     * @param {Fabric.Point} pointTL Top Left point
     * @param {Fabric.Point} pointBR Top Right point
     * @param {Boolean} calculate use coordinates of current position instead of .oCoords
     * @return {Boolean} true if the object contains the point
     */
_containsCenterOfCanvas:function(pointTL,pointBR,calculate){
// worst case scenario the object is so big that contains the screen
var centerPoint={x:(pointTL.x+pointBR.x)/2,y:(pointTL.y+pointBR.y)/2};return!!this.containsPoint(centerPoint,null,!0,calculate)},
/**
     * Checks if object is partially contained within the canvas with current viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object is partially contained within canvas
     */
isPartiallyOnScreen:function(calculate){if(!this.canvas)return!1;var pointTL=this.canvas.vptCoords.tl,pointBR=this.canvas.vptCoords.br;return!!this.intersectsWithRect(pointTL,pointBR,!0,calculate)||this._containsCenterOfCanvas(pointTL,pointBR,calculate)},
/**
     * Method that returns an object with the object edges in it, given the coordinates of the corners
     * @private
     * @param {Object} oCoords Coordinates of the object corners
     */
_getImageLines:function(oCoords){return{topline:{o:oCoords.tl,d:oCoords.tr},rightline:{o:oCoords.tr,d:oCoords.br},bottomline:{o:oCoords.br,d:oCoords.bl},leftline:{o:oCoords.bl,d:oCoords.tl}}},
/**
     * Helper method to determine how many cross points are between the 4 object edges
     * and the horizontal line determined by a point on canvas
     * @private
     * @param {fabric.Point} point Point to check
     * @param {Object} lines Coordinates of the object being evaluated
     */
// remove yi, not used but left code here just in case.
_findCrossPoints:function(point,lines){var b1,b2,a1,a2,xi,iLine,// yi,
xcount=0;for(var lineKey in lines)
// optimisation 1: line below point. no cross
if(iLine=lines[lineKey],!(iLine.o.y<point.y&&iLine.d.y<point.y)&&!(iLine.o.y>=point.y&&iLine.d.y>=point.y)&&(
// optimisation 3: vertical line case
iLine.o.x===iLine.d.x&&iLine.o.x>=point.x?xi=iLine.o.x:(b1=0,b2=(iLine.d.y-iLine.o.y)/(iLine.d.x-iLine.o.x),a1=point.y-b1*point.x,a2=iLine.o.y-b2*iLine.o.x,xi=-(a1-a2)/(b1-b2)),
// dont count xi < point.x cases
xi>=point.x&&(xcount+=1),2===xcount))break;
// optimisation 2: line above point. no cross
return xcount},
/**
     * Returns coordinates of object's bounding rectangle (left, top, width, height)
     * the box is intended as aligned to axis of canvas.
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords
     * @return {Object} Object with left, top, width, height properties
     */
getBoundingRect:function(absolute,calculate){var coords=this.getCoords(absolute,calculate);return fabric.util.makeBoundingBoxFromPoints(coords)},
/**
     * Returns width of an object's bounding box counting transformations
     * before 2.0 it was named getWidth();
     * @return {Number} width value
     */
getScaledWidth:function(){return this._getTransformedDimensions().x},
/**
     * Returns height of an object bounding box counting transformations
     * before 2.0 it was named getHeight();
     * @return {Number} height value
     */
getScaledHeight:function(){return this._getTransformedDimensions().y},
/**
     * Makes sure the scale is valid and modifies it if necessary
     * @private
     * @param {Number} value
     * @return {Number}
     */
_constrainScale:function(value){return Math.abs(value)<this.minScaleLimit?value<0?-this.minScaleLimit:this.minScaleLimit:0===value?1e-4:value},
/**
     * Scales an object (equally by x and y)
     * @param {Number} value Scale factor
     * @return {fabric.Object} thisArg
     * @chainable
     */
scale:function(value){return this._set("scaleX",value),this._set("scaleY",value),this.setCoords()},
/**
     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)
     * @param {Number} value New width value
     * @param {Boolean} absolute ignore viewport
     * @return {fabric.Object} thisArg
     * @chainable
     */
scaleToWidth:function(value,absolute){
// adjust to bounding rect factor so that rotated shapes would fit as well
var boundingRectFactor=this.getBoundingRect(absolute).width/this.getScaledWidth();return this.scale(value/this.width/boundingRectFactor)},
/**
     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)
     * @param {Number} value New height value
     * @param {Boolean} absolute ignore viewport
     * @return {fabric.Object} thisArg
     * @chainable
     */
scaleToHeight:function(value,absolute){
// adjust to bounding rect factor so that rotated shapes would fit as well
var boundingRectFactor=this.getBoundingRect(absolute).height/this.getScaledHeight();return this.scale(value/this.height/boundingRectFactor)},
/**
     * Calculates and returns the .coords of an object.
     * @return {Object} Object with tl, tr, br, bl ....
     * @chainable
     */
calcCoords:function(absolute){var rotateMatrix=this._calcRotateMatrix(),translateMatrix=this._calcTranslateMatrix(),startMatrix=multiplyMatrices(translateMatrix,rotateMatrix),vpt=this.getViewportTransform(),finalMatrix=absolute?startMatrix:multiplyMatrices(vpt,startMatrix),dim=this._getTransformedDimensions(),w=dim.x/2,h=dim.y/2,tl=transformPoint({x:-w,y:-h},finalMatrix),tr=transformPoint({x:w,y:-h},finalMatrix),bl=transformPoint({x:-w,y:h},finalMatrix),br=transformPoint({x:w,y:h},finalMatrix);if(!absolute){var padding=this.padding,angle=degreesToRadians(this.angle),cos=fabric.util.cos(angle),sin=fabric.util.sin(angle),cosP=cos*padding,sinP=sin*padding,cosPSinP=cosP+sinP,cosPMinusSinP=cosP-sinP;padding&&(tl.x-=cosPMinusSinP,tl.y-=cosPSinP,tr.x+=cosPSinP,tr.y-=cosPMinusSinP,bl.x-=cosPSinP,bl.y+=cosPMinusSinP,br.x+=cosPMinusSinP,br.y+=cosPSinP);var ml=new fabric.Point((tl.x+bl.x)/2,(tl.y+bl.y)/2),mt=new fabric.Point((tr.x+tl.x)/2,(tr.y+tl.y)/2),mr=new fabric.Point((br.x+tr.x)/2,(br.y+tr.y)/2),mb=new fabric.Point((br.x+bl.x)/2,(br.y+bl.y)/2),mtr=new fabric.Point(mt.x+sin*this.rotatingPointOffset,mt.y-cos*this.rotatingPointOffset)}
// if (!absolute) {
//   var canvas = this.canvas;
//   setTimeout(function() {
//     canvas.contextTop.clearRect(0, 0, 700, 700);
//     canvas.contextTop.fillStyle = 'green';
//     canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);
//     canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);
//     canvas.contextTop.fillRect(br.x, br.y, 3, 3);
//     canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);
//     canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);
//     canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);
//     canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);
//     canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);
//     canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);
//   }, 50);
// }
var coords={
// corners
tl:tl,tr:tr,br:br,bl:bl};return absolute||(
// middle
coords.ml=ml,coords.mt=mt,coords.mr=mr,coords.mb=mb,
// rotating point
coords.mtr=mtr),coords},
/**
     * Sets corner position coordinates based on current angle, width and height.
     * See {@link https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords|When-to-call-setCoords}
     * @param {Boolean} [ignoreZoom] set oCoords with or without the viewport transform.
     * @param {Boolean} [skipAbsolute] skip calculation of aCoords, useful in setViewportTransform
     * @return {fabric.Object} thisArg
     * @chainable
     */
setCoords:function(ignoreZoom,skipAbsolute){return this.oCoords=this.calcCoords(ignoreZoom),skipAbsolute||(this.aCoords=this.calcCoords(!0)),
// set coordinates of the draggable boxes in the corners used to scale/rotate the image
ignoreZoom||this._setCornerCoords&&this._setCornerCoords(),this},
/**
     * calculate rotation matrix of an object
     * @return {Array} rotation matrix for the object
     */
_calcRotateMatrix:function(){return fabric.util.calcRotateMatrix(this)},
/**
     * calculate the translation matrix for an object transform
     * @return {Array} rotation matrix for the object
     */
_calcTranslateMatrix:function(){var center=this.getCenterPoint();return[1,0,0,1,center.x,center.y]},transformMatrixKey:function(skipGroup){var sep="_",prefix="";return!skipGroup&&this.group&&(prefix=this.group.transformMatrixKey(skipGroup)+sep),prefix+this.top+sep+this.left+sep+this.scaleX+sep+this.scaleY+sep+this.skewX+sep+this.skewY+sep+this.angle+sep+this.originX+sep+this.originY+sep+this.width+sep+this.height+sep+this.strokeWidth+this.flipX+this.flipY},
/**
     * calculate transform matrix that represents the current transformations from the
     * object's properties.
     * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations
     * @return {Array} transform matrix for the object
     */
calcTransformMatrix:function(skipGroup){if(skipGroup)return this.calcOwnMatrix();var key=this.transformMatrixKey(),cache=this.matrixCache||(this.matrixCache={});if(cache.key===key)return cache.value;var matrix=this.calcOwnMatrix();return this.group&&(matrix=multiplyMatrices(this.group.calcTransformMatrix(),matrix)),cache.key=key,cache.value=matrix,matrix},
/**
     * calculate transform matrix that represents the current transformations from the
     * object's properties, this matrix does not include the group transformation
     * @return {Array} transform matrix for the object
     */
calcOwnMatrix:function(){var key=this.transformMatrixKey(!0),cache=this.ownMatrixCache||(this.ownMatrixCache={});if(cache.key===key)return cache.value;var tMatrix=this._calcTranslateMatrix();return this.translateX=tMatrix[4],this.translateY=tMatrix[5],cache.key=key,cache.value=fabric.util.composeMatrix(this),cache.value},
/*
     * Calculate object dimensions from its properties
     * @private
     * @deprecated since 3.4.0, please use fabric.util._calcDimensionsTransformMatrix
     * not including or including flipX, flipY to emulate the flipping boolean
     * @return {Object} .x width dimension
     * @return {Object} .y height dimension
     */
_calcDimensionsTransformMatrix:function(skewX,skewY,flipping){return fabric.util.calcDimensionsMatrix({skewX:skewX,skewY:skewY,scaleX:this.scaleX*(flipping&&this.flipX?-1:1),scaleY:this.scaleY*(flipping&&this.flipY?-1:1)})},
/*
     * Calculate object dimensions from its properties
     * @private
     * @return {Object} .x width dimension
     * @return {Object} .y height dimension
     */
_getNonTransformedDimensions:function(){var strokeWidth=this.strokeWidth,w=this.width+strokeWidth,h=this.height+strokeWidth;return{x:w,y:h}},
/*
     * Calculate object bounding box dimensions from its properties scale, skew.
     * The skewX and skewY parameters are used in the skewing logic path and
     * do not provide something useful to common use cases.
     * @param {Number} [skewX], a value to override current skewX
     * @param {Number} [skewY], a value to override current skewY
     * @private
     * @return {Object} .x width dimension
     * @return {Object} .y height dimension
     */
_getTransformedDimensions:function(skewX,skewY){"undefined"===typeof skewX&&(skewX=this.skewX),"undefined"===typeof skewY&&(skewY=this.skewY);var dimX,dimY,dimensions=this._getNonTransformedDimensions(),noSkew=0===skewX&&0===skewY;if(this.strokeUniform?(dimX=this.width,dimY=this.height):(dimX=dimensions.x,dimY=dimensions.y),noSkew)return this._finalizeDimensions(dimX*this.scaleX,dimY*this.scaleY);dimX/=2,dimY/=2;var points=[{x:-dimX,y:-dimY},{x:dimX,y:-dimY},{x:-dimX,y:dimY},{x:dimX,y:dimY}],transformMatrix=fabric.util.calcDimensionsMatrix({scaleX:this.scaleX,scaleY:this.scaleY,skewX:skewX,skewY:skewY}),bbox=fabric.util.makeBoundingBoxFromPoints(points,transformMatrix);return this._finalizeDimensions(bbox.width,bbox.height)},
/*
     * Calculate object bounding box dimensions from its properties scale, skew.
     * @param Number width width of the bbox
     * @param Number height height of the bbox
     * @private
     * @return {Object} .x finalized width dimension
     * @return {Object} .y finalized height dimension
     */
_finalizeDimensions:function(width,height){return this.strokeUniform?{x:width+this.strokeWidth,y:height+this.strokeWidth}:{x:width,y:height}},
/*
     * Calculate object dimensions for controls, including padding and canvas zoom.
     * private
     */
_calculateCurrentDimensions:function(){var vpt=this.getViewportTransform(),dim=this._getTransformedDimensions(),p=fabric.util.transformPoint(dim,vpt,!0);return p.scalarAdd(2*this.padding)}})}(),fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{
/**
   * Moves an object to the bottom of the stack of drawn objects
   * @return {fabric.Object} thisArg
   * @chainable
   */
sendToBack:function(){return this.group?fabric.StaticCanvas.prototype.sendToBack.call(this.group,this):this.canvas&&this.canvas.sendToBack(this),this},
/**
   * Moves an object to the top of the stack of drawn objects
   * @return {fabric.Object} thisArg
   * @chainable
   */
bringToFront:function(){return this.group?fabric.StaticCanvas.prototype.bringToFront.call(this.group,this):this.canvas&&this.canvas.bringToFront(this),this},
/**
   * Moves an object down in stack of drawn objects
   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
   * @return {fabric.Object} thisArg
   * @chainable
   */
sendBackwards:function(intersecting){return this.group?fabric.StaticCanvas.prototype.sendBackwards.call(this.group,this,intersecting):this.canvas&&this.canvas.sendBackwards(this,intersecting),this},
/**
   * Moves an object up in stack of drawn objects
   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
   * @return {fabric.Object} thisArg
   * @chainable
   */
bringForward:function(intersecting){return this.group?fabric.StaticCanvas.prototype.bringForward.call(this.group,this,intersecting):this.canvas&&this.canvas.bringForward(this,intersecting),this},
/**
   * Moves an object to specified level in stack of drawn objects
   * @param {Number} index New position of object
   * @return {fabric.Object} thisArg
   * @chainable
   */
moveTo:function(index){return this.group&&"activeSelection"!==this.group.type?fabric.StaticCanvas.prototype.moveTo.call(this.group,this,index):this.canvas&&this.canvas.moveTo(this,index),this}}),
/* _TO_SVG_START_ */
function(){function getSvgColorString(prop,value){if(value){if(value.toLive)return prop+": url(#SVGID_"+value.id+"); ";var color=new fabric.Color(value),str=prop+": "+color.toRgb()+"; ",opacity=color.getAlpha();return 1!==opacity&&(
//change the color in rgb + opacity
str+=prop+"-opacity: "+opacity.toString()+"; "),str}return prop+": none; "}var toFixed=fabric.util.toFixed;fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{
/**
     * Returns styles-string for svg-export
     * @param {Boolean} skipShadow a boolean to skip shadow filter output
     * @return {String}
     */
getSvgStyles:function(skipShadow){var fillRule=this.fillRule?this.fillRule:"nonzero",strokeWidth=this.strokeWidth?this.strokeWidth:"0",strokeDashArray=this.strokeDashArray?this.strokeDashArray.join(" "):"none",strokeDashOffset=this.strokeDashOffset?this.strokeDashOffset:"0",strokeLineCap=this.strokeLineCap?this.strokeLineCap:"butt",strokeLineJoin=this.strokeLineJoin?this.strokeLineJoin:"miter",strokeMiterLimit=this.strokeMiterLimit?this.strokeMiterLimit:"4",opacity="undefined"!==typeof this.opacity?this.opacity:"1",visibility=this.visible?"":" visibility: hidden;",filter=skipShadow?"":this.getSvgFilter(),fill=getSvgColorString("fill",this.fill),stroke=getSvgColorString("stroke",this.stroke);return[stroke,"stroke-width: ",strokeWidth,"; ","stroke-dasharray: ",strokeDashArray,"; ","stroke-linecap: ",strokeLineCap,"; ","stroke-dashoffset: ",strokeDashOffset,"; ","stroke-linejoin: ",strokeLineJoin,"; ","stroke-miterlimit: ",strokeMiterLimit,"; ",fill,"fill-rule: ",fillRule,"; ","opacity: ",opacity,";",filter,visibility].join("")},
/**
     * Returns styles-string for svg-export
     * @param {Object} style the object from which to retrieve style properties
     * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.
     * @return {String}
     */
getSvgSpanStyles:function(style,useWhiteSpace){var term="; ",fontFamily=style.fontFamily?"font-family: "+(-1===style.fontFamily.indexOf("'")&&-1===style.fontFamily.indexOf('"')?"'"+style.fontFamily+"'":style.fontFamily)+term:"",strokeWidth=style.strokeWidth?"stroke-width: "+style.strokeWidth+term:"",fontSize=(fontFamily=fontFamily,style.fontSize?"font-size: "+style.fontSize+"px"+term:""),fontStyle=style.fontStyle?"font-style: "+style.fontStyle+term:"",fontWeight=style.fontWeight?"font-weight: "+style.fontWeight+term:"",fill=style.fill?getSvgColorString("fill",style.fill):"",stroke=style.stroke?getSvgColorString("stroke",style.stroke):"",textDecoration=this.getSvgTextDecoration(style),deltaY=style.deltaY?"baseline-shift: "+-style.deltaY+"; ":"";return textDecoration&&(textDecoration="text-decoration: "+textDecoration+term),[stroke,strokeWidth,fontFamily,fontSize,fontStyle,fontWeight,textDecoration,fill,deltaY,useWhiteSpace?"white-space: pre; ":""].join("")},
/**
     * Returns text-decoration property for svg-export
     * @param {Object} style the object from which to retrieve style properties
     * @return {String}
     */
getSvgTextDecoration:function(style){return["overline","underline","line-through"].filter((function(decoration){return style[decoration.replace("-","")]})).join(" ")},
/**
     * Returns filter for svg shadow
     * @return {String}
     */
getSvgFilter:function(){return this.shadow?"filter: url(#SVGID_"+this.shadow.id+");":""},
/**
     * Returns id attribute for svg output
     * @return {String}
     */
getSvgCommons:function(){return[this.id?'id="'+this.id+'" ':"",this.clipPath?'clip-path="url(#'+this.clipPath.clipPathId+')" ':""].join("")},
/**
     * Returns transform-string for svg-export
     * @param {Boolean} use the full transform or the single object one.
     * @return {String}
     */
getSvgTransform:function(full,additionalTransform){var transform=full?this.calcTransformMatrix():this.calcOwnMatrix(),svgTransform='transform="'+fabric.util.matrixToSVG(transform);return svgTransform+(additionalTransform||"")+this.getSvgTransformMatrix()+'" '},
/**
     * Returns transform-string for svg-export from the transform matrix of single elements
     * @return {String}
     */
getSvgTransformMatrix:function(){return this.transformMatrix?" "+fabric.util.matrixToSVG(this.transformMatrix):""},_setSVGBg:function(textBgRects){if(this.backgroundColor){var NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS;textBgRects.push("\t\t<rect ",this._getFillAttributes(this.backgroundColor),' x="',toFixed(-this.width/2,NUM_FRACTION_DIGITS),'" y="',toFixed(-this.height/2,NUM_FRACTION_DIGITS),'" width="',toFixed(this.width,NUM_FRACTION_DIGITS),'" height="',toFixed(this.height,NUM_FRACTION_DIGITS),'"></rect>\n')}},
/**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
toSVG:function(reviver){return this._createBaseSVGMarkup(this._toSVG(reviver),{reviver:reviver})},
/**
     * Returns svg clipPath representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
toClipPathSVG:function(reviver){return"\t"+this._createBaseClipPathSVGMarkup(this._toSVG(reviver),{reviver:reviver})},
/**
     * @private
     */
_createBaseClipPathSVGMarkup:function(objectMarkup,options){options=options||{};var reviver=options.reviver,additionalTransform=options.additionalTransform||"",commonPieces=[this.getSvgTransform(!0,additionalTransform),this.getSvgCommons()].join(""),
// insert commons in the markup, style and svgCommons
index=objectMarkup.indexOf("COMMON_PARTS");return objectMarkup[index]=commonPieces,reviver?reviver(objectMarkup.join("")):objectMarkup.join("")},
/**
     * @private
     */
_createBaseSVGMarkup:function(objectMarkup,options){options=options||{};var commonPieces,clipPathMarkup,noStyle=options.noStyle,reviver=options.reviver,styleInfo=noStyle?"":'style="'+this.getSvgStyles()+'" ',shadowInfo=options.withShadow?'style="'+this.getSvgFilter()+'" ':"",clipPath=this.clipPath,vectorEffect=this.strokeUniform?'vector-effect="non-scaling-stroke" ':"",absoluteClipPath=clipPath&&clipPath.absolutePositioned,stroke=this.stroke,fill=this.fill,shadow=this.shadow,markup=[],
// insert commons in the markup, style and svgCommons
index=objectMarkup.indexOf("COMMON_PARTS"),additionalTransform=options.additionalTransform;return clipPath&&(clipPath.clipPathId="CLIPPATH_"+fabric.Object.__uid++,clipPathMarkup='<clipPath id="'+clipPath.clipPathId+'" >\n'+clipPath.toClipPathSVG(reviver)+"</clipPath>\n"),absoluteClipPath&&markup.push("<g ",shadowInfo,this.getSvgCommons()," >\n"),markup.push("<g ",this.getSvgTransform(!1),absoluteClipPath?"":shadowInfo+this.getSvgCommons()," >\n"),commonPieces=[styleInfo,vectorEffect,noStyle?"":this.addPaintOrder()," ",additionalTransform?'transform="'+additionalTransform+'" ':""].join(""),objectMarkup[index]=commonPieces,fill&&fill.toLive&&markup.push(fill.toSVG(this)),stroke&&stroke.toLive&&markup.push(stroke.toSVG(this)),shadow&&markup.push(shadow.toSVG(this)),clipPath&&markup.push(clipPathMarkup),markup.push(objectMarkup.join("")),markup.push("</g>\n"),absoluteClipPath&&markup.push("</g>\n"),reviver?reviver(markup.join("")):markup.join("")},addPaintOrder:function(){return"fill"!==this.paintFirst?' paint-order="'+this.paintFirst+'" ':""}})}(),
/* _TO_SVG_END_ */
function(){var extend=fabric.util.object.extend,originalSet="stateProperties";
/*
    Depends on `stateProperties`
  */function saveProps(origin,destination,props){var tmpObj={},deep=!0;props.forEach((function(prop){tmpObj[prop]=origin[prop]})),extend(origin[destination],tmpObj,deep)}function _isEqual(origValue,currentValue,firstPass){if(origValue===currentValue)
// if the objects are identical, return
return!0;if(Array.isArray(origValue)){if(!Array.isArray(currentValue)||origValue.length!==currentValue.length)return!1;for(var i=0,len=origValue.length;i<len;i++)if(!_isEqual(origValue[i],currentValue[i]))return!1;return!0}if(origValue&&"object"===typeof origValue){var key,keys=Object.keys(origValue);if(!currentValue||"object"!==typeof currentValue||!firstPass&&keys.length!==Object.keys(currentValue).length)return!1;for(i=0,len=keys.length;i<len;i++)
// since clipPath is in the statefull cache list and the clipPath objects
// would be iterated as an object, this would lead to possible infinite recursion
if(key=keys[i],"canvas"!==key&&!_isEqual(origValue[key],currentValue[key]))return!1;return!0}}fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{
/**
     * Returns true if object state (one of its state properties) was changed
     * @param {String} [propertySet] optional name for the set of property we want to save
     * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called
     */
hasStateChanged:function(propertySet){propertySet=propertySet||originalSet;var dashedPropertySet="_"+propertySet;return Object.keys(this[dashedPropertySet]).length<this[propertySet].length||!_isEqual(this[dashedPropertySet],this,!0)},
/**
     * Saves state of an object
     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
     * @return {fabric.Object} thisArg
     */
saveState:function(options){var propertySet=options&&options.propertySet||originalSet,destination="_"+propertySet;return this[destination]?(saveProps(this,destination,this[propertySet]),options&&options.stateProperties&&saveProps(this,destination,options.stateProperties),this):this.setupState(options)},
/**
     * Setups state of an object
     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
     * @return {fabric.Object} thisArg
     */
setupState:function(options){options=options||{};var propertySet=options.propertySet||originalSet;return options.propertySet=propertySet,this["_"+propertySet]={},this.saveState(options),this}})}(),function(){var degreesToRadians=fabric.util.degreesToRadians;fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{
/**
     * The object interactivity controls.
     * @private
     */
_controlsVisibility:null,
/**
     * Determines which corner has been clicked
     * @private
     * @param {Object} pointer The pointer indicating the mouse position
     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found
     */
_findTargetCorner:function(pointer){
// objects in group, anykind, are not self modificable,
// must not return an hovered corner.
if(!this.hasControls||this.group||!this.canvas||this.canvas._activeObject!==this)return!1;var xPoints,lines,ex=pointer.x,ey=pointer.y;for(var i in this.__corner=0,this.oCoords)if(this.isControlVisible(i)&&("mtr"!==i||this.hasRotatingPoint)&&(!this.get("lockUniScaling")||"mt"!==i&&"mr"!==i&&"mb"!==i&&"ml"!==i)&&(lines=this._getImageLines(this.oCoords[i].corner),
// debugging
// canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);
// canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);
// canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);
// canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);
// canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);
// canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);
// canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);
// canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);
xPoints=this._findCrossPoints({x:ex,y:ey},lines),0!==xPoints&&xPoints%2===1))return this.__corner=i,i;return!1},
/**
     * Sets the coordinates of the draggable boxes in the corners of
     * the image used to scale/rotate it.
     * @private
     */
_setCornerCoords:function(){var x,y,coords=this.oCoords,newTheta=degreesToRadians(45-this.angle),
/* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */
/* 0.707106 stands for sqrt(2)/2 */
cornerHypotenuse=.707106*this.cornerSize,cosHalfOffset=cornerHypotenuse*fabric.util.cos(newTheta),sinHalfOffset=cornerHypotenuse*fabric.util.sin(newTheta);for(var point in coords)x=coords[point].x,y=coords[point].y,coords[point].corner={tl:{x:x-sinHalfOffset,y:y-cosHalfOffset},tr:{x:x+cosHalfOffset,y:y-sinHalfOffset},bl:{x:x-cosHalfOffset,y:y+sinHalfOffset},br:{x:x+sinHalfOffset,y:y+cosHalfOffset}}},
/**
     * Draws a colored layer behind the object, inside its selection borders.
     * Requires public options: padding, selectionBackgroundColor
     * this function is called when the context is transformed
     * has checks to be skipped when the object is on a staticCanvas
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @return {fabric.Object} thisArg
     * @chainable
     */
drawSelectionBackground:function(ctx){if(!this.selectionBackgroundColor||this.canvas&&!this.canvas.interactive||this.canvas&&this.canvas._activeObject!==this)return this;ctx.save();var center=this.getCenterPoint(),wh=this._calculateCurrentDimensions(),vpt=this.canvas.viewportTransform;return ctx.translate(center.x,center.y),ctx.scale(1/vpt[0],1/vpt[3]),ctx.rotate(degreesToRadians(this.angle)),ctx.fillStyle=this.selectionBackgroundColor,ctx.fillRect(-wh.x/2,-wh.y/2,wh.x,wh.y),ctx.restore(),this},
/**
     * Draws borders of an object's bounding box.
     * Requires public properties: width, height
     * Requires public options: padding, borderColor
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @param {Object} styleOverride object to override the object style
     * @return {fabric.Object} thisArg
     * @chainable
     */
drawBorders:function(ctx,styleOverride){styleOverride=styleOverride||{};var wh=this._calculateCurrentDimensions(),strokeWidth=this.borderScaleFactor,width=wh.x+strokeWidth,height=wh.y+strokeWidth,drawRotatingPoint="undefined"!==typeof styleOverride.hasRotatingPoint?styleOverride.hasRotatingPoint:this.hasRotatingPoint,hasControls="undefined"!==typeof styleOverride.hasControls?styleOverride.hasControls:this.hasControls,rotatingPointOffset="undefined"!==typeof styleOverride.rotatingPointOffset?styleOverride.rotatingPointOffset:this.rotatingPointOffset;if(ctx.save(),ctx.strokeStyle=styleOverride.borderColor||this.borderColor,this._setLineDash(ctx,styleOverride.borderDashArray||this.borderDashArray,null),ctx.strokeRect(-width/2,-height/2,width,height),drawRotatingPoint&&this.isControlVisible("mtr")&&hasControls){var rotateHeight=-height/2;ctx.beginPath(),ctx.moveTo(0,rotateHeight),ctx.lineTo(0,rotateHeight-rotatingPointOffset),ctx.stroke()}return ctx.restore(),this},
/**
     * Draws borders of an object's bounding box when it is inside a group.
     * Requires public properties: width, height
     * Requires public options: padding, borderColor
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @param {object} options object representing current object parameters
     * @param {Object} styleOverride object to override the object style
     * @return {fabric.Object} thisArg
     * @chainable
     */
drawBordersInGroup:function(ctx,options,styleOverride){styleOverride=styleOverride||{};var p={x:this.width,y:this.height},matrix=fabric.util.composeMatrix({scaleX:options.scaleX,scaleY:options.scaleY,skewX:options.skewX}),wh=fabric.util.transformPoint(p,matrix),strokeWidth=this.strokeWidth,borderScaleFactor=this.borderScaleFactor,width=wh.x+strokeWidth*(this.strokeUniform?this.canvas.getZoom():options.scaleX)+borderScaleFactor,height=wh.y+strokeWidth*(this.strokeUniform?this.canvas.getZoom():options.scaleY)+borderScaleFactor;return ctx.save(),this._setLineDash(ctx,styleOverride.borderDashArray||this.borderDashArray,null),ctx.strokeStyle=styleOverride.borderColor||this.borderColor,ctx.strokeRect(-width/2,-height/2,width,height),ctx.restore(),this},
/**
     * Draws corners of an object's bounding box.
     * Requires public properties: width, height
     * Requires public options: cornerSize, padding
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @param {Object} styleOverride object to override the object style
     * @return {fabric.Object} thisArg
     * @chainable
     */
drawControls:function(ctx,styleOverride){styleOverride=styleOverride||{};var wh=this._calculateCurrentDimensions(),width=wh.x,height=wh.y,scaleOffset=styleOverride.cornerSize||this.cornerSize,left=-(width+scaleOffset)/2,top=-(height+scaleOffset)/2,transparentCorners="undefined"!==typeof styleOverride.transparentCorners?styleOverride.transparentCorners:this.transparentCorners,hasRotatingPoint="undefined"!==typeof styleOverride.hasRotatingPoint?styleOverride.hasRotatingPoint:this.hasRotatingPoint,methodName=transparentCorners?"stroke":"fill";return ctx.save(),ctx.strokeStyle=ctx.fillStyle=styleOverride.cornerColor||this.cornerColor,this.transparentCorners||(ctx.strokeStyle=styleOverride.cornerStrokeColor||this.cornerStrokeColor),this._setLineDash(ctx,styleOverride.cornerDashArray||this.cornerDashArray,null),
// top-left
this._drawControl("tl",ctx,methodName,left,top,styleOverride),
// top-right
this._drawControl("tr",ctx,methodName,left+width,top,styleOverride),
// bottom-left
this._drawControl("bl",ctx,methodName,left,top+height,styleOverride),
// bottom-right
this._drawControl("br",ctx,methodName,left+width,top+height,styleOverride),this.get("lockUniScaling")||(
// middle-top
this._drawControl("mt",ctx,methodName,left+width/2,top,styleOverride),
// middle-bottom
this._drawControl("mb",ctx,methodName,left+width/2,top+height,styleOverride),
// middle-right
this._drawControl("mr",ctx,methodName,left+width,top+height/2,styleOverride),
// middle-left
this._drawControl("ml",ctx,methodName,left,top+height/2,styleOverride)),
// middle-top-rotate
hasRotatingPoint&&this._drawControl("mtr",ctx,methodName,left+width/2,top-this.rotatingPointOffset,styleOverride),ctx.restore(),this},
/**
     * @private
     */
_drawControl:function(control,ctx,methodName,left,top,styleOverride){if(styleOverride=styleOverride||{},this.isControlVisible(control)){var size=this.cornerSize,stroke=!this.transparentCorners&&this.cornerStrokeColor;switch(styleOverride.cornerStyle||this.cornerStyle){case"circle":ctx.beginPath(),ctx.arc(left+size/2,top+size/2,size/2,0,2*Math.PI,!1),ctx[methodName](),stroke&&ctx.stroke();break;default:this.transparentCorners||ctx.clearRect(left,top,size,size),ctx[methodName+"Rect"](left,top,size,size),stroke&&ctx.strokeRect(left,top,size,size)}}},
/**
     * Returns true if the specified control is visible, false otherwise.
     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
     * @returns {Boolean} true if the specified control is visible, false otherwise
     */
isControlVisible:function(controlName){return this._getControlsVisibility()[controlName]},
/**
     * Sets the visibility of the specified control.
     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
     * @param {Boolean} visible true to set the specified control visible, false otherwise
     * @return {fabric.Object} thisArg
     * @chainable
     */
setControlVisible:function(controlName,visible){return this._getControlsVisibility()[controlName]=visible,this},
/**
     * Sets the visibility state of object controls.
     * @param {Object} [options] Options object
     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it
     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it
     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it
     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it
     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it
     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it
     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it
     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it
     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it
     * @return {fabric.Object} thisArg
     * @chainable
     */
setControlsVisibility:function(options){for(var p in options||(options={}),options)this.setControlVisible(p,options[p]);return this},
/**
     * Returns the instance of the control visibility set for this object.
     * @private
     * @returns {Object}
     */
_getControlsVisibility:function(){return this._controlsVisibility||(this._controlsVisibility={tl:!0,tr:!0,br:!0,bl:!0,ml:!0,mt:!0,mr:!0,mb:!0,mtr:!0}),this._controlsVisibility},
/**
     * This callback function is called every time _discardActiveObject or _setActiveObject
     * try to to deselect this object. If the function returns true, the process is cancelled
     * @param {Object} [options] options sent from the upper functions
     * @param {Event} [options.e] event if the process is generated by an event
     */
onDeselect:function(){
// implemented by sub-classes, as needed.
},
/**
     * This callback function is called every time _discardActiveObject or _setActiveObject
     * try to to select this object. If the function returns true, the process is cancelled
     * @param {Object} [options] options sent from the upper functions
     * @param {Event} [options.e] event if the process is generated by an event
     */
onSelect:function(){
// implemented by sub-classes, as needed.
}})}(),fabric.util.object.extend(fabric.StaticCanvas.prototype,/** @lends fabric.StaticCanvas.prototype */{
/**
   * Animation duration (in ms) for fx* methods
   * @type Number
   * @default
   */
FX_DURATION:500,
/**
   * Centers object horizontally with animation.
   * @param {fabric.Object} object Object to center
   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.Canvas} thisArg
   * @chainable
   */
fxCenterObjectH:function(object,callbacks){callbacks=callbacks||{};var empty=function(){},onComplete=callbacks.onComplete||empty,onChange=callbacks.onChange||empty,_this=this;return fabric.util.animate({startValue:object.left,endValue:this.getCenter().left,duration:this.FX_DURATION,onChange:function(value){object.set("left",value),_this.requestRenderAll(),onChange()},onComplete:function(){object.setCoords(),onComplete()}}),this},
/**
   * Centers object vertically with animation.
   * @param {fabric.Object} object Object to center
   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.Canvas} thisArg
   * @chainable
   */
fxCenterObjectV:function(object,callbacks){callbacks=callbacks||{};var empty=function(){},onComplete=callbacks.onComplete||empty,onChange=callbacks.onChange||empty,_this=this;return fabric.util.animate({startValue:object.top,endValue:this.getCenter().top,duration:this.FX_DURATION,onChange:function(value){object.set("top",value),_this.requestRenderAll(),onChange()},onComplete:function(){object.setCoords(),onComplete()}}),this},
/**
   * Same as `fabric.Canvas#remove` but animated
   * @param {fabric.Object} object Object to remove
   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.Canvas} thisArg
   * @chainable
   */
fxRemove:function(object,callbacks){callbacks=callbacks||{};var empty=function(){},onComplete=callbacks.onComplete||empty,onChange=callbacks.onChange||empty,_this=this;return fabric.util.animate({startValue:object.opacity,endValue:0,duration:this.FX_DURATION,onChange:function(value){object.set("opacity",value),_this.requestRenderAll(),onChange()},onComplete:function(){_this.remove(object),onComplete()}}),this}}),fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{
/**
   * Animates object's properties
   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)
   * @param {Number|Object} value Value to animate property to (if string was given first) or options object
   * @return {fabric.Object} thisArg
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}
   * @chainable
   *
   * As object — multiple properties
   *
   * object.animate({ left: ..., top: ... });
   * object.animate({ left: ..., top: ... }, { duration: ... });
   *
   * As string — one property
   *
   * object.animate('left', ...);
   * object.animate('left', { duration: ... });
   *
   */
animate:function(){if(arguments[0]&&"object"===typeof arguments[0]){var prop,skipCallbacks,propsToAnimate=[];for(prop in arguments[0])propsToAnimate.push(prop);for(var i=0,len=propsToAnimate.length;i<len;i++)prop=propsToAnimate[i],skipCallbacks=i!==len-1,this._animate(prop,arguments[0][prop],arguments[1],skipCallbacks)}else this._animate.apply(this,arguments);return this},
/**
   * @private
   * @param {String} property Property to animate
   * @param {String} to Value to animate to
   * @param {Object} [options] Options object
   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked
   */
_animate:function(property,to,options,skipCallbacks){var propPair,_this=this;to=to.toString(),options=options?fabric.util.object.clone(options):{},~property.indexOf(".")&&(propPair=property.split("."));var currentValue=propPair?this.get(propPair[0])[propPair[1]]:this.get(property);"from"in options||(options.from=currentValue),to=~to.indexOf("=")?currentValue+parseFloat(to.replace("=","")):parseFloat(to),fabric.util.animate({startValue:options.from,endValue:to,byValue:options.by,easing:options.easing,duration:options.duration,abort:options.abort&&function(){return options.abort.call(_this)},onChange:function(value,valueProgress,timeProgress){propPair?_this[propPair[0]][propPair[1]]=value:_this.set(property,value),skipCallbacks||options.onChange&&options.onChange(value,valueProgress,timeProgress)},onComplete:function(value,valueProgress,timeProgress){skipCallbacks||(_this.setCoords(),options.onComplete&&options.onComplete(value,valueProgress,timeProgress))}})}}),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,clone=fabric.util.object.clone,coordProps={x1:1,x2:1,y1:1,y2:1},supportsLineDash=fabric.StaticCanvas.supports("setLineDash");
/**
   * Produces a function that calculates distance from canvas edge to Line origin.
   */
function makeEdgeToOriginGetter(propertyNames,originValues){var origin=propertyNames.origin,axis1=propertyNames.axis1,axis2=propertyNames.axis2,dimension=propertyNames.dimension,nearest=originValues.nearest,center=originValues.center,farthest=originValues.farthest;return function(){switch(this.get(origin)){case nearest:return Math.min(this.get(axis1),this.get(axis2));case center:return Math.min(this.get(axis1),this.get(axis2))+.5*this.get(dimension);case farthest:return Math.max(this.get(axis1),this.get(axis2))}}}fabric.Line?fabric.warn("fabric.Line is already defined"):(
/**
   * Line class
   * @class fabric.Line
   * @extends fabric.Object
   * @see {@link fabric.Line#initialize} for constructor definition
   */
fabric.Line=fabric.util.createClass(fabric.Object,/** @lends fabric.Line.prototype */{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"line",
/**
     * x value or first line edge
     * @type Number
     * @default
     */
x1:0,
/**
     * y value or first line edge
     * @type Number
     * @default
     */
y1:0,
/**
     * x value or second line edge
     * @type Number
     * @default
     */
x2:0,
/**
     * y value or second line edge
     * @type Number
     * @default
     */
y2:0,cacheProperties:fabric.Object.prototype.cacheProperties.concat("x1","x2","y1","y2"),
/**
     * Constructor
     * @param {Array} [points] Array of points
     * @param {Object} [options] Options object
     * @return {fabric.Line} thisArg
     */
initialize:function(points,options){points||(points=[0,0,0,0]),this.callSuper("initialize",options),this.set("x1",points[0]),this.set("y1",points[1]),this.set("x2",points[2]),this.set("y2",points[3]),this._setWidthHeight(options)},
/**
     * @private
     * @param {Object} [options] Options
     */
_setWidthHeight:function(options){options||(options={}),this.width=Math.abs(this.x2-this.x1),this.height=Math.abs(this.y2-this.y1),this.left="left"in options?options.left:this._getLeftToOriginX(),this.top="top"in options?options.top:this._getTopToOriginY()},
/**
     * @private
     * @param {String} key
     * @param {*} value
     */
_set:function(key,value){return this.callSuper("_set",key,value),"undefined"!==typeof coordProps[key]&&this._setWidthHeight(),this},
/**
     * @private
     * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.
     */
_getLeftToOriginX:makeEdgeToOriginGetter({// property names
origin:"originX",axis1:"x1",axis2:"x2",dimension:"width"},{// possible values of origin
nearest:"left",center:"center",farthest:"right"}),
/**
     * @private
     * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.
     */
_getTopToOriginY:makeEdgeToOriginGetter({// property names
origin:"originY",axis1:"y1",axis2:"y2",dimension:"height"},{// possible values of origin
nearest:"top",center:"center",farthest:"bottom"}),
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_render:function(ctx){if(ctx.beginPath(),!this.strokeDashArray||this.strokeDashArray&&supportsLineDash){
// move from center (of virtual box) to its left/top corner
// we can't assume x1, y1 is top left and x2, y2 is bottom right
var p=this.calcLinePoints();ctx.moveTo(p.x1,p.y1),ctx.lineTo(p.x2,p.y2)}ctx.lineWidth=this.strokeWidth;
// TODO: test this
// make sure setting "fill" changes color of a line
// (by copying fillStyle to strokeStyle, since line is stroked, not filled)
var origStrokeStyle=ctx.strokeStyle;ctx.strokeStyle=this.stroke||ctx.fillStyle,this.stroke&&this._renderStroke(ctx),ctx.strokeStyle=origStrokeStyle},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderDashedStroke:function(ctx){var p=this.calcLinePoints();ctx.beginPath(),fabric.util.drawDashedLine(ctx,p.x1,p.y1,p.x2,p.y2,this.strokeDashArray),ctx.closePath()},
/**
     * This function is an helper for svg import. it returns the center of the object in the svg
     * untransformed coordinates
     * @private
     * @return {Object} center point from element coordinates
     */
_findCenterFromElement:function(){return{x:(this.x1+this.x2)/2,y:(this.y1+this.y2)/2}},
/**
     * Returns object representation of an instance
     * @methd toObject
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
toObject:function(propertiesToInclude){return extend(this.callSuper("toObject",propertiesToInclude),this.calcLinePoints())},
/*
     * Calculate object dimensions from its properties
     * @private
     */
_getNonTransformedDimensions:function(){var dim=this.callSuper("_getNonTransformedDimensions");return"butt"===this.strokeLineCap&&(0===this.width&&(dim.y-=this.strokeWidth),0===this.height&&(dim.x-=this.strokeWidth)),dim},
/**
     * Recalculates line points given width and height
     * @private
     */
calcLinePoints:function(){var xMult=this.x1<=this.x2?-1:1,yMult=this.y1<=this.y2?-1:1,x1=xMult*this.width*.5,y1=yMult*this.height*.5,x2=xMult*this.width*-.5,y2=yMult*this.height*-.5;return{x1:x1,x2:x2,y1:y1,y2:y2}},
/* _TO_SVG_START_ */
/**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
_toSVG:function(){var p=this.calcLinePoints();return["<line ","COMMON_PARTS",'x1="',p.x1,'" y1="',p.y1,'" x2="',p.x2,'" y2="',p.y2,'" />\n']}}),
/* _FROM_SVG_START_ */
/**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})
   * @static
   * @memberOf fabric.Line
   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement
   */
fabric.Line.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat("x1 y1 x2 y2".split(" ")),
/**
   * Returns fabric.Line instance from an SVG element
   * @static
   * @memberOf fabric.Line
   * @param {SVGElement} element Element to parse
   * @param {Object} [options] Options object
   * @param {Function} [callback] callback function invoked after parsing
   */
fabric.Line.fromElement=function(element,callback,options){options=options||{};var parsedAttributes=fabric.parseAttributes(element,fabric.Line.ATTRIBUTE_NAMES),points=[parsedAttributes.x1||0,parsedAttributes.y1||0,parsedAttributes.x2||0,parsedAttributes.y2||0];callback(new fabric.Line(points,extend(parsedAttributes,options)))},
/* _FROM_SVG_END_ */
/**
   * Returns fabric.Line instance from an object representation
   * @static
   * @memberOf fabric.Line
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   */
fabric.Line.fromObject=function(object,callback){function _callback(instance){delete instance.points,callback&&callback(instance)}var options=clone(object,!0);options.points=[object.x1,object.y1,object.x2,object.y2],fabric.Object._fromObject("Line",options,_callback,"points")})}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),pi=Math.PI;
/**
   * @private
   */
function isValidRadius(attributes){return"radius"in attributes&&attributes.radius>=0}
/* _FROM_SVG_END_ */
/**
   * Returns {@link fabric.Circle} instance from an object representation
   * @static
   * @memberOf fabric.Circle
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   * @return {Object} Instance of fabric.Circle
   */fabric.Circle?fabric.warn("fabric.Circle is already defined."):(
/**
   * Circle class
   * @class fabric.Circle
   * @extends fabric.Object
   * @see {@link fabric.Circle#initialize} for constructor definition
   */
fabric.Circle=fabric.util.createClass(fabric.Object,/** @lends fabric.Circle.prototype */{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"circle",
/**
     * Radius of this circle
     * @type Number
     * @default
     */
radius:0,
/**
     * Start angle of the circle, moving clockwise
     * deprectated type, this should be in degree, this was an oversight.
     * probably will change to degrees in next major version
     * @type Number
     * @default 0
     */
startAngle:0,
/**
     * End angle of the circle
     * deprectated type, this should be in degree, this was an oversight.
     * probably will change to degrees in next major version
     * @type Number
     * @default 2Pi
     */
endAngle:2*pi,cacheProperties:fabric.Object.prototype.cacheProperties.concat("radius","startAngle","endAngle"),
/**
     * @private
     * @param {String} key
     * @param {*} value
     * @return {fabric.Circle} thisArg
     */
_set:function(key,value){return this.callSuper("_set",key,value),"radius"===key&&this.setRadius(value),this},
/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
toObject:function(propertiesToInclude){return this.callSuper("toObject",["radius","startAngle","endAngle"].concat(propertiesToInclude))},
/* _TO_SVG_START_ */
/**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
_toSVG:function(){var svgString,x=0,y=0,angle=(this.endAngle-this.startAngle)%(2*pi);if(0===angle)svgString=["<circle ","COMMON_PARTS",'cx="'+x+'" cy="'+y+'" ','r="',this.radius,'" />\n'];else{var startX=fabric.util.cos(this.startAngle)*this.radius,startY=fabric.util.sin(this.startAngle)*this.radius,endX=fabric.util.cos(this.endAngle)*this.radius,endY=fabric.util.sin(this.endAngle)*this.radius,largeFlag=angle>pi?"1":"0";svgString=['<path d="M '+startX+" "+startY," A "+this.radius+" "+this.radius," 0 ",+largeFlag+" 1"," "+endX+" "+endY,'" ',"COMMON_PARTS"," />\n"]}return svgString},
/* _TO_SVG_END_ */
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render on
     */
_render:function(ctx){ctx.beginPath(),ctx.arc(0,0,this.radius,this.startAngle,this.endAngle,!1),this._renderPaintInOrder(ctx)},
/**
     * Returns horizontal radius of an object (according to how an object is scaled)
     * @return {Number}
     */
getRadiusX:function(){return this.get("radius")*this.get("scaleX")},
/**
     * Returns vertical radius of an object (according to how an object is scaled)
     * @return {Number}
     */
getRadiusY:function(){return this.get("radius")*this.get("scaleY")},
/**
     * Sets radius of an object (and updates width accordingly)
     * @return {fabric.Circle} thisArg
     */
setRadius:function(value){return this.radius=value,this.set("width",2*value).set("height",2*value)}}),
/* _FROM_SVG_START_ */
/**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})
   * @static
   * @memberOf fabric.Circle
   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement
   */
fabric.Circle.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat("cx cy r".split(" ")),
/**
   * Returns {@link fabric.Circle} instance from an SVG element
   * @static
   * @memberOf fabric.Circle
   * @param {SVGElement} element Element to parse
   * @param {Function} [callback] Options callback invoked after parsing is finished
   * @param {Object} [options] Options object
   * @throws {Error} If value of `r` attribute is missing or invalid
   */
fabric.Circle.fromElement=function(element,callback){var parsedAttributes=fabric.parseAttributes(element,fabric.Circle.ATTRIBUTE_NAMES);if(!isValidRadius(parsedAttributes))throw new Error("value of `r` attribute is required and can not be negative");parsedAttributes.left=(parsedAttributes.left||0)-parsedAttributes.radius,parsedAttributes.top=(parsedAttributes.top||0)-parsedAttributes.radius,callback(new fabric.Circle(parsedAttributes))},fabric.Circle.fromObject=function(object,callback){return fabric.Object._fromObject("Circle",object,callback)})}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={});fabric.Triangle?fabric.warn("fabric.Triangle is already defined"):(
/**
   * Triangle class
   * @class fabric.Triangle
   * @extends fabric.Object
   * @return {fabric.Triangle} thisArg
   * @see {@link fabric.Triangle#initialize} for constructor definition
   */
fabric.Triangle=fabric.util.createClass(fabric.Object,/** @lends fabric.Triangle.prototype */{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"triangle",
/**
     * Width is set to 100 to compensate the old initialize code that was setting it to 100
     * @type Number
     * @default
     */
width:100,
/**
     * Height is set to 100 to compensate the old initialize code that was setting it to 100
     * @type Number
     * @default
     */
height:100,
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_render:function(ctx){var widthBy2=this.width/2,heightBy2=this.height/2;ctx.beginPath(),ctx.moveTo(-widthBy2,heightBy2),ctx.lineTo(0,-heightBy2),ctx.lineTo(widthBy2,heightBy2),ctx.closePath(),this._renderPaintInOrder(ctx)},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderDashedStroke:function(ctx){var widthBy2=this.width/2,heightBy2=this.height/2;ctx.beginPath(),fabric.util.drawDashedLine(ctx,-widthBy2,heightBy2,0,-heightBy2,this.strokeDashArray),fabric.util.drawDashedLine(ctx,0,-heightBy2,widthBy2,heightBy2,this.strokeDashArray),fabric.util.drawDashedLine(ctx,widthBy2,heightBy2,-widthBy2,heightBy2,this.strokeDashArray),ctx.closePath()},
/* _TO_SVG_START_ */
/**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
_toSVG:function(){var widthBy2=this.width/2,heightBy2=this.height/2,points=[-widthBy2+" "+heightBy2,"0 "+-heightBy2,widthBy2+" "+heightBy2].join(",");return["<polygon ","COMMON_PARTS",'points="',points,'" />']}}),
/**
   * Returns {@link fabric.Triangle} instance from an object representation
   * @static
   * @memberOf fabric.Triangle
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   */
fabric.Triangle.fromObject=function(object,callback){return fabric.Object._fromObject("Triangle",object,callback)})}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),piBy2=2*Math.PI;fabric.Ellipse?fabric.warn("fabric.Ellipse is already defined."):(
/**
   * Ellipse class
   * @class fabric.Ellipse
   * @extends fabric.Object
   * @return {fabric.Ellipse} thisArg
   * @see {@link fabric.Ellipse#initialize} for constructor definition
   */
fabric.Ellipse=fabric.util.createClass(fabric.Object,/** @lends fabric.Ellipse.prototype */{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"ellipse",
/**
     * Horizontal radius
     * @type Number
     * @default
     */
rx:0,
/**
     * Vertical radius
     * @type Number
     * @default
     */
ry:0,cacheProperties:fabric.Object.prototype.cacheProperties.concat("rx","ry"),
/**
     * Constructor
     * @param {Object} [options] Options object
     * @return {fabric.Ellipse} thisArg
     */
initialize:function(options){this.callSuper("initialize",options),this.set("rx",options&&options.rx||0),this.set("ry",options&&options.ry||0)},
/**
     * @private
     * @param {String} key
     * @param {*} value
     * @return {fabric.Ellipse} thisArg
     */
_set:function(key,value){switch(this.callSuper("_set",key,value),key){case"rx":this.rx=value,this.set("width",2*value);break;case"ry":this.ry=value,this.set("height",2*value);break}return this},
/**
     * Returns horizontal radius of an object (according to how an object is scaled)
     * @return {Number}
     */
getRx:function(){return this.get("rx")*this.get("scaleX")},
/**
     * Returns Vertical radius of an object (according to how an object is scaled)
     * @return {Number}
     */
getRy:function(){return this.get("ry")*this.get("scaleY")},
/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
toObject:function(propertiesToInclude){return this.callSuper("toObject",["rx","ry"].concat(propertiesToInclude))},
/* _TO_SVG_START_ */
/**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
_toSVG:function(){return["<ellipse ","COMMON_PARTS",'cx="0" cy="0" ','rx="',this.rx,'" ry="',this.ry,'" />\n']},
/* _TO_SVG_END_ */
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render on
     */
_render:function(ctx){ctx.beginPath(),ctx.save(),ctx.transform(1,0,0,this.ry/this.rx,0,0),ctx.arc(0,0,this.rx,0,piBy2,!1),ctx.restore(),this._renderPaintInOrder(ctx)}}),
/* _FROM_SVG_START_ */
/**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})
   * @static
   * @memberOf fabric.Ellipse
   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement
   */
fabric.Ellipse.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat("cx cy rx ry".split(" ")),
/**
   * Returns {@link fabric.Ellipse} instance from an SVG element
   * @static
   * @memberOf fabric.Ellipse
   * @param {SVGElement} element Element to parse
   * @param {Function} [callback] Options callback invoked after parsing is finished
   * @return {fabric.Ellipse}
   */
fabric.Ellipse.fromElement=function(element,callback){var parsedAttributes=fabric.parseAttributes(element,fabric.Ellipse.ATTRIBUTE_NAMES);parsedAttributes.left=(parsedAttributes.left||0)-parsedAttributes.rx,parsedAttributes.top=(parsedAttributes.top||0)-parsedAttributes.ry,callback(new fabric.Ellipse(parsedAttributes))},
/* _FROM_SVG_END_ */
/**
   * Returns {@link fabric.Ellipse} instance from an object representation
   * @static
   * @memberOf fabric.Ellipse
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   * @return {fabric.Ellipse}
   */
fabric.Ellipse.fromObject=function(object,callback){return fabric.Object._fromObject("Ellipse",object,callback)})}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend;fabric.Rect?fabric.warn("fabric.Rect is already defined"):(
/**
   * Rectangle class
   * @class fabric.Rect
   * @extends fabric.Object
   * @return {fabric.Rect} thisArg
   * @see {@link fabric.Rect#initialize} for constructor definition
   */
fabric.Rect=fabric.util.createClass(fabric.Object,/** @lends fabric.Rect.prototype */{
/**
     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})
     * as well as for history (undo/redo) purposes
     * @type Array
     */
stateProperties:fabric.Object.prototype.stateProperties.concat("rx","ry"),
/**
     * Type of an object
     * @type String
     * @default
     */
type:"rect",
/**
     * Horizontal border radius
     * @type Number
     * @default
     */
rx:0,
/**
     * Vertical border radius
     * @type Number
     * @default
     */
ry:0,cacheProperties:fabric.Object.prototype.cacheProperties.concat("rx","ry"),
/**
     * Constructor
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */
initialize:function(options){this.callSuper("initialize",options),this._initRxRy()},
/**
     * Initializes rx/ry attributes
     * @private
     */
_initRxRy:function(){this.rx&&!this.ry?this.ry=this.rx:this.ry&&!this.rx&&(this.rx=this.ry)},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_render:function(ctx){
// 1x1 case (used in spray brush) optimization was removed because
// with caching and higher zoom level this makes more damage than help
var rx=this.rx?Math.min(this.rx,this.width/2):0,ry=this.ry?Math.min(this.ry,this.height/2):0,w=this.width,h=this.height,x=-this.width/2,y=-this.height/2,isRounded=0!==rx||0!==ry,
/* "magic number" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */
k=.4477152502;ctx.beginPath(),ctx.moveTo(x+rx,y),ctx.lineTo(x+w-rx,y),isRounded&&ctx.bezierCurveTo(x+w-k*rx,y,x+w,y+k*ry,x+w,y+ry),ctx.lineTo(x+w,y+h-ry),isRounded&&ctx.bezierCurveTo(x+w,y+h-k*ry,x+w-k*rx,y+h,x+w-rx,y+h),ctx.lineTo(x+rx,y+h),isRounded&&ctx.bezierCurveTo(x+k*rx,y+h,x,y+h-k*ry,x,y+h-ry),ctx.lineTo(x,y+ry),isRounded&&ctx.bezierCurveTo(x,y+k*ry,x+k*rx,y,x+rx,y),ctx.closePath(),this._renderPaintInOrder(ctx)},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderDashedStroke:function(ctx){var x=-this.width/2,y=-this.height/2,w=this.width,h=this.height;ctx.beginPath(),fabric.util.drawDashedLine(ctx,x,y,x+w,y,this.strokeDashArray),fabric.util.drawDashedLine(ctx,x+w,y,x+w,y+h,this.strokeDashArray),fabric.util.drawDashedLine(ctx,x+w,y+h,x,y+h,this.strokeDashArray),fabric.util.drawDashedLine(ctx,x,y+h,x,y,this.strokeDashArray),ctx.closePath()},
/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
toObject:function(propertiesToInclude){return this.callSuper("toObject",["rx","ry"].concat(propertiesToInclude))},
/* _TO_SVG_START_ */
/**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
_toSVG:function(){var x=-this.width/2,y=-this.height/2;return["<rect ","COMMON_PARTS",'x="',x,'" y="',y,'" rx="',this.rx,'" ry="',this.ry,'" width="',this.width,'" height="',this.height,'" />\n']}}),
/* _FROM_SVG_START_ */
/**
   * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)
   * @static
   * @memberOf fabric.Rect
   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement
   */
fabric.Rect.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat("x y rx ry width height".split(" ")),
/**
   * Returns {@link fabric.Rect} instance from an SVG element
   * @static
   * @memberOf fabric.Rect
   * @param {SVGElement} element Element to parse
   * @param {Function} callback callback function invoked after parsing
   * @param {Object} [options] Options object
   */
fabric.Rect.fromElement=function(element,callback,options){if(!element)return callback(null);options=options||{};var parsedAttributes=fabric.parseAttributes(element,fabric.Rect.ATTRIBUTE_NAMES);parsedAttributes.left=parsedAttributes.left||0,parsedAttributes.top=parsedAttributes.top||0,parsedAttributes.height=parsedAttributes.height||0,parsedAttributes.width=parsedAttributes.width||0;var rect=new fabric.Rect(extend(options?fabric.util.object.clone(options):{},parsedAttributes));rect.visible=rect.visible&&rect.width>0&&rect.height>0,callback(rect)},
/* _FROM_SVG_END_ */
/**
   * Returns {@link fabric.Rect} instance from an object representation
   * @static
   * @memberOf fabric.Rect
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created
   */
fabric.Rect.fromObject=function(object,callback){return fabric.Object._fromObject("Rect",object,callback)})}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,min=fabric.util.array.min,max=fabric.util.array.max,toFixed=fabric.util.toFixed;fabric.Polyline?fabric.warn("fabric.Polyline is already defined"):(
/**
   * Polyline class
   * @class fabric.Polyline
   * @extends fabric.Object
   * @see {@link fabric.Polyline#initialize} for constructor definition
   */
fabric.Polyline=fabric.util.createClass(fabric.Object,/** @lends fabric.Polyline.prototype */{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"polyline",
/**
     * Points array
     * @type Array
     * @default
     */
points:null,cacheProperties:fabric.Object.prototype.cacheProperties.concat("points"),
/**
     * Constructor
     * @param {Array} points Array of points (where each point is an object with x and y)
     * @param {Object} [options] Options object
     * @return {fabric.Polyline} thisArg
     * @example
     * var poly = new fabric.Polyline([
     *     { x: 10, y: 10 },
     *     { x: 50, y: 30 },
     *     { x: 40, y: 70 },
     *     { x: 60, y: 50 },
     *     { x: 100, y: 150 },
     *     { x: 40, y: 100 }
     *   ], {
     *   stroke: 'red',
     *   left: 100,
     *   top: 100
     * });
     */
initialize:function(points,options){options=options||{},this.points=points||[],this.callSuper("initialize",options),this._setPositionDimensions(options)},_setPositionDimensions:function(options){var correctLeftTop,calcDim=this._calcDimensions(options);this.width=calcDim.width,this.height=calcDim.height,options.fromSVG||(correctLeftTop=this.translateToGivenOrigin({x:calcDim.left-this.strokeWidth/2,y:calcDim.top-this.strokeWidth/2},"left","top",this.originX,this.originY)),"undefined"===typeof options.left&&(this.left=options.fromSVG?calcDim.left:correctLeftTop.x),"undefined"===typeof options.top&&(this.top=options.fromSVG?calcDim.top:correctLeftTop.y),this.pathOffset={x:calcDim.left+this.width/2,y:calcDim.top+this.height/2}},
/**
     * Calculate the polygon min and max point from points array,
     * returning an object with left, top, widht, height to measure the
     * polygon size
     * @return {Object} object.left X coordinate of the polygon leftmost point
     * @return {Object} object.top Y coordinate of the polygon topmost point
     * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point
     * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point
     * @private
     */
_calcDimensions:function(){var points=this.points,minX=min(points,"x")||0,minY=min(points,"y")||0,maxX=max(points,"x")||0,maxY=max(points,"y")||0,width=maxX-minX,height=maxY-minY;return{left:minX,top:minY,width:width,height:height}},
/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */
toObject:function(propertiesToInclude){return extend(this.callSuper("toObject",propertiesToInclude),{points:this.points.concat()})},
/* _TO_SVG_START_ */
/**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
_toSVG:function(){for(var points=[],diffX=this.pathOffset.x,diffY=this.pathOffset.y,NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS,i=0,len=this.points.length;i<len;i++)points.push(toFixed(this.points[i].x-diffX,NUM_FRACTION_DIGITS),",",toFixed(this.points[i].y-diffY,NUM_FRACTION_DIGITS)," ");return["<"+this.type+" ","COMMON_PARTS",'points="',points.join(""),'" />\n']},
/* _TO_SVG_END_ */
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
commonRender:function(ctx){var point,len=this.points.length,x=this.pathOffset.x,y=this.pathOffset.y;if(!len||isNaN(this.points[len-1].y))
// do not draw if no points or odd points
// NaN comes from parseFloat of a empty string in parser
return!1;ctx.beginPath(),ctx.moveTo(this.points[0].x-x,this.points[0].y-y);for(var i=0;i<len;i++)point=this.points[i],ctx.lineTo(point.x-x,point.y-y);return!0},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_render:function(ctx){this.commonRender(ctx)&&this._renderPaintInOrder(ctx)},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderDashedStroke:function(ctx){var p1,p2;ctx.beginPath();for(var i=0,len=this.points.length;i<len;i++)p1=this.points[i],p2=this.points[i+1]||p1,fabric.util.drawDashedLine(ctx,p1.x,p1.y,p2.x,p2.y,this.strokeDashArray)},
/**
     * Returns complexity of an instance
     * @return {Number} complexity of this instance
     */
complexity:function(){return this.get("points").length}}),
/* _FROM_SVG_START_ */
/**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})
   * @static
   * @memberOf fabric.Polyline
   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement
   */
fabric.Polyline.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat(),
/**
   * Returns fabric.Polyline instance from an SVG element
   * @static
   * @memberOf fabric.Polyline
   * @param {SVGElement} element Element to parser
   * @param {Function} callback callback function invoked after parsing
   * @param {Object} [options] Options object
   */
fabric.Polyline.fromElementGenerator=function(_class){return function(element,callback,options){if(!element)return callback(null);options||(options={});var points=fabric.parsePointsAttribute(element.getAttribute("points")),parsedAttributes=fabric.parseAttributes(element,fabric[_class].ATTRIBUTE_NAMES);parsedAttributes.fromSVG=!0,callback(new fabric[_class](points,extend(parsedAttributes,options)))}},fabric.Polyline.fromElement=fabric.Polyline.fromElementGenerator("Polyline"),
/* _FROM_SVG_END_ */
/**
   * Returns fabric.Polyline instance from an object representation
   * @static
   * @memberOf fabric.Polyline
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
   */
fabric.Polyline.fromObject=function(object,callback){return fabric.Object._fromObject("Polyline",object,callback,"points")})}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={});fabric.Polygon?fabric.warn("fabric.Polygon is already defined"):(
/**
   * Polygon class
   * @class fabric.Polygon
   * @extends fabric.Polyline
   * @see {@link fabric.Polygon#initialize} for constructor definition
   */
fabric.Polygon=fabric.util.createClass(fabric.Polyline,/** @lends fabric.Polygon.prototype */{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"polygon",
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_render:function(ctx){this.commonRender(ctx)&&(ctx.closePath(),this._renderPaintInOrder(ctx))},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderDashedStroke:function(ctx){this.callSuper("_renderDashedStroke",ctx),ctx.closePath()}}),
/* _FROM_SVG_START_ */
/**
   * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)
   * @static
   * @memberOf fabric.Polygon
   * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement
   */
fabric.Polygon.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat(),
/**
   * Returns {@link fabric.Polygon} instance from an SVG element
   * @static
   * @memberOf fabric.Polygon
   * @param {SVGElement} element Element to parse
   * @param {Function} callback callback function invoked after parsing
   * @param {Object} [options] Options object
   */
fabric.Polygon.fromElement=fabric.Polyline.fromElementGenerator("Polygon"),
/* _FROM_SVG_END_ */
/**
   * Returns fabric.Polygon instance from an object representation
   * @static
   * @memberOf fabric.Polygon
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
   */
fabric.Polygon.fromObject=function(object,callback){return fabric.Object._fromObject("Polygon",object,callback,"points")})}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),min=fabric.util.array.min,max=fabric.util.array.max,extend=fabric.util.object.extend,_toString=Object.prototype.toString,drawArc=fabric.util.drawArc,toFixed=fabric.util.toFixed,commandLengths={m:2,l:2,h:1,v:1,c:6,s:4,q:4,t:2,a:7},repeatedCommands={m:"l",M:"L"};fabric.Path?fabric.warn("fabric.Path is already defined"):(
/**
   * Path class
   * @class fabric.Path
   * @extends fabric.Object
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}
   * @see {@link fabric.Path#initialize} for constructor definition
   */
fabric.Path=fabric.util.createClass(fabric.Object,/** @lends fabric.Path.prototype */{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"path",
/**
     * Array of path points
     * @type Array
     * @default
     */
path:null,cacheProperties:fabric.Object.prototype.cacheProperties.concat("path","fillRule"),stateProperties:fabric.Object.prototype.stateProperties.concat("path"),
/**
     * Constructor
     * @param {Array|String} path Path data (sequence of coordinates and corresponding "command" tokens)
     * @param {Object} [options] Options object
     * @return {fabric.Path} thisArg
     */
initialize:function(path,options){options=options||{},this.callSuper("initialize",options),path||(path=[]);var fromArray="[object Array]"===_toString.call(path);this.path=fromArray?path:path.match&&path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi),this.path&&(fromArray||(this.path=this._parsePath()),fabric.Polyline.prototype._setPositionDimensions.call(this,options))},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render path on
     */
_renderPathCommands:function(ctx){var current,// current control point y
tempX,tempY,// current instruction
previous=null,subpathStartX=0,subpathStartY=0,x=0,// current x
y=0,// current y
controlX=0,// current control point x
controlY=0,l=-this.pathOffset.x,t=-this.pathOffset.y;ctx.beginPath();for(var i=0,len=this.path.length;i<len;++i){switch(current=this.path[i],current[0]){// first letter
case"l":// lineto, relative
x+=current[1],y+=current[2],ctx.lineTo(x+l,y+t);break;case"L":// lineto, absolute
x=current[1],y=current[2],ctx.lineTo(x+l,y+t);break;case"h":// horizontal lineto, relative
x+=current[1],ctx.lineTo(x+l,y+t);break;case"H":// horizontal lineto, absolute
x=current[1],ctx.lineTo(x+l,y+t);break;case"v":// vertical lineto, relative
y+=current[1],ctx.lineTo(x+l,y+t);break;case"V":// verical lineto, absolute
y=current[1],ctx.lineTo(x+l,y+t);break;case"m":// moveTo, relative
x+=current[1],y+=current[2],subpathStartX=x,subpathStartY=y,ctx.moveTo(x+l,y+t);break;case"M":// moveTo, absolute
x=current[1],y=current[2],subpathStartX=x,subpathStartY=y,ctx.moveTo(x+l,y+t);break;case"c":// bezierCurveTo, relative
tempX=x+current[5],tempY=y+current[6],controlX=x+current[3],controlY=y+current[4],ctx.bezierCurveTo(x+current[1]+l,// x1
y+current[2]+t,// y1
controlX+l,// x2
controlY+t,// y2
tempX+l,tempY+t),x=tempX,y=tempY;break;case"C":// bezierCurveTo, absolute
x=current[5],y=current[6],controlX=current[3],controlY=current[4],ctx.bezierCurveTo(current[1]+l,current[2]+t,controlX+l,controlY+t,x+l,y+t);break;case"s":// shorthand cubic bezierCurveTo, relative
// transform to absolute x,y
tempX=x+current[3],tempY=y+current[4],null===previous[0].match(/[CcSs]/)?(
// If there is no previous command or if the previous command was not a C, c, S, or s,
// the control point is coincident with the current point
controlX=x,controlY=y):(
// calculate reflection of previous control points
controlX=2*x-controlX,controlY=2*y-controlY),ctx.bezierCurveTo(controlX+l,controlY+t,x+current[1]+l,y+current[2]+t,tempX+l,tempY+t),
// set control point to 2nd one of this command
// "... the first control point is assumed to be
// the reflection of the second control point on
// the previous command relative to the current point."
controlX=x+current[1],controlY=y+current[2],x=tempX,y=tempY;break;case"S":// shorthand cubic bezierCurveTo, absolute
tempX=current[3],tempY=current[4],null===previous[0].match(/[CcSs]/)?(
// If there is no previous command or if the previous command was not a C, c, S, or s,
// the control point is coincident with the current point
controlX=x,controlY=y):(
// calculate reflection of previous control points
controlX=2*x-controlX,controlY=2*y-controlY),ctx.bezierCurveTo(controlX+l,controlY+t,current[1]+l,current[2]+t,tempX+l,tempY+t),x=tempX,y=tempY,
// set control point to 2nd one of this command
// "... the first control point is assumed to be
// the reflection of the second control point on
// the previous command relative to the current point."
controlX=current[1],controlY=current[2];break;case"q":// quadraticCurveTo, relative
// transform to absolute x,y
tempX=x+current[3],tempY=y+current[4],controlX=x+current[1],controlY=y+current[2],ctx.quadraticCurveTo(controlX+l,controlY+t,tempX+l,tempY+t),x=tempX,y=tempY;break;case"Q":// quadraticCurveTo, absolute
tempX=current[3],tempY=current[4],ctx.quadraticCurveTo(current[1]+l,current[2]+t,tempX+l,tempY+t),x=tempX,y=tempY,controlX=current[1],controlY=current[2];break;case"t":// shorthand quadraticCurveTo, relative
// transform to absolute x,y
tempX=x+current[1],tempY=y+current[2],null===previous[0].match(/[QqTt]/)?(
// If there is no previous command or if the previous command was not a Q, q, T or t,
// assume the control point is coincident with the current point
controlX=x,controlY=y):(
// calculate reflection of previous control point
controlX=2*x-controlX,controlY=2*y-controlY),ctx.quadraticCurveTo(controlX+l,controlY+t,tempX+l,tempY+t),x=tempX,y=tempY;break;case"T":tempX=current[1],tempY=current[2],null===previous[0].match(/[QqTt]/)?(
// If there is no previous command or if the previous command was not a Q, q, T or t,
// assume the control point is coincident with the current point
controlX=x,controlY=y):(
// calculate reflection of previous control point
controlX=2*x-controlX,controlY=2*y-controlY),ctx.quadraticCurveTo(controlX+l,controlY+t,tempX+l,tempY+t),x=tempX,y=tempY;break;case"a":
// TODO: optimize this
drawArc(ctx,x+l,y+t,[current[1],current[2],current[3],current[4],current[5],current[6]+x+l,current[7]+y+t]),x+=current[6],y+=current[7];break;case"A":
// TODO: optimize this
drawArc(ctx,x+l,y+t,[current[1],current[2],current[3],current[4],current[5],current[6]+l,current[7]+t]),x=current[6],y=current[7];break;case"z":case"Z":x=subpathStartX,y=subpathStartY,ctx.closePath();break}previous=current}},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render path on
     */
_render:function(ctx){this._renderPathCommands(ctx),this._renderPaintInOrder(ctx)},
/**
     * Returns string representation of an instance
     * @return {String} string representation of an instance
     */
toString:function(){return"#<fabric.Path ("+this.complexity()+'): { "top": '+this.top+', "left": '+this.left+" }>"},
/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
toObject:function(propertiesToInclude){return extend(this.callSuper("toObject",propertiesToInclude),{path:this.path.map((function(item){return item.slice()}))})},
/**
     * Returns dataless object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
toDatalessObject:function(propertiesToInclude){var o=this.toObject(["sourcePath"].concat(propertiesToInclude));return o.sourcePath&&delete o.path,o},
/* _TO_SVG_START_ */
/**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
_toSVG:function(){var path=this.path.map((function(path){return path.join(" ")})).join(" ");return["<path ","COMMON_PARTS",'d="',path,'" stroke-linecap="round" ',"/>\n"]},_getOffsetTransform:function(){var digits=fabric.Object.NUM_FRACTION_DIGITS;return" translate("+toFixed(-this.pathOffset.x,digits)+", "+toFixed(-this.pathOffset.y,digits)+")"},
/**
     * Returns svg clipPath representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
toClipPathSVG:function(reviver){var additionalTransform=this._getOffsetTransform();return"\t"+this._createBaseClipPathSVGMarkup(this._toSVG(),{reviver:reviver,additionalTransform:additionalTransform})},
/**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
toSVG:function(reviver){var additionalTransform=this._getOffsetTransform();return this._createBaseSVGMarkup(this._toSVG(),{reviver:reviver,additionalTransform:additionalTransform})},
/* _TO_SVG_END_ */
/**
     * Returns number representation of an instance complexity
     * @return {Number} complexity of this instance
     */
complexity:function(){return this.path.length},
/**
     * @private
     */
_parsePath:function(){for(var currentPath,parsed,match,coordsStr,coordsParsed,result=[],coords=[],re=fabric.rePathCommand,i=0,len=this.path.length;i<len;i++){currentPath=this.path[i],coordsStr=currentPath.slice(1).trim(),coords.length=0;while(match=re.exec(coordsStr))coords.push(match[0]);coordsParsed=[currentPath.charAt(0)];for(var j=0,jlen=coords.length;j<jlen;j++)parsed=parseFloat(coords[j]),isNaN(parsed)||coordsParsed.push(parsed);var command=coordsParsed[0],commandLength=commandLengths[command.toLowerCase()],repeatedCommand=repeatedCommands[command]||command;if(coordsParsed.length-1>commandLength)for(var k=1,klen=coordsParsed.length;k<klen;k+=commandLength)result.push([command].concat(coordsParsed.slice(k,k+commandLength))),command=repeatedCommand;else result.push(coordsParsed)}return result},
/**
     * @private
     */
_calcDimensions:function(){for(var current,// current control point y
tempX,tempY,bounds,aX=[],aY=[],// current instruction
previous=null,subpathStartX=0,subpathStartY=0,x=0,// current x
y=0,// current y
controlX=0,// current control point x
controlY=0,i=0,len=this.path.length;i<len;++i){switch(current=this.path[i],current[0]){// first letter
case"l":// lineto, relative
x+=current[1],y+=current[2],bounds=[];break;case"L":// lineto, absolute
x=current[1],y=current[2],bounds=[];break;case"h":// horizontal lineto, relative
x+=current[1],bounds=[];break;case"H":// horizontal lineto, absolute
x=current[1],bounds=[];break;case"v":// vertical lineto, relative
y+=current[1],bounds=[];break;case"V":// verical lineto, absolute
y=current[1],bounds=[];break;case"m":// moveTo, relative
x+=current[1],y+=current[2],subpathStartX=x,subpathStartY=y,bounds=[];break;case"M":// moveTo, absolute
x=current[1],y=current[2],subpathStartX=x,subpathStartY=y,bounds=[];break;case"c":// bezierCurveTo, relative
tempX=x+current[5],tempY=y+current[6],controlX=x+current[3],controlY=y+current[4],bounds=fabric.util.getBoundsOfCurve(x,y,x+current[1],// x1
y+current[2],// y1
controlX,// x2
controlY,// y2
tempX,tempY),x=tempX,y=tempY;break;case"C":// bezierCurveTo, absolute
controlX=current[3],controlY=current[4],bounds=fabric.util.getBoundsOfCurve(x,y,current[1],current[2],controlX,controlY,current[5],current[6]),x=current[5],y=current[6];break;case"s":// shorthand cubic bezierCurveTo, relative
// transform to absolute x,y
tempX=x+current[3],tempY=y+current[4],null===previous[0].match(/[CcSs]/)?(
// If there is no previous command or if the previous command was not a C, c, S, or s,
// the control point is coincident with the current point
controlX=x,controlY=y):(
// calculate reflection of previous control points
controlX=2*x-controlX,controlY=2*y-controlY),bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,x+current[1],y+current[2],tempX,tempY),
// set control point to 2nd one of this command
// "... the first control point is assumed to be
// the reflection of the second control point on
// the previous command relative to the current point."
controlX=x+current[1],controlY=y+current[2],x=tempX,y=tempY;break;case"S":// shorthand cubic bezierCurveTo, absolute
tempX=current[3],tempY=current[4],null===previous[0].match(/[CcSs]/)?(
// If there is no previous command or if the previous command was not a C, c, S, or s,
// the control point is coincident with the current point
controlX=x,controlY=y):(
// calculate reflection of previous control points
controlX=2*x-controlX,controlY=2*y-controlY),bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,current[1],current[2],tempX,tempY),x=tempX,y=tempY,
// set control point to 2nd one of this command
// "... the first control point is assumed to be
// the reflection of the second control point on
// the previous command relative to the current point."
controlX=current[1],controlY=current[2];break;case"q":// quadraticCurveTo, relative
// transform to absolute x,y
tempX=x+current[3],tempY=y+current[4],controlX=x+current[1],controlY=y+current[2],bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,controlX,controlY,tempX,tempY),x=tempX,y=tempY;break;case"Q":// quadraticCurveTo, absolute
controlX=current[1],controlY=current[2],bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,controlX,controlY,current[3],current[4]),x=current[3],y=current[4];break;case"t":// shorthand quadraticCurveTo, relative
// transform to absolute x,y
tempX=x+current[1],tempY=y+current[2],null===previous[0].match(/[QqTt]/)?(
// If there is no previous command or if the previous command was not a Q, q, T or t,
// assume the control point is coincident with the current point
controlX=x,controlY=y):(
// calculate reflection of previous control point
controlX=2*x-controlX,controlY=2*y-controlY),bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,controlX,controlY,tempX,tempY),x=tempX,y=tempY;break;case"T":tempX=current[1],tempY=current[2],null===previous[0].match(/[QqTt]/)?(
// If there is no previous command or if the previous command was not a Q, q, T or t,
// assume the control point is coincident with the current point
controlX=x,controlY=y):(
// calculate reflection of previous control point
controlX=2*x-controlX,controlY=2*y-controlY),bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,controlX,controlY,tempX,tempY),x=tempX,y=tempY;break;case"a":
// TODO: optimize this
bounds=fabric.util.getBoundsOfArc(x,y,current[1],current[2],current[3],current[4],current[5],current[6]+x,current[7]+y),x+=current[6],y+=current[7];break;case"A":
// TODO: optimize this
bounds=fabric.util.getBoundsOfArc(x,y,current[1],current[2],current[3],current[4],current[5],current[6],current[7]),x=current[6],y=current[7];break;case"z":case"Z":x=subpathStartX,y=subpathStartY;break}previous=current,bounds.forEach((function(point){aX.push(point.x),aY.push(point.y)})),aX.push(x),aY.push(y)}var minX=min(aX)||0,minY=min(aY)||0,maxX=max(aX)||0,maxY=max(aY)||0,deltaX=maxX-minX,deltaY=maxY-minY;return{left:minX,top:minY,width:deltaX,height:deltaY}}}),
/**
   * Creates an instance of fabric.Path from an object
   * @static
   * @memberOf fabric.Path
   * @param {Object} object
   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
   */
fabric.Path.fromObject=function(object,callback){if("string"===typeof object.sourcePath){var pathUrl=object.sourcePath;fabric.loadSVGFromURL(pathUrl,(function(elements){var path=elements[0];path.setOptions(object),callback&&callback(path)}))}else fabric.Object._fromObject("Path",object,callback,"path")},
/* _FROM_SVG_START_ */
/**
   * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)
   * @static
   * @memberOf fabric.Path
   * @see http://www.w3.org/TR/SVG/paths.html#PathElement
   */
fabric.Path.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat(["d"]),
/**
   * Creates an instance of fabric.Path from an SVG <path> element
   * @static
   * @memberOf fabric.Path
   * @param {SVGElement} element to parse
   * @param {Function} callback Callback to invoke when an fabric.Path instance is created
   * @param {Object} [options] Options object
   * @param {Function} [callback] Options callback invoked after parsing is finished
   */
fabric.Path.fromElement=function(element,callback,options){var parsedAttributes=fabric.parseAttributes(element,fabric.Path.ATTRIBUTE_NAMES);parsedAttributes.fromSVG=!0,callback(new fabric.Path(parsedAttributes.d,extend(parsedAttributes,options)))})}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),min=fabric.util.array.min,max=fabric.util.array.max;fabric.Group||(
/**
   * Group class
   * @class fabric.Group
   * @extends fabric.Object
   * @mixes fabric.Collection
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}
   * @see {@link fabric.Group#initialize} for constructor definition
   */
fabric.Group=fabric.util.createClass(fabric.Object,fabric.Collection,/** @lends fabric.Group.prototype */{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"group",
/**
     * Width of stroke
     * @type Number
     * @default
     */
strokeWidth:0,
/**
     * Indicates if click, mouseover, mouseout events & hoverCursor should also check for subtargets
     * @type Boolean
     * @default
     */
subTargetCheck:!1,
/**
     * Groups are container, do not render anything on theyr own, ence no cache properties
     * @type Array
     * @default
     */
cacheProperties:[],
/**
     * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still
     * available setting this boolean to true.
     * @type Boolean
     * @since 2.0.0
     * @default
     */
useSetOnGroup:!1,
/**
     * Constructor
     * @param {Object} objects Group objects
     * @param {Object} [options] Options object
     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.
     * @return {Object} thisArg
     */
initialize:function(objects,options,isAlreadyGrouped){options=options||{},this._objects=[],
// if objects enclosed in a group have been grouped already,
// we cannot change properties of objects.
// Thus we need to set options to group without objects,
isAlreadyGrouped&&this.callSuper("initialize",options),this._objects=objects||[];for(var i=this._objects.length;i--;)this._objects[i].group=this;if(isAlreadyGrouped)this._updateObjectsACoords();else{var center=options&&options.centerPoint;
// we want to set origins before calculating the bounding box.
// so that the topleft can be set with that in mind.
// if specific top and left are passed, are overwritten later
// with the callSuper('initialize', options)
void 0!==options.originX&&(this.originX=options.originX),void 0!==options.originY&&(this.originY=options.originY),
// if coming from svg i do not want to calc bounds.
// i assume width and height are passed along options
center||this._calcBounds(),this._updateObjectsCoords(center),delete options.centerPoint,this.callSuper("initialize",options)}this.setCoords()},
/**
     * @private
     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change
     */
_updateObjectsACoords:function(){for(var ignoreZoom=!0,skipAbsolute=!0,i=this._objects.length;i--;)this._objects[i].setCoords(ignoreZoom,skipAbsolute)},
/**
     * @private
     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change
     */
_updateObjectsCoords:function(center){center=center||this.getCenterPoint();for(var i=this._objects.length;i--;)this._updateObjectCoords(this._objects[i],center)},
/**
     * @private
     * @param {Object} object
     * @param {fabric.Point} center, current center of group.
     */
_updateObjectCoords:function(object,center){var objectLeft=object.left,objectTop=object.top,ignoreZoom=!0,skipAbsolute=!0;object.set({left:objectLeft-center.x,top:objectTop-center.y}),object.group=this,object.setCoords(ignoreZoom,skipAbsolute)},
/**
     * Returns string represenation of a group
     * @return {String}
     */
toString:function(){return"#<fabric.Group: ("+this.complexity()+")>"},
/**
     * Adds an object to a group; Then recalculates group's dimension, position.
     * @param {Object} object
     * @return {fabric.Group} thisArg
     * @chainable
     */
addWithUpdate:function(object){return this._restoreObjectsState(),fabric.util.resetObjectTransform(this),object&&(this._objects.push(object),object.group=this,object._set("canvas",this.canvas)),this._calcBounds(),this._updateObjectsCoords(),this.setCoords(),this.dirty=!0,this},
/**
     * Removes an object from a group; Then recalculates group's dimension, position.
     * @param {Object} object
     * @return {fabric.Group} thisArg
     * @chainable
     */
removeWithUpdate:function(object){return this._restoreObjectsState(),fabric.util.resetObjectTransform(this),this.remove(object),this._calcBounds(),this._updateObjectsCoords(),this.setCoords(),this.dirty=!0,this},
/**
     * @private
     */
_onObjectAdded:function(object){this.dirty=!0,object.group=this,object._set("canvas",this.canvas)},
/**
     * @private
     */
_onObjectRemoved:function(object){this.dirty=!0,delete object.group},
/**
     * @private
     */
_set:function(key,value){var i=this._objects.length;if(this.useSetOnGroup)while(i--)this._objects[i].setOnGroup(key,value);if("canvas"===key)while(i--)this._objects[i]._set(key,value);fabric.Object.prototype._set.call(this,key,value)},
/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
toObject:function(propertiesToInclude){var _includeDefaultValues=this.includeDefaultValues,objsToObject=this._objects.map((function(obj){var originalDefaults=obj.includeDefaultValues;obj.includeDefaultValues=_includeDefaultValues;var _obj=obj.toObject(propertiesToInclude);return obj.includeDefaultValues=originalDefaults,_obj})),obj=fabric.Object.prototype.toObject.call(this,propertiesToInclude);return obj.objects=objsToObject,obj},
/**
     * Returns object representation of an instance, in dataless mode.
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
toDatalessObject:function(propertiesToInclude){var objsToObject,sourcePath=this.sourcePath;if(sourcePath)objsToObject=sourcePath;else{var _includeDefaultValues=this.includeDefaultValues;objsToObject=this._objects.map((function(obj){var originalDefaults=obj.includeDefaultValues;obj.includeDefaultValues=_includeDefaultValues;var _obj=obj.toDatalessObject(propertiesToInclude);return obj.includeDefaultValues=originalDefaults,_obj}))}var obj=fabric.Object.prototype.toDatalessObject.call(this,propertiesToInclude);return obj.objects=objsToObject,obj},
/**
     * Renders instance on a given context
     * @param {CanvasRenderingContext2D} ctx context to render instance on
     */
render:function(ctx){this._transformDone=!0,this.callSuper("render",ctx),this._transformDone=!1},
/**
     * Decide if the object should cache or not. Create its own cache level
     * needsItsOwnCache should be used when the object drawing method requires
     * a cache step. None of the fabric classes requires it.
     * Generally you do not cache objects in groups because the group is already cached.
     * @return {Boolean}
     */
shouldCache:function(){var ownCache=fabric.Object.prototype.shouldCache.call(this);if(ownCache)for(var i=0,len=this._objects.length;i<len;i++)if(this._objects[i].willDrawShadow())return this.ownCaching=!1,!1;return ownCache},
/**
     * Check if this object or a child object will cast a shadow
     * @return {Boolean}
     */
willDrawShadow:function(){if(fabric.Object.prototype.willDrawShadow.call(this))return!0;for(var i=0,len=this._objects.length;i<len;i++)if(this._objects[i].willDrawShadow())return!0;return!1},
/**
     * Check if this group or its parent group are caching, recursively up
     * @return {Boolean}
     */
isOnACache:function(){return this.ownCaching||this.group&&this.group.isOnACache()},
/**
     * Execute the drawing operation for an object on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
drawObject:function(ctx){for(var i=0,len=this._objects.length;i<len;i++)this._objects[i].render(ctx);this._drawClipPath(ctx)},
/**
     * Check if cache is dirty
     */
isCacheDirty:function(skipCanvas){if(this.callSuper("isCacheDirty",skipCanvas))return!0;if(!this.statefullCache)return!1;for(var i=0,len=this._objects.length;i<len;i++)if(this._objects[i].isCacheDirty(!0)){if(this._cacheCanvas){
// if this group has not a cache canvas there is nothing to clean
var x=this.cacheWidth/this.zoomX,y=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-x/2,-y/2,x,y)}return!0}return!1},
/**
     * Retores original state of each of group objects (original state is that which was before group was created).
     * @private
     * @return {fabric.Group} thisArg
     * @chainable
     */
_restoreObjectsState:function(){return this._objects.forEach(this._restoreObjectState,this),this},
/**
     * Realises the transform from this group onto the supplied object
     * i.e. it tells you what would happen if the supplied object was in
     * the group, and then the group was destroyed. It mutates the supplied
     * object.
     * @param {fabric.Object} object
     * @return {fabric.Object} transformedObject
     */
realizeTransform:function(object){var matrix=object.calcTransformMatrix(),options=fabric.util.qrDecompose(matrix),center=new fabric.Point(options.translateX,options.translateY);return object.flipX=!1,object.flipY=!1,object.set("scaleX",options.scaleX),object.set("scaleY",options.scaleY),object.skewX=options.skewX,object.skewY=options.skewY,object.angle=options.angle,object.setPositionByOrigin(center,"center","center"),object},
/**
     * Restores original state of a specified object in group
     * @private
     * @param {fabric.Object} object
     * @return {fabric.Group} thisArg
     */
_restoreObjectState:function(object){return this.realizeTransform(object),object.setCoords(),delete object.group,this},
/**
     * Destroys a group (restoring state of its objects)
     * @return {fabric.Group} thisArg
     * @chainable
     */
destroy:function(){
// when group is destroyed objects needs to get a repaint to be eventually
// displayed on canvas.
return this._objects.forEach((function(object){object.set("dirty",!0)})),this._restoreObjectsState()},
/**
     * make a group an active selection, remove the group from canvas
     * the group has to be on canvas for this to work.
     * @return {fabric.ActiveSelection} thisArg
     * @chainable
     */
toActiveSelection:function(){if(this.canvas){var objects=this._objects,canvas=this.canvas;this._objects=[];var options=this.toObject();delete options.objects;var activeSelection=new fabric.ActiveSelection([]);return activeSelection.set(options),activeSelection.type="activeSelection",canvas.remove(this),objects.forEach((function(object){object.group=activeSelection,object.dirty=!0,canvas.add(object)})),activeSelection.canvas=canvas,activeSelection._objects=objects,canvas._activeObject=activeSelection,activeSelection.setCoords(),activeSelection}},
/**
     * Destroys a group (restoring state of its objects)
     * @return {fabric.Group} thisArg
     * @chainable
     */
ungroupOnCanvas:function(){return this._restoreObjectsState()},
/**
     * Sets coordinates of all objects inside group
     * @return {fabric.Group} thisArg
     * @chainable
     */
setObjectsCoords:function(){var ignoreZoom=!0,skipAbsolute=!0;return this.forEachObject((function(object){object.setCoords(ignoreZoom,skipAbsolute)})),this},
/**
     * @private
     */
_calcBounds:function(onlyWidthHeight){for(var o,prop,j,aX=[],aY=[],props=["tr","br","bl","tl"],i=0,iLen=this._objects.length,jLen=props.length,ignoreZoom=!0;i<iLen;++i)for(o=this._objects[i],o.setCoords(ignoreZoom),j=0;j<jLen;j++)prop=props[j],aX.push(o.oCoords[prop].x),aY.push(o.oCoords[prop].y);this._getBounds(aX,aY,onlyWidthHeight)},
/**
     * @private
     */
_getBounds:function(aX,aY,onlyWidthHeight){var minXY=new fabric.Point(min(aX),min(aY)),maxXY=new fabric.Point(max(aX),max(aY)),top=minXY.y||0,left=minXY.x||0,width=maxXY.x-minXY.x||0,height=maxXY.y-minXY.y||0;this.width=width,this.height=height,onlyWidthHeight||
// the bounding box always finds the topleft most corner.
// whatever is the group origin, we set up here the left/top position.
this.setPositionByOrigin({x:left,y:top},"left","top")},
/* _TO_SVG_START_ */
/**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
_toSVG:function(reviver){for(var svgString=["<g ","COMMON_PARTS"," >\n"],i=0,len=this._objects.length;i<len;i++)svgString.push("\t\t",this._objects[i].toSVG(reviver));return svgString.push("</g>\n"),svgString},
/**
     * Returns styles-string for svg-export, specific version for group
     * @return {String}
     */
getSvgStyles:function(){var opacity="undefined"!==typeof this.opacity&&1!==this.opacity?"opacity: "+this.opacity+";":"",visibility=this.visible?"":" visibility: hidden;";return[opacity,this.getSvgFilter(),visibility].join("")},
/**
     * Returns svg clipPath representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
toClipPathSVG:function(reviver){for(var svgString=[],i=0,len=this._objects.length;i<len;i++)svgString.push("\t",this._objects[i].toClipPathSVG(reviver));return this._createBaseClipPathSVGMarkup(svgString,{reviver:reviver})}}),
/**
   * Returns {@link fabric.Group} instance from an object representation
   * @static
   * @memberOf fabric.Group
   * @param {Object} object Object to create a group from
   * @param {Function} [callback] Callback to invoke when an group instance is created
   */
fabric.Group.fromObject=function(object,callback){var objects=object.objects,options=fabric.util.object.clone(object,!0);delete options.objects,"string"!==typeof objects?fabric.util.enlivenObjects(objects,(function(enlivenedObjects){fabric.util.enlivenObjects([object.clipPath],(function(enlivedClipPath){var options=fabric.util.object.clone(object,!0);options.clipPath=enlivedClipPath[0],delete options.objects,callback&&callback(new fabric.Group(enlivenedObjects,options,!0))}))})):
// it has to be an url or something went wrong.
fabric.loadSVGFromURL(objects,(function(elements){var group=fabric.util.groupSVGElements(elements,object,objects);group.set(options),callback&&callback(group)}))})}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={});fabric.ActiveSelection||(
/**
   * Group class
   * @class fabric.ActiveSelection
   * @extends fabric.Group
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}
   * @see {@link fabric.ActiveSelection#initialize} for constructor definition
   */
fabric.ActiveSelection=fabric.util.createClass(fabric.Group,/** @lends fabric.ActiveSelection.prototype */{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"activeSelection",
/**
     * Constructor
     * @param {Object} objects ActiveSelection objects
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */
initialize:function(objects,options){options=options||{},this._objects=objects||[];for(var i=this._objects.length;i--;)this._objects[i].group=this;options.originX&&(this.originX=options.originX),options.originY&&(this.originY=options.originY),this._calcBounds(),this._updateObjectsCoords(),fabric.Object.prototype.initialize.call(this,options),this.setCoords()},
/**
     * Change te activeSelection to a normal group,
     * High level function that automatically adds it to canvas as
     * active object. no events fired.
     * @since 2.0.0
     * @return {fabric.Group}
     */
toGroup:function(){var objects=this._objects.concat();this._objects=[];var options=fabric.Object.prototype.toObject.call(this),newGroup=new fabric.Group([]);if(delete options.type,newGroup.set(options),objects.forEach((function(object){object.canvas.remove(object),object.group=newGroup})),newGroup._objects=objects,!this.canvas)return newGroup;var canvas=this.canvas;return canvas.add(newGroup),canvas._activeObject=newGroup,newGroup.setCoords(),newGroup},
/**
     * If returns true, deselection is cancelled.
     * @since 2.0.0
     * @return {Boolean} [cancel]
     */
onDeselect:function(){return this.destroy(),!1},
/**
     * Returns string representation of a group
     * @return {String}
     */
toString:function(){return"#<fabric.ActiveSelection: ("+this.complexity()+")>"},
/**
     * Decide if the object should cache or not. Create its own cache level
     * objectCaching is a global flag, wins over everything
     * needsItsOwnCache should be used when the object drawing method requires
     * a cache step. None of the fabric classes requires it.
     * Generally you do not cache objects in groups because the group outside is cached.
     * @return {Boolean}
     */
shouldCache:function(){return!1},
/**
     * Check if this group or its parent group are caching, recursively up
     * @return {Boolean}
     */
isOnACache:function(){return!1},
/**
     * Renders controls and borders for the object
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Object} [styleOverride] properties to override the object style
     * @param {Object} [childrenOverride] properties to override the children overrides
     */
_renderControls:function(ctx,styleOverride,childrenOverride){ctx.save(),ctx.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1,this.callSuper("_renderControls",ctx,styleOverride),childrenOverride=childrenOverride||{},"undefined"===typeof childrenOverride.hasControls&&(childrenOverride.hasControls=!1),"undefined"===typeof childrenOverride.hasRotatingPoint&&(childrenOverride.hasRotatingPoint=!1),childrenOverride.forActiveSelection=!0;for(var i=0,len=this._objects.length;i<len;i++)this._objects[i]._renderControls(ctx,childrenOverride);ctx.restore()}}),
/**
   * Returns {@link fabric.ActiveSelection} instance from an object representation
   * @static
   * @memberOf fabric.ActiveSelection
   * @param {Object} object Object to create a group from
   * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created
   */
fabric.ActiveSelection.fromObject=function(object,callback){fabric.util.enlivenObjects(object.objects,(function(enlivenedObjects){delete object.objects,callback&&callback(new fabric.ActiveSelection(enlivenedObjects,object,!0))}))})}(exports),function(global){"use strict";var extend=fabric.util.object.extend;global.fabric||(global.fabric={}),global.fabric.Image?fabric.warn("fabric.Image is already defined."):(
/**
   * Image class
   * @class fabric.Image
   * @extends fabric.Object
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}
   * @see {@link fabric.Image#initialize} for constructor definition
   */
fabric.Image=fabric.util.createClass(fabric.Object,/** @lends fabric.Image.prototype */{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"image",
/**
     * crossOrigin value (one of "", "anonymous", "use-credentials")
     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
     * @type String
     * @default
     */
crossOrigin:"",
/**
     * Width of a stroke.
     * For image quality a stroke multiple of 2 gives better results.
     * @type Number
     * @default
     */
strokeWidth:0,
/**
     * When calling {@link fabric.Image.getSrc}, return value from element src with `element.getAttribute('src')`.
     * This allows for relative urls as image src.
     * @since 2.7.0
     * @type Boolean
     * @default
     */
srcFromAttribute:!1,
/**
     * private
     * contains last value of scaleX to detect
     * if the Image got resized after the last Render
     * @type Number
     */
_lastScaleX:1,
/**
     * private
     * contains last value of scaleY to detect
     * if the Image got resized after the last Render
     * @type Number
     */
_lastScaleY:1,
/**
     * private
     * contains last value of scaling applied by the apply filter chain
     * @type Number
     */
_filterScalingX:1,
/**
     * private
     * contains last value of scaling applied by the apply filter chain
     * @type Number
     */
_filterScalingY:1,
/**
     * minimum scale factor under which any resizeFilter is triggered to resize the image
     * 0 will disable the automatic resize. 1 will trigger automatically always.
     * number bigger than 1 are not implemented yet.
     * @type Number
     */
minimumScaleTrigger:.5,
/**
     * List of properties to consider when checking if
     * state of an object is changed ({@link fabric.Object#hasStateChanged})
     * as well as for history (undo/redo) purposes
     * @type Array
     */
stateProperties:fabric.Object.prototype.stateProperties.concat("cropX","cropY"),
/**
     * key used to retrieve the texture representing this image
     * @since 2.0.0
     * @type String
     * @default
     */
cacheKey:"",
/**
     * Image crop in pixels from original image size.
     * @since 2.0.0
     * @type Number
     * @default
     */
cropX:0,
/**
     * Image crop in pixels from original image size.
     * @since 2.0.0
     * @type Number
     * @default
     */
cropY:0,
/**
     * Constructor
     * @param {HTMLImageElement | String} element Image element
     * @param {Object} [options] Options object
     * @param {function} [callback] callback function to call after eventual filters applied.
     * @return {fabric.Image} thisArg
     */
initialize:function(element,options){options||(options={}),this.filters=[],this.cacheKey="texture"+fabric.Object.__uid++,this.callSuper("initialize",options),this._initElement(element,options)},
/**
     * Returns image element which this instance if based on
     * @return {HTMLImageElement} Image element
     */
getElement:function(){return this._element||{}},
/**
     * Sets image element for this instance to a specified one.
     * If filters defined they are applied to new image.
     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.
     * @param {HTMLImageElement} element
     * @param {Object} [options] Options object
     * @return {fabric.Image} thisArg
     * @chainable
     */
setElement:function(element,options){return this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+"_filtered"),this._element=element,this._originalElement=element,this._initConfig(options),0!==this.filters.length&&this.applyFilters(),
// resizeFilters work on the already filtered copy.
// we need to apply resizeFilters AFTER normal filters.
// applyResizeFilters is run more often than normal fiters
// and is triggered by user interactions rather than dev code
this.resizeFilter&&this.applyResizeFilters(),this},
/**
     * Delete a single texture if in webgl mode
     */
removeTexture:function(key){var backend=fabric.filterBackend;backend&&backend.evictCachesForKey&&backend.evictCachesForKey(key)},
/**
     * Delete textures, reference to elements and eventually JSDOM cleanup
     */
dispose:function(){this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+"_filtered"),this._cacheContext=void 0,["_originalElement","_element","_filteredEl","_cacheCanvas"].forEach(function(element){fabric.util.cleanUpJsdomNode(this[element]),this[element]=void 0}.bind(this))},
/**
     * Sets crossOrigin value (on an instance and corresponding image element)
     * @return {fabric.Image} thisArg
     * @chainable
     */
setCrossOrigin:function(value){return this.crossOrigin=value,this._element.crossOrigin=value,this},
/**
     * Returns original size of an image
     * @return {Object} Object with "width" and "height" properties
     */
getOriginalSize:function(){var element=this.getElement();return{width:element.naturalWidth||element.width,height:element.naturalHeight||element.height}},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_stroke:function(ctx){if(this.stroke&&0!==this.strokeWidth){var w=this.width/2,h=this.height/2;ctx.beginPath(),ctx.moveTo(-w,-h),ctx.lineTo(w,-h),ctx.lineTo(w,h),ctx.lineTo(-w,h),ctx.lineTo(-w,-h),ctx.closePath()}},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderDashedStroke:function(ctx){var x=-this.width/2,y=-this.height/2,w=this.width,h=this.height;ctx.save(),this._setStrokeStyles(ctx,this),ctx.beginPath(),fabric.util.drawDashedLine(ctx,x,y,x+w,y,this.strokeDashArray),fabric.util.drawDashedLine(ctx,x+w,y,x+w,y+h,this.strokeDashArray),fabric.util.drawDashedLine(ctx,x+w,y+h,x,y+h,this.strokeDashArray),fabric.util.drawDashedLine(ctx,x,y+h,x,y,this.strokeDashArray),ctx.closePath(),ctx.restore()},
/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */
toObject:function(propertiesToInclude){var filters=[];this.filters.forEach((function(filterObj){filterObj&&filters.push(filterObj.toObject())}));var object=extend(this.callSuper("toObject",["crossOrigin","cropX","cropY"].concat(propertiesToInclude)),{src:this.getSrc(),filters:filters});return this.resizeFilter&&(object.resizeFilter=this.resizeFilter.toObject()),object},
/**
     * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,hight.
     * @return {Boolean}
     */
hasCrop:function(){return this.cropX||this.cropY||this.width<this._element.width||this.height<this._element.height},
/* _TO_SVG_START_ */
/**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
_toSVG:function(){var strokeSvg,svgString=[],imageMarkup=[],x=-this.width/2,y=-this.height/2,clipPath="";if(this.hasCrop()){var clipPathId=fabric.Object.__uid++;svgString.push('<clipPath id="imageCrop_'+clipPathId+'">\n','\t<rect x="'+x+'" y="'+y+'" width="'+this.width+'" height="'+this.height+'" />\n',"</clipPath>\n"),clipPath=' clip-path="url(#imageCrop_'+clipPathId+')" '}if(imageMarkup.push("\t<image ","COMMON_PARTS",'xlink:href="',this.getSvgSrc(!0),'" x="',x-this.cropX,'" y="',y-this.cropY,
// we're essentially moving origin of transformation from top/left corner to the center of the shape
// by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left
// so that object's center aligns with container's left/top
'" width="',this._element.width||this._element.naturalWidth,'" height="',this._element.height||this._element.height,'"',clipPath,"></image>\n"),this.stroke||this.strokeDashArray){var origFill=this.fill;this.fill=null,strokeSvg=["\t<rect ",'x="',x,'" y="',y,'" width="',this.width,'" height="',this.height,'" style="',this.getSvgStyles(),'"/>\n'],this.fill=origFill}return svgString="fill"!==this.paintFirst?svgString.concat(strokeSvg,imageMarkup):svgString.concat(imageMarkup,strokeSvg),svgString},
/* _TO_SVG_END_ */
/**
     * Returns source of an image
     * @param {Boolean} filtered indicates if the src is needed for svg
     * @return {String} Source of an image
     */
getSrc:function(filtered){var element=filtered?this._element:this._originalElement;return element?element.toDataURL?element.toDataURL():this.srcFromAttribute?element.getAttribute("src"):element.src:this.src||""},
/**
     * Sets source of an image
     * @param {String} src Source string (URL)
     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)
     * @param {Object} [options] Options object
     * @return {fabric.Image} thisArg
     * @chainable
     */
setSrc:function(src,callback,options){return fabric.util.loadImage(src,(function(img){this.setElement(img,options),this._setWidthHeight(),callback&&callback(this)}),this,options&&options.crossOrigin),this},
/**
     * Returns string representation of an instance
     * @return {String} String representation of an instance
     */
toString:function(){return'#<fabric.Image: { src: "'+this.getSrc()+'" }>'},applyResizeFilters:function(){var filter=this.resizeFilter,minimumScale=this.minimumScaleTrigger,objectScale=this.getTotalObjectScaling(),scaleX=objectScale.scaleX,scaleY=objectScale.scaleY,elementToFilter=this._filteredEl||this._originalElement;if(this.group&&this.set("dirty",!0),!filter||scaleX>minimumScale&&scaleY>minimumScale)return this._element=elementToFilter,this._filterScalingX=1,this._filterScalingY=1,this._lastScaleX=scaleX,void(this._lastScaleY=scaleY);fabric.filterBackend||(fabric.filterBackend=fabric.initFilterBackend());var canvasEl=fabric.util.createCanvasElement(),cacheKey=this._filteredEl?this.cacheKey+"_filtered":this.cacheKey,sourceWidth=elementToFilter.width,sourceHeight=elementToFilter.height;canvasEl.width=sourceWidth,canvasEl.height=sourceHeight,this._element=canvasEl,this._lastScaleX=filter.scaleX=scaleX,this._lastScaleY=filter.scaleY=scaleY,fabric.filterBackend.applyFilters([filter],elementToFilter,sourceWidth,sourceHeight,this._element,cacheKey),this._filterScalingX=canvasEl.width/this._originalElement.width,this._filterScalingY=canvasEl.height/this._originalElement.height},
/**
     * Applies filters assigned to this image (from "filters" array) or from filter param
     * @method applyFilters
     * @param {Array} filters to be applied
     * @param {Boolean} forResizing specify if the filter operation is a resize operation
     * @return {thisArg} return the fabric.Image object
     * @chainable
     */
applyFilters:function(filters){if(filters=filters||this.filters||[],filters=filters.filter((function(filter){return filter&&!filter.isNeutralState()})),this.set("dirty",!0),
// needs to clear out or WEBGL will not resize correctly
this.removeTexture(this.cacheKey+"_filtered"),0===filters.length)return this._element=this._originalElement,this._filteredEl=null,this._filterScalingX=1,this._filterScalingY=1,this;var imgElement=this._originalElement,sourceWidth=imgElement.naturalWidth||imgElement.width,sourceHeight=imgElement.naturalHeight||imgElement.height;if(this._element===this._originalElement){
// if the element is the same we need to create a new element
var canvasEl=fabric.util.createCanvasElement();canvasEl.width=sourceWidth,canvasEl.height=sourceHeight,this._element=canvasEl,this._filteredEl=canvasEl}else
// clear the existing element to get new filter data
// also dereference the eventual resized _element
this._element=this._filteredEl,this._filteredEl.getContext("2d").clearRect(0,0,sourceWidth,sourceHeight),
// we also need to resize again at next renderAll, so remove saved _lastScaleX/Y
this._lastScaleX=1,this._lastScaleY=1;return fabric.filterBackend||(fabric.filterBackend=fabric.initFilterBackend()),fabric.filterBackend.applyFilters(filters,this._originalElement,sourceWidth,sourceHeight,this._element,this.cacheKey),this._originalElement.width===this._element.width&&this._originalElement.height===this._element.height||(this._filterScalingX=this._element.width/this._originalElement.width,this._filterScalingY=this._element.height/this._originalElement.height),this},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_render:function(ctx){!0!==this.isMoving&&this.resizeFilter&&this._needsResize()&&this.applyResizeFilters(),this._stroke(ctx),this._renderPaintInOrder(ctx)},
/**
     * Decide if the object should cache or not. Create its own cache level
     * needsItsOwnCache should be used when the object drawing method requires
     * a cache step. None of the fabric classes requires it.
     * Generally you do not cache objects in groups because the group outside is cached.
     * This is the special image version where we would like to avoid caching where possible.
     * Essentially images do not benefit from caching. They may require caching, and in that
     * case we do it. Also caching an image usually ends in a loss of details.
     * A full performance audit should be done.
     * @return {Boolean}
     */
shouldCache:function(){return this.needsItsOwnCache()},_renderFill:function(ctx){var elementToDraw=this._element;if(elementToDraw){var scaleX=this._filterScalingX,scaleY=this._filterScalingY,w=this.width,h=this.height,min=Math.min,max=Math.max,
// crop values cannot be lesser than 0.
cropX=max(this.cropX,0),cropY=max(this.cropY,0),elWidth=elementToDraw.naturalWidth||elementToDraw.width,elHeight=elementToDraw.naturalHeight||elementToDraw.height,sX=cropX*scaleX,sY=cropY*scaleY,
// the width height cannot exceed element width/height, starting from the crop offset.
sW=min(w*scaleX,elWidth-sX),sH=min(h*scaleY,elHeight-sY),x=-w/2,y=-h/2,maxDestW=min(w,elWidth/scaleX-cropX),maxDestH=min(h,elHeight/scaleX-cropY);elementToDraw&&ctx.drawImage(elementToDraw,sX,sY,sW,sH,x,y,maxDestW,maxDestH)}},
/**
     * needed to check if image needs resize
     * @private
     */
_needsResize:function(){var scale=this.getTotalObjectScaling();return scale.scaleX!==this._lastScaleX||scale.scaleY!==this._lastScaleY},
/**
     * @private
     */
_resetWidthHeight:function(){this.set(this.getOriginalSize())},
/**
     * The Image class's initialization method. This method is automatically
     * called by the constructor.
     * @private
     * @param {HTMLImageElement|String} element The element representing the image
     * @param {Object} [options] Options object
     */
_initElement:function(element,options){this.setElement(fabric.util.getById(element),options),fabric.util.addClass(this.getElement(),fabric.Image.CSS_CANVAS)},
/**
     * @private
     * @param {Object} [options] Options object
     */
_initConfig:function(options){options||(options={}),this.setOptions(options),this._setWidthHeight(options),this._element&&this.crossOrigin&&(this._element.crossOrigin=this.crossOrigin)},
/**
     * @private
     * @param {Array} filters to be initialized
     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created
     */
_initFilters:function(filters,callback){filters&&filters.length?fabric.util.enlivenObjects(filters,(function(enlivenedObjects){callback&&callback(enlivenedObjects)}),"fabric.Image.filters"):callback&&callback()},
/**
     * @private
     * Set the width and the height of the image object, using the element or the
     * options.
     * @param {Object} [options] Object with width/height properties
     */
_setWidthHeight:function(options){options||(options={});var el=this.getElement();this.width=options.width||el.naturalWidth||el.width||0,this.height=options.height||el.naturalHeight||el.height||0},
/**
     * Calculate offset for center and scale factor for the image in order to respect
     * the preserveAspectRatio attribute
     * @private
     * @return {Object}
     */
parsePreserveAspectRatioAttribute:function(){var offset,pAR=fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio||""),rWidth=this._element.width,rHeight=this._element.height,scaleX=1,scaleY=1,offsetLeft=0,offsetTop=0,cropX=0,cropY=0,pWidth=this.width,pHeight=this.height,parsedAttributes={width:pWidth,height:pHeight};return!pAR||"none"===pAR.alignX&&"none"===pAR.alignY?(scaleX=pWidth/rWidth,scaleY=pHeight/rHeight):("meet"===pAR.meetOrSlice&&(scaleX=scaleY=fabric.util.findScaleToFit(this._element,parsedAttributes),offset=(pWidth-rWidth*scaleX)/2,"Min"===pAR.alignX&&(offsetLeft=-offset),"Max"===pAR.alignX&&(offsetLeft=offset),offset=(pHeight-rHeight*scaleY)/2,"Min"===pAR.alignY&&(offsetTop=-offset),"Max"===pAR.alignY&&(offsetTop=offset)),"slice"===pAR.meetOrSlice&&(scaleX=scaleY=fabric.util.findScaleToCover(this._element,parsedAttributes),offset=rWidth-pWidth/scaleX,"Mid"===pAR.alignX&&(cropX=offset/2),"Max"===pAR.alignX&&(cropX=offset),offset=rHeight-pHeight/scaleY,"Mid"===pAR.alignY&&(cropY=offset/2),"Max"===pAR.alignY&&(cropY=offset),rWidth=pWidth/scaleX,rHeight=pHeight/scaleY)),{width:rWidth,height:rHeight,scaleX:scaleX,scaleY:scaleY,offsetLeft:offsetLeft,offsetTop:offsetTop,cropX:cropX,cropY:cropY}}}),
/**
   * Default CSS class name for canvas
   * @static
   * @type String
   * @default
   */
fabric.Image.CSS_CANVAS="canvas-img",
/**
   * Alias for getSrc
   * @static
   */
fabric.Image.prototype.getSvgSrc=fabric.Image.prototype.getSrc,
/**
   * Creates an instance of fabric.Image from its object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} callback Callback to invoke when an image instance is created
   */
fabric.Image.fromObject=function(_object,callback){var object=fabric.util.object.clone(_object);fabric.util.loadImage(object.src,(function(img,error){error?callback&&callback(null,error):fabric.Image.prototype._initFilters.call(object,object.filters,(function(filters){object.filters=filters||[],fabric.Image.prototype._initFilters.call(object,[object.resizeFilter],(function(resizeFilters){object.resizeFilter=resizeFilters[0],fabric.util.enlivenObjects([object.clipPath],(function(enlivedProps){object.clipPath=enlivedProps[0];var image=new fabric.Image(img,object);callback(image)}))}))}))}),null,object.crossOrigin)},
/**
   * Creates an instance of fabric.Image from an URL string
   * @static
   * @param {String} url URL to create an image from
   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)
   * @param {Object} [imgOptions] Options object
   */
fabric.Image.fromURL=function(url,callback,imgOptions){fabric.util.loadImage(url,(function(img){callback&&callback(new fabric.Image(img,imgOptions))}),null,imgOptions&&imgOptions.crossOrigin)},
/* _FROM_SVG_START_ */
/**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})
   * @static
   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}
   */
fabric.Image.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat("x y width height preserveAspectRatio xlink:href crossOrigin".split(" ")),
/**
   * Returns {@link fabric.Image} instance from an SVG element
   * @static
   * @param {SVGElement} element Element to parse
   * @param {Object} [options] Options object
   * @param {Function} callback Callback to execute when fabric.Image object is created
   * @return {fabric.Image} Instance of fabric.Image
   */
fabric.Image.fromElement=function(element,callback,options){var parsedAttributes=fabric.parseAttributes(element,fabric.Image.ATTRIBUTE_NAMES);fabric.Image.fromURL(parsedAttributes["xlink:href"],callback,extend(options?fabric.util.object.clone(options):{},parsedAttributes))})}(exports),fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{
/**
   * @private
   * @return {Number} angle value
   */
_getAngleValueForStraighten:function(){var angle=this.angle%360;return angle>0?90*Math.round((angle-1)/90):90*Math.round(angle/90)},
/**
   * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)
   * @return {fabric.Object} thisArg
   * @chainable
   */
straighten:function(){return this.rotate(this._getAngleValueForStraighten()),this},
/**
   * Same as {@link fabric.Object.prototype.straighten} but with animation
   * @param {Object} callbacks Object with callback functions
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.Object} thisArg
   * @chainable
   */
fxStraighten:function(callbacks){callbacks=callbacks||{};var empty=function(){},onComplete=callbacks.onComplete||empty,onChange=callbacks.onChange||empty,_this=this;return fabric.util.animate({startValue:this.get("angle"),endValue:this._getAngleValueForStraighten(),duration:this.FX_DURATION,onChange:function(value){_this.rotate(value),onChange()},onComplete:function(){_this.setCoords(),onComplete()}}),this}}),fabric.util.object.extend(fabric.StaticCanvas.prototype,/** @lends fabric.StaticCanvas.prototype */{
/**
   * Straightens object, then rerenders canvas
   * @param {fabric.Object} object Object to straighten
   * @return {fabric.Canvas} thisArg
   * @chainable
   */
straightenObject:function(object){return object.straighten(),this.requestRenderAll(),this},
/**
   * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated
   * @param {fabric.Object} object Object to straighten
   * @return {fabric.Canvas} thisArg
   * @chainable
   */
fxStraightenObject:function(object){return object.fxStraighten({onChange:this.requestRenderAllBound}),this}}),function(){"use strict";
/**
   * Tests if webgl supports certain precision
   * @param {WebGL} Canvas WebGL context to test on
   * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'
   * @returns {Boolean} Whether the user's browser WebGL supports given precision.
   */function testPrecision(gl,precision){var fragmentSource="precision "+precision+" float;\nvoid main(){}",fragmentShader=gl.createShader(gl.FRAGMENT_SHADER);return gl.shaderSource(fragmentShader,fragmentSource),gl.compileShader(fragmentShader),!!gl.getShaderParameter(fragmentShader,gl.COMPILE_STATUS)}
/**
   * Indicate whether this filtering backend is supported by the user's browser.
   * @param {Number} tileSize check if the tileSize is supported
   * @returns {Boolean} Whether the user's browser supports WebGL.
   */
/**
   * WebGL filter backend.
   */
function WebglFilterBackend(options){options&&options.tileSize&&(this.tileSize=options.tileSize),this.setupGLContext(this.tileSize,this.tileSize),this.captureGPUInfo()}fabric.isWebglSupported=function(tileSize){if(fabric.isLikelyNode)return!1;tileSize=tileSize||fabric.WebglFilterBackend.prototype.tileSize;var canvas=document.createElement("canvas"),gl=canvas.getContext("webgl")||canvas.getContext("experimental-webgl"),isSupported=!1;
// eslint-disable-next-line
if(gl){fabric.maxTextureSize=gl.getParameter(gl.MAX_TEXTURE_SIZE),isSupported=fabric.maxTextureSize>=tileSize;for(var precisions=["highp","mediump","lowp"],i=0;i<3;i++)if(testPrecision(gl,precisions[i])){fabric.webGlPrecision=precisions[i];break}}return this.isSupported=isSupported,isSupported},fabric.WebglFilterBackend=WebglFilterBackend,WebglFilterBackend.prototype=/** @lends fabric.WebglFilterBackend.prototype */{tileSize:2048,
/**
     * Experimental. This object is a sort of repository of help layers used to avoid
     * of recreating them during frequent filtering. If you are previewing a filter with
     * a slider you problably do not want to create help layers every filter step.
     * in this object there will be appended some canvases, created once, resized sometimes
     * cleared never. Clearing is left to the developer.
     **/
resources:{},
/**
     * Setup a WebGL context suitable for filtering, and bind any needed event handlers.
     */
setupGLContext:function(width,height){this.dispose(),this.createWebGLCanvas(width,height),
// eslint-disable-next-line
this.aPosition=new Float32Array([0,0,0,1,1,0,1,1]),this.chooseFastestCopyGLTo2DMethod(width,height)},
/**
     * Pick a method to copy data from GL context to 2d canvas.  In some browsers using
     * putImageData is faster than drawImage for that specific operation.
     */
chooseFastestCopyGLTo2DMethod:function(width,height){var canUseImageData,canMeasurePerf="undefined"!==typeof window.performance;try{new ImageData(1,1),canUseImageData=!0}catch(e){canUseImageData=!1}
// eslint-disable-next-line no-undef
var canUseArrayBuffer="undefined"!==typeof ArrayBuffer,canUseUint8Clamped="undefined"!==typeof Uint8ClampedArray;
// eslint-disable-next-line no-undef
if(canMeasurePerf&&canUseImageData&&canUseArrayBuffer&&canUseUint8Clamped){var targetCanvas=fabric.util.createCanvasElement(),imageBuffer=new ArrayBuffer(width*height*4);
// eslint-disable-next-line no-undef
if(fabric.forceGLPutImageData)return this.imageBuffer=imageBuffer,void(this.copyGLTo2D=copyGLTo2DPutImageData);var startTime,drawImageTime,putImageDataTime,testContext={imageBuffer:imageBuffer,destinationWidth:width,destinationHeight:height,targetCanvas:targetCanvas};targetCanvas.width=width,targetCanvas.height=height,startTime=window.performance.now(),copyGLTo2DDrawImage.call(testContext,this.gl,testContext),drawImageTime=window.performance.now()-startTime,startTime=window.performance.now(),copyGLTo2DPutImageData.call(testContext,this.gl,testContext),putImageDataTime=window.performance.now()-startTime,drawImageTime>putImageDataTime?(this.imageBuffer=imageBuffer,this.copyGLTo2D=copyGLTo2DPutImageData):this.copyGLTo2D=copyGLTo2DDrawImage}},
/**
     * Create a canvas element and associated WebGL context and attaches them as
     * class properties to the GLFilterBackend class.
     */
createWebGLCanvas:function(width,height){var canvas=fabric.util.createCanvasElement();canvas.width=width,canvas.height=height;var glOptions={alpha:!0,premultipliedAlpha:!1,depth:!1,stencil:!1,antialias:!1},gl=canvas.getContext("webgl",glOptions);gl||(gl=canvas.getContext("experimental-webgl",glOptions)),gl&&(gl.clearColor(0,0,0,0),
// this canvas can fire webglcontextlost and webglcontextrestored
this.canvas=canvas,this.gl=gl)},
/**
     * Attempts to apply the requested filters to the source provided, drawing the filtered output
     * to the provided target canvas.
     *
     * @param {Array} filters The filters to apply.
     * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.
     * @param {Number} width The width of the source input.
     * @param {Number} height The height of the source input.
     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.
     * @param {String|undefined} cacheKey A key used to cache resources related to the source. If
     * omitted, caching will be skipped.
     */
applyFilters:function(filters,source,width,height,targetCanvas,cacheKey){var cachedTexture,gl=this.gl;cacheKey&&(cachedTexture=this.getCachedTexture(cacheKey,source));var pipelineState={originalWidth:source.width||source.originalWidth,originalHeight:source.height||source.originalHeight,sourceWidth:width,sourceHeight:height,destinationWidth:width,destinationHeight:height,context:gl,sourceTexture:this.createTexture(gl,width,height,!cachedTexture&&source),targetTexture:this.createTexture(gl,width,height),originalTexture:cachedTexture||this.createTexture(gl,width,height,!cachedTexture&&source),passes:filters.length,webgl:!0,aPosition:this.aPosition,programCache:this.programCache,pass:0,filterBackend:this,targetCanvas:targetCanvas},tempFbo=gl.createFramebuffer();return gl.bindFramebuffer(gl.FRAMEBUFFER,tempFbo),filters.forEach((function(filter){filter&&filter.applyTo(pipelineState)})),resizeCanvasIfNeeded(pipelineState),this.copyGLTo2D(gl,pipelineState),gl.bindTexture(gl.TEXTURE_2D,null),gl.deleteTexture(pipelineState.sourceTexture),gl.deleteTexture(pipelineState.targetTexture),gl.deleteFramebuffer(tempFbo),targetCanvas.getContext("2d").setTransform(1,0,0,1,0,0),pipelineState},
/**
     * Detach event listeners, remove references, and clean up caches.
     */
dispose:function(){this.canvas&&(this.canvas=null,this.gl=null),this.clearWebGLCaches()},
/**
     * Wipe out WebGL-related caches.
     */
clearWebGLCaches:function(){this.programCache={},this.textureCache={}},
/**
     * Create a WebGL texture object.
     *
     * Accepts specific dimensions to initialize the textuer to or a source image.
     *
     * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.
     * @param {Number} width The width to initialize the texture at.
     * @param {Number} height The height to initialize the texture.
     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.
     * @returns {WebGLTexture}
     */
createTexture:function(gl,width,height,textureImageSource){var texture=gl.createTexture();return gl.bindTexture(gl.TEXTURE_2D,texture),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE),textureImageSource?gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,textureImageSource):gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,width,height,0,gl.RGBA,gl.UNSIGNED_BYTE,null),texture},
/**
     * Can be optionally used to get a texture from the cache array
     *
     * If an existing texture is not found, a new texture is created and cached.
     *
     * @param {String} uniqueId A cache key to use to find an existing texture.
     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the
     * texture cache entry if one does not already exist.
     */
getCachedTexture:function(uniqueId,textureImageSource){if(this.textureCache[uniqueId])return this.textureCache[uniqueId];var texture=this.createTexture(this.gl,textureImageSource.width,textureImageSource.height,textureImageSource);return this.textureCache[uniqueId]=texture,texture},
/**
     * Clear out cached resources related to a source image that has been
     * filtered previously.
     *
     * @param {String} cacheKey The cache key provided when the source image was filtered.
     */
evictCachesForKey:function(cacheKey){this.textureCache[cacheKey]&&(this.gl.deleteTexture(this.textureCache[cacheKey]),delete this.textureCache[cacheKey])},copyGLTo2D:copyGLTo2DDrawImage,
/**
     * Attempt to extract GPU information strings from a WebGL context.
     *
     * Useful information when debugging or blacklisting specific GPUs.
     *
     * @returns {Object} A GPU info object with renderer and vendor strings.
     */
captureGPUInfo:function(){if(this.gpuInfo)return this.gpuInfo;var gl=this.gl,gpuInfo={renderer:"",vendor:""};if(!gl)return gpuInfo;var ext=gl.getExtension("WEBGL_debug_renderer_info");if(ext){var renderer=gl.getParameter(ext.UNMASKED_RENDERER_WEBGL),vendor=gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);renderer&&(gpuInfo.renderer=renderer.toLowerCase()),vendor&&(gpuInfo.vendor=vendor.toLowerCase())}return this.gpuInfo=gpuInfo,gpuInfo}}}(),function(){"use strict";var noop=function(){};
/**
   * Canvas 2D filter backend.
   */
function Canvas2dFilterBackend(){}fabric.Canvas2dFilterBackend=Canvas2dFilterBackend,Canvas2dFilterBackend.prototype=/** @lends fabric.Canvas2dFilterBackend.prototype */{evictCachesForKey:noop,dispose:noop,clearWebGLCaches:noop,
/**
     * Experimental. This object is a sort of repository of help layers used to avoid
     * of recreating them during frequent filtering. If you are previewing a filter with
     * a slider you probably do not want to create help layers every filter step.
     * in this object there will be appended some canvases, created once, resized sometimes
     * cleared never. Clearing is left to the developer.
     **/
resources:{},
/**
     * Apply a set of filters against a source image and draw the filtered output
     * to the provided destination canvas.
     *
     * @param {EnhancedFilter} filters The filter to apply.
     * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.
     * @param {Number} sourceWidth The width of the source input.
     * @param {Number} sourceHeight The height of the source input.
     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.
     */
applyFilters:function(filters,sourceElement,sourceWidth,sourceHeight,targetCanvas){var ctx=targetCanvas.getContext("2d");ctx.drawImage(sourceElement,0,0,sourceWidth,sourceHeight);var imageData=ctx.getImageData(0,0,sourceWidth,sourceHeight),originalImageData=ctx.getImageData(0,0,sourceWidth,sourceHeight),pipelineState={sourceWidth:sourceWidth,sourceHeight:sourceHeight,imageData:imageData,originalEl:sourceElement,originalImageData:originalImageData,canvasEl:targetCanvas,ctx:ctx,filterBackend:this};return filters.forEach((function(filter){filter.applyTo(pipelineState)})),pipelineState.imageData.width===sourceWidth&&pipelineState.imageData.height===sourceHeight||(targetCanvas.width=pipelineState.imageData.width,targetCanvas.height=pipelineState.imageData.height),ctx.putImageData(pipelineState.imageData,0,0),pipelineState}}}(),
/**
 * @namespace fabric.Image.filters
 * @memberOf fabric.Image
 * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}
 * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
 */
fabric.Image=fabric.Image||{},fabric.Image.filters=fabric.Image.filters||{},
/**
 * Root filter class from which all filter classes inherit from
 * @class fabric.Image.filters.BaseFilter
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.BaseFilter=fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */{
/**
   * Filter type
   * @param {String} type
   * @default
   */
type:"BaseFilter",
/**
   * Array of attributes to send with buffers. do not modify
   * @private
   */
vertexSource:"attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvoid main() {\nvTexCoord = aPosition;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",fragmentSource:"precision highp float;\nvarying vec2 vTexCoord;\nuniform sampler2D uTexture;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\n}",
/**
   * Constructor
   * @param {Object} [options] Options object
   */
initialize:function(options){options&&this.setOptions(options)},
/**
   * Sets filter's properties from options
   * @param {Object} [options] Options object
   */
setOptions:function(options){for(var prop in options)this[prop]=options[prop]},
/**
   * Compile this filter's shader program.
   *
   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.
   * @param {String} fragmentSource fragmentShader source for compilation
   * @param {String} vertexSource vertexShader source for compilation
   */
createProgram:function(gl,fragmentSource,vertexSource){fragmentSource=fragmentSource||this.fragmentSource,vertexSource=vertexSource||this.vertexSource,"highp"!==fabric.webGlPrecision&&(fragmentSource=fragmentSource.replace(/precision highp float/g,"precision "+fabric.webGlPrecision+" float"));var vertexShader=gl.createShader(gl.VERTEX_SHADER);if(gl.shaderSource(vertexShader,vertexSource),gl.compileShader(vertexShader),!gl.getShaderParameter(vertexShader,gl.COMPILE_STATUS))throw new Error(
// eslint-disable-next-line prefer-template
"Vertex shader compile error for "+this.type+": "+gl.getShaderInfoLog(vertexShader));var fragmentShader=gl.createShader(gl.FRAGMENT_SHADER);if(gl.shaderSource(fragmentShader,fragmentSource),gl.compileShader(fragmentShader),!gl.getShaderParameter(fragmentShader,gl.COMPILE_STATUS))throw new Error(
// eslint-disable-next-line prefer-template
"Fragment shader compile error for "+this.type+": "+gl.getShaderInfoLog(fragmentShader));var program=gl.createProgram();if(gl.attachShader(program,vertexShader),gl.attachShader(program,fragmentShader),gl.linkProgram(program),!gl.getProgramParameter(program,gl.LINK_STATUS))throw new Error(
// eslint-disable-next-line prefer-template
'Shader link error for "${this.type}" '+gl.getProgramInfoLog(program));var attributeLocations=this.getAttributeLocations(gl,program),uniformLocations=this.getUniformLocations(gl,program)||{};return uniformLocations.uStepW=gl.getUniformLocation(program,"uStepW"),uniformLocations.uStepH=gl.getUniformLocation(program,"uStepH"),{program:program,attributeLocations:attributeLocations,uniformLocations:uniformLocations}},
/**
   * Return a map of attribute names to WebGLAttributeLocation objects.
   *
   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.
   * @returns {Object} A map of attribute names to attribute locations.
   */
getAttributeLocations:function(gl,program){return{aPosition:gl.getAttribLocation(program,"aPosition")}},
/**
   * Return a map of uniform names to WebGLUniformLocation objects.
   *
   * Intended to be overridden by subclasses.
   *
   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.
   * @returns {Object} A map of uniform names to uniform locations.
   */
getUniformLocations:function(){
// in case i do not need any special uniform i need to return an empty object
return{}},
/**
   * Send attribute data from this filter to its shader program on the GPU.
   *
   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
   * @param {Object} attributeLocations A map of shader attribute names to their locations.
   */
sendAttributeData:function(gl,attributeLocations,aPositionData){var attributeLocation=attributeLocations.aPosition,buffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,buffer),gl.enableVertexAttribArray(attributeLocation),gl.vertexAttribPointer(attributeLocation,2,gl.FLOAT,!1,0,0),gl.bufferData(gl.ARRAY_BUFFER,aPositionData,gl.STATIC_DRAW)},_setupFrameBuffer:function(options){var width,height,gl=options.context;options.passes>1?(width=options.destinationWidth,height=options.destinationHeight,options.sourceWidth===width&&options.sourceHeight===height||(gl.deleteTexture(options.targetTexture),options.targetTexture=options.filterBackend.createTexture(gl,width,height)),gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,options.targetTexture,0)):(
// draw last filter on canvas and not to framebuffer.
gl.bindFramebuffer(gl.FRAMEBUFFER,null),gl.finish())},_swapTextures:function(options){options.passes--,options.pass++;var temp=options.targetTexture;options.targetTexture=options.sourceTexture,options.sourceTexture=temp},
/**
   * Generic isNeutral implementation for one parameter based filters.
   * Used only in image applyFilters to discard filters that will not have an effect
   * on the image
   * Other filters may need their own verison ( ColorMatrix, HueRotation, gamma, ComposedFilter )
   * @param {Object} options
   **/
isNeutralState:function(){var main=this.mainParameter,_class=fabric.Image.filters[this.type].prototype;if(main){if(Array.isArray(_class[main])){for(var i=_class[main].length;i--;)if(this[main][i]!==_class[main][i])return!1;return!0}return _class[main]===this[main]}return!1},
/**
   * Apply this filter to the input image data provided.
   *
   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
   *
   * @param {Object} options
   * @param {Number} options.passes The number of filters remaining to be executed
   * @param {Boolean} options.webgl Whether to use webgl to render the filter.
   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
   * @param {WebGLRenderingContext} options.context The GL context used for rendering.
   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
   */
applyTo:function(options){options.webgl?(this._setupFrameBuffer(options),this.applyToWebGL(options),this._swapTextures(options)):this.applyTo2d(options)},
/**
   * Retrieves the cached shader.
   * @param {Object} options
   * @param {WebGLRenderingContext} options.context The GL context used for rendering.
   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
   */
retrieveShader:function(options){return options.programCache.hasOwnProperty(this.type)||(options.programCache[this.type]=this.createProgram(options.context)),options.programCache[this.type]},
/**
   * Apply this filter using webgl.
   *
   * @param {Object} options
   * @param {Number} options.passes The number of filters remaining to be executed
   * @param {Boolean} options.webgl Whether to use webgl to render the filter.
   * @param {WebGLTexture} options.originalTexture The texture of the original input image.
   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
   * @param {WebGLRenderingContext} options.context The GL context used for rendering.
   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
   */
applyToWebGL:function(options){var gl=options.context,shader=this.retrieveShader(options);0===options.pass&&options.originalTexture?gl.bindTexture(gl.TEXTURE_2D,options.originalTexture):gl.bindTexture(gl.TEXTURE_2D,options.sourceTexture),gl.useProgram(shader.program),this.sendAttributeData(gl,shader.attributeLocations,options.aPosition),gl.uniform1f(shader.uniformLocations.uStepW,1/options.sourceWidth),gl.uniform1f(shader.uniformLocations.uStepH,1/options.sourceHeight),this.sendUniformData(gl,shader.uniformLocations),gl.viewport(0,0,options.destinationWidth,options.destinationHeight),gl.drawArrays(gl.TRIANGLE_STRIP,0,4)},bindAdditionalTexture:function(gl,texture,textureUnit){gl.activeTexture(textureUnit),gl.bindTexture(gl.TEXTURE_2D,texture),
// reset active texture to 0 as usual
gl.activeTexture(gl.TEXTURE0)},unbindAdditionalTexture:function(gl,textureUnit){gl.activeTexture(textureUnit),gl.bindTexture(gl.TEXTURE_2D,null),gl.activeTexture(gl.TEXTURE0)},getMainParameter:function(){return this[this.mainParameter]},setMainParameter:function(value){this[this.mainParameter]=value},
/**
   * Send uniform data from this filter to its shader program on the GPU.
   *
   * Intended to be overridden by subclasses.
   *
   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
   * @param {Object} uniformLocations A map of shader uniform names to their locations.
   */
sendUniformData:function(){
// Intentionally left blank.  Override me in subclasses.
},
/**
   * If needed by a 2d filter, this functions can create an helper canvas to be used
   * remember that options.targetCanvas is available for use till end of chain.
   */
createHelpLayer:function(options){if(!options.helpLayer){var helpLayer=document.createElement("canvas");helpLayer.width=options.sourceWidth,helpLayer.height=options.sourceHeight,options.helpLayer=helpLayer}},
/**
   * Returns object representation of an instance
   * @return {Object} Object representation of an instance
   */
toObject:function(){var object={type:this.type},mainP=this.mainParameter;return mainP&&(object[mainP]=this[mainP]),object},
/**
   * Returns a JSON representation of an instance
   * @return {Object} JSON
   */
toJSON:function(){
// delegate, not alias
return this.toObject()}}),fabric.Image.filters.BaseFilter.fromObject=function(object,callback){var filter=new fabric.Image.filters[object.type](object);return callback&&callback(filter),filter},function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Color Matrix filter class
   * @class fabric.Image.filters.ColorMatrix
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}
   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}
   * @example <caption>Kodachrome filter</caption>
   * var filter = new fabric.Image.filters.ColorMatrix({
   *  matrix: [
       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,
       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,
       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,
       0, 0, 0, 1, 0
      ]
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */filters.ColorMatrix=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.ColorMatrix.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"ColorMatrix",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nuniform mat4 uColorMatrix;\nuniform vec4 uConstants;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor *= uColorMatrix;\ncolor += uConstants;\ngl_FragColor = color;\n}",
/**
     * Colormatrix for pixels.
     * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning
     * outside the -1, 1 range.
     * 0.0039215686 is the part of 1 that get translated to 1 in 2d
     * @param {Array} matrix array of 20 numbers.
     * @default
     */
matrix:[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],mainParameter:"matrix",
/**
     * Lock the colormatrix on the color part, skipping alpha, manly for non webgl scenario
     * to save some calculation
     */
colorsOnly:!0,
/**
     * Constructor
     * @param {Object} [options] Options object
     */
initialize:function(options){this.callSuper("initialize",options),
// create a new array instead mutating the prototype with push
this.matrix=this.matrix.slice(0)},
/**
     * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8Array to be filtered.
     */
applyTo2d:function(options){var r,g,b,a,i,imageData=options.imageData,data=imageData.data,iLen=data.length,m=this.matrix,colorsOnly=this.colorsOnly;for(i=0;i<iLen;i+=4)r=data[i],g=data[i+1],b=data[i+2],colorsOnly?(data[i]=r*m[0]+g*m[1]+b*m[2]+255*m[4],data[i+1]=r*m[5]+g*m[6]+b*m[7]+255*m[9],data[i+2]=r*m[10]+g*m[11]+b*m[12]+255*m[14]):(a=data[i+3],data[i]=r*m[0]+g*m[1]+b*m[2]+a*m[3]+255*m[4],data[i+1]=r*m[5]+g*m[6]+b*m[7]+a*m[8]+255*m[9],data[i+2]=r*m[10]+g*m[11]+b*m[12]+a*m[13]+255*m[14],data[i+3]=r*m[15]+g*m[16]+b*m[17]+a*m[18]+255*m[19])},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uColorMatrix:gl.getUniformLocation(program,"uColorMatrix"),uConstants:gl.getUniformLocation(program,"uConstants")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){var m=this.matrix,matrix=[m[0],m[1],m[2],m[3],m[5],m[6],m[7],m[8],m[10],m[11],m[12],m[13],m[15],m[16],m[17],m[18]],constants=[m[4],m[9],m[14],m[19]];gl.uniformMatrix4fv(uniformLocations.uColorMatrix,!1,matrix),gl.uniform4fv(uniformLocations.uConstants,constants)}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] function to invoke after filter creation
   * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix
   */
fabric.Image.filters.ColorMatrix.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Brightness filter class
   * @class fabric.Image.filters.Brightness
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Brightness({
   *   brightness: 0.05
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */filters.Brightness=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Brightness.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"Brightness",
/**
     * Fragment source for the brightness program
     */
fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uBrightness;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += uBrightness;\ngl_FragColor = color;\n}",
/**
     * Brightness value, from -1 to 1.
     * translated to -255 to 255 for 2d
     * 0.0039215686 is the part of 1 that get translated to 1 in 2d
     * @param {Number} brightness
     * @default
     */
brightness:0,
/**
     * Describe the property that is the filter parameter
     * @param {String} m
     * @default
     */
mainParameter:"brightness",
/**
    * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
    *
    * @param {Object} options
    * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
    */
applyTo2d:function(options){if(0!==this.brightness){var i,imageData=options.imageData,data=imageData.data,len=data.length,brightness=Math.round(255*this.brightness);for(i=0;i<len;i+=4)data[i]=data[i]+brightness,data[i+1]=data[i+1]+brightness,data[i+2]=data[i+2]+brightness}},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uBrightness:gl.getUniformLocation(program,"uBrightness")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){gl.uniform1f(uniformLocations.uBrightness,this.brightness)}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness
   */
fabric.Image.filters.Brightness.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Adapted from <a href="http://www.html5rocks.com/en/tutorials/canvas/imagefilters/">html5rocks article</a>
   * @class fabric.Image.filters.Convolute
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example <caption>Sharpen filter</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   matrix: [ 0, -1,  0,
   *            -1,  5, -1,
   *             0, -1,  0 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   * @example <caption>Blur filter</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   matrix: [ 1/9, 1/9, 1/9,
   *             1/9, 1/9, 1/9,
   *             1/9, 1/9, 1/9 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   * @example <caption>Emboss filter</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   matrix: [ 1,   1,  1,
   *             1, 0.7, -1,
   *            -1,  -1, -1 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   * @example <caption>Emboss filter with opaqueness</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   opaque: true,
   *   matrix: [ 1,   1,  1,
   *             1, 0.7, -1,
   *            -1,  -1, -1 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */filters.Convolute=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Convolute.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"Convolute",
/*
     * Opaque value (true/false)
     */
opaque:!1,
/*
     * matrix for the filter, max 9x9
     */
matrix:[0,0,0,0,1,0,0,0,0],
/**
     * Fragment source for the brightness program
     */
fragmentSource:{Convolute_3_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_3_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_5_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_5_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_7_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_7_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_9_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_9_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}"},
/**
     * Constructor
     * @memberOf fabric.Image.filters.Convolute.prototype
     * @param {Object} [options] Options object
     * @param {Boolean} [options.opaque=false] Opaque value (true/false)
     * @param {Array} [options.matrix] Filter matrix
     */
/**
    * Retrieves the cached shader.
    * @param {Object} options
    * @param {WebGLRenderingContext} options.context The GL context used for rendering.
    * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
    */
retrieveShader:function(options){var size=Math.sqrt(this.matrix.length),cacheKey=this.type+"_"+size+"_"+(this.opaque?1:0),shaderSource=this.fragmentSource[cacheKey];return options.programCache.hasOwnProperty(cacheKey)||(options.programCache[cacheKey]=this.createProgram(options.context,shaderSource)),options.programCache[cacheKey]},
/**
     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
applyTo2d:function(options){var r,g,b,a,dstOff,scx,scy,srcOff,wt,x,y,cx,cy,imageData=options.imageData,data=imageData.data,weights=this.matrix,side=Math.round(Math.sqrt(weights.length)),halfSide=Math.floor(side/2),sw=imageData.width,sh=imageData.height,output=options.ctx.createImageData(sw,sh),dst=output.data,
// go through the destination image pixels
alphaFac=this.opaque?1:0;for(y=0;y<sh;y++)for(x=0;x<sw;x++){for(dstOff=4*(y*sw+x),
// calculate the weighed sum of the source image pixels that
// fall under the convolution matrix
r=0,g=0,b=0,a=0,cy=0;cy<side;cy++)for(cx=0;cx<side;cx++)scy=y+cy-halfSide,scx=x+cx-halfSide,
// eslint-disable-next-line max-depth
scy<0||scy>=sh||scx<0||scx>=sw||(srcOff=4*(scy*sw+scx),wt=weights[cy*side+cx],r+=data[srcOff]*wt,g+=data[srcOff+1]*wt,b+=data[srcOff+2]*wt,
// eslint-disable-next-line max-depth
alphaFac||(a+=data[srcOff+3]*wt));dst[dstOff]=r,dst[dstOff+1]=g,dst[dstOff+2]=b,dst[dstOff+3]=alphaFac?data[dstOff+3]:a}options.imageData=output},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uMatrix:gl.getUniformLocation(program,"uMatrix"),uOpaque:gl.getUniformLocation(program,"uOpaque"),uHalfSize:gl.getUniformLocation(program,"uHalfSize"),uSize:gl.getUniformLocation(program,"uSize")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){gl.uniform1fv(uniformLocations.uMatrix,this.matrix)},
/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
toObject:function(){return extend(this.callSuper("toObject"),{opaque:this.opaque,matrix:this.matrix})}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute
   */
fabric.Image.filters.Convolute.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Grayscale image filter class
   * @class fabric.Image.filters.Grayscale
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Grayscale();
   * object.filters.push(filter);
   * object.applyFilters();
   */filters.Grayscale=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Grayscale.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"Grayscale",fragmentSource:{average:"precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat average = (color.r + color.b + color.g) / 3.0;\ngl_FragColor = vec4(average, average, average, color.a);\n}",lightness:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\ngl_FragColor = vec4(average, average, average, col.a);\n}",luminosity:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\ngl_FragColor = vec4(average, average, average, col.a);\n}"},
/**
     * Grayscale mode, between 'average', 'lightness', 'luminosity'
     * @param {String} type
     * @default
     */
mode:"average",mainParameter:"mode",
/**
     * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8Array to be filtered.
     */
applyTo2d:function(options){var i,value,imageData=options.imageData,data=imageData.data,len=data.length,mode=this.mode;for(i=0;i<len;i+=4)"average"===mode?value=(data[i]+data[i+1]+data[i+2])/3:"lightness"===mode?value=(Math.min(data[i],data[i+1],data[i+2])+Math.max(data[i],data[i+1],data[i+2]))/2:"luminosity"===mode&&(value=.21*data[i]+.72*data[i+1]+.07*data[i+2]),data[i]=value,data[i+1]=value,data[i+2]=value},
/**
     * Retrieves the cached shader.
     * @param {Object} options
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
retrieveShader:function(options){var cacheKey=this.type+"_"+this.mode;if(!options.programCache.hasOwnProperty(cacheKey)){var shaderSource=this.fragmentSource[this.mode];options.programCache[cacheKey]=this.createProgram(options.context,shaderSource)}return options.programCache[cacheKey]},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uMode:gl.getUniformLocation(program,"uMode")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){
// default average mode.
var mode=1;gl.uniform1i(uniformLocations.uMode,mode)},
/**
     * Grayscale filter isNeutralState implementation
     * The filter is never neutral
     * on the image
     **/
isNeutralState:function(){return!1}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale
   */
fabric.Image.filters.Grayscale.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Invert filter class
   * @class fabric.Image.filters.Invert
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Invert();
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Invert=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Invert.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"Invert",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uInvert;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nif (uInvert == 1) {\ngl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n} else {\ngl_FragColor = color;\n}\n}",
/**
     * Filter invert. if false, does nothing
     * @param {Boolean} invert
     * @default
     */
invert:!0,mainParameter:"invert",
/**
     * Apply the Invert operation to a Uint8Array representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8Array to be filtered.
     */
applyTo2d:function(options){var i,imageData=options.imageData,data=imageData.data,len=data.length;for(i=0;i<len;i+=4)data[i]=255-data[i],data[i+1]=255-data[i+1],data[i+2]=255-data[i+2]},
/**
     * Invert filter isNeutralState implementation
     * Used only in image applyFilters to discard filters that will not have an effect
     * on the image
     * @param {Object} options
     **/
isNeutralState:function(){return!this.invert},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uInvert:gl.getUniformLocation(program,"uInvert")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){gl.uniform1i(uniformLocations.uInvert,this.invert)}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert
   */
fabric.Image.filters.Invert.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Noise filter class
   * @class fabric.Image.filters.Noise
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Noise({
   *   noise: 700
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */filters.Noise=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Noise.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"Noise",
/**
     * Fragment source for the noise program
     */
fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uStepH;\nuniform float uNoise;\nuniform float uSeed;\nvarying vec2 vTexCoord;\nfloat rand(vec2 co, float seed, float vScale) {\nreturn fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n}\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\ngl_FragColor = color;\n}",
/**
     * Describe the property that is the filter parameter
     * @param {String} m
     * @default
     */
mainParameter:"noise",
/**
     * Noise value, from
     * @param {Number} noise
     * @default
     */
noise:0,
/**
     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
applyTo2d:function(options){if(0!==this.noise){var i,rand,imageData=options.imageData,data=imageData.data,len=data.length,noise=this.noise;for(i=0,len=data.length;i<len;i+=4)rand=(.5-Math.random())*noise,data[i]+=rand,data[i+1]+=rand,data[i+2]+=rand}},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uNoise:gl.getUniformLocation(program,"uNoise"),uSeed:gl.getUniformLocation(program,"uSeed")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){gl.uniform1f(uniformLocations.uNoise,this.noise/255),gl.uniform1f(uniformLocations.uSeed,Math.random())},
/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
toObject:function(){return extend(this.callSuper("toObject"),{noise:this.noise})}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise
   */
fabric.Image.filters.Noise.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Pixelate filter class
   * @class fabric.Image.filters.Pixelate
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Pixelate({
   *   blocksize: 8
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */filters.Pixelate=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Pixelate.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"Pixelate",blocksize:4,mainParameter:"blocksize",
/**
     * Fragment source for the Pixelate program
     */
fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uBlocksize;\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nfloat blockW = uBlocksize * uStepW;\nfloat blockH = uBlocksize * uStepW;\nint posX = int(vTexCoord.x / blockW);\nint posY = int(vTexCoord.y / blockH);\nfloat fposX = float(posX);\nfloat fposY = float(posY);\nvec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\nvec4 color = texture2D(uTexture, squareCoords);\ngl_FragColor = color;\n}",
/**
     * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
applyTo2d:function(options){var index,i,j,r,g,b,a,_i,_j,_iLen,_jLen,imageData=options.imageData,data=imageData.data,iLen=imageData.height,jLen=imageData.width;for(i=0;i<iLen;i+=this.blocksize)for(j=0;j<jLen;j+=this.blocksize)for(index=4*i*jLen+4*j,r=data[index],g=data[index+1],b=data[index+2],a=data[index+3],_iLen=Math.min(i+this.blocksize,iLen),_jLen=Math.min(j+this.blocksize,jLen),_i=i;_i<_iLen;_i++)for(_j=j;_j<_jLen;_j++)index=4*_i*jLen+4*_j,data[index]=r,data[index+1]=g,data[index+2]=b,data[index+3]=a},
/**
     * Indicate when the filter is not gonna apply changes to the image
     **/
isNeutralState:function(){return 1===this.blocksize},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uBlocksize:gl.getUniformLocation(program,"uBlocksize"),uStepW:gl.getUniformLocation(program,"uStepW"),uStepH:gl.getUniformLocation(program,"uStepH")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){gl.uniform1f(uniformLocations.uBlocksize,this.blocksize)}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate
   */
fabric.Image.filters.Pixelate.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Remove white filter class
   * @class fabric.Image.filters.RemoveColor
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.RemoveColor({
   *   threshold: 0.2,
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */filters.RemoveColor=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.RemoveColor.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"RemoveColor",
/**
     * Color to remove, in any format understood by fabric.Color.
     * @param {String} type
     * @default
     */
color:"#FFFFFF",
/**
     * Fragment source for the brightness program
     */
fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\nif(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\ngl_FragColor.a = 0.0;\n}\n}",
/**
     * distance to actual color, as value up or down from each r,g,b
     * between 0 and 1
     **/
distance:.02,
/**
     * For color to remove inside distance, use alpha channel for a smoother deletion
     * NOT IMPLEMENTED YET
     **/
useAlpha:!1,
/**
     * Constructor
     * @memberOf fabric.Image.filters.RemoveWhite.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.color=#RRGGBB] Threshold value
     * @param {Number} [options.distance=10] Distance value
     */
/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */
applyTo2d:function(options){var i,r,g,b,imageData=options.imageData,data=imageData.data,distance=255*this.distance,source=new fabric.Color(this.color).getSource(),lowC=[source[0]-distance,source[1]-distance,source[2]-distance],highC=[source[0]+distance,source[1]+distance,source[2]+distance];for(i=0;i<data.length;i+=4)r=data[i],g=data[i+1],b=data[i+2],r>lowC[0]&&g>lowC[1]&&b>lowC[2]&&r<highC[0]&&g<highC[1]&&b<highC[2]&&(data[i+3]=0)},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uLow:gl.getUniformLocation(program,"uLow"),uHigh:gl.getUniformLocation(program,"uHigh")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){var source=new fabric.Color(this.color).getSource(),distance=parseFloat(this.distance),lowC=[0+source[0]/255-distance,0+source[1]/255-distance,0+source[2]/255-distance,1],highC=[source[0]/255+distance,source[1]/255+distance,source[2]/255+distance,1];gl.uniform4fv(uniformLocations.uLow,lowC),gl.uniform4fv(uniformLocations.uHigh,highC)},
/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
toObject:function(){return extend(this.callSuper("toObject"),{color:this.color,distance:this.distance})}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite
   */
fabric.Image.filters.RemoveColor.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass,matrices={Brownie:[.5997,.34553,-.27082,0,.186,-.0377,.86095,.15059,0,-.1449,.24113,-.07441,.44972,0,-.02965,0,0,0,1,0],Vintage:[.62793,.32021,-.03965,0,.03784,.02578,.64411,.03259,0,.02926,.0466,-.08512,.52416,0,.02023,0,0,0,1,0],Kodachrome:[1.12855,-.39673,-.03992,0,.24991,-.16404,1.08352,-.05498,0,.09698,-.16786,-.56034,1.60148,0,.13972,0,0,0,1,0],Technicolor:[1.91252,-.85453,-.09155,0,.04624,-.30878,1.76589,-.10601,0,-.27589,-.2311,-.75018,1.84759,0,.12137,0,0,0,1,0],Polaroid:[1.438,-.062,-.062,0,0,-.122,1.378,-.122,0,0,-.016,-.016,1.483,0,0,0,0,0,1,0],Sepia:[.393,.769,.189,0,0,.349,.686,.168,0,0,.272,.534,.131,0,0,0,0,0,1,0],BlackWhite:[1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,0,0,0,1,0]};for(var key in matrices)filters[key]=createClass(filters.ColorMatrix,/** @lends fabric.Image.filters.Sepia.prototype */{
/**
       * Filter type
       * @param {String} type
       * @default
       */
type:key,
/**
       * Colormatrix for the effect
       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning
       * outside the -1, 1 range.
       * @param {Array} matrix array of 20 numbers.
       * @default
       */
matrix:matrices[key],
/**
       * Lock the matrix export for this kind of static, parameter less filters.
       */
mainParameter:!1,
/**
       * Lock the colormatrix on the color part, skipping alpha
       */
colorsOnly:!0}),fabric.Image.filters[key].fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric,filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Color Blend filter class
   * @class fabric.Image.filter.BlendColor
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @example
   * var filter = new fabric.Image.filters.BlendColor({
   *  color: '#000',
   *  mode: 'multiply'
   * });
   *
   * var filter = new fabric.Image.filters.BlendImage({
   *  image: fabricImageObject,
   *  mode: 'multiply',
   *  alpha: 0.5
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */filters.BlendColor=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Blend.prototype */{type:"BlendColor",
/**
     * Color to make the blend operation with. default to a reddish color since black or white
     * gives always strong result.
     **/
color:"#F95C63",
/**
     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,
     * darken, lighten, overlay, exclusion, tint.
     **/
mode:"multiply",
/**
     * alpha value. represent the strength of the blend color operation.
     **/
alpha:1,
/**
     * Fragment source for the Multiply program
     */
fragmentSource:{multiply:"gl_FragColor.rgb *= uColor.rgb;\n",screen:"gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\n",add:"gl_FragColor.rgb += uColor.rgb;\n",diff:"gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\n",subtract:"gl_FragColor.rgb -= uColor.rgb;\n",lighten:"gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\n",darken:"gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\n",exclusion:"gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\n",overlay:"if (uColor.r < 0.5) {\ngl_FragColor.r *= 2.0 * uColor.r;\n} else {\ngl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n}\nif (uColor.g < 0.5) {\ngl_FragColor.g *= 2.0 * uColor.g;\n} else {\ngl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n}\nif (uColor.b < 0.5) {\ngl_FragColor.b *= 2.0 * uColor.b;\n} else {\ngl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n}\n",tint:"gl_FragColor.rgb *= (1.0 - uColor.a);\ngl_FragColor.rgb += uColor.rgb;\n"},
/**
     * build the fragment source for the filters, joining the common part with
     * the specific one.
     * @param {String} mode the mode of the filter, a key of this.fragmentSource
     * @return {String} the source to be compiled
     * @private
     */
buildSource:function(mode){return"precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ngl_FragColor = color;\nif (color.a > 0.0) {\n"+this.fragmentSource[mode]+"}\n}"},
/**
     * Retrieves the cached shader.
     * @param {Object} options
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
retrieveShader:function(options){var shaderSource,cacheKey=this.type+"_"+this.mode;return options.programCache.hasOwnProperty(cacheKey)||(shaderSource=this.buildSource(this.mode),options.programCache[cacheKey]=this.createProgram(options.context,shaderSource)),options.programCache[cacheKey]},
/**
     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
applyTo2d:function(options){var tr,tg,tb,r,g,b,source,imageData=options.imageData,data=imageData.data,iLen=data.length,alpha1=1-this.alpha;source=new fabric.Color(this.color).getSource(),tr=source[0]*this.alpha,tg=source[1]*this.alpha,tb=source[2]*this.alpha;for(var i=0;i<iLen;i+=4)switch(r=data[i],g=data[i+1],b=data[i+2],this.mode){case"multiply":data[i]=r*tr/255,data[i+1]=g*tg/255,data[i+2]=b*tb/255;break;case"screen":data[i]=255-(255-r)*(255-tr)/255,data[i+1]=255-(255-g)*(255-tg)/255,data[i+2]=255-(255-b)*(255-tb)/255;break;case"add":data[i]=r+tr,data[i+1]=g+tg,data[i+2]=b+tb;break;case"diff":case"difference":data[i]=Math.abs(r-tr),data[i+1]=Math.abs(g-tg),data[i+2]=Math.abs(b-tb);break;case"subtract":data[i]=r-tr,data[i+1]=g-tg,data[i+2]=b-tb;break;case"darken":data[i]=Math.min(r,tr),data[i+1]=Math.min(g,tg),data[i+2]=Math.min(b,tb);break;case"lighten":data[i]=Math.max(r,tr),data[i+1]=Math.max(g,tg),data[i+2]=Math.max(b,tb);break;case"overlay":data[i]=tr<128?2*r*tr/255:255-2*(255-r)*(255-tr)/255,data[i+1]=tg<128?2*g*tg/255:255-2*(255-g)*(255-tg)/255,data[i+2]=tb<128?2*b*tb/255:255-2*(255-b)*(255-tb)/255;break;case"exclusion":data[i]=tr+r-2*tr*r/255,data[i+1]=tg+g-2*tg*g/255,data[i+2]=tb+b-2*tb*b/255;break;case"tint":data[i]=tr+r*alpha1,data[i+1]=tg+g*alpha1,data[i+2]=tb+b*alpha1}},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uColor:gl.getUniformLocation(program,"uColor")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){var source=new fabric.Color(this.color).getSource();source[0]=this.alpha*source[0]/255,source[1]=this.alpha*source[1]/255,source[2]=this.alpha*source[2]/255,source[3]=this.alpha,gl.uniform4fv(uniformLocations.uColor,source)},
/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
toObject:function(){return{type:this.type,color:this.color,mode:this.mode,alpha:this.alpha}}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor
   */
fabric.Image.filters.BlendColor.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric,filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Image Blend filter class
   * @class fabric.Image.filter.BlendImage
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @example
   * var filter = new fabric.Image.filters.BlendColor({
   *  color: '#000',
   *  mode: 'multiply'
   * });
   *
   * var filter = new fabric.Image.filters.BlendImage({
   *  image: fabricImageObject,
   *  mode: 'multiply',
   *  alpha: 0.5
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */filters.BlendImage=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.BlendImage.prototype */{type:"BlendImage",
/**
     * Color to make the blend operation with. default to a reddish color since black or white
     * gives always strong result.
     **/
image:null,
/**
     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,
     * darken, lighten, overlay, exclusion, tint.
     **/
mode:"multiply",
/**
     * alpha value. represent the strength of the blend image operation.
     * not implemented.
     **/
alpha:1,vertexSource:"attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nuniform mat3 uTransformMatrix;\nvoid main() {\nvTexCoord = aPosition;\nvTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",
/**
     * Fragment source for the Multiply program
     */
fragmentSource:{multiply:"precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.rgba *= color2.rgba;\ngl_FragColor = color;\n}",mask:"precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.a = color2.a;\ngl_FragColor = color;\n}"},
/**
     * Retrieves the cached shader.
     * @param {Object} options
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
retrieveShader:function(options){var cacheKey=this.type+"_"+this.mode,shaderSource=this.fragmentSource[this.mode];return options.programCache.hasOwnProperty(cacheKey)||(options.programCache[cacheKey]=this.createProgram(options.context,shaderSource)),options.programCache[cacheKey]},applyToWebGL:function(options){
// load texture to blend.
var gl=options.context,texture=this.createTexture(options.filterBackend,this.image);this.bindAdditionalTexture(gl,texture,gl.TEXTURE1),this.callSuper("applyToWebGL",options),this.unbindAdditionalTexture(gl,gl.TEXTURE1)},createTexture:function(backend,image){return backend.getCachedTexture(image.cacheKey,image._element)},
/**
     * Calculate a transformMatrix to adapt the image to blend over
     * @param {Object} options
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
calculateMatrix:function(){var image=this.image,width=image._element.width,height=image._element.height;return[1/image.scaleX,0,0,0,1/image.scaleY,0,-image.left/width,-image.top/height,1]},
/**
     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
applyTo2d:function(options){var tr,tg,tb,ta,r,g,b,a,canvas1,context,blendData,imageData=options.imageData,resources=options.filterBackend.resources,data=imageData.data,iLen=data.length,width=imageData.width,height=imageData.height,image=this.image;resources.blendImage||(resources.blendImage=fabric.util.createCanvasElement()),canvas1=resources.blendImage,context=canvas1.getContext("2d"),canvas1.width!==width||canvas1.height!==height?(canvas1.width=width,canvas1.height=height):context.clearRect(0,0,width,height),context.setTransform(image.scaleX,0,0,image.scaleY,image.left,image.top),context.drawImage(image._element,0,0,width,height),blendData=context.getImageData(0,0,width,height).data;for(var i=0;i<iLen;i+=4)switch(r=data[i],g=data[i+1],b=data[i+2],a=data[i+3],tr=blendData[i],tg=blendData[i+1],tb=blendData[i+2],ta=blendData[i+3],this.mode){case"multiply":data[i]=r*tr/255,data[i+1]=g*tg/255,data[i+2]=b*tb/255,data[i+3]=a*ta/255;break;case"mask":data[i+3]=ta;break}},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uTransformMatrix:gl.getUniformLocation(program,"uTransformMatrix"),uImage:gl.getUniformLocation(program,"uImage")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){var matrix=this.calculateMatrix();gl.uniform1i(uniformLocations.uImage,1),// texture unit 1.
gl.uniformMatrix3fv(uniformLocations.uTransformMatrix,!1,matrix)},
/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
toObject:function(){return{type:this.type,image:this.image&&this.image.toObject(),mode:this.mode,alpha:this.alpha}}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} callback to be invoked after filter creation
   * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage
   */
fabric.Image.filters.BlendImage.fromObject=function(object,callback){fabric.Image.fromObject(object.image,(function(image){var options=fabric.util.object.clone(object);options.image=image,callback(new fabric.Image.filters.BlendImage(options))}))}}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),pow=Math.pow,floor=Math.floor,sqrt=Math.sqrt,abs=Math.abs,round=Math.round,sin=Math.sin,ceil=Math.ceil,filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Resize image filter class
   * @class fabric.Image.filters.Resize
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Resize();
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Resize=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Resize.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"Resize",
/**
     * Resize type
     * for webgl resizeType is just lanczos, for canvas2d can be:
     * bilinear, hermite, sliceHack, lanczos.
     * @param {String} resizeType
     * @default
     */
resizeType:"hermite",
/**
     * Scale factor for resizing, x axis
     * @param {Number} scaleX
     * @default
     */
scaleX:1,
/**
     * Scale factor for resizing, y axis
     * @param {Number} scaleY
     * @default
     */
scaleY:1,
/**
     * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos
     * @param {Number} lanczosLobes
     * @default
     */
lanczosLobes:3,
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uDelta:gl.getUniformLocation(program,"uDelta"),uTaps:gl.getUniformLocation(program,"uTaps")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){gl.uniform2fv(uniformLocations.uDelta,this.horizontal?[1/this.width,0]:[0,1/this.height]),gl.uniform1fv(uniformLocations.uTaps,this.taps)},
/**
     * Retrieves the cached shader.
     * @param {Object} options
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
retrieveShader:function(options){var filterWindow=this.getFilterWindow(),cacheKey=this.type+"_"+filterWindow;if(!options.programCache.hasOwnProperty(cacheKey)){var fragmentShader=this.generateShader(filterWindow);options.programCache[cacheKey]=this.createProgram(options.context,fragmentShader)}return options.programCache[cacheKey]},getFilterWindow:function(){var scale=this.tempScale;return Math.ceil(this.lanczosLobes/scale)},getTaps:function(){for(var lobeFunction=this.lanczosCreate(this.lanczosLobes),scale=this.tempScale,filterWindow=this.getFilterWindow(),taps=new Array(filterWindow),i=1;i<=filterWindow;i++)taps[i-1]=lobeFunction(i*scale);return taps},
/**
     * Generate vertex and shader sources from the necessary steps numbers
     * @param {Number} filterWindow
     */
generateShader:function(filterWindow){for(var offsets=new Array(filterWindow),fragmentShader=this.fragmentSourceTOP,i=1;i<=filterWindow;i++)offsets[i-1]=i+".0 * uDelta";return fragmentShader+="uniform float uTaps["+filterWindow+"];\n",fragmentShader+="void main() {\n",fragmentShader+="  vec4 color = texture2D(uTexture, vTexCoord);\n",fragmentShader+="  float sum = 1.0;\n",offsets.forEach((function(offset,i){fragmentShader+="  color += texture2D(uTexture, vTexCoord + "+offset+") * uTaps["+i+"];\n",fragmentShader+="  color += texture2D(uTexture, vTexCoord - "+offset+") * uTaps["+i+"];\n",fragmentShader+="  sum += 2.0 * uTaps["+i+"];\n"})),fragmentShader+="  gl_FragColor = color / sum;\n",fragmentShader+="}",fragmentShader},fragmentSourceTOP:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\n",
/**
     * Apply the resize filter to the image
     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
     *
     * @param {Object} options
     * @param {Number} options.passes The number of filters remaining to be executed
     * @param {Boolean} options.webgl Whether to use webgl to render the filter.
     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
applyTo:function(options){options.webgl?(options.passes++,this.width=options.sourceWidth,this.horizontal=!0,this.dW=Math.round(this.width*this.scaleX),this.dH=options.sourceHeight,this.tempScale=this.dW/this.width,this.taps=this.getTaps(),options.destinationWidth=this.dW,this._setupFrameBuffer(options),this.applyToWebGL(options),this._swapTextures(options),options.sourceWidth=options.destinationWidth,this.height=options.sourceHeight,this.horizontal=!1,this.dH=Math.round(this.height*this.scaleY),this.tempScale=this.dH/this.height,this.taps=this.getTaps(),options.destinationHeight=this.dH,this._setupFrameBuffer(options),this.applyToWebGL(options),this._swapTextures(options),options.sourceHeight=options.destinationHeight):this.applyTo2d(options)},isNeutralState:function(){return 1===this.scaleX&&1===this.scaleY},lanczosCreate:function(lobes){return function(x){if(x>=lobes||x<=-lobes)return 0;if(x<1.1920929e-7&&x>-1.1920929e-7)return 1;x*=Math.PI;var xx=x/lobes;return sin(x)/x*sin(xx)/xx}},
/**
     * Applies filter to canvas element
     * @memberOf fabric.Image.filters.Resize.prototype
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} scaleX
     * @param {Number} scaleY
     */
applyTo2d:function(options){var imageData=options.imageData,scaleX=this.scaleX,scaleY=this.scaleY;this.rcpScaleX=1/scaleX,this.rcpScaleY=1/scaleY;var newData,oW=imageData.width,oH=imageData.height,dW=round(oW*scaleX),dH=round(oH*scaleY);"sliceHack"===this.resizeType?newData=this.sliceByTwo(options,oW,oH,dW,dH):"hermite"===this.resizeType?newData=this.hermiteFastResize(options,oW,oH,dW,dH):"bilinear"===this.resizeType?newData=this.bilinearFiltering(options,oW,oH,dW,dH):"lanczos"===this.resizeType&&(newData=this.lanczosResize(options,oW,oH,dW,dH)),options.imageData=newData},
/**
     * Filter sliceByTwo
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */
sliceByTwo:function(options,oW,oH,dW,dH){var tmpCanvas,ctx,imageData=options.imageData,mult=.5,doneW=!1,doneH=!1,stepW=oW*mult,stepH=oH*mult,resources=fabric.filterBackend.resources,sX=0,sY=0,dX=oW,dY=0;resources.sliceByTwo||(resources.sliceByTwo=document.createElement("canvas")),tmpCanvas=resources.sliceByTwo,(tmpCanvas.width<1.5*oW||tmpCanvas.height<oH)&&(tmpCanvas.width=1.5*oW,tmpCanvas.height=oH),ctx=tmpCanvas.getContext("2d"),ctx.clearRect(0,0,1.5*oW,oH),ctx.putImageData(imageData,0,0),dW=floor(dW),dH=floor(dH);while(!doneW||!doneH)oW=stepW,oH=stepH,dW<floor(stepW*mult)?stepW=floor(stepW*mult):(stepW=dW,doneW=!0),dH<floor(stepH*mult)?stepH=floor(stepH*mult):(stepH=dH,doneH=!0),ctx.drawImage(tmpCanvas,sX,sY,oW,oH,dX,dY,stepW,stepH),sX=dX,sY=dY,dY+=stepH;return ctx.getImageData(sX,sY,dW,dH)},
/**
     * Filter lanczosResize
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */
lanczosResize:function(options,oW,oH,dW,dH){function process(u){var v,i,weight,idx,a,red,green,blue,alpha,fX,fY;for(center.x=(u+.5)*ratioX,icenter.x=floor(center.x),v=0;v<dH;v++){for(center.y=(v+.5)*ratioY,icenter.y=floor(center.y),a=0,red=0,green=0,blue=0,alpha=0,i=icenter.x-range2X;i<=icenter.x+range2X;i++)if(!(i<0||i>=oW)){fX=floor(1e3*abs(i-center.x)),cacheLanc[fX]||(cacheLanc[fX]={});for(var j=icenter.y-range2Y;j<=icenter.y+range2Y;j++)j<0||j>=oH||(fY=floor(1e3*abs(j-center.y)),cacheLanc[fX][fY]||(cacheLanc[fX][fY]=lanczos(sqrt(pow(fX*rcpRatioX,2)+pow(fY*rcpRatioY,2))/1e3)),weight=cacheLanc[fX][fY],weight>0&&(idx=4*(j*oW+i),a+=weight,red+=weight*srcData[idx],green+=weight*srcData[idx+1],blue+=weight*srcData[idx+2],alpha+=weight*srcData[idx+3]))}idx=4*(v*dW+u),destData[idx]=red/a,destData[idx+1]=green/a,destData[idx+2]=blue/a,destData[idx+3]=alpha/a}return++u<dW?process(u):destImg}var srcData=options.imageData.data,destImg=options.ctx.createImageData(dW,dH),destData=destImg.data,lanczos=this.lanczosCreate(this.lanczosLobes),ratioX=this.rcpScaleX,ratioY=this.rcpScaleY,rcpRatioX=2/this.rcpScaleX,rcpRatioY=2/this.rcpScaleY,range2X=ceil(ratioX*this.lanczosLobes/2),range2Y=ceil(ratioY*this.lanczosLobes/2),cacheLanc={},center={},icenter={};return process(0)},
/**
     * bilinearFiltering
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */
bilinearFiltering:function(options,oW,oH,dW,dH){var a,b,c,d,x,y,i,j,xDiff,yDiff,chnl,color,origPix,offset=0,ratioX=this.rcpScaleX,ratioY=this.rcpScaleY,w4=4*(oW-1),img=options.imageData,pixels=img.data,destImage=options.ctx.createImageData(dW,dH),destPixels=destImage.data;for(i=0;i<dH;i++)for(j=0;j<dW;j++)for(x=floor(ratioX*j),y=floor(ratioY*i),xDiff=ratioX*j-x,yDiff=ratioY*i-y,origPix=4*(y*oW+x),chnl=0;chnl<4;chnl++)a=pixels[origPix+chnl],b=pixels[origPix+4+chnl],c=pixels[origPix+w4+chnl],d=pixels[origPix+w4+4+chnl],color=a*(1-xDiff)*(1-yDiff)+b*xDiff*(1-yDiff)+c*yDiff*(1-xDiff)+d*xDiff*yDiff,destPixels[offset++]=color;return destImage},
/**
     * hermiteFastResize
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */
hermiteFastResize:function(options,oW,oH,dW,dH){for(var ratioW=this.rcpScaleX,ratioH=this.rcpScaleY,ratioWHalf=ceil(ratioW/2),ratioHHalf=ceil(ratioH/2),img=options.imageData,data=img.data,img2=options.ctx.createImageData(dW,dH),data2=img2.data,j=0;j<dH;j++)for(var i=0;i<dW;i++){for(var x2=4*(i+j*dW),weight=0,weights=0,weightsAlpha=0,gxR=0,gxG=0,gxB=0,gxA=0,centerY=(j+.5)*ratioH,yy=floor(j*ratioH);yy<(j+1)*ratioH;yy++)for(var dy=abs(centerY-(yy+.5))/ratioHHalf,centerX=(i+.5)*ratioW,w0=dy*dy,xx=floor(i*ratioW);xx<(i+1)*ratioW;xx++){var dx=abs(centerX-(xx+.5))/ratioWHalf,w=sqrt(w0+dx*dx);
/* eslint-disable max-depth */w>1&&w<-1||(
//hermite filter
weight=2*w*w*w-3*w*w+1,weight>0&&(dx=4*(xx+yy*oW),
//alpha
gxA+=weight*data[dx+3],weightsAlpha+=weight,
//colors
data[dx+3]<255&&(weight=weight*data[dx+3]/250),gxR+=weight*data[dx],gxG+=weight*data[dx+1],gxB+=weight*data[dx+2],weights+=weight)
/* eslint-enable max-depth */)}data2[x2]=gxR/weights,data2[x2+1]=gxG/weights,data2[x2+2]=gxB/weights,data2[x2+3]=gxA/weightsAlpha}return img2},
/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
toObject:function(){return{type:this.type,scaleX:this.scaleX,scaleY:this.scaleY,resizeType:this.resizeType,lanczosLobes:this.lanczosLobes}}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize
   */
fabric.Image.filters.Resize.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Contrast filter class
   * @class fabric.Image.filters.Contrast
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Contrast({
   *   contrast: 0.25
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */filters.Contrast=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Contrast.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"Contrast",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uContrast;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\ncolor.rgb = contrastF * (color.rgb - 0.5) + 0.5;\ngl_FragColor = color;\n}",
/**
     * contrast value, range from -1 to 1.
     * @param {Number} contrast
     * @default 0
     */
contrast:0,mainParameter:"contrast",
/**
     * Constructor
     * @memberOf fabric.Image.filters.Contrast.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)
     */
/**
      * Apply the Contrast operation to a Uint8Array representing the pixels of an image.
      *
      * @param {Object} options
      * @param {ImageData} options.imageData The Uint8Array to be filtered.
      */
applyTo2d:function(options){if(0!==this.contrast){var i,imageData=options.imageData,data=imageData.data,len=data.length,contrast=Math.floor(255*this.contrast),contrastF=259*(contrast+255)/(255*(259-contrast));for(i=0;i<len;i+=4)data[i]=contrastF*(data[i]-128)+128,data[i+1]=contrastF*(data[i+1]-128)+128,data[i+2]=contrastF*(data[i+2]-128)+128}},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uContrast:gl.getUniformLocation(program,"uContrast")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){gl.uniform1f(uniformLocations.uContrast,this.contrast)}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast
   */
fabric.Image.filters.Contrast.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Saturate filter class
   * @class fabric.Image.filters.Saturation
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Saturation({
   *   saturation: 100
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */filters.Saturation=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Saturation.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"Saturation",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uSaturation;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat rgMax = max(color.r, color.g);\nfloat rgbMax = max(rgMax, color.b);\ncolor.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\ncolor.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\ncolor.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\ngl_FragColor = color;\n}",saturation:0,mainParameter:"saturation",
/**
     * Constructor
     * @memberOf fabric.Image.filters.Saturate.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)
     */
/**
     * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
applyTo2d:function(options){if(0!==this.saturation){var i,max,imageData=options.imageData,data=imageData.data,len=data.length,adjust=-this.saturation;for(i=0;i<len;i+=4)max=Math.max(data[i],data[i+1],data[i+2]),data[i]+=max!==data[i]?(max-data[i])*adjust:0,data[i+1]+=max!==data[i+1]?(max-data[i+1])*adjust:0,data[i+2]+=max!==data[i+2]?(max-data[i+2])*adjust:0}},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uSaturation:gl.getUniformLocation(program,"uSaturation")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){gl.uniform1f(uniformLocations.uSaturation,-this.saturation)}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate
   */
fabric.Image.filters.Saturation.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Blur filter class
   * @class fabric.Image.filters.Blur
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Blur({
   *   blur: 0.5
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */filters.Blur=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Blur.prototype */{type:"Blur",
/*
'gl_FragColor = vec4(0.0);',
'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',
'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',
'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',
'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',
'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',
'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',
'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',
'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',
'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',
'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',
'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',
'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',
'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',
'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',
'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',
*/
/* eslint-disable max-len */
fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\nconst float nSamples = 15.0;\nvec3 v3offset = vec3(12.9898, 78.233, 151.7182);\nfloat random(vec3 scale) {\nreturn fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n}\nvoid main() {\nvec4 color = vec4(0.0);\nfloat total = 0.0;\nfloat offset = random(v3offset);\nfor (float t = -nSamples; t <= nSamples; t++) {\nfloat percent = (t + offset - 0.5) / nSamples;\nfloat weight = 1.0 - abs(percent);\ncolor += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\ntotal += weight;\n}\ngl_FragColor = color / total;\n}",
/* eslint-enable max-len */
/**
     * blur value, in percentage of image dimensions.
     * specific to keep the image blur constant at different resolutions
     * range bewteen 0 and 1.
     */
blur:0,mainParameter:"blur",applyTo:function(options){options.webgl?(
// this aspectRatio is used to give the same blur to vertical and horizontal
this.aspectRatio=options.sourceWidth/options.sourceHeight,options.passes++,this._setupFrameBuffer(options),this.horizontal=!0,this.applyToWebGL(options),this._swapTextures(options),this._setupFrameBuffer(options),this.horizontal=!1,this.applyToWebGL(options),this._swapTextures(options)):this.applyTo2d(options)},applyTo2d:function(options){
// paint canvasEl with current image data.
//options.ctx.putImageData(options.imageData, 0, 0);
options.imageData=this.simpleBlur(options)},simpleBlur:function(options){var canvas1,canvas2,resources=options.filterBackend.resources,width=options.imageData.width,height=options.imageData.height;resources.blurLayer1||(resources.blurLayer1=fabric.util.createCanvasElement(),resources.blurLayer2=fabric.util.createCanvasElement()),canvas1=resources.blurLayer1,canvas2=resources.blurLayer2,canvas1.width===width&&canvas1.height===height||(canvas2.width=canvas1.width=width,canvas2.height=canvas1.height=height);var random,percent,j,i,ctx1=canvas1.getContext("2d"),ctx2=canvas2.getContext("2d"),nSamples=15,blur=.06*this.blur*.5;
// load first canvas
for(ctx1.putImageData(options.imageData,0,0),ctx2.clearRect(0,0,width,height),i=-nSamples;i<=nSamples;i++)random=(Math.random()-.5)/4,percent=i/nSamples,j=blur*percent*width+random,ctx2.globalAlpha=1-Math.abs(percent),ctx2.drawImage(canvas1,j,random),ctx1.drawImage(canvas2,0,0),ctx2.globalAlpha=1,ctx2.clearRect(0,0,canvas2.width,canvas2.height);for(i=-nSamples;i<=nSamples;i++)random=(Math.random()-.5)/4,percent=i/nSamples,j=blur*percent*height+random,ctx2.globalAlpha=1-Math.abs(percent),ctx2.drawImage(canvas1,random,j),ctx1.drawImage(canvas2,0,0),ctx2.globalAlpha=1,ctx2.clearRect(0,0,canvas2.width,canvas2.height);options.ctx.drawImage(canvas1,0,0);var newImageData=options.ctx.getImageData(0,0,canvas1.width,canvas1.height);return ctx1.globalAlpha=1,ctx1.clearRect(0,0,canvas1.width,canvas1.height),newImageData},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{delta:gl.getUniformLocation(program,"uDelta")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){var delta=this.chooseRightDelta();gl.uniform2fv(uniformLocations.delta,delta)},
/**
     * choose right value of image percentage to blur with
     * @returns {Array} a numeric array with delta values
     */
chooseRightDelta:function(){var blur,blurScale=1,delta=[0,0];return this.horizontal?this.aspectRatio>1&&(
// image is wide, i want to shrink radius horizontal
blurScale=1/this.aspectRatio):this.aspectRatio<1&&(
// image is tall, i want to shrink radius vertical
blurScale=this.aspectRatio),blur=blurScale*this.blur*.12,this.horizontal?delta[0]=blur:delta[1]=blur,delta}}),
/**
   * Deserialize a JSON definition of a BlurFilter into a concrete instance.
   */
filters.Blur.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * Gamma filter class
   * @class fabric.Image.filters.Gamma
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Gamma({
   *   brightness: 200
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */filters.Gamma=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Gamma.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"Gamma",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec3 uGamma;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec3 correction = (1.0 / uGamma);\ncolor.r = pow(color.r, correction.r);\ncolor.g = pow(color.g, correction.g);\ncolor.b = pow(color.b, correction.b);\ngl_FragColor = color;\ngl_FragColor.rgb *= color.a;\n}",
/**
     * Gamma array value, from 0.01 to 2.2.
     * @param {Array} gamma
     * @default
     */
gamma:[1,1,1],
/**
     * Describe the property that is the filter parameter
     * @param {String} m
     * @default
     */
mainParameter:"gamma",
/**
     * Constructor
     * @param {Object} [options] Options object
     */
initialize:function(options){this.gamma=[1,1,1],filters.BaseFilter.prototype.initialize.call(this,options)},
/**
     * Apply the Gamma operation to a Uint8Array representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8Array to be filtered.
     */
applyTo2d:function(options){var i,imageData=options.imageData,data=imageData.data,gamma=this.gamma,len=data.length,rInv=1/gamma[0],gInv=1/gamma[1],bInv=1/gamma[2];
// This is an optimization - pre-compute a look-up table for each color channel
// instead of performing these pow calls for each pixel in the image.
for(this.rVals||(
// eslint-disable-next-line
this.rVals=new Uint8Array(256),
// eslint-disable-next-line
this.gVals=new Uint8Array(256),
// eslint-disable-next-line
this.bVals=new Uint8Array(256)),i=0,len=256;i<len;i++)this.rVals[i]=255*Math.pow(i/255,rInv),this.gVals[i]=255*Math.pow(i/255,gInv),this.bVals[i]=255*Math.pow(i/255,bInv);for(i=0,len=data.length;i<len;i+=4)data[i]=this.rVals[data[i]],data[i+1]=this.gVals[data[i+1]],data[i+2]=this.bVals[data[i+2]]},
/**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
getUniformLocations:function(gl,program){return{uGamma:gl.getUniformLocation(program,"uGamma")}},
/**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
sendUniformData:function(gl,uniformLocations){gl.uniform3fv(uniformLocations.uGamma,this.gamma)}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma
   */
fabric.Image.filters.Gamma.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * A container class that knows how to apply a sequence of filters to an input image.
   */filters.Composed=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Composed.prototype */{type:"Composed",
/**
     * A non sparse array of filters to apply
     */
subFilters:[],
/**
     * Constructor
     * @param {Object} [options] Options object
     */
initialize:function(options){this.callSuper("initialize",options),
// create a new array instead mutating the prototype with push
this.subFilters=this.subFilters.slice(0)},
/**
     * Apply this container's filters to the input image provided.
     *
     * @param {Object} options
     * @param {Number} options.passes The number of filters remaining to be applied.
     */
applyTo:function(options){options.passes+=this.subFilters.length-1,this.subFilters.forEach((function(filter){filter.applyTo(options)}))},
/**
     * Serialize this filter into JSON.
     *
     * @returns {Object} A JSON representation of this filter.
     */
toObject:function(){return fabric.util.object.extend(this.callSuper("toObject"),{subFilters:this.subFilters.map((function(filter){return filter.toObject()}))})},isNeutralState:function(){return!this.subFilters.some((function(filter){return!filter.isNeutralState()}))}}),
/**
   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.
   */
fabric.Image.filters.Composed.fromObject=function(object,callback){var filters=object.subFilters||[],subFilters=filters.map((function(filter){return new fabric.Image.filters[filter.type](filter)})),instance=new fabric.Image.filters.Composed({subFilters:subFilters});return callback&&callback(instance),instance}}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;
/**
   * HueRotation filter class
   * @class fabric.Image.filters.HueRotation
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.HueRotation({
   *   rotation: -0.5
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */filters.HueRotation=createClass(filters.ColorMatrix,/** @lends fabric.Image.filters.HueRotation.prototype */{
/**
     * Filter type
     * @param {String} type
     * @default
     */
type:"HueRotation",
/**
     * HueRotation value, from -1 to 1.
     * the unit is radians
     * @param {Number} myParameter
     * @default
     */
rotation:0,
/**
     * Describe the property that is the filter parameter
     * @param {String} m
     * @default
     */
mainParameter:"rotation",calculateMatrix:function(){var rad=this.rotation*Math.PI,cos=fabric.util.cos(rad),sin=fabric.util.sin(rad),aThird=1/3,aThirdSqtSin=Math.sqrt(aThird)*sin,OneMinusCos=1-cos;this.matrix=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],this.matrix[0]=cos+OneMinusCos/3,this.matrix[1]=aThird*OneMinusCos-aThirdSqtSin,this.matrix[2]=aThird*OneMinusCos+aThirdSqtSin,this.matrix[5]=aThird*OneMinusCos+aThirdSqtSin,this.matrix[6]=cos+aThird*OneMinusCos,this.matrix[7]=aThird*OneMinusCos-aThirdSqtSin,this.matrix[10]=aThird*OneMinusCos-aThirdSqtSin,this.matrix[11]=aThird*OneMinusCos+aThirdSqtSin,this.matrix[12]=cos+aThird*OneMinusCos},
/**
     * HueRotation isNeutralState implementation
     * Used only in image applyFilters to discard filters that will not have an effect
     * on the image
     * @param {Object} options
     **/
isNeutralState:function(options){return this.calculateMatrix(),filters.BaseFilter.prototype.isNeutralState.call(this,options)},
/**
     * Apply this filter to the input image data provided.
     *
     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
     *
     * @param {Object} options
     * @param {Number} options.passes The number of filters remaining to be executed
     * @param {Boolean} options.webgl Whether to use webgl to render the filter.
     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
applyTo:function(options){this.calculateMatrix(),filters.BaseFilter.prototype.applyTo.call(this,options)}}),
/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation
   */
fabric.Image.filters.HueRotation.fromObject=fabric.Image.filters.BaseFilter.fromObject}(exports),function(global){"use strict";var fabric=global.fabric||(global.fabric={}),clone=fabric.util.object.clone;fabric.Text?fabric.warn("fabric.Text is already defined"):(
/**
   * Text class
   * @class fabric.Text
   * @extends fabric.Object
   * @return {fabric.Text} thisArg
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}
   * @see {@link fabric.Text#initialize} for constructor definition
   */
fabric.Text=fabric.util.createClass(fabric.Object,/** @lends fabric.Text.prototype */{
/**
     * Properties which when set cause object to change dimensions
     * @type Array
     * @private
     */
_dimensionAffectingProps:["fontSize","fontWeight","fontFamily","fontStyle","lineHeight","text","charSpacing","textAlign","styles"],
/**
     * @private
     */
_reNewline:/\r?\n/,
/**
     * Use this regular expression to filter for whitespaces that is not a new line.
     * Mostly used when text is 'justify' aligned.
     * @private
     */
_reSpacesAndTabs:/[ \t\r]/g,
/**
     * Use this regular expression to filter for whitespace that is not a new line.
     * Mostly used when text is 'justify' aligned.
     * @private
     */
_reSpaceAndTab:/[ \t\r]/,
/**
     * Use this regular expression to filter consecutive groups of non spaces.
     * Mostly used when text is 'justify' aligned.
     * @private
     */
_reWords:/\S+/g,
/**
     * Type of an object
     * @type String
     * @default
     */
type:"text",
/**
     * Font size (in pixels)
     * @type Number
     * @default
     */
fontSize:40,
/**
     * Font weight (e.g. bold, normal, 400, 600, 800)
     * @type {(Number|String)}
     * @default
     */
fontWeight:"normal",
/**
     * Font family
     * @type String
     * @default
     */
fontFamily:"Times New Roman",
/**
     * Text decoration underline.
     * @type Boolean
     * @default
     */
underline:!1,
/**
     * Text decoration overline.
     * @type Boolean
     * @default
     */
overline:!1,
/**
     * Text decoration linethrough.
     * @type Boolean
     * @default
     */
linethrough:!1,
/**
     * Text alignment. Possible values: "left", "center", "right", "justify",
     * "justify-left", "justify-center" or "justify-right".
     * @type String
     * @default
     */
textAlign:"left",
/**
     * Font style . Possible values: "", "normal", "italic" or "oblique".
     * @type String
     * @default
     */
fontStyle:"normal",
/**
     * Line height
     * @type Number
     * @default
     */
lineHeight:1.16,
/**
     * Superscript schema object (minimum overlap)
     * @type {Object}
     * @default
     */
superscript:{size:.6,// fontSize factor
baseline:-.35},
/**
     * Subscript schema object (minimum overlap)
     * @type {Object}
     * @default
     */
subscript:{size:.6,// fontSize factor
baseline:.11},
/**
     * Background color of text lines
     * @type String
     * @default
     */
textBackgroundColor:"",
/**
     * List of properties to consider when checking if
     * state of an object is changed ({@link fabric.Object#hasStateChanged})
     * as well as for history (undo/redo) purposes
     * @type Array
     */
stateProperties:fabric.Object.prototype.stateProperties.concat("fontFamily","fontWeight","fontSize","text","underline","overline","linethrough","textAlign","fontStyle","lineHeight","textBackgroundColor","charSpacing","styles"),
/**
     * List of properties to consider when checking if cache needs refresh
     * @type Array
     */
cacheProperties:fabric.Object.prototype.cacheProperties.concat("fontFamily","fontWeight","fontSize","text","underline","overline","linethrough","textAlign","fontStyle","lineHeight","textBackgroundColor","charSpacing","styles"),
/**
     * When defined, an object is rendered via stroke and this property specifies its color.
     * <b>Backwards incompatibility note:</b> This property was named "strokeStyle" until v1.1.6
     * @type String
     * @default
     */
stroke:null,
/**
     * Shadow object representing shadow of this shape.
     * <b>Backwards incompatibility note:</b> This property was named "textShadow" (String) until v1.2.11
     * @type fabric.Shadow
     * @default
     */
shadow:null,
/**
     * @private
     */
_fontSizeFraction:.222,
/**
     * @private
     */
offsets:{underline:.1,linethrough:-.315,overline:-.88},
/**
     * Text Line proportion to font Size (in pixels)
     * @type Number
     * @default
     */
_fontSizeMult:1.13,
/**
     * additional space between characters
     * expressed in thousands of em unit
     * @type Number
     * @default
     */
charSpacing:0,
/**
     * Object containing character styles - top-level properties -> line numbers,
     * 2nd-level properties - charater numbers
     * @type Object
     * @default
     */
styles:null,
/**
     * Reference to a context to measure text char or couple of chars
     * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas
     * once created it will be referenced on fabric._measuringContext to avoide creating a canvas for every
     * text object created.
     * @type {CanvasRenderingContext2D}
     * @default
     */
_measuringContext:null,
/**
     * Baseline shift, stlyes only, keep at 0 for the main text object
     * @type {Number}
     * @default
     */
deltaY:0,
/**
     * Array of properties that define a style unit (of 'styles').
     * @type {Array}
     * @default
     */
_styleProperties:["stroke","strokeWidth","fill","fontFamily","fontSize","fontWeight","fontStyle","underline","overline","linethrough","deltaY","textBackgroundColor"],
/**
     * contains characters bounding boxes
     */
__charBounds:[],
/**
     * use this size when measuring text. To avoid IE11 rounding errors
     * @type {Number}
     * @default
     * @readonly
     * @private
     */
CACHE_FONT_SIZE:400,
/**
     * contains the min text width to avoid getting 0
     * @type {Number}
     * @default
     */
MIN_TEXT_WIDTH:2,
/**
     * Constructor
     * @param {String} text Text string
     * @param {Object} [options] Options object
     * @return {fabric.Text} thisArg
     */
initialize:function(text,options){this.styles=options&&options.styles||{},this.text=text,this.__skipDimension=!0,this.callSuper("initialize",options),this.__skipDimension=!1,this.initDimensions(),this.setCoords(),this.setupState({propertySet:"_dimensionAffectingProps"})},
/**
     * Return a contex for measurement of text string.
     * if created it gets stored for reuse
     * @param {String} text Text string
     * @param {Object} [options] Options object
     * @return {fabric.Text} thisArg
     */
getMeasuringContext:function(){
// if we did not return we have to measure something.
return fabric._measuringContext||(fabric._measuringContext=this.canvas&&this.canvas.contextCache||fabric.util.createCanvasElement().getContext("2d")),fabric._measuringContext},
/**
     * @private
     * Divides text into lines of text and lines of graphemes.
     */
_splitText:function(){var newLines=this._splitTextIntoLines(this.text);return this.textLines=newLines.lines,this._textLines=newLines.graphemeLines,this._unwrappedTextLines=newLines._unwrappedLines,this._text=newLines.graphemeText,newLines},
/**
     * Initialize or update text dimensions.
     * Updates this.width and this.height with the proper values.
     * Does not return dimensions.
     */
initDimensions:function(){this.__skipDimension||(this._splitText(),this._clearCache(),this.width=this.calcTextWidth()||this.cursorWidth||this.MIN_TEXT_WIDTH,-1!==this.textAlign.indexOf("justify")&&
// once text is measured we need to make space fatter to make justified text.
this.enlargeSpaces(),this.height=this.calcTextHeight(),this.saveState({propertySet:"_dimensionAffectingProps"}))},
/**
     * Enlarge space boxes and shift the others
     */
enlargeSpaces:function(){for(var diffSpace,currentLineWidth,numberOfSpaces,accumulatedSpace,line,charBound,spaces,i=0,len=this._textLines.length;i<len;i++)if(("justify"===this.textAlign||i!==len-1&&!this.isEndOfWrapping(i))&&(accumulatedSpace=0,line=this._textLines[i],currentLineWidth=this.getLineWidth(i),currentLineWidth<this.width&&(spaces=this.textLines[i].match(this._reSpacesAndTabs)))){numberOfSpaces=spaces.length,diffSpace=(this.width-currentLineWidth)/numberOfSpaces;for(var j=0,jlen=line.length;j<=jlen;j++)charBound=this.__charBounds[i][j],this._reSpaceAndTab.test(line[j])?(charBound.width+=diffSpace,charBound.kernedWidth+=diffSpace,charBound.left+=accumulatedSpace,accumulatedSpace+=diffSpace):charBound.left+=accumulatedSpace}},
/**
     * Detect if the text line is ended with an hard break
     * text and itext do not have wrapping, return false
     * @return {Boolean}
     */
isEndOfWrapping:function(lineIndex){return lineIndex===this._textLines.length-1},
/**
     * Detect if a line has a linebreak and so we need to account for it when moving
     * and counting style.
     * It return always for text and Itext.
     * @return Number
     */
missingNewlineOffset:function(){return 1},
/**
     * Returns string representation of an instance
     * @return {String} String representation of text object
     */
toString:function(){return"#<fabric.Text ("+this.complexity()+'): { "text": "'+this.text+'", "fontFamily": "'+this.fontFamily+'" }>'},
/**
     * Return the dimension and the zoom level needed to create a cache canvas
     * big enough to host the object to be cached.
     * @private
     * @param {Object} dim.x width of object to be cached
     * @param {Object} dim.y height of object to be cached
     * @return {Object}.width width of canvas
     * @return {Object}.height height of canvas
     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
     */
_getCacheCanvasDimensions:function(){var dims=this.callSuper("_getCacheCanvasDimensions"),fontSize=this.fontSize;return dims.width+=fontSize*dims.zoomX,dims.height+=fontSize*dims.zoomY,dims},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_render:function(ctx){this._setTextStyles(ctx),this._renderTextLinesBackground(ctx),this._renderTextDecoration(ctx,"underline"),this._renderText(ctx),this._renderTextDecoration(ctx,"overline"),this._renderTextDecoration(ctx,"linethrough")},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderText:function(ctx){"stroke"===this.paintFirst?(this._renderTextStroke(ctx),this._renderTextFill(ctx)):(this._renderTextFill(ctx),this._renderTextStroke(ctx))},
/**
     * Set the font parameter of the context with the object properties or with charStyle
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Object} [charStyle] object with font style properties
     * @param {String} [charStyle.fontFamily] Font Family
     * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )
     * @param {String} [charStyle.fontWeight] Font weight
     * @param {String} [charStyle.fontStyle] Font style (italic|normal)
     */
_setTextStyles:function(ctx,charStyle,forMeasuring){ctx.textBaseline="alphabetic",ctx.font=this._getFontDeclaration(charStyle,forMeasuring)},
/**
     * calculate and return the text Width measuring each line.
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @return {Number} Maximum width of fabric.Text object
     */
calcTextWidth:function(){for(var maxWidth=this.getLineWidth(0),i=1,len=this._textLines.length;i<len;i++){var currentLineWidth=this.getLineWidth(i);currentLineWidth>maxWidth&&(maxWidth=currentLineWidth)}return maxWidth},
/**
     * @private
     * @param {String} method Method name ("fillText" or "strokeText")
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} line Text to render
     * @param {Number} left Left position of text
     * @param {Number} top Top position of text
     * @param {Number} lineIndex Index of a line in a text
     */
_renderTextLine:function(method,ctx,line,left,top,lineIndex){this._renderChars(method,ctx,line,left,top,lineIndex)},
/**
     * Renders the text background for lines, taking care of style
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderTextLinesBackground:function(ctx){if(this.textBackgroundColor||this.styleHas("textBackgroundColor")){for(var heightOfLine,lineLeftOffset,line,lastColor,charBox,currentColor,lineTopOffset=0,originalFill=ctx.fillStyle,leftOffset=this._getLeftOffset(),topOffset=this._getTopOffset(),boxStart=0,boxWidth=0,i=0,len=this._textLines.length;i<len;i++)if(heightOfLine=this.getHeightOfLine(i),this.textBackgroundColor||this.styleHas("textBackgroundColor",i)){line=this._textLines[i],lineLeftOffset=this._getLineLeftOffset(i),boxWidth=0,boxStart=0,lastColor=this.getValueOfPropertyAt(i,0,"textBackgroundColor");for(var j=0,jlen=line.length;j<jlen;j++)charBox=this.__charBounds[i][j],currentColor=this.getValueOfPropertyAt(i,j,"textBackgroundColor"),currentColor!==lastColor?(ctx.fillStyle=lastColor,lastColor&&ctx.fillRect(leftOffset+lineLeftOffset+boxStart,topOffset+lineTopOffset,boxWidth,heightOfLine/this.lineHeight),boxStart=charBox.left,boxWidth=charBox.width,lastColor=currentColor):boxWidth+=charBox.kernedWidth;currentColor&&(ctx.fillStyle=currentColor,ctx.fillRect(leftOffset+lineLeftOffset+boxStart,topOffset+lineTopOffset,boxWidth,heightOfLine/this.lineHeight)),lineTopOffset+=heightOfLine}else lineTopOffset+=heightOfLine;ctx.fillStyle=originalFill,
// if there is text background color no
// other shadows should be casted
this._removeShadow(ctx)}},
/**
     * @private
     * @param {Object} decl style declaration for cache
     * @param {String} decl.fontFamily fontFamily
     * @param {String} decl.fontStyle fontStyle
     * @param {String} decl.fontWeight fontWeight
     * @return {Object} reference to cache
     */
getFontCache:function(decl){var fontFamily=decl.fontFamily.toLowerCase();fabric.charWidthsCache[fontFamily]||(fabric.charWidthsCache[fontFamily]={});var cache=fabric.charWidthsCache[fontFamily],cacheProp=decl.fontStyle.toLowerCase()+"_"+(decl.fontWeight+"").toLowerCase();return cache[cacheProp]||(cache[cacheProp]={}),cache[cacheProp]},
/**
     * apply all the character style to canvas for rendering
     * @private
     * @param {String} _char
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {Object} [decl]
     */
_applyCharStyles:function(method,ctx,lineIndex,charIndex,styleDeclaration){this._setFillStyles(ctx,styleDeclaration),this._setStrokeStyles(ctx,styleDeclaration),ctx.font=this._getFontDeclaration(styleDeclaration)},
/**
     * measure and return the width of a single character.
     * possibly overridden to accommodate different measure logic or
     * to hook some external lib for character measurement
     * @private
     * @param {String} _char, char to be measured
     * @param {Object} charStyle style of char to be measured
     * @param {String} [previousChar] previous char
     * @param {Object} [prevCharStyle] style of previous char
     */
_measureChar:function(_char,charStyle,previousChar,prevCharStyle){
// first i try to return from cache
var width,coupleWidth,previousWidth,kernedWidth,fontCache=this.getFontCache(charStyle),fontDeclaration=this._getFontDeclaration(charStyle),previousFontDeclaration=this._getFontDeclaration(prevCharStyle),couple=previousChar+_char,stylesAreEqual=fontDeclaration===previousFontDeclaration,fontMultiplier=charStyle.fontSize/this.CACHE_FONT_SIZE;if(previousChar&&void 0!==fontCache[previousChar]&&(previousWidth=fontCache[previousChar]),void 0!==fontCache[_char]&&(kernedWidth=width=fontCache[_char]),stylesAreEqual&&void 0!==fontCache[couple]&&(coupleWidth=fontCache[couple],kernedWidth=coupleWidth-previousWidth),void 0===width||void 0===previousWidth||void 0===coupleWidth){var ctx=this.getMeasuringContext();
// send a TRUE to specify measuring font size CACHE_FONT_SIZE
this._setTextStyles(ctx,charStyle,!0)}return void 0===width&&(kernedWidth=width=ctx.measureText(_char).width,fontCache[_char]=width),void 0===previousWidth&&stylesAreEqual&&previousChar&&(previousWidth=ctx.measureText(previousChar).width,fontCache[previousChar]=previousWidth),stylesAreEqual&&void 0===coupleWidth&&(
// we can measure the kerning couple and subtract the width of the previous character
coupleWidth=ctx.measureText(couple).width,fontCache[couple]=coupleWidth,kernedWidth=coupleWidth-previousWidth),{width:width*fontMultiplier,kernedWidth:kernedWidth*fontMultiplier}},
/**
     * Computes height of character at given position
     * @param {Number} line the line index number
     * @param {Number} _char the character index number
     * @return {Number} fontSize of the character
     */
getHeightOfChar:function(line,_char){return this.getValueOfPropertyAt(line,_char,"fontSize")},
/**
     * measure a text line measuring all characters.
     * @param {Number} lineIndex line number
     * @return {Number} Line width
     */
measureLine:function(lineIndex){var lineInfo=this._measureLine(lineIndex);return 0!==this.charSpacing&&(lineInfo.width-=this._getWidthOfCharSpacing()),lineInfo.width<0&&(lineInfo.width=0),lineInfo},
/**
     * measure every grapheme of a line, populating __charBounds
     * @param {Number} lineIndex
     * @return {Object} object.width total width of characters
     * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs
     */
_measureLine:function(lineIndex){var i,grapheme,prevGrapheme,graphemeInfo,width=0,line=this._textLines[lineIndex],numOfSpaces=0,lineBounds=new Array(line.length);for(this.__charBounds[lineIndex]=lineBounds,i=0;i<line.length;i++)grapheme=line[i],graphemeInfo=this._getGraphemeBox(grapheme,lineIndex,i,prevGrapheme),lineBounds[i]=graphemeInfo,width+=graphemeInfo.kernedWidth,prevGrapheme=grapheme;
// this latest bound box represent the last character of the line
// to simplify cursor handling in interactive mode.
return lineBounds[i]={left:graphemeInfo?graphemeInfo.left+graphemeInfo.width:0,width:0,kernedWidth:0,height:this.fontSize},{width:width,numOfSpaces:numOfSpaces}},
/**
     * Measure and return the info of a single grapheme.
     * needs the the info of previous graphemes already filled
     * @private
     * @param {String} grapheme to be measured
     * @param {Number} lineIndex index of the line where the char is
     * @param {Number} charIndex position in the line
     * @param {String} [prevGrapheme] character preceding the one to be measured
     */
_getGraphemeBox:function(grapheme,lineIndex,charIndex,prevGrapheme,skipLeft){var charSpacing,style=this.getCompleteStyleDeclaration(lineIndex,charIndex),prevStyle=prevGrapheme?this.getCompleteStyleDeclaration(lineIndex,charIndex-1):{},info=this._measureChar(grapheme,style,prevGrapheme,prevStyle),kernedWidth=info.kernedWidth,width=info.width;0!==this.charSpacing&&(charSpacing=this._getWidthOfCharSpacing(),width+=charSpacing,kernedWidth+=charSpacing);var box={width:width,left:0,height:style.fontSize,kernedWidth:kernedWidth,deltaY:style.deltaY};if(charIndex>0&&!skipLeft){var previousBox=this.__charBounds[lineIndex][charIndex-1];box.left=previousBox.left+previousBox.width+info.kernedWidth-info.width}return box},
/**
     * Calculate height of line at 'lineIndex'
     * @param {Number} lineIndex index of line to calculate
     * @return {Number}
     */
getHeightOfLine:function(lineIndex){if(this.__lineHeights[lineIndex])return this.__lineHeights[lineIndex];for(var line=this._textLines[lineIndex],
// char 0 is measured before the line cycle because it nneds to char
// emptylines
maxHeight=this.getHeightOfChar(lineIndex,0),i=1,len=line.length;i<len;i++)maxHeight=Math.max(this.getHeightOfChar(lineIndex,i),maxHeight);return this.__lineHeights[lineIndex]=maxHeight*this.lineHeight*this._fontSizeMult},
/**
     * Calculate text box height
     */
calcTextHeight:function(){for(var lineHeight,height=0,i=0,len=this._textLines.length;i<len;i++)lineHeight=this.getHeightOfLine(i),height+=i===len-1?lineHeight/this.lineHeight:lineHeight;return height},
/**
     * @private
     * @return {Number} Left offset
     */
_getLeftOffset:function(){return-this.width/2},
/**
     * @private
     * @return {Number} Top offset
     */
_getTopOffset:function(){return-this.height/2},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Object} filler fabric.Pattern or fabric.Gradient
     * @return {Object} offset.offsetX offset for text rendering
     * @return {Object} offset.offsetY offset for text rendering
     */
_applyPatternGradientTransform:function(ctx,filler){if(!filler||!filler.toLive)return{offsetX:0,offsetY:0};var offsetX=-this.width/2+filler.offsetX||0,offsetY=-this.height/2+filler.offsetY||0;return ctx.transform(1,0,0,1,offsetX,offsetY),{offsetX:offsetX,offsetY:offsetY}},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} method Method name ("fillText" or "strokeText")
     */
_renderTextCommon:function(ctx,method){ctx.save();for(var lineHeights=0,left=this._getLeftOffset(),top=this._getTopOffset(),offsets=this._applyPatternGradientTransform(ctx,"fillText"===method?this.fill:this.stroke),i=0,len=this._textLines.length;i<len;i++){var heightOfLine=this.getHeightOfLine(i),maxHeight=heightOfLine/this.lineHeight,leftOffset=this._getLineLeftOffset(i);this._renderTextLine(method,ctx,this._textLines[i],left+leftOffset-offsets.offsetX,top+lineHeights+maxHeight-offsets.offsetY,i),lineHeights+=heightOfLine}ctx.restore()},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderTextFill:function(ctx){(this.fill||this.styleHas("fill"))&&this._renderTextCommon(ctx,"fillText")},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderTextStroke:function(ctx){(this.stroke&&0!==this.strokeWidth||!this.isEmptyStyles())&&(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(ctx),ctx.save(),this._setLineDash(ctx,this.strokeDashArray),ctx.beginPath(),this._renderTextCommon(ctx,"strokeText"),ctx.closePath(),ctx.restore())},
/**
     * @private
     * @param {String} method
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} line Content of the line
     * @param {Number} left
     * @param {Number} top
     * @param {Number} lineIndex
     * @param {Number} charOffset
     */
_renderChars:function(method,ctx,line,left,top,lineIndex){
// set proper line offset
var actualStyle,nextStyle,charBox,timeToRender,lineHeight=this.getHeightOfLine(lineIndex),isJustify=-1!==this.textAlign.indexOf("justify"),charsToRender="",boxWidth=0,shortCut=!isJustify&&0===this.charSpacing&&this.isEmptyStyles(lineIndex);if(ctx.save(),top-=lineHeight*this._fontSizeFraction/this.lineHeight,shortCut)
// render all the line in one pass without checking
return this._renderChar(method,ctx,lineIndex,0,this.textLines[lineIndex],left,top,lineHeight),void ctx.restore();for(var i=0,len=line.length-1;i<=len;i++)timeToRender=i===len||this.charSpacing,charsToRender+=line[i],charBox=this.__charBounds[lineIndex][i],0===boxWidth?(left+=charBox.kernedWidth-charBox.width,boxWidth+=charBox.width):boxWidth+=charBox.kernedWidth,isJustify&&!timeToRender&&this._reSpaceAndTab.test(line[i])&&(timeToRender=!0),timeToRender||(
// if we have charSpacing, we render char by char
actualStyle=actualStyle||this.getCompleteStyleDeclaration(lineIndex,i),nextStyle=this.getCompleteStyleDeclaration(lineIndex,i+1),timeToRender=this._hasStyleChanged(actualStyle,nextStyle)),timeToRender&&(this._renderChar(method,ctx,lineIndex,i,charsToRender,left,top,lineHeight),charsToRender="",actualStyle=nextStyle,left+=boxWidth,boxWidth=0);ctx.restore()},
/**
     * @private
     * @param {String} method
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {String} _char
     * @param {Number} left Left coordinate
     * @param {Number} top Top coordinate
     * @param {Number} lineHeight Height of the line
     */
_renderChar:function(method,ctx,lineIndex,charIndex,_char,left,top){var decl=this._getStyleDeclaration(lineIndex,charIndex),fullDecl=this.getCompleteStyleDeclaration(lineIndex,charIndex),shouldFill="fillText"===method&&fullDecl.fill,shouldStroke="strokeText"===method&&fullDecl.stroke&&fullDecl.strokeWidth;(shouldStroke||shouldFill)&&(decl&&ctx.save(),this._applyCharStyles(method,ctx,lineIndex,charIndex,fullDecl),decl&&decl.textBackgroundColor&&this._removeShadow(ctx),decl&&decl.deltaY&&(top+=decl.deltaY),shouldFill&&ctx.fillText(_char,left,top),shouldStroke&&ctx.strokeText(_char,left,top),decl&&ctx.restore())},
/**
     * Turns the character into a 'superior figure' (i.e. 'superscript')
     * @param {Number} start selection start
     * @param {Number} end selection end
     * @returns {fabric.Text} thisArg
     * @chainable
     */
setSuperscript:function(start,end){return this._setScript(start,end,this.superscript)},
/**
     * Turns the character into an 'inferior figure' (i.e. 'subscript')
     * @param {Number} start selection start
     * @param {Number} end selection end
     * @returns {fabric.Text} thisArg
     * @chainable
     */
setSubscript:function(start,end){return this._setScript(start,end,this.subscript)},
/**
     * Applies 'schema' at given position
     * @private
     * @param {Number} start selection start
     * @param {Number} end selection end
     * @param {Number} schema
     * @returns {fabric.Text} thisArg
     * @chainable
     */
_setScript:function(start,end,schema){var loc=this.get2DCursorLocation(start,!0),fontSize=this.getValueOfPropertyAt(loc.lineIndex,loc.charIndex,"fontSize"),dy=this.getValueOfPropertyAt(loc.lineIndex,loc.charIndex,"deltaY"),style={fontSize:fontSize*schema.size,deltaY:dy+fontSize*schema.baseline};return this.setSelectionStyles(style,start,end),this},
/**
     * @private
     * @param {Object} prevStyle
     * @param {Object} thisStyle
     */
_hasStyleChanged:function(prevStyle,thisStyle){return prevStyle.fill!==thisStyle.fill||prevStyle.stroke!==thisStyle.stroke||prevStyle.strokeWidth!==thisStyle.strokeWidth||prevStyle.fontSize!==thisStyle.fontSize||prevStyle.fontFamily!==thisStyle.fontFamily||prevStyle.fontWeight!==thisStyle.fontWeight||prevStyle.fontStyle!==thisStyle.fontStyle||prevStyle.deltaY!==thisStyle.deltaY},
/**
     * @private
     * @param {Object} prevStyle
     * @param {Object} thisStyle
     */
_hasStyleChangedForSvg:function(prevStyle,thisStyle){return this._hasStyleChanged(prevStyle,thisStyle)||prevStyle.overline!==thisStyle.overline||prevStyle.underline!==thisStyle.underline||prevStyle.linethrough!==thisStyle.linethrough},
/**
     * @private
     * @param {Number} lineIndex index text line
     * @return {Number} Line left offset
     */
_getLineLeftOffset:function(lineIndex){var lineWidth=this.getLineWidth(lineIndex);return"center"===this.textAlign?(this.width-lineWidth)/2:"right"===this.textAlign?this.width-lineWidth:"justify-center"===this.textAlign&&this.isEndOfWrapping(lineIndex)?(this.width-lineWidth)/2:"justify-right"===this.textAlign&&this.isEndOfWrapping(lineIndex)?this.width-lineWidth:0},
/**
     * @private
     */
_clearCache:function(){this.__lineWidths=[],this.__lineHeights=[],this.__charBounds=[]},
/**
     * @private
     */
_shouldClearDimensionCache:function(){var shouldClear=this._forceClearCache;return shouldClear||(shouldClear=this.hasStateChanged("_dimensionAffectingProps")),shouldClear&&(this.dirty=!0,this._forceClearCache=!1),shouldClear},
/**
     * Measure a single line given its index. Used to calculate the initial
     * text bounding box. The values are calculated and stored in __lineWidths cache.
     * @private
     * @param {Number} lineIndex line number
     * @return {Number} Line width
     */
getLineWidth:function(lineIndex){if(this.__lineWidths[lineIndex])return this.__lineWidths[lineIndex];var width,lineInfo,line=this._textLines[lineIndex];return""===line?width=0:(lineInfo=this.measureLine(lineIndex),width=lineInfo.width),this.__lineWidths[lineIndex]=width,width},_getWidthOfCharSpacing:function(){return 0!==this.charSpacing?this.fontSize*this.charSpacing/1e3:0},
/**
     * Retrieves the value of property at given character position
     * @param {Number} lineIndex the line number
     * @param {Number} charIndex the charater number
     * @param {String} property the property name
     * @returns the value of 'property'
     */
getValueOfPropertyAt:function(lineIndex,charIndex,property){var charStyle=this._getStyleDeclaration(lineIndex,charIndex);return charStyle&&"undefined"!==typeof charStyle[property]?charStyle[property]:this[property]},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_renderTextDecoration:function(ctx,type){if(this[type]||this.styleHas(type)){for(var heightOfLine,size,_size,lineLeftOffset,dy,_dy,line,lastDecoration,top,boxStart,boxWidth,charBox,currentDecoration,maxHeight,currentFill,lastFill,leftOffset=this._getLeftOffset(),topOffset=this._getTopOffset(),charSpacing=this._getWidthOfCharSpacing(),i=0,len=this._textLines.length;i<len;i++)if(heightOfLine=this.getHeightOfLine(i),this[type]||this.styleHas(type,i)){line=this._textLines[i],maxHeight=heightOfLine/this.lineHeight,lineLeftOffset=this._getLineLeftOffset(i),boxStart=0,boxWidth=0,lastDecoration=this.getValueOfPropertyAt(i,0,type),lastFill=this.getValueOfPropertyAt(i,0,"fill"),top=topOffset+maxHeight*(1-this._fontSizeFraction),size=this.getHeightOfChar(i,0),dy=this.getValueOfPropertyAt(i,0,"deltaY");for(var j=0,jlen=line.length;j<jlen;j++)charBox=this.__charBounds[i][j],currentDecoration=this.getValueOfPropertyAt(i,j,type),currentFill=this.getValueOfPropertyAt(i,j,"fill"),_size=this.getHeightOfChar(i,j),_dy=this.getValueOfPropertyAt(i,j,"deltaY"),(currentDecoration!==lastDecoration||currentFill!==lastFill||_size!==size||_dy!==dy)&&boxWidth>0?(ctx.fillStyle=lastFill,lastDecoration&&lastFill&&ctx.fillRect(leftOffset+lineLeftOffset+boxStart,top+this.offsets[type]*size+dy,boxWidth,this.fontSize/15),boxStart=charBox.left,boxWidth=charBox.width,lastDecoration=currentDecoration,lastFill=currentFill,size=_size,dy=_dy):boxWidth+=charBox.kernedWidth;ctx.fillStyle=currentFill,currentDecoration&&currentFill&&ctx.fillRect(leftOffset+lineLeftOffset+boxStart,top+this.offsets[type]*size+dy,boxWidth-charSpacing,this.fontSize/15),topOffset+=heightOfLine}else topOffset+=heightOfLine;
// if there is text background color no
// other shadows should be casted
this._removeShadow(ctx)}},
/**
     * return font declaration string for canvas context
     * @param {Object} [styleObject] object
     * @returns {String} font declaration formatted for canvas context.
     */
_getFontDeclaration:function(styleObject,forMeasuring){var style=styleObject||this,family=this.fontFamily,fontIsGeneric=fabric.Text.genericFonts.indexOf(family.toLowerCase())>-1,fontFamily=void 0===family||family.indexOf("'")>-1||family.indexOf(",")>-1||family.indexOf('"')>-1||fontIsGeneric?style.fontFamily:'"'+style.fontFamily+'"';return[
// node-canvas needs "weight style", while browsers need "style weight"
// verify if this can be fixed in JSDOM
fabric.isLikelyNode?style.fontWeight:style.fontStyle,fabric.isLikelyNode?style.fontStyle:style.fontWeight,forMeasuring?this.CACHE_FONT_SIZE+"px":style.fontSize+"px",fontFamily].join(" ")},
/**
     * Renders text instance on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
render:function(ctx){
// do not render if object is not visible
this.visible&&(this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(this._shouldClearDimensionCache()&&this.initDimensions(),this.callSuper("render",ctx)))},
/**
     * Returns the text as an array of lines.
     * @param {String} text text to split
     * @returns {Array} Lines in the text
     */
_splitTextIntoLines:function(text){for(var lines=text.split(this._reNewline),newLines=new Array(lines.length),newLine=["\n"],newText=[],i=0;i<lines.length;i++)newLines[i]=fabric.util.string.graphemeSplit(lines[i]),newText=newText.concat(newLines[i],newLine);return newText.pop(),{_unwrappedLines:newLines,lines:lines,graphemeText:newText,graphemeLines:newLines}},
/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */
toObject:function(propertiesToInclude){var additionalProperties=["text","fontSize","fontWeight","fontFamily","fontStyle","lineHeight","underline","overline","linethrough","textAlign","textBackgroundColor","charSpacing"].concat(propertiesToInclude),obj=this.callSuper("toObject",additionalProperties);return obj.styles=clone(this.styles,!0),obj},
/**
     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
     * @param {String|Object} key Property name or object (if object, iterate over the object properties)
     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
     * @return {fabric.Object} thisArg
     * @chainable
     */
set:function(key,value){this.callSuper("set",key,value);var needsDims=!1;if("object"===typeof key)for(var _key in key)needsDims=needsDims||-1!==this._dimensionAffectingProps.indexOf(_key);else needsDims=-1!==this._dimensionAffectingProps.indexOf(key);return needsDims&&(this.initDimensions(),this.setCoords()),this},
/**
     * Returns complexity of an instance
     * @return {Number} complexity
     */
complexity:function(){return 1}}),
/* _FROM_SVG_START_ */
/**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})
   * @static
   * @memberOf fabric.Text
   * @see: http://www.w3.org/TR/SVG/text.html#TextElement
   */
fabric.Text.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat("x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor".split(" ")),
/**
   * Default SVG font size
   * @static
   * @memberOf fabric.Text
   */
fabric.Text.DEFAULT_SVG_FONT_SIZE=16,
/**
   * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)
   * @static
   * @memberOf fabric.Text
   * @param {SVGElement} element Element to parse
   * @param {Function} callback callback function invoked after parsing
   * @param {Object} [options] Options object
   */
fabric.Text.fromElement=function(element,callback,options){if(!element)return callback(null);var parsedAttributes=fabric.parseAttributes(element,fabric.Text.ATTRIBUTE_NAMES),parsedAnchor=parsedAttributes.textAnchor||"left";if(options=fabric.util.object.extend(options?clone(options):{},parsedAttributes),options.top=options.top||0,options.left=options.left||0,parsedAttributes.textDecoration){var textDecoration=parsedAttributes.textDecoration;-1!==textDecoration.indexOf("underline")&&(options.underline=!0),-1!==textDecoration.indexOf("overline")&&(options.overline=!0),-1!==textDecoration.indexOf("line-through")&&(options.linethrough=!0),delete options.textDecoration}"dx"in parsedAttributes&&(options.left+=parsedAttributes.dx),"dy"in parsedAttributes&&(options.top+=parsedAttributes.dy),"fontSize"in options||(options.fontSize=fabric.Text.DEFAULT_SVG_FONT_SIZE);var textContent="";
// The XML is not properly parsed in IE9 so a workaround to get
// textContent is through firstChild.data. Another workaround would be
// to convert XML loaded from a file to be converted using DOMParser (same way loadSVGFromString() does)
"textContent"in element?textContent=element.textContent:"firstChild"in element&&null!==element.firstChild&&"data"in element.firstChild&&null!==element.firstChild.data&&(textContent=element.firstChild.data),textContent=textContent.replace(/^\s+|\s+$|\n+/g,"").replace(/\s+/g," ");var originalStrokeWidth=options.strokeWidth;options.strokeWidth=0;var text=new fabric.Text(textContent,options),textHeightScaleFactor=text.getScaledHeight()/text.height,lineHeightDiff=(text.height+text.strokeWidth)*text.lineHeight-text.height,scaledDiff=lineHeightDiff*textHeightScaleFactor,textHeight=text.getScaledHeight()+scaledDiff,offX=0;
/*
      Adjust positioning:
        x/y attributes in SVG correspond to the bottom-left corner of text bounding box
        fabric output by default at top, left.
    */"center"===parsedAnchor&&(offX=text.getScaledWidth()/2),"right"===parsedAnchor&&(offX=text.getScaledWidth()),text.set({left:text.left-offX,top:text.top-(textHeight-text.fontSize*(.07+text._fontSizeFraction))/text.lineHeight,strokeWidth:"undefined"!==typeof originalStrokeWidth?originalStrokeWidth:1}),callback(text)},
/* _FROM_SVG_END_ */
/**
   * Returns fabric.Text instance from an object representation
   * @static
   * @memberOf fabric.Text
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created
   */
fabric.Text.fromObject=function(object,callback){return fabric.Object._fromObject("Text",object,callback,"text")},fabric.Text.genericFonts=["sans-serif","serif","cursive","fantasy","monospace"],fabric.util.createAccessors&&fabric.util.createAccessors(fabric.Text))}(exports),function(){fabric.util.object.extend(fabric.Text.prototype,/** @lends fabric.Text.prototype */{
/**
     * Returns true if object has no styling or no styling in a line
     * @param {Number} lineIndex , lineIndex is on wrapped lines.
     * @return {Boolean}
     */
isEmptyStyles:function(lineIndex){if(!this.styles)return!0;if("undefined"!==typeof lineIndex&&!this.styles[lineIndex])return!0;var obj="undefined"===typeof lineIndex?this.styles:{line:this.styles[lineIndex]};for(var p1 in obj)for(var p2 in obj[p1])
// eslint-disable-next-line no-unused-vars
for(var p3 in obj[p1][p2])return!1;return!0},
/**
     * Returns true if object has a style property or has it ina specified line
     * This function is used to detect if a text will use a particular property or not.
     * @param {String} property to check for
     * @param {Number} lineIndex to check the style on
     * @return {Boolean}
     */
styleHas:function(property,lineIndex){if(!this.styles||!property||""===property)return!1;if("undefined"!==typeof lineIndex&&!this.styles[lineIndex])return!1;var obj="undefined"===typeof lineIndex?this.styles:{0:this.styles[lineIndex]};
// eslint-disable-next-line
for(var p1 in obj)
// eslint-disable-next-line
for(var p2 in obj[p1])if("undefined"!==typeof obj[p1][p2][property])return!0;return!1},
/**
     * Check if characters in a text have a value for a property
     * whose value matches the textbox's value for that property.  If so,
     * the character-level property is deleted.  If the character
     * has no other properties, then it is also deleted.  Finally,
     * if the line containing that character has no other characters
     * then it also is deleted.
     *
     * @param {string} property The property to compare between characters and text.
     */
cleanStyle:function(property){if(!this.styles||!property||""===property)return!1;var letterCount,stylePropertyValue,obj=this.styles,stylesCount=0,allStyleObjectPropertiesMatch=!0,graphemeCount=0;
// eslint-disable-next-line
for(var p1 in obj){
// eslint-disable-next-line
for(var p2 in letterCount=0,obj[p1]){var styleObject=obj[p1][p2],stylePropertyHasBeenSet=styleObject.hasOwnProperty(property);stylesCount++,stylePropertyHasBeenSet?(stylePropertyValue?styleObject[property]!==stylePropertyValue&&(allStyleObjectPropertiesMatch=!1):stylePropertyValue=styleObject[property],styleObject[property]===this[property]&&delete styleObject[property]):allStyleObjectPropertiesMatch=!1,0!==Object.keys(styleObject).length?letterCount++:delete obj[p1][p2]}0===letterCount&&delete obj[p1]}
// if every grapheme has the same style set then
// delete those styles and set it on the parent
for(var i=0;i<this._textLines.length;i++)graphemeCount+=this._textLines[i].length;allStyleObjectPropertiesMatch&&stylesCount===graphemeCount&&(this[property]=stylePropertyValue,this.removeStyle(property))},
/**
     * Remove a style property or properties from all individual character styles
     * in a text object.  Deletes the character style object if it contains no other style
     * props.  Deletes a line style object if it contains no other character styles.
     *
     * @param {String} props The property to remove from character styles.
     */
removeStyle:function(property){if(this.styles&&property&&""!==property){var line,lineNum,charNum,obj=this.styles;for(lineNum in obj){for(charNum in line=obj[lineNum],line)delete line[charNum][property],0===Object.keys(line[charNum]).length&&delete line[charNum];0===Object.keys(line).length&&delete obj[lineNum]}}},
/**
     * @private
     */
_extendStyles:function(index,styles){var loc=this.get2DCursorLocation(index);this._getLineStyle(loc.lineIndex)||this._setLineStyle(loc.lineIndex),this._getStyleDeclaration(loc.lineIndex,loc.charIndex)||this._setStyleDeclaration(loc.lineIndex,loc.charIndex,{}),fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex,loc.charIndex),styles)},
/**
     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)
     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.
     * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. usefull to manage styles.
     */
get2DCursorLocation:function(selectionStart,skipWrapping){"undefined"===typeof selectionStart&&(selectionStart=this.selectionStart);for(var lines=skipWrapping?this._unwrappedTextLines:this._textLines,len=lines.length,i=0;i<len;i++){if(selectionStart<=lines[i].length)return{lineIndex:i,charIndex:selectionStart};selectionStart-=lines[i].length+this.missingNewlineOffset(i)}return{lineIndex:i-1,charIndex:lines[i-1].length<selectionStart?lines[i-1].length:selectionStart}},
/**
     * Gets style of a current selection/cursor (at the start position)
     * if startIndex or endIndex are not provided, slectionStart or selectionEnd will be used.
     * @param {Number} [startIndex] Start index to get styles at
     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1
     * @param {Boolean} [complete] get full style or not
     * @return {Array} styles an array with one, zero or more Style objects
     */
getSelectionStyles:function(startIndex,endIndex,complete){"undefined"===typeof startIndex&&(startIndex=this.selectionStart||0),"undefined"===typeof endIndex&&(endIndex=this.selectionEnd||startIndex);for(var styles=[],i=startIndex;i<endIndex;i++)styles.push(this.getStyleAtPosition(i,complete));return styles},
/**
     * Gets style of a current selection/cursor position
     * @param {Number} position  to get styles at
     * @param {Boolean} [complete] full style if true
     * @return {Object} style Style object at a specified index
     * @private
     */
getStyleAtPosition:function(position,complete){var loc=this.get2DCursorLocation(position),style=complete?this.getCompleteStyleDeclaration(loc.lineIndex,loc.charIndex):this._getStyleDeclaration(loc.lineIndex,loc.charIndex);return style||{}},
/**
     * Sets style of a current selection, if no selection exist, do not set anything.
     * @param {Object} [styles] Styles object
     * @param {Number} [startIndex] Start index to get styles at
     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1
     * @return {fabric.IText} thisArg
     * @chainable
     */
setSelectionStyles:function(styles,startIndex,endIndex){"undefined"===typeof startIndex&&(startIndex=this.selectionStart||0),"undefined"===typeof endIndex&&(endIndex=this.selectionEnd||startIndex);for(var i=startIndex;i<endIndex;i++)this._extendStyles(i,styles);
/* not included in _extendStyles to avoid clearing cache more than once */return this._forceClearCache=!0,this},
/**
     * get the reference, not a clone, of the style object for a given character
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @return {Object} style object
     */
_getStyleDeclaration:function(lineIndex,charIndex){var lineStyle=this.styles&&this.styles[lineIndex];return lineStyle?lineStyle[charIndex]:null},
/**
     * return a new object that contains all the style property for a character
     * the object returned is newly created
     * @param {Number} lineIndex of the line where the character is
     * @param {Number} charIndex position of the character on the line
     * @return {Object} style object
     */
getCompleteStyleDeclaration:function(lineIndex,charIndex){for(var prop,style=this._getStyleDeclaration(lineIndex,charIndex)||{},styleObject={},i=0;i<this._styleProperties.length;i++)prop=this._styleProperties[i],styleObject[prop]="undefined"===typeof style[prop]?this[prop]:style[prop];return styleObject},
/**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {Object} style
     * @private
     */
_setStyleDeclaration:function(lineIndex,charIndex,style){this.styles[lineIndex][charIndex]=style},
/**
     *
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @private
     */
_deleteStyleDeclaration:function(lineIndex,charIndex){delete this.styles[lineIndex][charIndex]},
/**
     * @param {Number} lineIndex
     * @return {Boolean} if the line exists or not
     * @private
     */
_getLineStyle:function(lineIndex){return!!this.styles[lineIndex]},
/**
     * Set the line style to an empty object so that is initialized
     * @param {Number} lineIndex
     * @private
     */
_setLineStyle:function(lineIndex){this.styles[lineIndex]={}},
/**
     * @param {Number} lineIndex
     * @private
     */
_deleteLineStyle:function(lineIndex){delete this.styles[lineIndex]}})}(),function(){function parseDecoration(object){object.textDecoration&&(object.textDecoration.indexOf("underline")>-1&&(object.underline=!0),object.textDecoration.indexOf("line-through")>-1&&(object.linethrough=!0),object.textDecoration.indexOf("overline")>-1&&(object.overline=!0),delete object.textDecoration)}
/**
   * IText class (introduced in <b>v1.4</b>) Events are also fired with "text:"
   * prefix when observing canvas.
   * @class fabric.IText
   * @extends fabric.Text
   * @mixes fabric.Observable
   *
   * @fires changed
   * @fires selection:changed
   * @fires editing:entered
   * @fires editing:exited
   *
   * @return {fabric.IText} thisArg
   * @see {@link fabric.IText#initialize} for constructor definition
   *
   * <p>Supported key combinations:</p>
   * <pre>
   *   Move cursor:                    left, right, up, down
   *   Select character:               shift + left, shift + right
   *   Select text vertically:         shift + up, shift + down
   *   Move cursor by word:            alt + left, alt + right
   *   Select words:                   shift + alt + left, shift + alt + right
   *   Move cursor to line start/end:  cmd + left, cmd + right or home, end
   *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end
   *   Jump to start/end of text:      cmd + up, cmd + down
   *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown
   *   Delete character:               backspace
   *   Delete word:                    alt + backspace
   *   Delete line:                    cmd + backspace
   *   Forward delete:                 delete
   *   Copy text:                      ctrl/cmd + c
   *   Paste text:                     ctrl/cmd + v
   *   Cut text:                       ctrl/cmd + x
   *   Select entire text:             ctrl/cmd + a
   *   Quit editing                    tab or esc
   * </pre>
   *
   * <p>Supported mouse/touch combination</p>
   * <pre>
   *   Position cursor:                click/touch
   *   Create selection:               click/touch & drag
   *   Create selection:               click & shift + click
   *   Select word:                    double click
   *   Select line:                    triple click
   * </pre>
   */fabric.IText=fabric.util.createClass(fabric.Text,fabric.Observable,/** @lends fabric.IText.prototype */{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"i-text",
/**
     * Index where text selection starts (or where cursor is when there is no selection)
     * @type Number
     * @default
     */
selectionStart:0,
/**
     * Index where text selection ends
     * @type Number
     * @default
     */
selectionEnd:0,
/**
     * Color of text selection
     * @type String
     * @default
     */
selectionColor:"rgba(17,119,255,0.3)",
/**
     * Indicates whether text is in editing mode
     * @type Boolean
     * @default
     */
isEditing:!1,
/**
     * Indicates whether a text can be edited
     * @type Boolean
     * @default
     */
editable:!0,
/**
     * Border color of text object while it's in editing mode
     * @type String
     * @default
     */
editingBorderColor:"rgba(102,153,255,0.25)",
/**
     * Width of cursor (in px)
     * @type Number
     * @default
     */
cursorWidth:2,
/**
     * Color of default cursor (when not overwritten by character style)
     * @type String
     * @default
     */
cursorColor:"#333",
/**
     * Delay between cursor blink (in ms)
     * @type Number
     * @default
     */
cursorDelay:1e3,
/**
     * Duration of cursor fadein (in ms)
     * @type Number
     * @default
     */
cursorDuration:600,
/**
     * Indicates whether internal text char widths can be cached
     * @type Boolean
     * @default
     */
caching:!0,
/**
     * @private
     */
_reSpace:/\s|\n/,
/**
     * @private
     */
_currentCursorOpacity:0,
/**
     * @private
     */
_selectionDirection:null,
/**
     * @private
     */
_abortCursorAnimation:!1,
/**
     * @private
     */
__widthOfSpace:[],
/**
     * Helps determining when the text is in composition, so that the cursor
     * rendering is altered.
     */
inCompositionMode:!1,
/**
     * Constructor
     * @param {String} text Text string
     * @param {Object} [options] Options object
     * @return {fabric.IText} thisArg
     */
initialize:function(text,options){this.callSuper("initialize",text,options),this.initBehavior()},
/**
     * Sets selection start (left boundary of a selection)
     * @param {Number} index Index to set selection start to
     */
setSelectionStart:function(index){index=Math.max(index,0),this._updateAndFire("selectionStart",index)},
/**
     * Sets selection end (right boundary of a selection)
     * @param {Number} index Index to set selection end to
     */
setSelectionEnd:function(index){index=Math.min(index,this.text.length),this._updateAndFire("selectionEnd",index)},
/**
     * @private
     * @param {String} property 'selectionStart' or 'selectionEnd'
     * @param {Number} index new position of property
     */
_updateAndFire:function(property,index){this[property]!==index&&(this._fireSelectionChanged(),this[property]=index),this._updateTextarea()},
/**
     * Fires the even of selection changed
     * @private
     */
_fireSelectionChanged:function(){this.fire("selection:changed"),this.canvas&&this.canvas.fire("text:selection:changed",{target:this})},
/**
     * Initialize text dimensions. Render all text on given context
     * or on a offscreen canvas to get the text width with measureText.
     * Updates this.width and this.height with the proper values.
     * Does not return dimensions.
     * @private
     */
initDimensions:function(){this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this.callSuper("initDimensions")},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
render:function(ctx){this.clearContextTop(),this.callSuper("render",ctx),
// clear the cursorOffsetCache, so we ensure to calculate once per renderCursor
// the correct position but not at every cursor animation.
this.cursorOffsetCache={},this.renderCursorOrSelection()},
/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
_render:function(ctx){this.callSuper("_render",ctx)},
/**
     * Prepare and clean the contextTop
     */
clearContextTop:function(skipRestore){if(this.isEditing&&this.canvas&&this.canvas.contextTop){var ctx=this.canvas.contextTop,v=this.canvas.viewportTransform;ctx.save(),ctx.transform(v[0],v[1],v[2],v[3],v[4],v[5]),this.transform(ctx),this.transformMatrix&&ctx.transform.apply(ctx,this.transformMatrix),this._clearTextArea(ctx),skipRestore||ctx.restore()}},
/**
     * Renders cursor or selection (depending on what exists)
     * it does on the contextTop. If contextTop is not available, do nothing.
     */
renderCursorOrSelection:function(){if(this.isEditing&&this.canvas&&this.canvas.contextTop){var boundaries=this._getCursorBoundaries(),ctx=this.canvas.contextTop;this.clearContextTop(!0),this.selectionStart===this.selectionEnd?this.renderCursor(boundaries,ctx):this.renderSelection(boundaries,ctx),ctx.restore()}},_clearTextArea:function(ctx){
// we add 4 pixel, to be sure to do not leave any pixel out
var width=this.width+4,height=this.height+4;ctx.clearRect(-width/2,-height/2,width,height)},
/**
     * Returns cursor boundaries (left, top, leftOffset, topOffset)
     * @private
     * @param {Array} chars Array of characters
     * @param {String} typeOfBoundaries
     */
_getCursorBoundaries:function(position){
// left/top are left/top of entire text box
// leftOffset/topOffset are offset from that left/top point of a text box
"undefined"===typeof position&&(position=this.selectionStart);var left=this._getLeftOffset(),top=this._getTopOffset(),offsets=this._getCursorBoundariesOffsets(position);return{left:left,top:top,leftOffset:offsets.left,topOffset:offsets.top}},
/**
     * @private
     */
_getCursorBoundariesOffsets:function(position){if(this.cursorOffsetCache&&"top"in this.cursorOffsetCache)return this.cursorOffsetCache;var lineLeftOffset,lineIndex,charIndex,boundaries,topOffset=0,leftOffset=0,cursorPosition=this.get2DCursorLocation(position);charIndex=cursorPosition.charIndex,lineIndex=cursorPosition.lineIndex;for(var i=0;i<lineIndex;i++)topOffset+=this.getHeightOfLine(i);lineLeftOffset=this._getLineLeftOffset(lineIndex);var bound=this.__charBounds[lineIndex][charIndex];return bound&&(leftOffset=bound.left),0!==this.charSpacing&&charIndex===this._textLines[lineIndex].length&&(leftOffset-=this._getWidthOfCharSpacing()),boundaries={top:topOffset,left:lineLeftOffset+(leftOffset>0?leftOffset:0)},this.cursorOffsetCache=boundaries,this.cursorOffsetCache},
/**
     * Renders cursor
     * @param {Object} boundaries
     * @param {CanvasRenderingContext2D} ctx transformed context to draw on
     */
renderCursor:function(boundaries,ctx){var cursorLocation=this.get2DCursorLocation(),lineIndex=cursorLocation.lineIndex,charIndex=cursorLocation.charIndex>0?cursorLocation.charIndex-1:0,charHeight=this.getValueOfPropertyAt(lineIndex,charIndex,"fontSize"),multiplier=this.scaleX*this.canvas.getZoom(),cursorWidth=this.cursorWidth/multiplier,topOffset=boundaries.topOffset,dy=this.getValueOfPropertyAt(lineIndex,charIndex,"deltaY");topOffset+=(1-this._fontSizeFraction)*this.getHeightOfLine(lineIndex)/this.lineHeight-charHeight*(1-this._fontSizeFraction),this.inCompositionMode&&this.renderSelection(boundaries,ctx),ctx.fillStyle=this.getValueOfPropertyAt(lineIndex,charIndex,"fill"),ctx.globalAlpha=this.__isMousedown?1:this._currentCursorOpacity,ctx.fillRect(boundaries.left+boundaries.leftOffset-cursorWidth/2,topOffset+boundaries.top+dy,cursorWidth,charHeight)},
/**
     * Renders text selection
     * @param {Object} boundaries Object with left/top/leftOffset/topOffset
     * @param {CanvasRenderingContext2D} ctx transformed context to draw on
     */
renderSelection:function(boundaries,ctx){for(var selectionStart=this.inCompositionMode?this.hiddenTextarea.selectionStart:this.selectionStart,selectionEnd=this.inCompositionMode?this.hiddenTextarea.selectionEnd:this.selectionEnd,isJustify=-1!==this.textAlign.indexOf("justify"),start=this.get2DCursorLocation(selectionStart),end=this.get2DCursorLocation(selectionEnd),startLine=start.lineIndex,endLine=end.lineIndex,startChar=start.charIndex<0?0:start.charIndex,endChar=end.charIndex<0?0:end.charIndex,i=startLine;i<=endLine;i++){var lineOffset=this._getLineLeftOffset(i)||0,lineHeight=this.getHeightOfLine(i),realLineHeight=0,boxStart=0,boxEnd=0;if(i===startLine&&(boxStart=this.__charBounds[startLine][startChar].left),i>=startLine&&i<endLine)boxEnd=isJustify&&!this.isEndOfWrapping(i)?this.width:this.getLineWidth(i)||5;// WTF is this 5?
else if(i===endLine)if(0===endChar)boxEnd=this.__charBounds[endLine][endChar].left;else{var charSpacing=this._getWidthOfCharSpacing();boxEnd=this.__charBounds[endLine][endChar-1].left+this.__charBounds[endLine][endChar-1].width-charSpacing}realLineHeight=lineHeight,(this.lineHeight<1||i===endLine&&this.lineHeight>1)&&(lineHeight/=this.lineHeight),this.inCompositionMode?(ctx.fillStyle=this.compositionColor||"black",ctx.fillRect(boundaries.left+lineOffset+boxStart,boundaries.top+boundaries.topOffset+lineHeight,boxEnd-boxStart,1)):(ctx.fillStyle=this.selectionColor,ctx.fillRect(boundaries.left+lineOffset+boxStart,boundaries.top+boundaries.topOffset,boxEnd-boxStart,lineHeight)),boundaries.topOffset+=realLineHeight}},
/**
     * High level function to know the height of the cursor.
     * the currentChar is the one that precedes the cursor
     * Returns fontSize of char at the current cursor
     * Unused from the library, is for the end user
     * @return {Number} Character font size
     */
getCurrentCharFontSize:function(){var cp=this._getCurrentCharIndex();return this.getValueOfPropertyAt(cp.l,cp.c,"fontSize")},
/**
     * High level function to know the color of the cursor.
     * the currentChar is the one that precedes the cursor
     * Returns color (fill) of char at the current cursor
     * Unused from the library, is for the end user
     * @return {String} Character color (fill)
     */
getCurrentCharColor:function(){var cp=this._getCurrentCharIndex();return this.getValueOfPropertyAt(cp.l,cp.c,"fill")},
/**
     * Returns the cursor position for the getCurrent.. functions
     * @private
     */
_getCurrentCharIndex:function(){var cursorPosition=this.get2DCursorLocation(this.selectionStart,!0),charIndex=cursorPosition.charIndex>0?cursorPosition.charIndex-1:0;return{l:cursorPosition.lineIndex,c:charIndex}}}),
/**
   * Returns fabric.IText instance from an object representation
   * @static
   * @memberOf fabric.IText
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as argument
   */
fabric.IText.fromObject=function(object,callback){if(parseDecoration(object),object.styles)for(var i in object.styles)for(var j in object.styles[i])parseDecoration(object.styles[i][j]);fabric.Object._fromObject("IText",object,callback,"text")}}(),function(){var clone=fabric.util.object.clone;fabric.util.object.extend(fabric.IText.prototype,/** @lends fabric.IText.prototype */{
/**
     * Initializes all the interactive behavior of IText
     */
initBehavior:function(){this.initAddedHandler(),this.initRemovedHandler(),this.initCursorSelectionHandlers(),this.initDoubleClickSimulation(),this.mouseMoveHandler=this.mouseMoveHandler.bind(this)},onDeselect:function(){this.isEditing&&this.exitEditing(),this.selected=!1},
/**
     * Initializes "added" event handler
     */
initAddedHandler:function(){var _this=this;this.on("added",(function(){var canvas=_this.canvas;canvas&&(canvas._hasITextHandlers||(canvas._hasITextHandlers=!0,_this._initCanvasHandlers(canvas)),canvas._iTextInstances=canvas._iTextInstances||[],canvas._iTextInstances.push(_this))}))},initRemovedHandler:function(){var _this=this;this.on("removed",(function(){var canvas=_this.canvas;canvas&&(canvas._iTextInstances=canvas._iTextInstances||[],fabric.util.removeFromArray(canvas._iTextInstances,_this),0===canvas._iTextInstances.length&&(canvas._hasITextHandlers=!1,_this._removeCanvasHandlers(canvas)))}))},
/**
     * register canvas event to manage exiting on other instances
     * @private
     */
_initCanvasHandlers:function(canvas){canvas._mouseUpITextHandler=function(){canvas._iTextInstances&&canvas._iTextInstances.forEach((function(obj){obj.__isMousedown=!1}))},canvas.on("mouse:up",canvas._mouseUpITextHandler)},
/**
     * remove canvas event to manage exiting on other instances
     * @private
     */
_removeCanvasHandlers:function(canvas){canvas.off("mouse:up",canvas._mouseUpITextHandler)},
/**
     * @private
     */
_tick:function(){this._currentTickState=this._animateCursor(this,1,this.cursorDuration,"_onTickComplete")},
/**
     * @private
     */
_animateCursor:function(obj,targetOpacity,duration,completeMethod){var tickState;return tickState={isAborted:!1,abort:function(){this.isAborted=!0}},obj.animate("_currentCursorOpacity",targetOpacity,{duration:duration,onComplete:function(){tickState.isAborted||obj[completeMethod]()},onChange:function(){
// we do not want to animate a selection, only cursor
obj.canvas&&obj.selectionStart===obj.selectionEnd&&obj.renderCursorOrSelection()},abort:function(){return tickState.isAborted}}),tickState},
/**
     * @private
     */
_onTickComplete:function(){var _this=this;this._cursorTimeout1&&clearTimeout(this._cursorTimeout1),this._cursorTimeout1=setTimeout((function(){_this._currentTickCompleteState=_this._animateCursor(_this,0,this.cursorDuration/2,"_tick")}),100)},
/**
     * Initializes delayed cursor
     */
initDelayedCursor:function(restart){var _this=this,delay=restart?0:this.cursorDelay;this.abortCursorAnimation(),this._currentCursorOpacity=1,this._cursorTimeout2=setTimeout((function(){_this._tick()}),delay)},
/**
     * Aborts cursor animation and clears all timeouts
     */
abortCursorAnimation:function(){var shouldClear=this._currentTickState||this._currentTickCompleteState,canvas=this.canvas;this._currentTickState&&this._currentTickState.abort(),this._currentTickCompleteState&&this._currentTickCompleteState.abort(),clearTimeout(this._cursorTimeout1),clearTimeout(this._cursorTimeout2),this._currentCursorOpacity=0,
// to clear just itext area we need to transform the context
// it may not be worth it
shouldClear&&canvas&&canvas.clearContext(canvas.contextTop||canvas.contextContainer)},
/**
     * Selects entire text
     * @return {fabric.IText} thisArg
     * @chainable
     */
selectAll:function(){return this.selectionStart=0,this.selectionEnd=this._text.length,this._fireSelectionChanged(),this._updateTextarea(),this},
/**
     * Returns selected text
     * @return {String}
     */
getSelectedText:function(){return this._text.slice(this.selectionStart,this.selectionEnd).join("")},
/**
     * Find new selection index representing start of current word according to current selection index
     * @param {Number} startFrom Current selection index
     * @return {Number} New selection index
     */
findWordBoundaryLeft:function(startFrom){var offset=0,index=startFrom-1;
// remove space before cursor first
if(this._reSpace.test(this._text[index]))while(this._reSpace.test(this._text[index]))offset++,index--;while(/\S/.test(this._text[index])&&index>-1)offset++,index--;return startFrom-offset},
/**
     * Find new selection index representing end of current word according to current selection index
     * @param {Number} startFrom Current selection index
     * @return {Number} New selection index
     */
findWordBoundaryRight:function(startFrom){var offset=0,index=startFrom;
// remove space after cursor first
if(this._reSpace.test(this._text[index]))while(this._reSpace.test(this._text[index]))offset++,index++;while(/\S/.test(this._text[index])&&index<this._text.length)offset++,index++;return startFrom+offset},
/**
     * Find new selection index representing start of current line according to current selection index
     * @param {Number} startFrom Current selection index
     * @return {Number} New selection index
     */
findLineBoundaryLeft:function(startFrom){var offset=0,index=startFrom-1;while(!/\n/.test(this._text[index])&&index>-1)offset++,index--;return startFrom-offset},
/**
     * Find new selection index representing end of current line according to current selection index
     * @param {Number} startFrom Current selection index
     * @return {Number} New selection index
     */
findLineBoundaryRight:function(startFrom){var offset=0,index=startFrom;while(!/\n/.test(this._text[index])&&index<this._text.length)offset++,index++;return startFrom+offset},
/**
     * Finds index corresponding to beginning or end of a word
     * @param {Number} selectionStart Index of a character
     * @param {Number} direction 1 or -1
     * @return {Number} Index of the beginning or end of a word
     */
searchWordBoundary:function(selectionStart,direction){var text=this._text,index=this._reSpace.test(text[selectionStart])?selectionStart-1:selectionStart,_char=text[index],
// wrong
reNonWord=fabric.reNonWord;while(!reNonWord.test(_char)&&index>0&&index<text.length)index+=direction,_char=text[index];return reNonWord.test(_char)&&(index+=1===direction?0:1),index},
/**
     * Selects a word based on the index
     * @param {Number} selectionStart Index of a character
     */
selectWord:function(selectionStart){selectionStart=selectionStart||this.selectionStart;var newSelectionStart=this.searchWordBoundary(selectionStart,-1),/* search backwards */
newSelectionEnd=this.searchWordBoundary(selectionStart,1);/* search forward */this.selectionStart=newSelectionStart,this.selectionEnd=newSelectionEnd,this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection()},
/**
     * Selects a line based on the index
     * @param {Number} selectionStart Index of a character
     * @return {fabric.IText} thisArg
     * @chainable
     */
selectLine:function(selectionStart){selectionStart=selectionStart||this.selectionStart;var newSelectionStart=this.findLineBoundaryLeft(selectionStart),newSelectionEnd=this.findLineBoundaryRight(selectionStart);return this.selectionStart=newSelectionStart,this.selectionEnd=newSelectionEnd,this._fireSelectionChanged(),this._updateTextarea(),this},
/**
     * Enters editing state
     * @return {fabric.IText} thisArg
     * @chainable
     */
enterEditing:function(e){if(!this.isEditing&&this.editable)return this.canvas&&(this.canvas.calcOffset(),this.exitEditingOnOthers(this.canvas)),this.isEditing=!0,this.initHiddenTextarea(e),this.hiddenTextarea.focus(),this.hiddenTextarea.value=this.text,this._updateTextarea(),this._saveEditingProps(),this._setEditingProps(),this._textBeforeEdit=this.text,this._tick(),this.fire("editing:entered"),this._fireSelectionChanged(),this.canvas?(this.canvas.fire("text:editing:entered",{target:this}),this.initMouseMoveHandler(),this.canvas.requestRenderAll(),this):this},exitEditingOnOthers:function(canvas){canvas._iTextInstances&&canvas._iTextInstances.forEach((function(obj){obj.selected=!1,obj.isEditing&&obj.exitEditing()}))},
/**
     * Initializes "mousemove" event handler
     */
initMouseMoveHandler:function(){this.canvas.on("mouse:move",this.mouseMoveHandler)},
/**
     * @private
     */
mouseMoveHandler:function(options){if(this.__isMousedown&&this.isEditing){var newSelectionStart=this.getSelectionStartFromPointer(options.e),currentStart=this.selectionStart,currentEnd=this.selectionEnd;(newSelectionStart===this.__selectionStartOnMouseDown&&currentStart!==currentEnd||currentStart!==newSelectionStart&&currentEnd!==newSelectionStart)&&(newSelectionStart>this.__selectionStartOnMouseDown?(this.selectionStart=this.__selectionStartOnMouseDown,this.selectionEnd=newSelectionStart):(this.selectionStart=newSelectionStart,this.selectionEnd=this.__selectionStartOnMouseDown),this.selectionStart===currentStart&&this.selectionEnd===currentEnd||(this.restartCursorIfNeeded(),this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection()))}},
/**
     * @private
     */
_setEditingProps:function(){this.hoverCursor="text",this.canvas&&(this.canvas.defaultCursor=this.canvas.moveCursor="text"),this.borderColor=this.editingBorderColor,this.hasControls=this.selectable=!1,this.lockMovementX=this.lockMovementY=!0},
/**
     * convert from textarea to grapheme indexes
     */
fromStringToGraphemeSelection:function(start,end,text){var smallerTextStart=text.slice(0,start),graphemeStart=fabric.util.string.graphemeSplit(smallerTextStart).length;if(start===end)return{selectionStart:graphemeStart,selectionEnd:graphemeStart};var smallerTextEnd=text.slice(start,end),graphemeEnd=fabric.util.string.graphemeSplit(smallerTextEnd).length;return{selectionStart:graphemeStart,selectionEnd:graphemeStart+graphemeEnd}},
/**
     * convert from fabric to textarea values
     */
fromGraphemeToStringSelection:function(start,end,_text){var smallerTextStart=_text.slice(0,start),graphemeStart=smallerTextStart.join("").length;if(start===end)return{selectionStart:graphemeStart,selectionEnd:graphemeStart};var smallerTextEnd=_text.slice(start,end),graphemeEnd=smallerTextEnd.join("").length;return{selectionStart:graphemeStart,selectionEnd:graphemeStart+graphemeEnd}},
/**
     * @private
     */
_updateTextarea:function(){if(this.cursorOffsetCache={},this.hiddenTextarea){if(!this.inCompositionMode){var newSelection=this.fromGraphemeToStringSelection(this.selectionStart,this.selectionEnd,this._text);this.hiddenTextarea.selectionStart=newSelection.selectionStart,this.hiddenTextarea.selectionEnd=newSelection.selectionEnd}this.updateTextareaPosition()}},
/**
     * @private
     */
updateFromTextArea:function(){if(this.hiddenTextarea){this.cursorOffsetCache={},this.text=this.hiddenTextarea.value,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords());var newSelection=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value);this.selectionEnd=this.selectionStart=newSelection.selectionEnd,this.inCompositionMode||(this.selectionStart=newSelection.selectionStart),this.updateTextareaPosition()}},
/**
     * @private
     */
updateTextareaPosition:function(){if(this.selectionStart===this.selectionEnd){var style=this._calcTextareaPosition();this.hiddenTextarea.style.left=style.left,this.hiddenTextarea.style.top=style.top}},
/**
     * @private
     * @return {Object} style contains style for hiddenTextarea
     */
_calcTextareaPosition:function(){if(!this.canvas)return{x:1,y:1};var desiredPosition=this.inCompositionMode?this.compositionStart:this.selectionStart,boundaries=this._getCursorBoundaries(desiredPosition),cursorLocation=this.get2DCursorLocation(desiredPosition),lineIndex=cursorLocation.lineIndex,charIndex=cursorLocation.charIndex,charHeight=this.getValueOfPropertyAt(lineIndex,charIndex,"fontSize")*this.lineHeight,leftOffset=boundaries.leftOffset,m=this.calcTransformMatrix(),p={x:boundaries.left+leftOffset,y:boundaries.top+boundaries.topOffset+charHeight},retinaScaling=this.canvas.getRetinaScaling(),upperCanvas=this.canvas.upperCanvasEl,upperCanvasWidth=upperCanvas.width/retinaScaling,upperCanvasHeight=upperCanvas.height/retinaScaling,maxWidth=upperCanvasWidth-charHeight,maxHeight=upperCanvasHeight-charHeight,scaleX=upperCanvas.clientWidth/upperCanvasWidth,scaleY=upperCanvas.clientHeight/upperCanvasHeight;return p=fabric.util.transformPoint(p,m),p=fabric.util.transformPoint(p,this.canvas.viewportTransform),p.x*=scaleX,p.y*=scaleY,p.x<0&&(p.x=0),p.x>maxWidth&&(p.x=maxWidth),p.y<0&&(p.y=0),p.y>maxHeight&&(p.y=maxHeight),
// add canvas offset on document
p.x+=this.canvas._offset.left,p.y+=this.canvas._offset.top,{left:p.x+"px",top:p.y+"px",fontSize:charHeight+"px",charHeight:charHeight}},
/**
     * @private
     */
_saveEditingProps:function(){this._savedProps={hasControls:this.hasControls,borderColor:this.borderColor,lockMovementX:this.lockMovementX,lockMovementY:this.lockMovementY,hoverCursor:this.hoverCursor,selectable:this.selectable,defaultCursor:this.canvas&&this.canvas.defaultCursor,moveCursor:this.canvas&&this.canvas.moveCursor}},
/**
     * @private
     */
_restoreEditingProps:function(){this._savedProps&&(this.hoverCursor=this._savedProps.hoverCursor,this.hasControls=this._savedProps.hasControls,this.borderColor=this._savedProps.borderColor,this.selectable=this._savedProps.selectable,this.lockMovementX=this._savedProps.lockMovementX,this.lockMovementY=this._savedProps.lockMovementY,this.canvas&&(this.canvas.defaultCursor=this._savedProps.defaultCursor,this.canvas.moveCursor=this._savedProps.moveCursor))},
/**
     * Exits from editing state
     * @return {fabric.IText} thisArg
     * @chainable
     */
exitEditing:function(){var isTextChanged=this._textBeforeEdit!==this.text,hiddenTextarea=this.hiddenTextarea;return this.selected=!1,this.isEditing=!1,this.selectionEnd=this.selectionStart,hiddenTextarea&&(hiddenTextarea.blur&&hiddenTextarea.blur(),hiddenTextarea.parentNode&&hiddenTextarea.parentNode.removeChild(hiddenTextarea)),this.hiddenTextarea=null,this.abortCursorAnimation(),this._restoreEditingProps(),this._currentCursorOpacity=0,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this.fire("editing:exited"),isTextChanged&&this.fire("modified"),this.canvas&&(this.canvas.off("mouse:move",this.mouseMoveHandler),this.canvas.fire("text:editing:exited",{target:this}),isTextChanged&&this.canvas.fire("object:modified",{target:this})),this},
/**
     * @private
     */
_removeExtraneousStyles:function(){for(var prop in this.styles)this._textLines[prop]||delete this.styles[prop]},
/**
     * remove and reflow a style block from start to end.
     * @param {Number} start linear start position for removal (included in removal)
     * @param {Number} end linear end position for removal ( excluded from removal )
     */
removeStyleFromTo:function(start,end){var i,styleObj,cursorStart=this.get2DCursorLocation(start,!0),cursorEnd=this.get2DCursorLocation(end,!0),lineStart=cursorStart.lineIndex,charStart=cursorStart.charIndex,lineEnd=cursorEnd.lineIndex,charEnd=cursorEnd.charIndex;if(lineStart!==lineEnd){
// step1 remove the trailing of lineStart
if(this.styles[lineStart])for(i=charStart;i<this._unwrappedTextLines[lineStart].length;i++)delete this.styles[lineStart][i];
// step2 move the trailing of lineEnd to lineStart if needed
if(this.styles[lineEnd])for(i=charEnd;i<this._unwrappedTextLines[lineEnd].length;i++)styleObj=this.styles[lineEnd][i],styleObj&&(this.styles[lineStart]||(this.styles[lineStart]={}),this.styles[lineStart][charStart+i-charEnd]=styleObj);
// step3 detects lines will be completely removed.
for(i=lineStart+1;i<=lineEnd;i++)delete this.styles[i];
// step4 shift remaining lines.
this.shiftLineStyles(lineEnd,lineStart-lineEnd)}else
// remove and shift left on the same line
if(this.styles[lineStart]){styleObj=this.styles[lineStart];var numericChar,_char,diff=charEnd-charStart;for(i=charStart;i<charEnd;i++)delete styleObj[i];for(_char in this.styles[lineStart])numericChar=parseInt(_char,10),numericChar>=charEnd&&(styleObj[numericChar-diff]=styleObj[_char],delete styleObj[_char])}},
/**
     * Shifts line styles up or down
     * @param {Number} lineIndex Index of a line
     * @param {Number} offset Can any number?
     */
shiftLineStyles:function(lineIndex,offset){
// shift all line styles by offset upward or downward
// do not clone deep. we need new array, not new style objects
var clonedStyles=clone(this.styles);for(var line in this.styles){var numericLine=parseInt(line,10);numericLine>lineIndex&&(this.styles[numericLine+offset]=clonedStyles[numericLine],clonedStyles[numericLine-offset]||delete this.styles[numericLine])}},restartCursorIfNeeded:function(){this._currentTickState&&!this._currentTickState.isAborted&&this._currentTickCompleteState&&!this._currentTickCompleteState.isAborted||this.initDelayedCursor()},
/**
     * Handle insertion of more consecutive style lines for when one or more
     * newlines gets added to the text. Since current style needs to be shifted
     * first we shift the current style of the number lines needed, then we add
     * new lines from the last to the first.
     * @param {Number} lineIndex Index of a line
     * @param {Number} charIndex Index of a char
     * @param {Number} qty number of lines to add
     * @param {Array} copiedStyle Array of objects styles
     */
insertNewlineStyleObject:function(lineIndex,charIndex,qty,copiedStyle){var currentCharStyle,newLineStyles={},somethingAdded=!1,isEndOfLine=this._unwrappedTextLines[lineIndex].length===charIndex;
// we clone styles of all chars
// after cursor onto the current line
for(var index in qty||(qty=1),this.shiftLineStyles(lineIndex,qty),this.styles[lineIndex]&&(currentCharStyle=this.styles[lineIndex][0===charIndex?charIndex:charIndex-1]),this.styles[lineIndex]){var numIndex=parseInt(index,10);numIndex>=charIndex&&(somethingAdded=!0,newLineStyles[numIndex-charIndex]=this.styles[lineIndex][index],
// remove lines from the previous line since they're on a new line now
isEndOfLine&&0===charIndex||delete this.styles[lineIndex][index])}var styleCarriedOver=!1;somethingAdded&&!isEndOfLine&&(
// if is end of line, the extra style we copied
// is probably not something we want
this.styles[lineIndex+qty]=newLineStyles,styleCarriedOver=!0),styleCarriedOver&&
// skip the last line of since we already prepared it.
qty--;
// for the all the lines or all the other lines
// we clone current char style onto the next (otherwise empty) line
while(qty>0)copiedStyle&&copiedStyle[qty-1]?this.styles[lineIndex+qty]={0:clone(copiedStyle[qty-1])}:currentCharStyle?this.styles[lineIndex+qty]={0:clone(currentCharStyle)}:delete this.styles[lineIndex+qty],qty--;this._forceClearCache=!0},
/**
     * Inserts style object for a given line/char index
     * @param {Number} lineIndex Index of a line
     * @param {Number} charIndex Index of a char
     * @param {Number} quantity number Style object to insert, if given
     * @param {Array} copiedStyle array of style objects
     */
insertCharStyleObject:function(lineIndex,charIndex,quantity,copiedStyle){this.styles||(this.styles={});var currentLineStyles=this.styles[lineIndex],currentLineStylesCloned=currentLineStyles?clone(currentLineStyles):{};
// shift all char styles by quantity forward
// 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4
for(var index in quantity||(quantity=1),currentLineStylesCloned){var numericIndex=parseInt(index,10);numericIndex>=charIndex&&(currentLineStyles[numericIndex+quantity]=currentLineStylesCloned[numericIndex],
// only delete the style if there was nothing moved there
currentLineStylesCloned[numericIndex-quantity]||delete currentLineStyles[numericIndex])}if(this._forceClearCache=!0,copiedStyle)while(quantity--)Object.keys(copiedStyle[quantity]).length&&(this.styles[lineIndex]||(this.styles[lineIndex]={}),this.styles[lineIndex][charIndex+quantity]=clone(copiedStyle[quantity]));else if(currentLineStyles){var newStyle=currentLineStyles[charIndex?charIndex-1:1];while(newStyle&&quantity--)this.styles[lineIndex][charIndex+quantity]=clone(newStyle)}},
/**
     * Inserts style object(s)
     * @param {Array} insertedText Characters at the location where style is inserted
     * @param {Number} start cursor index for inserting style
     * @param {Array} [copiedStyle] array of style objects to insert.
     */
insertNewStyleBlock:function(insertedText,start,copiedStyle){
// get an array of how many char per lines are being added.
for(var cursorLoc=this.get2DCursorLocation(start,!0),addedLines=[0],linesLength=0,i=0;i<insertedText.length;i++)"\n"===insertedText[i]?(linesLength++,addedLines[linesLength]=0):addedLines[linesLength]++;
// for the first line copy the style from the current char position.
addedLines[0]>0&&(this.insertCharStyleObject(cursorLoc.lineIndex,cursorLoc.charIndex,addedLines[0],copiedStyle),copiedStyle=copiedStyle&&copiedStyle.slice(addedLines[0]+1)),linesLength&&this.insertNewlineStyleObject(cursorLoc.lineIndex,cursorLoc.charIndex+addedLines[0],linesLength);for(i=1;i<linesLength;i++)addedLines[i]>0?this.insertCharStyleObject(cursorLoc.lineIndex+i,0,addedLines[i],copiedStyle):copiedStyle&&(this.styles[cursorLoc.lineIndex+i][0]=copiedStyle[0]),copiedStyle=copiedStyle&&copiedStyle.slice(addedLines[i]+1);
// we use i outside the loop to get it like linesLength
addedLines[i]>0&&this.insertCharStyleObject(cursorLoc.lineIndex+i,0,addedLines[i],copiedStyle)},
/**
     * Set the selectionStart and selectionEnd according to the new position of cursor
     * mimic the key - mouse navigation when shift is pressed.
     */
setSelectionStartEndWithShift:function(start,end,newSelection){newSelection<=start?(end===start?this._selectionDirection="left":"right"===this._selectionDirection&&(this._selectionDirection="left",this.selectionEnd=start),this.selectionStart=newSelection):newSelection>start&&newSelection<end?"right"===this._selectionDirection?this.selectionEnd=newSelection:this.selectionStart=newSelection:(
// newSelection is > selection start and end
end===start?this._selectionDirection="right":"left"===this._selectionDirection&&(this._selectionDirection="right",this.selectionStart=end),this.selectionEnd=newSelection)},setSelectionInBoundaries:function(){var length=this.text.length;this.selectionStart>length?this.selectionStart=length:this.selectionStart<0&&(this.selectionStart=0),this.selectionEnd>length?this.selectionEnd=length:this.selectionEnd<0&&(this.selectionEnd=0)}})}(),fabric.util.object.extend(fabric.IText.prototype,/** @lends fabric.IText.prototype */{
/**
   * Initializes "dbclick" event handler
   */
initDoubleClickSimulation:function(){
// for double click
this.__lastClickTime=+new Date,
// for triple click
this.__lastLastClickTime=+new Date,this.__lastPointer={},this.on("mousedown",this.onMouseDown)},
/**
   * Default event handler to simulate triple click
   * @private
   */
onMouseDown:function(options){if(this.canvas){this.__newClickTime=+new Date;var newPointer=options.pointer;this.isTripleClick(newPointer)&&(this.fire("tripleclick",options),this._stopEvent(options.e)),this.__lastLastClickTime=this.__lastClickTime,this.__lastClickTime=this.__newClickTime,this.__lastPointer=newPointer,this.__lastIsEditing=this.isEditing,this.__lastSelected=this.selected}},isTripleClick:function(newPointer){return this.__newClickTime-this.__lastClickTime<500&&this.__lastClickTime-this.__lastLastClickTime<500&&this.__lastPointer.x===newPointer.x&&this.__lastPointer.y===newPointer.y},
/**
   * @private
   */
_stopEvent:function(e){e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation()},
/**
   * Initializes event handlers related to cursor or selection
   */
initCursorSelectionHandlers:function(){this.initMousedownHandler(),this.initMouseupHandler(),this.initClicks()},
/**
   * Default handler for double click, select a word
   */
doubleClickHandler:function(options){this.isEditing&&this.selectWord(this.getSelectionStartFromPointer(options.e))},
/**
   * Default handler for triple click, select a line
   */
tripleClickHandler:function(options){this.isEditing&&this.selectLine(this.getSelectionStartFromPointer(options.e))},
/**
   * Initializes double and triple click event handlers
   */
initClicks:function(){this.on("mousedblclick",this.doubleClickHandler),this.on("tripleclick",this.tripleClickHandler)},
/**
   * Default event handler for the basic functionalities needed on _mouseDown
   * can be overridden to do something different.
   * Scope of this implementation is: find the click position, set selectionStart
   * find selectionEnd, initialize the drawing of either cursor or selection area
   */
_mouseDownHandler:function(options){!this.canvas||!this.editable||options.e.button&&1!==options.e.button||(this.__isMousedown=!0,this.selected&&this.setCursorByClick(options.e),this.isEditing&&(this.__selectionStartOnMouseDown=this.selectionStart,this.selectionStart===this.selectionEnd&&this.abortCursorAnimation(),this.renderCursorOrSelection()))},
/**
   * Default event handler for the basic functionalities needed on mousedown:before
   * can be overridden to do something different.
   * Scope of this implementation is: verify the object is already selected when mousing down
   */
_mouseDownHandlerBefore:function(options){!this.canvas||!this.editable||options.e.button&&1!==options.e.button||(
// we want to avoid that an object that was selected and then becomes unselectable,
// may trigger editing mode in some way.
this.selected=this===this.canvas._activeObject)},
/**
   * Initializes "mousedown" event handler
   */
initMousedownHandler:function(){this.on("mousedown",this._mouseDownHandler),this.on("mousedown:before",this._mouseDownHandlerBefore)},
/**
   * Initializes "mouseup" event handler
   */
initMouseupHandler:function(){this.on("mouseup",this.mouseUpHandler)},
/**
   * standard hander for mouse up, overridable
   * @private
   */
mouseUpHandler:function(options){if(this.__isMousedown=!1,!(!this.editable||this.group||options.transform&&options.transform.actionPerformed||options.e.button&&1!==options.e.button)){if(this.canvas){var currentActive=this.canvas._activeObject;if(currentActive&&currentActive!==this)
// avoid running this logic when there is an active object
// this because is possible with shift click and fast clicks,
// to rapidly deselect and reselect this object and trigger an enterEdit
return}this.__lastSelected&&!this.__corner?(this.selected=!1,this.__lastSelected=!1,this.enterEditing(options.e),this.selectionStart===this.selectionEnd?this.initDelayedCursor(!0):this.renderCursorOrSelection()):this.selected=!0}},
/**
   * Changes cursor location in a text depending on passed pointer (x/y) object
   * @param {Event} e Event object
   */
setCursorByClick:function(e){var newSelection=this.getSelectionStartFromPointer(e),start=this.selectionStart,end=this.selectionEnd;e.shiftKey?this.setSelectionStartEndWithShift(start,end,newSelection):(this.selectionStart=newSelection,this.selectionEnd=newSelection),this.isEditing&&(this._fireSelectionChanged(),this._updateTextarea())},
/**
   * Returns index of a character corresponding to where an object was clicked
   * @param {Event} e Event object
   * @return {Number} Index of a character
   */
getSelectionStartFromPointer:function(e){for(var lineLeftOffset,line,mouseOffset=this.getLocalPointer(e),prevWidth=0,width=0,height=0,charIndex=0,lineIndex=0,i=0,len=this._textLines.length;i<len;i++){if(!(height<=mouseOffset.y))break;height+=this.getHeightOfLine(i)*this.scaleY,lineIndex=i,i>0&&(charIndex+=this._textLines[i-1].length+this.missingNewlineOffset(i-1))}lineLeftOffset=this._getLineLeftOffset(lineIndex),width=lineLeftOffset*this.scaleX,line=this._textLines[lineIndex];for(var j=0,jlen=line.length;j<jlen;j++){if(prevWidth=width,
// i removed something about flipX here, check.
width+=this.__charBounds[lineIndex][j].kernedWidth*this.scaleX,!(width<=mouseOffset.x))break;charIndex++}return this._getNewSelectionStartFromOffset(mouseOffset,prevWidth,width,charIndex,jlen)},
/**
   * @private
   */
_getNewSelectionStartFromOffset:function(mouseOffset,prevWidth,width,index,jlen){
// we need Math.abs because when width is after the last char, the offset is given as 1, while is 0
var distanceBtwLastCharAndCursor=mouseOffset.x-prevWidth,distanceBtwNextCharAndCursor=width-mouseOffset.x,offset=distanceBtwNextCharAndCursor>distanceBtwLastCharAndCursor||distanceBtwNextCharAndCursor<0?0:1,newSelectionStart=index+offset;
// if object is horizontally flipped, mirror cursor location from the end
return this.flipX&&(newSelectionStart=jlen-newSelectionStart),newSelectionStart>this._text.length&&(newSelectionStart=this._text.length),newSelectionStart}}),fabric.util.object.extend(fabric.IText.prototype,/** @lends fabric.IText.prototype */{
/**
   * Initializes hidden textarea (needed to bring up keyboard in iOS)
   */
initHiddenTextarea:function(){this.hiddenTextarea=fabric.document.createElement("textarea"),this.hiddenTextarea.setAttribute("autocapitalize","off"),this.hiddenTextarea.setAttribute("autocorrect","off"),this.hiddenTextarea.setAttribute("autocomplete","off"),this.hiddenTextarea.setAttribute("spellcheck","false"),this.hiddenTextarea.setAttribute("data-fabric-hiddentextarea",""),this.hiddenTextarea.setAttribute("wrap","off");var style=this._calcTextareaPosition();
// line-height: 1px; was removed from the style to fix this:
// https://bugs.chromium.org/p/chromium/issues/detail?id=870966
this.hiddenTextarea.style.cssText="position: absolute; top: "+style.top+"; left: "+style.left+"; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; paddingｰtop: "+style.fontSize+";",fabric.document.body.appendChild(this.hiddenTextarea),fabric.util.addListener(this.hiddenTextarea,"keydown",this.onKeyDown.bind(this)),fabric.util.addListener(this.hiddenTextarea,"keyup",this.onKeyUp.bind(this)),fabric.util.addListener(this.hiddenTextarea,"input",this.onInput.bind(this)),fabric.util.addListener(this.hiddenTextarea,"copy",this.copy.bind(this)),fabric.util.addListener(this.hiddenTextarea,"cut",this.copy.bind(this)),fabric.util.addListener(this.hiddenTextarea,"paste",this.paste.bind(this)),fabric.util.addListener(this.hiddenTextarea,"compositionstart",this.onCompositionStart.bind(this)),fabric.util.addListener(this.hiddenTextarea,"compositionupdate",this.onCompositionUpdate.bind(this)),fabric.util.addListener(this.hiddenTextarea,"compositionend",this.onCompositionEnd.bind(this)),!this._clickHandlerInitialized&&this.canvas&&(fabric.util.addListener(this.canvas.upperCanvasEl,"click",this.onClick.bind(this)),this._clickHandlerInitialized=!0)},
/**
   * For functionalities on keyDown
   * Map a special key to a function of the instance/prototype
   * If you need different behaviour for ESC or TAB or arrows, you have to change
   * this map setting the name of a function that you build on the fabric.Itext or
   * your prototype.
   * the map change will affect all Instances unless you need for only some text Instances
   * in that case you have to clone this object and assign your Instance.
   * this.keysMap = fabric.util.object.clone(this.keysMap);
   * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]
   */
keysMap:{9:"exitEditing",27:"exitEditing",33:"moveCursorUp",34:"moveCursorDown",35:"moveCursorRight",36:"moveCursorLeft",37:"moveCursorLeft",38:"moveCursorUp",39:"moveCursorRight",40:"moveCursorDown"},
/**
   * For functionalities on keyUp + ctrl || cmd
   */
ctrlKeysMapUp:{67:"copy",88:"cut"},
/**
   * For functionalities on keyDown + ctrl || cmd
   */
ctrlKeysMapDown:{65:"selectAll"},onClick:function(){
// No need to trigger click event here, focus is enough to have the keyboard appear on Android
this.hiddenTextarea&&this.hiddenTextarea.focus()},
/**
   * Handles keyup event
   * @param {Event} e Event object
   */
onKeyDown:function(e){if(this.isEditing&&!this.inCompositionMode){if(e.keyCode in this.keysMap)this[this.keysMap[e.keyCode]](e);else{if(!(e.keyCode in this.ctrlKeysMapDown)||!e.ctrlKey&&!e.metaKey)return;this[this.ctrlKeysMapDown[e.keyCode]](e)}e.stopImmediatePropagation(),e.preventDefault(),e.keyCode>=33&&e.keyCode<=40?(
// if i press an arrow key just update selection
this.clearContextTop(),this.renderCursorOrSelection()):this.canvas&&this.canvas.requestRenderAll()}},
/**
   * Handles keyup event
   * We handle KeyUp because ie11 and edge have difficulties copy/pasting
   * if a copy/cut event fired, keyup is dismissed
   * @param {Event} e Event object
   */
onKeyUp:function(e){!this.isEditing||this._copyDone||this.inCompositionMode?this._copyDone=!1:e.keyCode in this.ctrlKeysMapUp&&(e.ctrlKey||e.metaKey)&&(this[this.ctrlKeysMapUp[e.keyCode]](e),e.stopImmediatePropagation(),e.preventDefault(),this.canvas&&this.canvas.requestRenderAll())},
/**
   * Handles onInput event
   * @param {Event} e Event object
   */
onInput:function(e){var fromPaste=this.fromPaste;if(this.fromPaste=!1,e&&e.stopPropagation(),this.isEditing){
// decisions about style changes.
var removedText,insertedText,removeFrom,removeTo,nextText=this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,charCount=this._text.length,nextCharCount=nextText.length,charDiff=nextCharCount-charCount,selectionStart=this.selectionStart,selectionEnd=this.selectionEnd,selection=selectionStart!==selectionEnd;if(""===this.hiddenTextarea.value)return this.styles={},this.updateFromTextArea(),this.fire("changed"),void(this.canvas&&(this.canvas.fire("text:changed",{target:this}),this.canvas.requestRenderAll()));var copiedStyle,textareaSelection=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value),backDelete=selectionStart>textareaSelection.selectionStart;selection?(removedText=this._text.slice(selectionStart,selectionEnd),charDiff+=selectionEnd-selectionStart):nextCharCount<charCount&&(removedText=backDelete?this._text.slice(selectionEnd+charDiff,selectionEnd):this._text.slice(selectionStart,selectionStart-charDiff)),insertedText=nextText.slice(textareaSelection.selectionEnd-charDiff,textareaSelection.selectionEnd),removedText&&removedText.length&&(insertedText.length&&(
// let's copy some style before deleting.
// we want to copy the style before the cursor OR the style at the cursor if selection
// is bigger than 0.
copiedStyle=this.getSelectionStyles(selectionStart,selectionStart+1,!0),
// now duplicate the style one for each inserted text.
copiedStyle=insertedText.map((function(){
// this return an array of references, but that is fine since we are
// copying the style later.
return copiedStyle[0]}))),selection?(removeFrom=selectionStart,removeTo=selectionEnd):backDelete?(
// detect differencies between forwardDelete and backDelete
removeFrom=selectionEnd-removedText.length,removeTo=selectionEnd):(removeFrom=selectionEnd,removeTo=selectionEnd+removedText.length),this.removeStyleFromTo(removeFrom,removeTo)),insertedText.length&&(fromPaste&&insertedText.join("")===fabric.copiedText&&!fabric.disableStyleCopyPaste&&(copiedStyle=fabric.copiedTextStyle),this.insertNewStyleBlock(insertedText,selectionStart,copiedStyle)),this.updateFromTextArea(),this.fire("changed"),this.canvas&&(this.canvas.fire("text:changed",{target:this}),this.canvas.requestRenderAll())}},
/**
   * Composition start
   */
onCompositionStart:function(){this.inCompositionMode=!0},
/**
   * Composition end
   */
onCompositionEnd:function(){this.inCompositionMode=!1},
// /**
//  * Composition update
//  */
onCompositionUpdate:function(e){this.compositionStart=e.target.selectionStart,this.compositionEnd=e.target.selectionEnd,this.updateTextareaPosition()},
/**
   * Copies selected text
   * @param {Event} e Event object
   */
copy:function(){this.selectionStart!==this.selectionEnd&&(fabric.copiedText=this.getSelectedText(),fabric.disableStyleCopyPaste?fabric.copiedTextStyle=null:fabric.copiedTextStyle=this.getSelectionStyles(this.selectionStart,this.selectionEnd,!0),this._copyDone=!0)},
/**
   * Pastes text
   * @param {Event} e Event object
   */
paste:function(){this.fromPaste=!0},
/**
   * @private
   * @param {Event} e Event object
   * @return {Object} Clipboard data object
   */
_getClipboardData:function(e){return e&&e.clipboardData||fabric.window.clipboardData},
/**
   * Finds the width in pixels before the cursor on the same line
   * @private
   * @param {Number} lineIndex
   * @param {Number} charIndex
   * @return {Number} widthBeforeCursor width before cursor
   */
_getWidthBeforeCursor:function(lineIndex,charIndex){var bound,widthBeforeCursor=this._getLineLeftOffset(lineIndex);return charIndex>0&&(bound=this.__charBounds[lineIndex][charIndex-1],widthBeforeCursor+=bound.left+bound.width),widthBeforeCursor},
/**
   * Gets start offset of a selection
   * @param {Event} e Event object
   * @param {Boolean} isRight
   * @return {Number}
   */
getDownCursorOffset:function(e,isRight){var selectionProp=this._getSelectionForOffset(e,isRight),cursorLocation=this.get2DCursorLocation(selectionProp),lineIndex=cursorLocation.lineIndex;
// if on last line, down cursor goes to end of line
if(lineIndex===this._textLines.length-1||e.metaKey||34===e.keyCode)
// move to the end of a text
return this._text.length-selectionProp;var charIndex=cursorLocation.charIndex,widthBeforeCursor=this._getWidthBeforeCursor(lineIndex,charIndex),indexOnOtherLine=this._getIndexOnLine(lineIndex+1,widthBeforeCursor),textAfterCursor=this._textLines[lineIndex].slice(charIndex);return textAfterCursor.length+indexOnOtherLine+1+this.missingNewlineOffset(lineIndex)},
/**
   * private
   * Helps finding if the offset should be counted from Start or End
   * @param {Event} e Event object
   * @param {Boolean} isRight
   * @return {Number}
   */
_getSelectionForOffset:function(e,isRight){return e.shiftKey&&this.selectionStart!==this.selectionEnd&&isRight?this.selectionEnd:this.selectionStart},
/**
   * @param {Event} e Event object
   * @param {Boolean} isRight
   * @return {Number}
   */
getUpCursorOffset:function(e,isRight){var selectionProp=this._getSelectionForOffset(e,isRight),cursorLocation=this.get2DCursorLocation(selectionProp),lineIndex=cursorLocation.lineIndex;if(0===lineIndex||e.metaKey||33===e.keyCode)
// if on first line, up cursor goes to start of line
return-selectionProp;var charIndex=cursorLocation.charIndex,widthBeforeCursor=this._getWidthBeforeCursor(lineIndex,charIndex),indexOnOtherLine=this._getIndexOnLine(lineIndex-1,widthBeforeCursor),textBeforeCursor=this._textLines[lineIndex].slice(0,charIndex),missingNewlineOffset=this.missingNewlineOffset(lineIndex-1);
// return a negative offset
return-this._textLines[lineIndex-1].length+indexOnOtherLine-textBeforeCursor.length+(1-missingNewlineOffset)},
/**
   * for a given width it founds the matching character.
   * @private
   */
_getIndexOnLine:function(lineIndex,width){for(var charWidth,foundMatch,line=this._textLines[lineIndex],lineLeftOffset=this._getLineLeftOffset(lineIndex),widthOfCharsOnLine=lineLeftOffset,indexOnLine=0,j=0,jlen=line.length;j<jlen;j++)if(charWidth=this.__charBounds[lineIndex][j].width,widthOfCharsOnLine+=charWidth,widthOfCharsOnLine>width){foundMatch=!0;var leftEdge=widthOfCharsOnLine-charWidth,rightEdge=widthOfCharsOnLine,offsetFromLeftEdge=Math.abs(leftEdge-width),offsetFromRightEdge=Math.abs(rightEdge-width);indexOnLine=offsetFromRightEdge<offsetFromLeftEdge?j:j-1;break}
// reached end
return foundMatch||(indexOnLine=line.length-1),indexOnLine},
/**
   * Moves cursor down
   * @param {Event} e Event object
   */
moveCursorDown:function(e){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorUpOrDown("Down",e)},
/**
   * Moves cursor up
   * @param {Event} e Event object
   */
moveCursorUp:function(e){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorUpOrDown("Up",e)},
/**
   * Moves cursor up or down, fires the events
   * @param {String} direction 'Up' or 'Down'
   * @param {Event} e Event object
   */
_moveCursorUpOrDown:function(direction,e){
// getUpCursorOffset
// getDownCursorOffset
var action="get"+direction+"CursorOffset",offset=this[action](e,"right"===this._selectionDirection);e.shiftKey?this.moveCursorWithShift(offset):this.moveCursorWithoutShift(offset),0!==offset&&(this.setSelectionInBoundaries(),this.abortCursorAnimation(),this._currentCursorOpacity=1,this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},
/**
   * Moves cursor with shift
   * @param {Number} offset
   */
moveCursorWithShift:function(offset){var newSelection="left"===this._selectionDirection?this.selectionStart+offset:this.selectionEnd+offset;return this.setSelectionStartEndWithShift(this.selectionStart,this.selectionEnd,newSelection),0!==offset},
/**
   * Moves cursor up without shift
   * @param {Number} offset
   */
moveCursorWithoutShift:function(offset){return offset<0?(this.selectionStart+=offset,this.selectionEnd=this.selectionStart):(this.selectionEnd+=offset,this.selectionStart=this.selectionEnd),0!==offset},
/**
   * Moves cursor left
   * @param {Event} e Event object
   */
moveCursorLeft:function(e){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorLeftOrRight("Left",e)},
/**
   * @private
   * @return {Boolean} true if a change happened
   */
_move:function(e,prop,direction){var newValue;if(e.altKey)newValue=this["findWordBoundary"+direction](this[prop]);else{if(!e.metaKey&&35!==e.keyCode&&36!==e.keyCode)return this[prop]+="Left"===direction?-1:1,!0;newValue=this["findLineBoundary"+direction](this[prop])}if(void 0!==typeof newValue&&this[prop]!==newValue)return this[prop]=newValue,!0},
/**
   * @private
   */
_moveLeft:function(e,prop){return this._move(e,prop,"Left")},
/**
   * @private
   */
_moveRight:function(e,prop){return this._move(e,prop,"Right")},
/**
   * Moves cursor left without keeping selection
   * @param {Event} e
   */
moveCursorLeftWithoutShift:function(e){var change=!0;return this._selectionDirection="left",
// only move cursor when there is no selection,
// otherwise we discard it, and leave cursor on same place
this.selectionEnd===this.selectionStart&&0!==this.selectionStart&&(change=this._moveLeft(e,"selectionStart")),this.selectionEnd=this.selectionStart,change},
/**
   * Moves cursor left while keeping selection
   * @param {Event} e
   */
moveCursorLeftWithShift:function(e){return"right"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveLeft(e,"selectionEnd"):0!==this.selectionStart?(this._selectionDirection="left",this._moveLeft(e,"selectionStart")):void 0},
/**
   * Moves cursor right
   * @param {Event} e Event object
   */
moveCursorRight:function(e){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorLeftOrRight("Right",e)},
/**
   * Moves cursor right or Left, fires event
   * @param {String} direction 'Left', 'Right'
   * @param {Event} e Event object
   */
_moveCursorLeftOrRight:function(direction,e){var actionName="moveCursor"+direction+"With";this._currentCursorOpacity=1,e.shiftKey?actionName+="Shift":actionName+="outShift",this[actionName](e)&&(this.abortCursorAnimation(),this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},
/**
   * Moves cursor right while keeping selection
   * @param {Event} e
   */
moveCursorRightWithShift:function(e){return"left"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveRight(e,"selectionStart"):this.selectionEnd!==this._text.length?(this._selectionDirection="right",this._moveRight(e,"selectionEnd")):void 0},
/**
   * Moves cursor right without keeping selection
   * @param {Event} e Event object
   */
moveCursorRightWithoutShift:function(e){var changed=!0;return this._selectionDirection="right",this.selectionStart===this.selectionEnd?(changed=this._moveRight(e,"selectionStart"),this.selectionEnd=this.selectionStart):this.selectionStart=this.selectionEnd,changed},
/**
   * Removes characters from start/end
   * start/end ar per grapheme position in _text array.
   *
   * @param {Number} start
   * @param {Number} end default to start + 1
   */
removeChars:function(start,end){"undefined"===typeof end&&(end=start+1),this.removeStyleFromTo(start,end),this._text.splice(start,end-start),this.text=this._text.join(""),this.set("dirty",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()},
/**
   * insert characters at start position, before start position.
   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1
   * if style array is provided, it must be as the same length of text in graphemes
   * if end is provided and is bigger than start, old text is replaced.
   * start/end ar per grapheme position in _text array.
   *
   * @param {String} text text to insert
   * @param {Array} style array of style objects
   * @param {Number} start
   * @param {Number} end default to start + 1
   */
insertChars:function(text,style,start,end){"undefined"===typeof end&&(end=start),end>start&&this.removeStyleFromTo(start,end);var graphemes=fabric.util.string.graphemeSplit(text);this.insertNewStyleBlock(graphemes,start,style),this._text=[].concat(this._text.slice(0,start),graphemes,this._text.slice(end)),this.text=this._text.join(""),this.set("dirty",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()}}),
/* _TO_SVG_START_ */
function(){var toFixed=fabric.util.toFixed,multipleSpacesRegex=/  +/g;fabric.util.object.extend(fabric.Text.prototype,/** @lends fabric.Text.prototype */{
/**
     * Returns SVG representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
_toSVG:function(){var offsets=this._getSVGLeftTopOffsets(),textAndBg=this._getSVGTextAndBg(offsets.textTop,offsets.textLeft);return this._wrapSVGTextAndBg(textAndBg)},
/**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
toSVG:function(reviver){return this._createBaseSVGMarkup(this._toSVG(),{reviver:reviver,noStyle:!0,withShadow:!0})},
/**
     * @private
     */
_getSVGLeftTopOffsets:function(){return{textLeft:-this.width/2,textTop:-this.height/2,lineTop:this.getHeightOfLine(0)}},
/**
     * @private
     */
_wrapSVGTextAndBg:function(textAndBg){var noShadow=!0,textDecoration=this.getSvgTextDecoration(this);return[textAndBg.textBgRects.join(""),'\t\t<text xml:space="preserve" ',this.fontFamily?'font-family="'+this.fontFamily.replace(/"/g,"'")+'" ':"",this.fontSize?'font-size="'+this.fontSize+'" ':"",this.fontStyle?'font-style="'+this.fontStyle+'" ':"",this.fontWeight?'font-weight="'+this.fontWeight+'" ':"",textDecoration?'text-decoration="'+textDecoration+'" ':"",'style="',this.getSvgStyles(noShadow),'"',this.addPaintOrder()," >",textAndBg.textSpans.join(""),"</text>\n"]},
/**
     * @private
     * @param {Number} textTopOffset Text top offset
     * @param {Number} textLeftOffset Text left offset
     * @return {Object}
     */
_getSVGTextAndBg:function(textTopOffset,textLeftOffset){var lineOffset,textSpans=[],textBgRects=[],height=textTopOffset;
// bounding-box background
this._setSVGBg(textBgRects);
// text and text-background
for(var i=0,len=this._textLines.length;i<len;i++)lineOffset=this._getLineLeftOffset(i),(this.textBackgroundColor||this.styleHas("textBackgroundColor",i))&&this._setSVGTextLineBg(textBgRects,i,textLeftOffset+lineOffset,height),this._setSVGTextLineText(textSpans,i,textLeftOffset+lineOffset,height),height+=this.getHeightOfLine(i);return{textSpans:textSpans,textBgRects:textBgRects}},
/**
     * @private
     */
_createTextCharSpan:function(_char,styleDecl,left,top){var shouldUseWhitespace=_char!==_char.trim()||_char.match(multipleSpacesRegex),styleProps=this.getSvgSpanStyles(styleDecl,shouldUseWhitespace),fillStyles=styleProps?'style="'+styleProps+'"':"",dy=styleDecl.deltaY,dySpan="",NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS;return dy&&(dySpan=' dy="'+toFixed(dy,NUM_FRACTION_DIGITS)+'" '),['<tspan x="',toFixed(left,NUM_FRACTION_DIGITS),'" y="',toFixed(top,NUM_FRACTION_DIGITS),'" ',dySpan,fillStyles,">",fabric.util.string.escapeXml(_char),"</tspan>"].join("")},_setSVGTextLineText:function(textSpans,lineIndex,textLeftOffset,textTopOffset){
// set proper line offset
var actualStyle,nextStyle,charBox,style,timeToRender,lineHeight=this.getHeightOfLine(lineIndex),isJustify=-1!==this.textAlign.indexOf("justify"),charsToRender="",boxWidth=0,line=this._textLines[lineIndex];textTopOffset+=lineHeight*(1-this._fontSizeFraction)/this.lineHeight;for(var i=0,len=line.length-1;i<=len;i++)timeToRender=i===len||this.charSpacing,charsToRender+=line[i],charBox=this.__charBounds[lineIndex][i],0===boxWidth?(textLeftOffset+=charBox.kernedWidth-charBox.width,boxWidth+=charBox.width):boxWidth+=charBox.kernedWidth,isJustify&&!timeToRender&&this._reSpaceAndTab.test(line[i])&&(timeToRender=!0),timeToRender||(
// if we have charSpacing, we render char by char
actualStyle=actualStyle||this.getCompleteStyleDeclaration(lineIndex,i),nextStyle=this.getCompleteStyleDeclaration(lineIndex,i+1),timeToRender=this._hasStyleChangedForSvg(actualStyle,nextStyle)),timeToRender&&(style=this._getStyleDeclaration(lineIndex,i)||{},textSpans.push(this._createTextCharSpan(charsToRender,style,textLeftOffset,textTopOffset)),charsToRender="",actualStyle=nextStyle,textLeftOffset+=boxWidth,boxWidth=0)},_pushTextBgRect:function(textBgRects,color,left,top,width,height){var NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS;textBgRects.push("\t\t<rect ",this._getFillAttributes(color),' x="',toFixed(left,NUM_FRACTION_DIGITS),'" y="',toFixed(top,NUM_FRACTION_DIGITS),'" width="',toFixed(width,NUM_FRACTION_DIGITS),'" height="',toFixed(height,NUM_FRACTION_DIGITS),'"></rect>\n')},_setSVGTextLineBg:function(textBgRects,i,leftOffset,textTopOffset){for(var charBox,currentColor,line=this._textLines[i],heightOfLine=this.getHeightOfLine(i)/this.lineHeight,boxWidth=0,boxStart=0,lastColor=this.getValueOfPropertyAt(i,0,"textBackgroundColor"),j=0,jlen=line.length;j<jlen;j++)charBox=this.__charBounds[i][j],currentColor=this.getValueOfPropertyAt(i,j,"textBackgroundColor"),currentColor!==lastColor?(lastColor&&this._pushTextBgRect(textBgRects,lastColor,leftOffset+boxStart,textTopOffset,boxWidth,heightOfLine),boxStart=charBox.left,boxWidth=charBox.width,lastColor=currentColor):boxWidth+=charBox.kernedWidth;currentColor&&this._pushTextBgRect(textBgRects,currentColor,leftOffset+boxStart,textTopOffset,boxWidth,heightOfLine)},
/**
     * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values
     * we work around it by "moving" alpha channel into opacity attribute and setting fill's alpha to 1
     *
     * @private
     * @param {*} value
     * @return {String}
     */
_getFillAttributes:function(value){var fillColor=value&&"string"===typeof value?new fabric.Color(value):"";return fillColor&&fillColor.getSource()&&1!==fillColor.getAlpha()?'opacity="'+fillColor.getAlpha()+'" fill="'+fillColor.setAlpha(1).toRgb()+'"':'fill="'+value+'"'},
/**
     * @private
     */
_getSVGLineTopOffset:function(lineIndex){for(var lineTopOffset=0,lastHeight=0,j=0;j<lineIndex;j++)lineTopOffset+=this.getHeightOfLine(j);return lastHeight=this.getHeightOfLine(j),{lineTop:lineTopOffset,offset:(this._fontSizeMult-this._fontSizeFraction)*lastHeight/(this.lineHeight*this._fontSizeMult)}},
/**
     * Returns styles-string for svg-export
     * @param {Boolean} skipShadow a boolean to skip shadow filter output
     * @return {String}
     */
getSvgStyles:function(skipShadow){var svgStyle=fabric.Object.prototype.getSvgStyles.call(this,skipShadow);return svgStyle+" white-space: pre;"}})}(),
/* _TO_SVG_END_ */
function(global){"use strict";var fabric=global.fabric||(global.fabric={});
/**
   * Textbox class, based on IText, allows the user to resize the text rectangle
   * and wraps lines automatically. Textboxes have their Y scaling locked, the
   * user can only change width. Height is adjusted automatically based on the
   * wrapping of lines.
   * @class fabric.Textbox
   * @extends fabric.IText
   * @mixes fabric.Observable
   * @return {fabric.Textbox} thisArg
   * @see {@link fabric.Textbox#initialize} for constructor definition
   */fabric.Textbox=fabric.util.createClass(fabric.IText,fabric.Observable,{
/**
     * Type of an object
     * @type String
     * @default
     */
type:"textbox",
/**
     * Minimum width of textbox, in pixels.
     * @type Number
     * @default
     */
minWidth:20,
/**
     * Minimum calculated width of a textbox, in pixels.
     * fixed to 2 so that an empty textbox cannot go to 0
     * and is still selectable without text.
     * @type Number
     * @default
     */
dynamicMinWidth:2,
/**
     * Cached array of text wrapping.
     * @type Array
     */
__cachedLines:null,
/**
     * Override standard Object class values
     */
lockScalingFlip:!0,
/**
     * Override standard Object class values
     * Textbox needs this on false
     */
noScaleCache:!1,
/**
     * Properties which when set cause object to change dimensions
     * @type Object
     * @private
     */
_dimensionAffectingProps:fabric.Text.prototype._dimensionAffectingProps.concat("width"),
/**
     * Use this regular expression to split strings in breakable lines
     * @private
     */
_wordJoiners:/[ \t\r]/,
/**
     * Use this boolean property in order to split strings that have no white space concept.
     * this is a cheap way to help with chinese/japaense
     * @type Boolean
     * @since 2.6.0
     */
splitByGrapheme:!1,
/**
     * Unlike superclass's version of this function, Textbox does not update
     * its width.
     * @private
     * @override
     */
initDimensions:function(){this.__skipDimension||(this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this._clearCache(),
// clear dynamicMinWidth as it will be different after we re-wrap line
this.dynamicMinWidth=0,
// wrap lines
this._styleMap=this._generateStyleMap(this._splitText()),
// if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap
this.dynamicMinWidth>this.width&&this._set("width",this.dynamicMinWidth),-1!==this.textAlign.indexOf("justify")&&
// once text is measured we need to make space fatter to make justified text.
this.enlargeSpaces(),
// clear cache and re-calculate height
this.height=this.calcTextHeight(),this.saveState({propertySet:"_dimensionAffectingProps"}))},
/**
     * Generate an object that translates the style object so that it is
     * broken up by visual lines (new lines and automatic wrapping).
     * The original text styles object is broken up by actual lines (new lines only),
     * which is only sufficient for Text / IText
     * @private
     */
_generateStyleMap:function(textInfo){for(var realLineCount=0,realLineCharCount=0,charCount=0,map={},i=0;i<textInfo.graphemeLines.length;i++)"\n"===textInfo.graphemeText[charCount]&&i>0?(realLineCharCount=0,charCount++,realLineCount++):!this.splitByGrapheme&&this._reSpaceAndTab.test(textInfo.graphemeText[charCount])&&i>0&&(
// this case deals with space's that are removed from end of lines when wrapping
realLineCharCount++,charCount++),map[i]={line:realLineCount,offset:realLineCharCount},charCount+=textInfo.graphemeLines[i].length,realLineCharCount+=textInfo.graphemeLines[i].length;return map},
/**
     * Returns true if object has a style property or has it on a specified line
     * @param {Number} lineIndex
     * @return {Boolean}
     */
styleHas:function(property,lineIndex){if(this._styleMap&&!this.isWrapping){var map=this._styleMap[lineIndex];map&&(lineIndex=map.line)}return fabric.Text.prototype.styleHas.call(this,property,lineIndex)},
/**
     * Returns true if object has no styling or no styling in a line
     * @param {Number} lineIndex , lineIndex is on wrapped lines.
     * @return {Boolean}
     */
isEmptyStyles:function(lineIndex){if(!this.styles)return!0;var nextOffset,obj,offset=0,nextLineIndex=lineIndex+1,shouldLimit=!1,map=this._styleMap[lineIndex],mapNextLine=this._styleMap[lineIndex+1];for(var p1 in map&&(lineIndex=map.line,offset=map.offset),mapNextLine&&(nextLineIndex=mapNextLine.line,shouldLimit=nextLineIndex===lineIndex,nextOffset=mapNextLine.offset),obj="undefined"===typeof lineIndex?this.styles:{line:this.styles[lineIndex]},obj)for(var p2 in obj[p1])if(p2>=offset&&(!shouldLimit||p2<nextOffset))
// eslint-disable-next-line no-unused-vars
for(var p3 in obj[p1][p2])return!1;return!0},
/**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @private
     */
_getStyleDeclaration:function(lineIndex,charIndex){if(this._styleMap&&!this.isWrapping){var map=this._styleMap[lineIndex];if(!map)return null;lineIndex=map.line,charIndex=map.offset+charIndex}return this.callSuper("_getStyleDeclaration",lineIndex,charIndex)},
/**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {Object} style
     * @private
     */
_setStyleDeclaration:function(lineIndex,charIndex,style){var map=this._styleMap[lineIndex];lineIndex=map.line,charIndex=map.offset+charIndex,this.styles[lineIndex][charIndex]=style},
/**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @private
     */
_deleteStyleDeclaration:function(lineIndex,charIndex){var map=this._styleMap[lineIndex];lineIndex=map.line,charIndex=map.offset+charIndex,delete this.styles[lineIndex][charIndex]},
/**
     * probably broken need a fix
     * Returns the real style line that correspond to the wrapped lineIndex line
     * Used just to verify if the line does exist or not.
     * @param {Number} lineIndex
     * @returns {Boolean} if the line exists or not
     * @private
     */
_getLineStyle:function(lineIndex){var map=this._styleMap[lineIndex];return!!this.styles[map.line]},
/**
     * Set the line style to an empty object so that is initialized
     * @param {Number} lineIndex
     * @param {Object} style
     * @private
     */
_setLineStyle:function(lineIndex){var map=this._styleMap[lineIndex];this.styles[map.line]={}},
/**
     * Wraps text using the 'width' property of Textbox. First this function
     * splits text on newlines, so we preserve newlines entered by the user.
     * Then it wraps each line using the width of the Textbox by calling
     * _wrapLine().
     * @param {Array} lines The string array of text that is split into lines
     * @param {Number} desiredWidth width you want to wrap to
     * @returns {Array} Array of lines
     */
_wrapText:function(lines,desiredWidth){var i,wrapped=[];for(this.isWrapping=!0,i=0;i<lines.length;i++)wrapped=wrapped.concat(this._wrapLine(lines[i],i,desiredWidth));return this.isWrapping=!1,wrapped},
/**
     * Helper function to measure a string of text, given its lineIndex and charIndex offset
     * it gets called when charBounds are not available yet.
     * @param {CanvasRenderingContext2D} ctx
     * @param {String} text
     * @param {number} lineIndex
     * @param {number} charOffset
     * @returns {number}
     * @private
     */
_measureWord:function(word,lineIndex,charOffset){var prevGrapheme,width=0,skipLeft=!0;charOffset=charOffset||0;for(var i=0,len=word.length;i<len;i++){var box=this._getGraphemeBox(word[i],lineIndex,i+charOffset,prevGrapheme,skipLeft);width+=box.kernedWidth,prevGrapheme=word[i]}return width},
/**
     * Wraps a line of text using the width of the Textbox and a context.
     * @param {Array} line The grapheme array that represent the line
     * @param {Number} lineIndex
     * @param {Number} desiredWidth width you want to wrap the line to
     * @param {Number} reservedSpace space to remove from wrapping for custom functionalities
     * @returns {Array} Array of line(s) into which the given text is wrapped
     * to.
     */
_wrapLine:function(_line,lineIndex,desiredWidth,reservedSpace){var lineWidth=0,splitByGrapheme=this.splitByGrapheme,graphemeLines=[],line=[],
// spaces in different languges?
words=splitByGrapheme?fabric.util.string.graphemeSplit(_line):_line.split(this._wordJoiners),word="",offset=0,infix=splitByGrapheme?"":" ",wordWidth=0,infixWidth=0,largestWordWidth=0,lineJustStarted=!0,additionalSpace=splitByGrapheme?0:this._getWidthOfCharSpacing();
// fix a difference between split and graphemeSplit
reservedSpace=reservedSpace||0;0===words.length&&words.push([]),desiredWidth-=reservedSpace;for(var i=0;i<words.length;i++)
// if using splitByGrapheme words are already in graphemes.
word=splitByGrapheme?words[i]:fabric.util.string.graphemeSplit(words[i]),wordWidth=this._measureWord(word,lineIndex,offset),offset+=word.length,lineWidth+=infixWidth+wordWidth-additionalSpace,lineWidth>=desiredWidth&&!lineJustStarted?(graphemeLines.push(line),line=[],lineWidth=wordWidth,lineJustStarted=!0):lineWidth+=additionalSpace,lineJustStarted||splitByGrapheme||line.push(infix),line=line.concat(word),infixWidth=this._measureWord([infix],lineIndex,offset),offset++,lineJustStarted=!1,
// keep track of largest word
wordWidth>largestWordWidth&&(largestWordWidth=wordWidth);return i&&graphemeLines.push(line),largestWordWidth+reservedSpace>this.dynamicMinWidth&&(this.dynamicMinWidth=largestWordWidth-additionalSpace+reservedSpace),graphemeLines},
/**
     * Detect if the text line is ended with an hard break
     * text and itext do not have wrapping, return false
     * @param {Number} lineIndex text to split
     * @return {Boolean}
     */
isEndOfWrapping:function(lineIndex){return!this._styleMap[lineIndex+1]||this._styleMap[lineIndex+1].line!==this._styleMap[lineIndex].line},
/**
     * Detect if a line has a linebreak and so we need to account for it when moving
     * and counting style.
     * @return Number
     */
missingNewlineOffset:function(lineIndex){return this.splitByGrapheme?this.isEndOfWrapping(lineIndex)?1:0:1},
/**
    * Gets lines of text to render in the Textbox. This function calculates
    * text wrapping on the fly every time it is called.
    * @param {String} text text to split
    * @returns {Array} Array of lines in the Textbox.
    * @override
    */
_splitTextIntoLines:function(text){for(var newText=fabric.Text.prototype._splitTextIntoLines.call(this,text),graphemeLines=this._wrapText(newText.lines,this.width),lines=new Array(graphemeLines.length),i=0;i<graphemeLines.length;i++)lines[i]=graphemeLines[i].join("");return newText.lines=lines,newText.graphemeLines=graphemeLines,newText},getMinWidth:function(){return Math.max(this.minWidth,this.dynamicMinWidth)},_removeExtraneousStyles:function(){var linesToKeep={};for(var prop in this._styleMap)this._textLines[prop]&&(linesToKeep[this._styleMap[prop].line]=1);for(var prop in this.styles)linesToKeep[prop]||delete this.styles[prop]},
/**
     * Returns object representation of an instance
     * @method toObject
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
toObject:function(propertiesToInclude){return this.callSuper("toObject",["minWidth","splitByGrapheme"].concat(propertiesToInclude))}}),
/**
   * Returns fabric.Textbox instance from an object representation
   * @static
   * @memberOf fabric.Textbox
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Textbox instance is created
   */
fabric.Textbox.fromObject=function(object,callback){return fabric.Object._fromObject("Textbox",object,callback,"text")}}(exports)},
/***/293162:
/***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_FACTORY__=b,__WEBPACK_AMD_DEFINE_RESULT__="function"===typeof __WEBPACK_AMD_DEFINE_FACTORY__?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__,void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)})(0,(function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\ufeff",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c)},d.onerror=function(){},d.send()}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof __webpack_require__.g&&__webpack_require__.g.global===__webpack_require__.g?__webpack_require__.g:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout((function(){i.revokeObjectURL(j.href)}),4e4),setTimeout((function(){e(j)}),0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout((function(){e(i)}))}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout((function(){l.revokeObjectURL(m)}),4e4)}});f.saveAs=g.saveAs=g,module.exports=g}))},
/***/654881:
/***/function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";
// EXPORTS
// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selector.js
function none(){}
/* harmony default export */function selector(selector){return null==selector?none:function(){return this.querySelector(selector)}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/select.js
/* harmony default export */function selection_select(select){"function"!==typeof select&&(select=selector(select));for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j)for(var node,subnode,group=groups[j],n=group.length,subgroup=subgroups[j]=new Array(n),i=0;i<n;++i)(node=group[i])&&(subnode=select.call(node,node.__data__,i,group))&&("__data__"in node&&(subnode.__data__=node.__data__),subgroup[i]=subnode);return new Selection(subgroups,this._parents)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/array.js
// Given something array like (or null), returns something that is strictly an
// array. This is used to ensure that array-like objects passed to d3.selectAll
// or selection.selectAll are converted into proper arrays when creating a
// selection; we don’t ever want to create a selection backed by a live
// HTMLCollection or NodeList. However, note that selection.selectAll will use a
// static NodeList as a group, since it safely derived from querySelectorAll.
function array(x){return null==x?[]:Array.isArray(x)?x:Array.from(x)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selectorAll.js
function empty(){return[]}
/* harmony default export */function selectorAll(selector){return null==selector?empty:function(){return this.querySelectorAll(selector)}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select){return function(){return array(select.apply(this,arguments))}}
/* harmony default export */function selectAll(select){select="function"===typeof select?arrayAll(select):selectorAll(select);for(var groups=this._groups,m=groups.length,subgroups=[],parents=[],j=0;j<m;++j)for(var node,group=groups[j],n=group.length,i=0;i<n;++i)(node=group[i])&&(subgroups.push(select.call(node,node.__data__,i,group)),parents.push(node));return new Selection(subgroups,parents)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/matcher.js
/* harmony default export */function matcher(selector){return function(){return this.matches(selector)}}function childMatcher(selector){return function(node){return node.matches(selector)}}__webpack_require__.d(__webpack_exports__,{BYU:function(){/* reexport */return linear_linear}});// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/selectChild.js
var find=Array.prototype.find;function childFind(match){return function(){return find.call(this.children,match)}}function childFirst(){return this.firstElementChild}
/* harmony default export */function selectChild(match){return this.select(null==match?childFirst:childFind("function"===typeof match?match:childMatcher(match)))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/selectChildren.js
var filter=Array.prototype.filter;function children(){return Array.from(this.children)}function childrenFilter(match){return function(){return filter.call(this.children,match)}}
/* harmony default export */function selectChildren(match){return this.selectAll(null==match?children:childrenFilter("function"===typeof match?match:childMatcher(match)))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/filter.js
/* harmony default export */function selection_filter(match){"function"!==typeof match&&(match=matcher(match));for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j)for(var node,group=groups[j],n=group.length,subgroup=subgroups[j]=[],i=0;i<n;++i)(node=group[i])&&match.call(node,node.__data__,i,group)&&subgroup.push(node);return new Selection(subgroups,this._parents)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/sparse.js
/* harmony default export */function sparse(update){return new Array(update.length)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/enter.js
/* harmony default export */function enter(){return new Selection(this._enter||this._groups.map(sparse),this._parents)}function EnterNode(parent,datum){this.ownerDocument=parent.ownerDocument,this.namespaceURI=parent.namespaceURI,this._next=null,this._parent=parent,this.__data__=datum}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/constant.js
/* harmony default export */function src_constant(x){return function(){return x}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/data.js
function bindIndex(parent,group,enter,update,exit,data){
// Put any non-null nodes that fit into update.
// Put any null nodes into enter.
// Put any remaining data into enter.
for(var node,i=0,groupLength=group.length,dataLength=data.length;i<dataLength;++i)(node=group[i])?(node.__data__=data[i],update[i]=node):enter[i]=new EnterNode(parent,data[i]);
// Put any non-null nodes that don’t fit into exit.
for(;i<groupLength;++i)(node=group[i])&&(exit[i]=node)}function bindKey(parent,group,enter,update,exit,data,key){var i,node,keyValue,nodeByKeyValue=new Map,groupLength=group.length,dataLength=data.length,keyValues=new Array(groupLength);
// Compute the key for each node.
// If multiple nodes have the same key, the duplicates are added to exit.
for(i=0;i<groupLength;++i)(node=group[i])&&(keyValues[i]=keyValue=key.call(node,node.__data__,i,group)+"",nodeByKeyValue.has(keyValue)?exit[i]=node:nodeByKeyValue.set(keyValue,node));
// Compute the key for each datum.
// If there a node associated with this key, join and add it to update.
// If there is not (or the key is a duplicate), add it to enter.
for(i=0;i<dataLength;++i)keyValue=key.call(parent,data[i],i,data)+"",(node=nodeByKeyValue.get(keyValue))?(update[i]=node,node.__data__=data[i],nodeByKeyValue.delete(keyValue)):enter[i]=new EnterNode(parent,data[i]);
// Add any remaining nodes that were not bound to data to exit.
for(i=0;i<groupLength;++i)(node=group[i])&&nodeByKeyValue.get(keyValues[i])===node&&(exit[i]=node)}function datum(node){return node.__data__}
/* harmony default export */function data(value,key){if(!arguments.length)return Array.from(this,datum);var bind=key?bindKey:bindIndex,parents=this._parents,groups=this._groups;"function"!==typeof value&&(value=src_constant(value));for(var m=groups.length,update=new Array(m),enter=new Array(m),exit=new Array(m),j=0;j<m;++j){var parent=parents[j],group=groups[j],groupLength=group.length,data=arraylike(value.call(parent,parent&&parent.__data__,j,parents)),dataLength=data.length,enterGroup=enter[j]=new Array(dataLength),updateGroup=update[j]=new Array(dataLength),exitGroup=exit[j]=new Array(groupLength);bind(parent,group,enterGroup,updateGroup,exitGroup,data,key);
// Now connect the enter nodes to their following update node, such that
// appendChild can insert the materialized enter node before this node,
// rather than at the end of the parent node.
for(var previous,next,i0=0,i1=0;i0<dataLength;++i0)if(previous=enterGroup[i0]){i0>=i1&&(i1=i0+1);while(!(next=updateGroup[i1])&&++i1<dataLength);previous._next=next||null}}return update=new Selection(update,parents),update._enter=enter,update._exit=exit,update}
// Given some data, this returns an array-like view of it: an object that
// exposes a length property and allows numeric indexing. Note that unlike
// selectAll, this isn’t worried about “live” collections because the resulting
// array will only be used briefly while data is being bound. (It is possible to
// cause the data to change while iterating by using a key function, but please
// don’t; we’d rather avoid a gratuitous copy.)
function arraylike(data){return"object"===typeof data&&"length"in data?data:Array.from(data);// Map, Set, iterable, string, or anything else
}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/exit.js
/* harmony default export */function exit(){return new Selection(this._exit||this._groups.map(sparse),this._parents)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/join.js
/* harmony default export */function join(onenter,onupdate,onexit){var enter=this.enter(),update=this,exit=this.exit();return"function"===typeof onenter?(enter=onenter(enter),enter&&(enter=enter.selection())):enter=enter.append(onenter+""),null!=onupdate&&(update=onupdate(update),update&&(update=update.selection())),null==onexit?exit.remove():onexit(exit),enter&&update?enter.merge(update).order():update}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/merge.js
/* harmony default export */function merge(context){for(var selection=context.selection?context.selection():context,groups0=this._groups,groups1=selection._groups,m0=groups0.length,m1=groups1.length,m=Math.min(m0,m1),merges=new Array(m0),j=0;j<m;++j)for(var node,group0=groups0[j],group1=groups1[j],n=group0.length,merge=merges[j]=new Array(n),i=0;i<n;++i)(node=group0[i]||group1[i])&&(merge[i]=node);for(;j<m0;++j)merges[j]=groups0[j];return new Selection(merges,this._parents)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/order.js
/* harmony default export */function order(){for(var groups=this._groups,j=-1,m=groups.length;++j<m;)for(var node,group=groups[j],i=group.length-1,next=group[i];--i>=0;)(node=group[i])&&(next&&4^node.compareDocumentPosition(next)&&next.parentNode.insertBefore(node,next),next=node);return this}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/sort.js
/* harmony default export */function sort(compare){function compareNode(a,b){return a&&b?compare(a.__data__,b.__data__):!a-!b}compare||(compare=ascending);for(var groups=this._groups,m=groups.length,sortgroups=new Array(m),j=0;j<m;++j){for(var node,group=groups[j],n=group.length,sortgroup=sortgroups[j]=new Array(n),i=0;i<n;++i)(node=group[i])&&(sortgroup[i]=node);sortgroup.sort(compareNode)}return new Selection(sortgroups,this._parents).order()}function ascending(a,b){return a<b?-1:a>b?1:a>=b?0:NaN}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/call.js
/* harmony default export */function call(){var callback=arguments[0];return arguments[0]=this,callback.apply(null,arguments),this}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/nodes.js
/* harmony default export */function nodes(){return Array.from(this)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/node.js
/* harmony default export */function node(){for(var groups=this._groups,j=0,m=groups.length;j<m;++j)for(var group=groups[j],i=0,n=group.length;i<n;++i){var node=group[i];if(node)return node}return null}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/size.js
/* harmony default export */function size(){let size=0;for(const node of this)++size;// eslint-disable-line no-unused-vars
return size}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/empty.js
/* harmony default export */function selection_empty(){return!this.node()}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/each.js
/* harmony default export */function each(callback){for(var groups=this._groups,j=0,m=groups.length;j<m;++j)for(var node,group=groups[j],i=0,n=group.length;i<n;++i)(node=group[i])&&callback.call(node,node.__data__,i,group);return this}EnterNode.prototype={constructor:EnterNode,appendChild:function(child){return this._parent.insertBefore(child,this._next)},insertBefore:function(child,next){return this._parent.insertBefore(child,next)},querySelector:function(selector){return this._parent.querySelector(selector)},querySelectorAll:function(selector){return this._parent.querySelectorAll(selector)}};// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/namespaces.js
var xhtml="http://www.w3.org/1999/xhtml",namespaces={svg:"http://www.w3.org/2000/svg",xhtml:xhtml,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};
/* harmony default export */ // CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/namespace.js
/* harmony default export */function namespace(name){var prefix=name+="",i=prefix.indexOf(":");return i>=0&&"xmlns"!==(prefix=name.slice(0,i))&&(name=name.slice(i+1)),namespaces.hasOwnProperty(prefix)?{space:namespaces[prefix],local:name}:name;// eslint-disable-line no-prototype-builtins
}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/attr.js
function attrRemove(name){return function(){this.removeAttribute(name)}}function attrRemoveNS(fullname){return function(){this.removeAttributeNS(fullname.space,fullname.local)}}function attrConstant(name,value){return function(){this.setAttribute(name,value)}}function attrConstantNS(fullname,value){return function(){this.setAttributeNS(fullname.space,fullname.local,value)}}function attrFunction(name,value){return function(){var v=value.apply(this,arguments);null==v?this.removeAttribute(name):this.setAttribute(name,v)}}function attrFunctionNS(fullname,value){return function(){var v=value.apply(this,arguments);null==v?this.removeAttributeNS(fullname.space,fullname.local):this.setAttributeNS(fullname.space,fullname.local,v)}}
/* harmony default export */function attr(name,value){var fullname=namespace(name);if(arguments.length<2){var node=this.node();return fullname.local?node.getAttributeNS(fullname.space,fullname.local):node.getAttribute(fullname)}return this.each((null==value?fullname.local?attrRemoveNS:attrRemove:"function"===typeof value?fullname.local?attrFunctionNS:attrFunction:fullname.local?attrConstantNS:attrConstant)(fullname,value))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/window.js
/* harmony default export */function src_window(node){return node.ownerDocument&&node.ownerDocument.defaultView||node.document&&node||node.defaultView;// node is a Document
}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/style.js
function styleRemove(name){return function(){this.style.removeProperty(name)}}function styleConstant(name,value,priority){return function(){this.style.setProperty(name,value,priority)}}function styleFunction(name,value,priority){return function(){var v=value.apply(this,arguments);null==v?this.style.removeProperty(name):this.style.setProperty(name,v,priority)}}
/* harmony default export */function style(name,value,priority){return arguments.length>1?this.each((null==value?styleRemove:"function"===typeof value?styleFunction:styleConstant)(name,value,null==priority?"":priority)):styleValue(this.node(),name)}function styleValue(node,name){return node.style.getPropertyValue(name)||src_window(node).getComputedStyle(node,null).getPropertyValue(name)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/property.js
function propertyRemove(name){return function(){delete this[name]}}function propertyConstant(name,value){return function(){this[name]=value}}function propertyFunction(name,value){return function(){var v=value.apply(this,arguments);null==v?delete this[name]:this[name]=v}}
/* harmony default export */function property(name,value){return arguments.length>1?this.each((null==value?propertyRemove:"function"===typeof value?propertyFunction:propertyConstant)(name,value)):this.node()[name]}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/classed.js
function classArray(string){return string.trim().split(/^|\s+/)}function classList(node){return node.classList||new ClassList(node)}function ClassList(node){this._node=node,this._names=classArray(node.getAttribute("class")||"")}function classedAdd(node,names){var list=classList(node),i=-1,n=names.length;while(++i<n)list.add(names[i])}function classedRemove(node,names){var list=classList(node),i=-1,n=names.length;while(++i<n)list.remove(names[i])}function classedTrue(names){return function(){classedAdd(this,names)}}function classedFalse(names){return function(){classedRemove(this,names)}}function classedFunction(names,value){return function(){(value.apply(this,arguments)?classedAdd:classedRemove)(this,names)}}
/* harmony default export */function classed(name,value){var names=classArray(name+"");if(arguments.length<2){var list=classList(this.node()),i=-1,n=names.length;while(++i<n)if(!list.contains(names[i]))return!1;return!0}return this.each(("function"===typeof value?classedFunction:value?classedTrue:classedFalse)(names,value))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/text.js
function textRemove(){this.textContent=""}function textConstant(value){return function(){this.textContent=value}}function textFunction(value){return function(){var v=value.apply(this,arguments);this.textContent=null==v?"":v}}
/* harmony default export */function selection_text(value){return arguments.length?this.each(null==value?textRemove:("function"===typeof value?textFunction:textConstant)(value)):this.node().textContent}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/html.js
function htmlRemove(){this.innerHTML=""}function htmlConstant(value){return function(){this.innerHTML=value}}function htmlFunction(value){return function(){var v=value.apply(this,arguments);this.innerHTML=null==v?"":v}}
/* harmony default export */function html(value){return arguments.length?this.each(null==value?htmlRemove:("function"===typeof value?htmlFunction:htmlConstant)(value)):this.node().innerHTML}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/raise.js
function raise(){this.nextSibling&&this.parentNode.appendChild(this)}
/* harmony default export */function selection_raise(){return this.each(raise)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/lower.js
function lower(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}
/* harmony default export */function selection_lower(){return this.each(lower)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/creator.js
function creatorInherit(name){return function(){var document=this.ownerDocument,uri=this.namespaceURI;return uri===xhtml&&document.documentElement.namespaceURI===xhtml?document.createElement(name):document.createElementNS(uri,name)}}function creatorFixed(fullname){return function(){return this.ownerDocument.createElementNS(fullname.space,fullname.local)}}
/* harmony default export */function creator(name){var fullname=namespace(name);return(fullname.local?creatorFixed:creatorInherit)(fullname)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/append.js
/* harmony default export */function append(name){var create="function"===typeof name?name:creator(name);return this.select((function(){return this.appendChild(create.apply(this,arguments))}))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/insert.js
function constantNull(){return null}
/* harmony default export */function insert(name,before){var create="function"===typeof name?name:creator(name),select=null==before?constantNull:"function"===typeof before?before:selector(before);return this.select((function(){return this.insertBefore(create.apply(this,arguments),select.apply(this,arguments)||null)}))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/remove.js
function remove(){var parent=this.parentNode;parent&&parent.removeChild(this)}
/* harmony default export */function selection_remove(){return this.each(remove)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow(){var clone=this.cloneNode(!1),parent=this.parentNode;return parent?parent.insertBefore(clone,this.nextSibling):clone}function selection_cloneDeep(){var clone=this.cloneNode(!0),parent=this.parentNode;return parent?parent.insertBefore(clone,this.nextSibling):clone}
/* harmony default export */function clone(deep){return this.select(deep?selection_cloneDeep:selection_cloneShallow)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/datum.js
/* harmony default export */function selection_datum(value){return arguments.length?this.property("__data__",value):this.node().__data__}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/on.js
function contextListener(listener){return function(event){listener.call(this,event,this.__data__)}}function parseTypenames(typenames){return typenames.trim().split(/^|\s+/).map((function(t){var name="",i=t.indexOf(".");return i>=0&&(name=t.slice(i+1),t=t.slice(0,i)),{type:t,name:name}}))}function onRemove(typename){return function(){var on=this.__on;if(on){for(var o,j=0,i=-1,m=on.length;j<m;++j)o=on[j],typename.type&&o.type!==typename.type||o.name!==typename.name?on[++i]=o:this.removeEventListener(o.type,o.listener,o.options);++i?on.length=i:delete this.__on}}}function onAdd(typename,value,options){return function(){var o,on=this.__on,listener=contextListener(value);if(on)for(var j=0,m=on.length;j<m;++j)if((o=on[j]).type===typename.type&&o.name===typename.name)return this.removeEventListener(o.type,o.listener,o.options),this.addEventListener(o.type,o.listener=listener,o.options=options),void(o.value=value);this.addEventListener(typename.type,listener,options),o={type:typename.type,name:typename.name,value:value,listener:listener,options:options},on?on.push(o):this.__on=[o]}}
/* harmony default export */function on(typename,value,options){var i,t,typenames=parseTypenames(typename+""),n=typenames.length;if(!(arguments.length<2)){for(on=value?onAdd:onRemove,i=0;i<n;++i)this.each(on(typenames[i],value,options));return this}var on=this.node().__on;if(on)for(var o,j=0,m=on.length;j<m;++j)for(i=0,o=on[j];i<n;++i)if((t=typenames[i]).type===o.type&&t.name===o.name)return o.value}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node,type,params){var window=src_window(node),event=window.CustomEvent;"function"===typeof event?event=new event(type,params):(event=window.document.createEvent("Event"),params?(event.initEvent(type,params.bubbles,params.cancelable),event.detail=params.detail):event.initEvent(type,!1,!1)),node.dispatchEvent(event)}function dispatchConstant(type,params){return function(){return dispatchEvent(this,type,params)}}function dispatchFunction(type,params){return function(){return dispatchEvent(this,type,params.apply(this,arguments))}}
/* harmony default export */function selection_dispatch(type,params){return this.each(("function"===typeof params?dispatchFunction:dispatchConstant)(type,params))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/iterator.js
/* harmony default export */function*iterator(){for(var groups=this._groups,j=0,m=groups.length;j<m;++j)for(var node,group=groups[j],i=0,n=group.length;i<n;++i)(node=group[i])&&(yield node)}ClassList.prototype={add:function(name){var i=this._names.indexOf(name);i<0&&(this._names.push(name),this._node.setAttribute("class",this._names.join(" ")))},remove:function(name){var i=this._names.indexOf(name);i>=0&&(this._names.splice(i,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(name){return this._names.indexOf(name)>=0}};// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-selection/src/selection/index.js
var root=[null];function Selection(groups,parents){this._groups=groups,this._parents=parents}function selection(){return new Selection([[document.documentElement]],root)}function selection_selection(){return this}Selection.prototype=selection.prototype={constructor:Selection,select:selection_select,selectAll:selectAll,selectChild:selectChild,selectChildren:selectChildren,filter:selection_filter,data:data,enter:enter,exit:exit,join:join,merge:merge,selection:selection_selection,order:order,sort:sort,call:call,nodes:nodes,node:node,size:size,empty:selection_empty,each:each,attr:attr,style:style,property:property,classed:classed,text:selection_text,html:html,raise:selection_raise,lower:selection_lower,append:append,insert:insert,remove:selection_remove,clone:clone,datum:selection_datum,on:on,dispatch:selection_dispatch,[Symbol.iterator]:iterator};
/* harmony default export */var src_selection=selection,noop={value:()=>{}};function dispatch_dispatch(){for(var t,i=0,n=arguments.length,_={};i<n;++i){if(!(t=arguments[i]+"")||t in _||/[\s.]/.test(t))throw new Error("illegal type: "+t);_[t]=[]}return new Dispatch(_)}function Dispatch(_){this._=_}function dispatch_parseTypenames(typenames,types){return typenames.trim().split(/^|\s+/).map((function(t){var name="",i=t.indexOf(".");if(i>=0&&(name=t.slice(i+1),t=t.slice(0,i)),t&&!types.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:name}}))}function get(type,name){for(var c,i=0,n=type.length;i<n;++i)if((c=type[i]).name===name)return c.value}function set(type,name,callback){for(var i=0,n=type.length;i<n;++i)if(type[i].name===name){type[i]=noop,type=type.slice(0,i).concat(type.slice(i+1));break}return null!=callback&&type.push({name:name,value:callback}),type}
/* harmony default export */Dispatch.prototype=dispatch_dispatch.prototype={constructor:Dispatch,on:function(typename,callback){var t,_=this._,T=dispatch_parseTypenames(typename+"",_),i=-1,n=T.length;
// If no callback was specified, return the callback of the given type and name.
if(!(arguments.length<2)){
// If a type was specified, set the callback for the given type and name.
// Otherwise, if a null callback was specified, remove callbacks of the given name.
if(null!=callback&&"function"!==typeof callback)throw new Error("invalid callback: "+callback);while(++i<n)if(t=(typename=T[i]).type)_[t]=set(_[t],typename.name,callback);else if(null==callback)for(t in _)_[t]=set(_[t],typename.name,null);return this}while(++i<n)if((t=(typename=T[i]).type)&&(t=get(_[t],typename.name)))return t},copy:function(){var copy={},_=this._;for(var t in _)copy[t]=_[t].slice();return new Dispatch(copy)},call:function(type,that){if((n=arguments.length-2)>0)for(var n,t,args=new Array(n),i=0;i<n;++i)args[i]=arguments[i+2];if(!this._.hasOwnProperty(type))throw new Error("unknown type: "+type);for(t=this._[type],i=0,n=t.length;i<n;++i)t[i].value.apply(that,args)},apply:function(type,that,args){if(!this._.hasOwnProperty(type))throw new Error("unknown type: "+type);for(var t=this._[type],i=0,n=t.length;i<n;++i)t[i].value.apply(that,args)}};var// how frequently we check for clock skew
taskHead,taskTail,src_dispatch=dispatch_dispatch,timer_frame=0,// is an animation frame pending?
timeout=0,// is a timeout pending?
interval=0,// are any timers active?
pokeDelay=1e3,clockLast=0,clockNow=0,clockSkew=0,clock="object"===typeof performance&&performance.now?performance:Date,setFrame="object"===typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(f){setTimeout(f,17)};function now(){return clockNow||(setFrame(clearNow),clockNow=clock.now()+clockSkew)}function clearNow(){clockNow=0}function Timer(){this._call=this._time=this._next=null}function timer(callback,delay,time){var t=new Timer;return t.restart(callback,delay,time),t}function timerFlush(){now(),// Get the current time, if not already set.
++timer_frame;// Pretend we’ve set an alarm, if we haven’t already.
var e,t=taskHead;while(t)(e=clockNow-t._time)>=0&&t._call.call(void 0,e),t=t._next;--timer_frame}function wake(){clockNow=(clockLast=clock.now())+clockSkew,timer_frame=timeout=0;try{timerFlush()}finally{timer_frame=0,nap(),clockNow=0}}function poke(){var now=clock.now(),delay=now-clockLast;delay>pokeDelay&&(clockSkew-=delay,clockLast=now)}function nap(){var t0,t2,t1=taskHead,time=1/0;while(t1)t1._call?(time>t1._time&&(time=t1._time),t0=t1,t1=t1._next):(t2=t1._next,t1._next=null,t1=t0?t0._next=t2:taskHead=t2);taskTail=t0,sleep(time)}function sleep(time){if(!timer_frame){// Soonest alarm already set, or will be.
timeout&&(timeout=clearTimeout(timeout));var delay=time-clockNow;// Strictly less than if we recomputed clockNow.
delay>24?(time<1/0&&(timeout=setTimeout(wake,time-clock.now()-clockSkew)),interval&&(interval=clearInterval(interval))):(interval||(clockLast=clock.now(),interval=setInterval(poke,pokeDelay)),timer_frame=1,setFrame(wake))}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-timer/src/timeout.js
/* harmony default export */function src_timeout(callback,delay,time){var t=new Timer;return delay=null==delay?0:+delay,t.restart((elapsed=>{t.stop(),callback(elapsed+delay)}),delay,time),t}Timer.prototype=timer.prototype={constructor:Timer,restart:function(callback,delay,time){if("function"!==typeof callback)throw new TypeError("callback is not a function");time=(null==time?now():+time)+(null==delay?0:+delay),this._next||taskTail===this||(taskTail?taskTail._next=this:taskHead=this,taskTail=this),this._call=callback,this._time=time,sleep()},stop:function(){this._call&&(this._call=null,this._time=1/0,sleep())}};// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/schedule.js
var emptyOn=src_dispatch("start","end","cancel","interrupt"),emptyTween=[],CREATED=0,SCHEDULED=1,STARTING=2,STARTED=3,RUNNING=4,ENDING=5,ENDED=6;
/* harmony default export */function schedule(node,name,id,index,group,timing){var schedules=node.__transition;if(schedules){if(id in schedules)return}else node.__transition={};create(node,id,{name:name,index:index,// For context during callback.
group:group,// For context during callback.
on:emptyOn,tween:emptyTween,time:timing.time,delay:timing.delay,duration:timing.duration,ease:timing.ease,timer:null,state:CREATED})}function init(node,id){var schedule=schedule_get(node,id);if(schedule.state>CREATED)throw new Error("too late; already scheduled");return schedule}function schedule_set(node,id){var schedule=schedule_get(node,id);if(schedule.state>STARTED)throw new Error("too late; already running");return schedule}function schedule_get(node,id){var schedule=node.__transition;if(!schedule||!(schedule=schedule[id]))throw new Error("transition not found");return schedule}function create(node,id,self){var tween,schedules=node.__transition;
// Initialize the self timer when the transition is created.
// Note the actual delay is not known until the first callback!
function schedule(elapsed){self.state=SCHEDULED,self.timer.restart(start,self.delay,self.time),
// If the elapsed delay is less than our first sleep, start immediately.
self.delay<=elapsed&&start(elapsed-self.delay)}function start(elapsed){var i,j,n,o;
// If the state is not SCHEDULED, then we previously errored on start.
if(self.state!==SCHEDULED)return stop();for(i in schedules)if(o=schedules[i],o.name===self.name){
// While this element already has a starting transition during this frame,
// defer starting an interrupting transition until that transition has a
// chance to tick (and possibly end); see d3/d3-transition#54!
if(o.state===STARTED)return src_timeout(start);
// Interrupt the active transition, if any.
o.state===RUNNING?(o.state=ENDED,o.timer.stop(),o.on.call("interrupt",node,node.__data__,o.index,o.group),delete schedules[i]):+i<id&&(o.state=ENDED,o.timer.stop(),o.on.call("cancel",node,node.__data__,o.index,o.group),delete schedules[i])}
// Defer the first tick to end of the current frame; see d3/d3#1576.
// Note the transition may be canceled after start and before the first tick!
// Note this must be scheduled before the start event; see d3/d3-transition#16!
// Assuming this is successful, subsequent callbacks go straight to tick.
if(src_timeout((function(){self.state===STARTED&&(self.state=RUNNING,self.timer.restart(tick,self.delay,self.time),tick(elapsed))})),
// Dispatch the start event.
// Note this must be done before the tween are initialized.
self.state=STARTING,self.on.call("start",node,node.__data__,self.index,self.group),self.state===STARTING){for(// interrupted
self.state=STARTED,
// Initialize the tween, deleting null tween.
tween=new Array(n=self.tween.length),i=0,j=-1;i<n;++i)(o=self.tween[i].value.call(node,node.__data__,self.index,self.group))&&(tween[++j]=o);tween.length=j+1}}function tick(elapsed){var t=elapsed<self.duration?self.ease.call(null,elapsed/self.duration):(self.timer.restart(stop),self.state=ENDING,1),i=-1,n=tween.length;while(++i<n)tween[i].call(node,t);
// Dispatch the end event.
self.state===ENDING&&(self.on.call("end",node,node.__data__,self.index,self.group),stop())}function stop(){for(var i in self.state=ENDED,self.timer.stop(),delete schedules[id],schedules)return;// eslint-disable-line no-unused-vars
delete node.__transition}schedules[id]=self,self.timer=timer(schedule,0,self.time)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/interrupt.js
/* harmony default export */function src_interrupt(node,name){var schedule,active,i,schedules=node.__transition,empty=!0;if(schedules){for(i in name=null==name?null:name+"",schedules)(schedule=schedules[i]).name===name?(active=schedule.state>STARTING&&schedule.state<ENDING,schedule.state=ENDED,schedule.timer.stop(),schedule.on.call(active?"interrupt":"cancel",node,node.__data__,schedule.index,schedule.group),delete schedules[i]):empty=!1;empty&&delete node.__transition}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/selection/interrupt.js
/* harmony default export */function selection_interrupt(name){return this.each((function(){src_interrupt(this,name)}))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/number.js
/* harmony default export */function number(a,b){return a=+a,b=+b,function(t){return a*(1-t)+b*t}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/transform/decompose.js
var svgNode,degrees=180/Math.PI,decompose_identity={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};
/* harmony default export */function decompose(a,b,c,d,e,f){var scaleX,scaleY,skewX;return(scaleX=Math.sqrt(a*a+b*b))&&(a/=scaleX,b/=scaleX),(skewX=a*c+b*d)&&(c-=a*skewX,d-=b*skewX),(scaleY=Math.sqrt(c*c+d*d))&&(c/=scaleY,d/=scaleY,skewX/=scaleY),a*d<b*c&&(a=-a,b=-b,skewX=-skewX,scaleX=-scaleX),{translateX:e,translateY:f,rotate:Math.atan2(b,a)*degrees,skewX:Math.atan(skewX)*degrees,scaleX:scaleX,scaleY:scaleY}}
/* eslint-disable no-undef */
function parseCss(value){const m=new("function"===typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(value+"");return m.isIdentity?decompose_identity:decompose(m.a,m.b,m.c,m.d,m.e,m.f)}function parseSvg(value){return null==value?decompose_identity:(svgNode||(svgNode=document.createElementNS("http://www.w3.org/2000/svg","g")),svgNode.setAttribute("transform",value),(value=svgNode.transform.baseVal.consolidate())?(value=value.matrix,decompose(value.a,value.b,value.c,value.d,value.e,value.f)):decompose_identity)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse,pxComma,pxParen,degParen){function pop(s){return s.length?s.pop()+" ":""}function translate(xa,ya,xb,yb,s,q){if(xa!==xb||ya!==yb){var i=s.push("translate(",null,pxComma,null,pxParen);q.push({i:i-4,x:number(xa,xb)},{i:i-2,x:number(ya,yb)})}else(xb||yb)&&s.push("translate("+xb+pxComma+yb+pxParen)}function rotate(a,b,s,q){a!==b?(a-b>180?b+=360:b-a>180&&(a+=360),// shortest path
q.push({i:s.push(pop(s)+"rotate(",null,degParen)-2,x:number(a,b)})):b&&s.push(pop(s)+"rotate("+b+degParen)}function skewX(a,b,s,q){a!==b?q.push({i:s.push(pop(s)+"skewX(",null,degParen)-2,x:number(a,b)}):b&&s.push(pop(s)+"skewX("+b+degParen)}function scale(xa,ya,xb,yb,s,q){if(xa!==xb||ya!==yb){var i=s.push(pop(s)+"scale(",null,",",null,")");q.push({i:i-4,x:number(xa,xb)},{i:i-2,x:number(ya,yb)})}else 1===xb&&1===yb||s.push(pop(s)+"scale("+xb+","+yb+")")}return function(a,b){var s=[],// string constants and placeholders
q=[];// number interpolators
// gc
return a=parse(a),b=parse(b),translate(a.translateX,a.translateY,b.translateX,b.translateY,s,q),rotate(a.rotate,b.rotate,s,q),skewX(a.skewX,b.skewX,s,q),scale(a.scaleX,a.scaleY,b.scaleX,b.scaleY,s,q),a=b=null,function(t){var o,i=-1,n=q.length;while(++i<n)s[(o=q[i]).i]=o.x(t);return s.join("")}}}var interpolateTransformCss=interpolateTransform(parseCss,"px, ","px)","deg)"),interpolateTransformSvg=interpolateTransform(parseSvg,", ",")",")");// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id,name){var tween0,tween1;return function(){var schedule=schedule_set(this,id),tween=schedule.tween;
// If this node shared tween with the previous node,
// just assign the updated shared tween and we’re done!
// Otherwise, copy-on-write.
if(tween!==tween0){tween1=tween0=tween;for(var i=0,n=tween1.length;i<n;++i)if(tween1[i].name===name){tween1=tween1.slice(),tween1.splice(i,1);break}}schedule.tween=tween1}}function tweenFunction(id,name,value){var tween0,tween1;if("function"!==typeof value)throw new Error;return function(){var schedule=schedule_set(this,id),tween=schedule.tween;
// If this node shared tween with the previous node,
// just assign the updated shared tween and we’re done!
// Otherwise, copy-on-write.
if(tween!==tween0){tween1=(tween0=tween).slice();for(var t={name:name,value:value},i=0,n=tween1.length;i<n;++i)if(tween1[i].name===name){tween1[i]=t;break}i===n&&tween1.push(t)}schedule.tween=tween1}}
/* harmony default export */function tween(name,value){var id=this._id;if(name+="",arguments.length<2){for(var t,tween=schedule_get(this.node(),id).tween,i=0,n=tween.length;i<n;++i)if((t=tween[i]).name===name)return t.value;return null}return this.each((null==value?tweenRemove:tweenFunction)(id,name,value))}function tweenValue(transition,name,value){var id=transition._id;return transition.each((function(){var schedule=schedule_set(this,id);(schedule.value||(schedule.value={}))[name]=value.apply(this,arguments)})),function(node){return schedule_get(node,id).value[name]}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-color/src/define.js
/* harmony default export */function src_define(constructor,factory,prototype){constructor.prototype=factory.prototype=prototype,prototype.constructor=constructor}function extend(parent,definition){var prototype=Object.create(parent.prototype);for(var key in definition)prototype[key]=definition[key];return prototype}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-color/src/color.js
function Color(){}var darker=.7,brighter=1/darker,reI="\\s*([+-]?\\d+)\\s*",reN="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",reP="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",reHex=/^#([0-9a-f]{3,8})$/,reRgbInteger=new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`),reRgbPercent=new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`),reRgbaInteger=new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`),reRgbaPercent=new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`),reHslPercent=new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`),reHslaPercent=new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`),named={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function color_formatHex(){return this.rgb().formatHex()}function color_formatHex8(){return this.rgb().formatHex8()}function color_formatHsl(){return hslConvert(this).formatHsl()}function color_formatRgb(){return this.rgb().formatRgb()}function color(format){var m,l;return format=(format+"").trim().toLowerCase(),(m=reHex.exec(format))?(l=m[1].length,m=parseInt(m[1],16),6===l?rgbn(m):3===l?new Rgb(m>>8&15|m>>4&240,m>>4&15|240&m,(15&m)<<4|15&m,1):8===l?rgba(m>>24&255,m>>16&255,m>>8&255,(255&m)/255):4===l?rgba(m>>12&15|m>>8&240,m>>8&15|m>>4&240,m>>4&15|240&m,((15&m)<<4|15&m)/255):null):(m=reRgbInteger.exec(format))?new Rgb(m[1],m[2],m[3],1):(m=reRgbPercent.exec(format))?new Rgb(255*m[1]/100,255*m[2]/100,255*m[3]/100,1):(m=reRgbaInteger.exec(format))?rgba(m[1],m[2],m[3],m[4]):(m=reRgbaPercent.exec(format))?rgba(255*m[1]/100,255*m[2]/100,255*m[3]/100,m[4]):(m=reHslPercent.exec(format))?hsla(m[1],m[2]/100,m[3]/100,1):(m=reHslaPercent.exec(format))?hsla(m[1],m[2]/100,m[3]/100,m[4]):named.hasOwnProperty(format)?rgbn(named[format]):"transparent"===format?new Rgb(NaN,NaN,NaN,0):null}function rgbn(n){return new Rgb(n>>16&255,n>>8&255,255&n,1)}function rgba(r,g,b,a){return a<=0&&(r=g=b=NaN),new Rgb(r,g,b,a)}function rgbConvert(o){return o instanceof Color||(o=color(o)),o?(o=o.rgb(),new Rgb(o.r,o.g,o.b,o.opacity)):new Rgb}function color_rgb(r,g,b,opacity){return 1===arguments.length?rgbConvert(r):new Rgb(r,g,b,null==opacity?1:opacity)}function Rgb(r,g,b,opacity){this.r=+r,this.g=+g,this.b=+b,this.opacity=+opacity}function rgb_formatHex(){return`#${hex(this.r)}${hex(this.g)}${hex(this.b)}`}function rgb_formatHex8(){return`#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex(255*(isNaN(this.opacity)?1:this.opacity))}`}function rgb_formatRgb(){const a=clampa(this.opacity);return`${1===a?"rgb(":"rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${1===a?")":`, ${a})`}`}function clampa(opacity){return isNaN(opacity)?1:Math.max(0,Math.min(1,opacity))}function clampi(value){return Math.max(0,Math.min(255,Math.round(value)||0))}function hex(value){return value=clampi(value),(value<16?"0":"")+value.toString(16)}function hsla(h,s,l,a){return a<=0?h=s=l=NaN:l<=0||l>=1?h=s=NaN:s<=0&&(h=NaN),new Hsl(h,s,l,a)}function hslConvert(o){if(o instanceof Hsl)return new Hsl(o.h,o.s,o.l,o.opacity);if(o instanceof Color||(o=color(o)),!o)return new Hsl;if(o instanceof Hsl)return o;o=o.rgb();var r=o.r/255,g=o.g/255,b=o.b/255,min=Math.min(r,g,b),max=Math.max(r,g,b),h=NaN,s=max-min,l=(max+min)/2;return s?(h=r===max?(g-b)/s+6*(g<b):g===max?(b-r)/s+2:(r-g)/s+4,s/=l<.5?max+min:2-max-min,h*=60):s=l>0&&l<1?0:h,new Hsl(h,s,l,o.opacity)}function hsl(h,s,l,opacity){return 1===arguments.length?hslConvert(h):new Hsl(h,s,l,null==opacity?1:opacity)}function Hsl(h,s,l,opacity){this.h=+h,this.s=+s,this.l=+l,this.opacity=+opacity}function clamph(value){return value=(value||0)%360,value<0?value+360:value}function clampt(value){return Math.max(0,Math.min(1,value||0))}
/* From FvD 13.37, CSS Color Module Level 3 */function hsl2rgb(h,m1,m2){return 255*(h<60?m1+(m2-m1)*h/60:h<180?m2:h<240?m1+(m2-m1)*(240-h)/60:m1)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/basis.js
function basis(t1,v0,v1,v2,v3){var t2=t1*t1,t3=t2*t1;return((1-3*t1+3*t2-t3)*v0+(4-6*t2+3*t3)*v1+(1+3*t1+3*t2-3*t3)*v2+t3*v3)/6}
/* harmony default export */function src_basis(values){var n=values.length-1;return function(t){var i=t<=0?t=0:t>=1?(t=1,n-1):Math.floor(t*n),v1=values[i],v2=values[i+1],v0=i>0?values[i-1]:2*v1-v2,v3=i<n-1?values[i+2]:2*v2-v1;return basis((t-i/n)*n,v0,v1,v2,v3)}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/basisClosed.js
/* harmony default export */function basisClosed(values){var n=values.length;return function(t){var i=Math.floor(((t%=1)<0?++t:t)*n),v0=values[(i+n-1)%n],v1=values[i%n],v2=values[(i+1)%n],v3=values[(i+2)%n];return basis((t-i/n)*n,v0,v1,v2,v3)}}src_define(Color,color,{copy(channels){return Object.assign(new this.constructor,this,channels)},displayable(){return this.rgb().displayable()},hex:color_formatHex,// Deprecated! Use color.formatHex.
formatHex:color_formatHex,formatHex8:color_formatHex8,formatHsl:color_formatHsl,formatRgb:color_formatRgb,toString:color_formatRgb}),src_define(Rgb,color_rgb,extend(Color,{brighter(k){return k=null==k?brighter:Math.pow(brighter,k),new Rgb(this.r*k,this.g*k,this.b*k,this.opacity)},darker(k){return k=null==k?darker:Math.pow(darker,k),new Rgb(this.r*k,this.g*k,this.b*k,this.opacity)},rgb(){return this},clamp(){return new Rgb(clampi(this.r),clampi(this.g),clampi(this.b),clampa(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:rgb_formatHex,// Deprecated! Use color.formatHex.
formatHex:rgb_formatHex,formatHex8:rgb_formatHex8,formatRgb:rgb_formatRgb,toString:rgb_formatRgb})),src_define(Hsl,hsl,extend(Color,{brighter(k){return k=null==k?brighter:Math.pow(brighter,k),new Hsl(this.h,this.s,this.l*k,this.opacity)},darker(k){return k=null==k?darker:Math.pow(darker,k),new Hsl(this.h,this.s,this.l*k,this.opacity)},rgb(){var h=this.h%360+360*(this.h<0),s=isNaN(h)||isNaN(this.s)?0:this.s,l=this.l,m2=l+(l<.5?l:1-l)*s,m1=2*l-m2;return new Rgb(hsl2rgb(h>=240?h-240:h+120,m1,m2),hsl2rgb(h,m1,m2),hsl2rgb(h<120?h+240:h-120,m1,m2),this.opacity)},clamp(){return new Hsl(clamph(this.h),clampt(this.s),clampt(this.l),clampa(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const a=clampa(this.opacity);return`${1===a?"hsl(":"hsla("}${clamph(this.h)}, ${100*clampt(this.s)}%, ${100*clampt(this.l)}%${1===a?")":`, ${a})`}`}}));// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/constant.js
/* harmony default export */var d3_interpolate_src_constant=x=>()=>x;// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/color.js
function linear(a,d){return function(t){return a+t*d}}function exponential(a,b,y){return a=Math.pow(a,y),b=Math.pow(b,y)-a,y=1/y,function(t){return Math.pow(a+t*b,y)}}function gamma(y){return 1===(y=+y)?nogamma:function(a,b){return b-a?exponential(a,b,y):d3_interpolate_src_constant(isNaN(a)?b:a)}}function nogamma(a,b){var d=b-a;return d?linear(a,d):d3_interpolate_src_constant(isNaN(a)?b:a)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/rgb.js
/* harmony default export */var rgb=function rgbGamma(y){var color=gamma(y);function rgb(start,end){var r=color((start=color_rgb(start)).r,(end=color_rgb(end)).r),g=color(start.g,end.g),b=color(start.b,end.b),opacity=nogamma(start.opacity,end.opacity);return function(t){return start.r=r(t),start.g=g(t),start.b=b(t),start.opacity=opacity(t),start+""}}return rgb.gamma=rgbGamma,rgb}(1);function rgbSpline(spline){return function(colors){var i,color,n=colors.length,r=new Array(n),g=new Array(n),b=new Array(n);for(i=0;i<n;++i)color=color_rgb(colors[i]),r[i]=color.r||0,g[i]=color.g||0,b[i]=color.b||0;return r=spline(r),g=spline(g),b=spline(b),color.opacity=1,function(t){return color.r=r(t),color.g=g(t),color.b=b(t),color+""}}}rgbSpline(src_basis),rgbSpline(basisClosed);var reA=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,reB=new RegExp(reA.source,"g");function zero(b){return function(){return b}}function one(b){return function(t){return b(t)+""}}
/* harmony default export */function string(a,b){var// scan index for next number in b
am,// current match in a
bm,// current match in b
bs,bi=reA.lastIndex=reB.lastIndex=0,// string preceding current number in b, if any
i=-1,// index in s
s=[],// string constants and placeholders
q=[];// number interpolators
// Coerce inputs to strings.
a+="",b+="";
// Interpolate pairs of numbers in a & b.
while((am=reA.exec(a))&&(bm=reB.exec(b)))(bs=bm.index)>bi&&(// a string precedes the next number in b
bs=b.slice(bi,bs),s[i]?s[i]+=bs:s[++i]=bs),(am=am[0])===(bm=bm[0])?// numbers in a & b match
s[i]?s[i]+=bm:s[++i]=bm:(// interpolate non-matching numbers
s[++i]=null,q.push({i:i,x:number(am,bm)})),bi=reB.lastIndex;
// Add remains of b.
// Special optimization for only a single match.
// Otherwise, interpolate each of the numbers and rejoin the string.
return bi<b.length&&(bs=b.slice(bi),s[i]?s[i]+=bs:s[++i]=bs),s.length<2?q[0]?one(q[0].x):zero(b):(b=q.length,function(t){for(var o,i=0;i<b;++i)s[(o=q[i]).i]=o.x(t);return s.join("")})}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/interpolate.js
/* harmony default export */function transition_interpolate(a,b){var c;return("number"===typeof b?number:b instanceof color?rgb:(c=color(b))?(b=c,rgb):string)(a,b)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/attr.js
function attr_attrRemove(name){return function(){this.removeAttribute(name)}}function attr_attrRemoveNS(fullname){return function(){this.removeAttributeNS(fullname.space,fullname.local)}}function attr_attrConstant(name,interpolate,value1){var string00,interpolate0,string1=value1+"";return function(){var string0=this.getAttribute(name);return string0===string1?null:string0===string00?interpolate0:interpolate0=interpolate(string00=string0,value1)}}function attr_attrConstantNS(fullname,interpolate,value1){var string00,interpolate0,string1=value1+"";return function(){var string0=this.getAttributeNS(fullname.space,fullname.local);return string0===string1?null:string0===string00?interpolate0:interpolate0=interpolate(string00=string0,value1)}}function attr_attrFunction(name,interpolate,value){var string00,string10,interpolate0;return function(){var string0,string1,value1=value(this);if(null!=value1)return string0=this.getAttribute(name),string1=value1+"",string0===string1?null:string0===string00&&string1===string10?interpolate0:(string10=string1,interpolate0=interpolate(string00=string0,value1));this.removeAttribute(name)}}function attr_attrFunctionNS(fullname,interpolate,value){var string00,string10,interpolate0;return function(){var string0,string1,value1=value(this);if(null!=value1)return string0=this.getAttributeNS(fullname.space,fullname.local),string1=value1+"",string0===string1?null:string0===string00&&string1===string10?interpolate0:(string10=string1,interpolate0=interpolate(string00=string0,value1));this.removeAttributeNS(fullname.space,fullname.local)}}
/* harmony default export */function transition_attr(name,value){var fullname=namespace(name),i="transform"===fullname?interpolateTransformSvg:transition_interpolate;return this.attrTween(name,"function"===typeof value?(fullname.local?attr_attrFunctionNS:attr_attrFunction)(fullname,i,tweenValue(this,"attr."+name,value)):null==value?(fullname.local?attr_attrRemoveNS:attr_attrRemove)(fullname):(fullname.local?attr_attrConstantNS:attr_attrConstant)(fullname,i,value))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name,i){return function(t){this.setAttribute(name,i.call(this,t))}}function attrInterpolateNS(fullname,i){return function(t){this.setAttributeNS(fullname.space,fullname.local,i.call(this,t))}}function attrTweenNS(fullname,value){var t0,i0;function tween(){var i=value.apply(this,arguments);return i!==i0&&(t0=(i0=i)&&attrInterpolateNS(fullname,i)),t0}return tween._value=value,tween}function attrTween(name,value){var t0,i0;function tween(){var i=value.apply(this,arguments);return i!==i0&&(t0=(i0=i)&&attrInterpolate(name,i)),t0}return tween._value=value,tween}
/* harmony default export */function transition_attrTween(name,value){var key="attr."+name;if(arguments.length<2)return(key=this.tween(key))&&key._value;if(null==value)return this.tween(key,null);if("function"!==typeof value)throw new Error;var fullname=namespace(name);return this.tween(key,(fullname.local?attrTweenNS:attrTween)(fullname,value))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/delay.js
function delayFunction(id,value){return function(){init(this,id).delay=+value.apply(this,arguments)}}function delayConstant(id,value){return value=+value,function(){init(this,id).delay=value}
/* harmony default export */}function delay(value){var id=this._id;return arguments.length?this.each(("function"===typeof value?delayFunction:delayConstant)(id,value)):schedule_get(this.node(),id).delay}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/duration.js
function durationFunction(id,value){return function(){schedule_set(this,id).duration=+value.apply(this,arguments)}}function durationConstant(id,value){return value=+value,function(){schedule_set(this,id).duration=value}
/* harmony default export */}function duration(value){var id=this._id;return arguments.length?this.each(("function"===typeof value?durationFunction:durationConstant)(id,value)):schedule_get(this.node(),id).duration}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/ease.js
function easeConstant(id,value){if("function"!==typeof value)throw new Error;return function(){schedule_set(this,id).ease=value}}
/* harmony default export */function ease(value){var id=this._id;return arguments.length?this.each(easeConstant(id,value)):schedule_get(this.node(),id).ease}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id,value){return function(){var v=value.apply(this,arguments);if("function"!==typeof v)throw new Error;schedule_set(this,id).ease=v}}
/* harmony default export */function transition_easeVarying(value){if("function"!==typeof value)throw new Error;return this.each(easeVarying(this._id,value))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/filter.js
/* harmony default export */function transition_filter(match){"function"!==typeof match&&(match=matcher(match));for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j)for(var node,group=groups[j],n=group.length,subgroup=subgroups[j]=[],i=0;i<n;++i)(node=group[i])&&match.call(node,node.__data__,i,group)&&subgroup.push(node);return new Transition(subgroups,this._parents,this._name,this._id)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/merge.js
/* harmony default export */function transition_merge(transition){if(transition._id!==this._id)throw new Error;for(var groups0=this._groups,groups1=transition._groups,m0=groups0.length,m1=groups1.length,m=Math.min(m0,m1),merges=new Array(m0),j=0;j<m;++j)for(var node,group0=groups0[j],group1=groups1[j],n=group0.length,merge=merges[j]=new Array(n),i=0;i<n;++i)(node=group0[i]||group1[i])&&(merge[i]=node);for(;j<m0;++j)merges[j]=groups0[j];return new Transition(merges,this._parents,this._name,this._id)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/on.js
function start(name){return(name+"").trim().split(/^|\s+/).every((function(t){var i=t.indexOf(".");return i>=0&&(t=t.slice(0,i)),!t||"start"===t}))}function onFunction(id,name,listener){var on0,on1,sit=start(name)?init:schedule_set;return function(){var schedule=sit(this,id),on=schedule.on;
// If this node shared a dispatch with the previous node,
// just assign the updated shared dispatch and we’re done!
// Otherwise, copy-on-write.
on!==on0&&(on1=(on0=on).copy()).on(name,listener),schedule.on=on1}}
/* harmony default export */function transition_on(name,listener){var id=this._id;return arguments.length<2?schedule_get(this.node(),id).on.on(name):this.each(onFunction(id,name,listener))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/remove.js
function removeFunction(id){return function(){var parent=this.parentNode;for(var i in this.__transition)if(+i!==id)return;parent&&parent.removeChild(this)}}
/* harmony default export */function transition_remove(){return this.on("end.remove",removeFunction(this._id))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/select.js
/* harmony default export */function transition_select(select){var name=this._name,id=this._id;"function"!==typeof select&&(select=selector(select));for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j)for(var node,subnode,group=groups[j],n=group.length,subgroup=subgroups[j]=new Array(n),i=0;i<n;++i)(node=group[i])&&(subnode=select.call(node,node.__data__,i,group))&&("__data__"in node&&(subnode.__data__=node.__data__),subgroup[i]=subnode,schedule(subgroup[i],name,id,i,subgroup,schedule_get(node,id)));return new Transition(subgroups,this._parents,name,id)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/selectAll.js
/* harmony default export */function transition_selectAll(select){var name=this._name,id=this._id;"function"!==typeof select&&(select=selectorAll(select));for(var groups=this._groups,m=groups.length,subgroups=[],parents=[],j=0;j<m;++j)for(var node,group=groups[j],n=group.length,i=0;i<n;++i)if(node=group[i]){for(var child,children=select.call(node,node.__data__,i,group),inherit=schedule_get(node,id),k=0,l=children.length;k<l;++k)(child=children[k])&&schedule(child,name,id,k,children,inherit);subgroups.push(children),parents.push(node)}return new Transition(subgroups,parents,name,id)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/selection.js
var selection_Selection=src_selection.prototype.constructor;
/* harmony default export */function transition_selection(){return new selection_Selection(this._groups,this._parents)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/style.js
function styleNull(name,interpolate){var string00,string10,interpolate0;return function(){var string0=styleValue(this,name),string1=(this.style.removeProperty(name),styleValue(this,name));return string0===string1?null:string0===string00&&string1===string10?interpolate0:interpolate0=interpolate(string00=string0,string10=string1)}}function style_styleRemove(name){return function(){this.style.removeProperty(name)}}function style_styleConstant(name,interpolate,value1){var string00,interpolate0,string1=value1+"";return function(){var string0=styleValue(this,name);return string0===string1?null:string0===string00?interpolate0:interpolate0=interpolate(string00=string0,value1)}}function style_styleFunction(name,interpolate,value){var string00,string10,interpolate0;return function(){var string0=styleValue(this,name),value1=value(this),string1=value1+"";return null==value1&&(this.style.removeProperty(name),string1=value1=styleValue(this,name)),string0===string1?null:string0===string00&&string1===string10?interpolate0:(string10=string1,interpolate0=interpolate(string00=string0,value1))}}function styleMaybeRemove(id,name){var on0,on1,listener0,remove,key="style."+name,event="end."+key;return function(){var schedule=schedule_set(this,id),on=schedule.on,listener=null==schedule.value[key]?remove||(remove=style_styleRemove(name)):void 0;
// If this node shared a dispatch with the previous node,
// just assign the updated shared dispatch and we’re done!
// Otherwise, copy-on-write.
on===on0&&listener0===listener||(on1=(on0=on).copy()).on(event,listener0=listener),schedule.on=on1}}
/* harmony default export */function transition_style(name,value,priority){var i="transform"===(name+="")?interpolateTransformCss:transition_interpolate;return null==value?this.styleTween(name,styleNull(name,i)).on("end.style."+name,style_styleRemove(name)):"function"===typeof value?this.styleTween(name,style_styleFunction(name,i,tweenValue(this,"style."+name,value))).each(styleMaybeRemove(this._id,name)):this.styleTween(name,style_styleConstant(name,i,value),priority).on("end.style."+name,null)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name,i,priority){return function(t){this.style.setProperty(name,i.call(this,t),priority)}}function styleTween(name,value,priority){var t,i0;function tween(){var i=value.apply(this,arguments);return i!==i0&&(t=(i0=i)&&styleInterpolate(name,i,priority)),t}return tween._value=value,tween}
/* harmony default export */function transition_styleTween(name,value,priority){var key="style."+(name+="");if(arguments.length<2)return(key=this.tween(key))&&key._value;if(null==value)return this.tween(key,null);if("function"!==typeof value)throw new Error;return this.tween(key,styleTween(name,value,null==priority?"":priority))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/text.js
function text_textConstant(value){return function(){this.textContent=value}}function text_textFunction(value){return function(){var value1=value(this);this.textContent=null==value1?"":value1}}
/* harmony default export */function transition_text(value){return this.tween("text","function"===typeof value?text_textFunction(tweenValue(this,"text",value)):text_textConstant(null==value?"":value+""))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i){return function(t){this.textContent=i.call(this,t)}}function textTween(value){var t0,i0;function tween(){var i=value.apply(this,arguments);return i!==i0&&(t0=(i0=i)&&textInterpolate(i)),t0}return tween._value=value,tween}
/* harmony default export */function transition_textTween(value){var key="text";if(arguments.length<1)return(key=this.tween(key))&&key._value;if(null==value)return this.tween(key,null);if("function"!==typeof value)throw new Error;return this.tween(key,textTween(value))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/transition.js
/* harmony default export */function transition(){for(var name=this._name,id0=this._id,id1=newId(),groups=this._groups,m=groups.length,j=0;j<m;++j)for(var node,group=groups[j],n=group.length,i=0;i<n;++i)if(node=group[i]){var inherit=schedule_get(node,id0);schedule(node,name,id1,i,group,{time:inherit.time+inherit.delay+inherit.duration,delay:0,duration:inherit.duration,ease:inherit.ease})}return new Transition(groups,this._parents,name,id1)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/end.js
/* harmony default export */function end(){var on0,on1,that=this,id=that._id,size=that.size();return new Promise((function(resolve,reject){var cancel={value:reject},end={value:function(){0===--size&&resolve()}};that.each((function(){var schedule=schedule_set(this,id),on=schedule.on;
// If this node shared a dispatch with the previous node,
// just assign the updated shared dispatch and we’re done!
// Otherwise, copy-on-write.
on!==on0&&(on1=(on0=on).copy(),on1._.cancel.push(cancel),on1._.interrupt.push(cancel),on1._.end.push(end)),schedule.on=on1})),
// The selection was empty, resolve end immediately
0===size&&resolve()}))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/transition/index.js
var id=0;function Transition(groups,parents,name,id){this._groups=groups,this._parents=parents,this._name=name,this._id=id}function transition_transition(name){return src_selection().transition(name)}function newId(){return++id}var selection_prototype=src_selection.prototype;function cubicInOut(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}Transition.prototype=transition_transition.prototype={constructor:Transition,select:transition_select,selectAll:transition_selectAll,selectChild:selection_prototype.selectChild,selectChildren:selection_prototype.selectChildren,filter:transition_filter,merge:transition_merge,selection:transition_selection,transition:transition,call:selection_prototype.call,nodes:selection_prototype.nodes,node:selection_prototype.node,size:selection_prototype.size,empty:selection_prototype.empty,each:selection_prototype.each,on:transition_on,attr:transition_attr,attrTween:transition_attrTween,style:transition_style,styleTween:transition_styleTween,text:transition_text,textTween:transition_textTween,remove:transition_remove,tween:tween,delay:delay,duration:duration,ease:ease,easeVarying:transition_easeVarying,end:end,[Symbol.iterator]:selection_prototype[Symbol.iterator]};// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/selection/transition.js
var defaultTiming={time:null,// Set on use.
delay:0,duration:250,ease:cubicInOut};function inherit(node,id){var timing;while(!(timing=node.__transition)||!(timing=timing[id]))if(!(node=node.parentNode))throw new Error(`transition ${id} not found`);return timing}
/* harmony default export */function selection_transition(name){var id,timing;name instanceof Transition?(id=name._id,name=name._name):(id=newId(),(timing=defaultTiming).time=now(),name=null==name?null:name+"");for(var groups=this._groups,m=groups.length,j=0;j<m;++j)for(var node,group=groups[j],n=group.length,i=0;i<n;++i)(node=group[i])&&schedule(node,name,id,i,group,timing||inherit(node,id));return new Transition(groups,this._parents,name,id)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-transition/src/selection/index.js
src_selection.prototype.interrupt=selection_interrupt,src_selection.prototype.transition=selection_transition;const{abs:abs,max:max,min:min}=Math;function number1(e){return[+e[0],+e[1]]}function number2(e){return[number1(e[0]),number1(e[1])]}["w","e"].map(type),["n","s"].map(type),["n","w","e","s","nw","ne","sw","se"].map(type);function type(t){return{type:t}}
// Ignore right-click, since that should open the context menu.
// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-array/src/ticks.js
const e10=Math.sqrt(50),e5=Math.sqrt(10),e2=Math.sqrt(2);function tickSpec(start,stop,count){const step=(stop-start)/Math.max(0,count),power=Math.floor(Math.log10(step)),error=step/Math.pow(10,power),factor=error>=e10?10:error>=e5?5:error>=e2?2:1;let i1,i2,inc;return power<0?(inc=Math.pow(10,-power)/factor,i1=Math.round(start*inc),i2=Math.round(stop*inc),i1/inc<start&&++i1,i2/inc>stop&&--i2,inc=-inc):(inc=Math.pow(10,power)*factor,i1=Math.round(start/inc),i2=Math.round(stop/inc),i1*inc<start&&++i1,i2*inc>stop&&--i2),i2<i1&&.5<=count&&count<2?tickSpec(start,stop,2*count):[i1,i2,inc]}function ticks(start,stop,count){if(stop=+stop,start=+start,count=+count,!(count>0))return[];if(start===stop)return[start];const reverse=stop<start,[i1,i2,inc]=reverse?tickSpec(stop,start,count):tickSpec(start,stop,count);if(!(i2>=i1))return[];const n=i2-i1+1,ticks=new Array(n);if(reverse)if(inc<0)for(let i=0;i<n;++i)ticks[i]=(i2-i)/-inc;else for(let i=0;i<n;++i)ticks[i]=(i2-i)*inc;else if(inc<0)for(let i=0;i<n;++i)ticks[i]=(i1+i)/-inc;else for(let i=0;i<n;++i)ticks[i]=(i1+i)*inc;return ticks}function tickIncrement(start,stop,count){return stop=+stop,start=+start,count=+count,tickSpec(start,stop,count)[2]}function tickStep(start,stop,count){stop=+stop,start=+start,count=+count;const reverse=stop<start,inc=reverse?tickIncrement(stop,start,count):tickIncrement(start,stop,count);return(reverse?-1:1)*(inc<0?1/-inc:inc)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-array/src/ascending.js
function ascending_ascending(a,b){return null==a||null==b?NaN:a<b?-1:a>b?1:a>=b?0:NaN}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-array/src/descending.js
function descending(a,b){return null==a||null==b?NaN:b<a?-1:b>a?1:b>=a?0:NaN}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-array/src/bisector.js
function bisector(f){let compare1,compare2,delta;
// If an accessor is specified, promote it to a comparator. In this case we
// can test whether the search value is (self-) comparable. We can’t do this
// for a comparator (except for specific, known comparators) because we can’t
// tell if the comparator is symmetric, and an asymmetric comparator can’t be
// used to test whether a single value is comparable.
function left(a,x,lo=0,hi=a.length){if(lo<hi){if(0!==compare1(x,x))return hi;do{const mid=lo+hi>>>1;compare2(a[mid],x)<0?lo=mid+1:hi=mid}while(lo<hi)}return lo}function right(a,x,lo=0,hi=a.length){if(lo<hi){if(0!==compare1(x,x))return hi;do{const mid=lo+hi>>>1;compare2(a[mid],x)<=0?lo=mid+1:hi=mid}while(lo<hi)}return lo}function center(a,x,lo=0,hi=a.length){const i=left(a,x,lo,hi-1);return i>lo&&delta(a[i-1],x)>-delta(a[i],x)?i-1:i}return 2!==f.length?(compare1=ascending_ascending,compare2=(d,x)=>ascending_ascending(f(d),x),delta=(d,x)=>f(d)-x):(compare1=f===ascending_ascending||f===descending?f:bisector_zero,compare2=f,delta=f),{left:left,center:center,right:right}}function bisector_zero(){return 0}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-array/src/number.js
function number_number(x){return null===x?NaN:+x}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-array/src/bisect.js
const ascendingBisect=bisector(ascending_ascending),bisectRight=ascendingBisect.right;ascendingBisect.left,bisector(number_number).center;
/* harmony default export */var bisect=bisectRight;function genericArray(a,b){var i,nb=b?b.length:0,na=a?Math.min(nb,a.length):0,x=new Array(na),c=new Array(nb);for(i=0;i<na;++i)x[i]=value(a[i],b[i]);for(;i<nb;++i)c[i]=b[i];return function(t){for(i=0;i<na;++i)c[i]=x[i](t);return c}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/date.js
/* harmony default export */function date(a,b){var d=new Date;return a=+a,b=+b,function(t){return d.setTime(a*(1-t)+b*t),d}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/object.js
/* harmony default export */function object(a,b){var k,i={},c={};for(k in null!==a&&"object"===typeof a||(a={}),null!==b&&"object"===typeof b||(b={}),b)k in a?i[k]=value(a[k],b[k]):c[k]=b[k];return function(t){for(k in i)c[k]=i[k](t);return c}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/numberArray.js
/* harmony default export */function src_numberArray(a,b){b||(b=[]);var i,n=a?Math.min(b.length,a.length):0,c=b.slice();return function(t){for(i=0;i<n;++i)c[i]=a[i]*(1-t)+b[i]*t;return c}}function numberArray_isNumberArray(x){return ArrayBuffer.isView(x)&&!(x instanceof DataView)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/value.js
/* harmony default export */function value(a,b){var c,t=typeof b;return null==b||"boolean"===t?d3_interpolate_src_constant(b):("number"===t?number:"string"===t?(c=color(b))?(b=c,rgb):string:b instanceof color?rgb:b instanceof Date?date:numberArray_isNumberArray(b)?src_numberArray:Array.isArray(b)?genericArray:"function"!==typeof b.valueOf&&"function"!==typeof b.toString||isNaN(b)?object:number)(a,b)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-interpolate/src/round.js
/* harmony default export */function round(a,b){return a=+a,b=+b,function(t){return Math.round(a*(1-t)+b*t)}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-scale/src/constant.js
function constants(x){return function(){return x}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-scale/src/number.js
function src_number_number(x){return+x}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-scale/src/continuous.js
var unit=[0,1];function continuous_identity(x){return x}function normalize(a,b){return(b-=a=+a)?function(x){return(x-a)/b}:constants(isNaN(b)?NaN:.5)}function clamper(a,b){var t;return a>b&&(t=a,a=b,b=t),function(x){return Math.max(a,Math.min(b,x))}}
// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain,range,interpolate){var d0=domain[0],d1=domain[1],r0=range[0],r1=range[1];return d1<d0?(d0=normalize(d1,d0),r0=interpolate(r1,r0)):(d0=normalize(d0,d1),r0=interpolate(r0,r1)),function(x){return r0(d0(x))}}function polymap(domain,range,interpolate){var j=Math.min(domain.length,range.length)-1,d=new Array(j),r=new Array(j),i=-1;
// Reverse descending domains.
domain[j]<domain[0]&&(domain=domain.slice().reverse(),range=range.slice().reverse());while(++i<j)d[i]=normalize(domain[i],domain[i+1]),r[i]=interpolate(range[i],range[i+1]);return function(x){var i=bisect(domain,x,1,j)-1;return r[i](d[i](x))}}function copy(source,target){return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown())}function transformer(){var transform,untransform,unknown,piecewise,output,input,domain=unit,range=unit,interpolate=value,clamp=continuous_identity;function rescale(){var n=Math.min(domain.length,range.length);return clamp!==continuous_identity&&(clamp=clamper(domain[0],domain[n-1])),piecewise=n>2?polymap:bimap,output=input=null,scale}function scale(x){return null==x||isNaN(x=+x)?unknown:(output||(output=piecewise(domain.map(transform),range,interpolate)))(transform(clamp(x)))}return scale.invert=function(y){return clamp(untransform((input||(input=piecewise(range,domain.map(transform),number)))(y)))},scale.domain=function(_){return arguments.length?(domain=Array.from(_,src_number_number),rescale()):domain.slice()},scale.range=function(_){return arguments.length?(range=Array.from(_),rescale()):range.slice()},scale.rangeRound=function(_){return range=Array.from(_),interpolate=round,rescale()},scale.clamp=function(_){return arguments.length?(clamp=!!_||continuous_identity,rescale()):clamp!==continuous_identity},scale.interpolate=function(_){return arguments.length?(interpolate=_,rescale()):interpolate},scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown},function(t,u){return transform=t,untransform=u,rescale()}}function continuous(){return transformer()(continuous_identity,continuous_identity)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-scale/src/init.js
function initRange(domain,range){switch(arguments.length){case 0:break;case 1:this.range(domain);break;default:this.range(range).domain(domain);break}return this}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/formatSpecifier.js
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var prefixExponent,re=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function formatSpecifier(specifier){if(!(match=re.exec(specifier)))throw new Error("invalid format: "+specifier);var match;return new FormatSpecifier({fill:match[1],align:match[2],sign:match[3],symbol:match[4],zero:match[5],width:match[6],comma:match[7],precision:match[8]&&match[8].slice(1),trim:match[9],type:match[10]})}// instanceof
function FormatSpecifier(specifier){this.fill=void 0===specifier.fill?" ":specifier.fill+"",this.align=void 0===specifier.align?">":specifier.align+"",this.sign=void 0===specifier.sign?"-":specifier.sign+"",this.symbol=void 0===specifier.symbol?"":specifier.symbol+"",this.zero=!!specifier.zero,this.width=void 0===specifier.width?void 0:+specifier.width,this.comma=!!specifier.comma,this.precision=void 0===specifier.precision?void 0:+specifier.precision,this.trim=!!specifier.trim,this.type=void 0===specifier.type?"":specifier.type+""}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/formatDecimal.js
/* harmony default export */function formatDecimal(x){return Math.abs(x=Math.round(x))>=1e21?x.toLocaleString("en").replace(/,/g,""):x.toString(10)}
// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
function formatDecimalParts(x,p){if((i=(x=p?x.toExponential(p-1):x.toExponential()).indexOf("e"))<0)return null;// NaN, ±Infinity
var i,coefficient=x.slice(0,i);
// The string returned by toExponential either has the form \d\.\d+e[-+]\d+
// (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
return[coefficient.length>1?coefficient[0]+coefficient.slice(2):coefficient,+x.slice(i+1)]}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/exponent.js
/* harmony default export */function exponent(x){return x=formatDecimalParts(Math.abs(x)),x?x[1]:NaN}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/precisionPrefix.js
/* harmony default export */function precisionPrefix(step,value){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(exponent(value)/3)))-exponent(Math.abs(step)))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/formatGroup.js
/* harmony default export */function formatGroup(grouping,thousands){return function(value,width){var i=value.length,t=[],j=0,g=grouping[0],length=0;while(i>0&&g>0){if(length+g+1>width&&(g=Math.max(1,width-length)),t.push(value.substring(i-=g,i+g)),(length+=g+1)>width)break;g=grouping[j=(j+1)%grouping.length]}return t.reverse().join(thousands)}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/formatNumerals.js
/* harmony default export */function formatNumerals(numerals){return function(value){return value.replace(/[0-9]/g,(function(i){return numerals[+i]}))}}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/formatTrim.js
// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
/* harmony default export */function formatTrim(s){out:for(var i1,n=s.length,i=1,i0=-1;i<n;++i)switch(s[i]){case".":i0=i1=i;break;case"0":0===i0&&(i0=i),i1=i;break;default:if(!+s[i])break out;i0>0&&(i0=0);break}return i0>0?s.slice(0,i0)+s.slice(i1+1):s}
/* harmony default export */function formatPrefixAuto(x,p){var d=formatDecimalParts(x,p);if(!d)return x+"";var coefficient=d[0],exponent=d[1],i=exponent-(prefixExponent=3*Math.max(-8,Math.min(8,Math.floor(exponent/3))))+1,n=coefficient.length;return i===n?coefficient:i>n?coefficient+new Array(i-n+1).join("0"):i>0?coefficient.slice(0,i)+"."+coefficient.slice(i):"0."+new Array(1-i).join("0")+formatDecimalParts(x,Math.max(0,p+i-1))[0];// less than 1y!
}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/formatRounded.js
/* harmony default export */function formatRounded(x,p){var d=formatDecimalParts(x,p);if(!d)return x+"";var coefficient=d[0],exponent=d[1];return exponent<0?"0."+new Array(-exponent).join("0")+coefficient:coefficient.length>exponent+1?coefficient.slice(0,exponent+1)+"."+coefficient.slice(exponent+1):coefficient+new Array(exponent-coefficient.length+2).join("0")}formatSpecifier.prototype=FormatSpecifier.prototype,FormatSpecifier.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/formatTypes.js
/* harmony default export */var formatTypes={"%":(x,p)=>(100*x).toFixed(p),b:x=>Math.round(x).toString(2),c:x=>x+"",d:formatDecimal,e:(x,p)=>x.toExponential(p),f:(x,p)=>x.toFixed(p),g:(x,p)=>x.toPrecision(p),o:x=>Math.round(x).toString(8),p:(x,p)=>formatRounded(100*x,p),r:formatRounded,s:formatPrefixAuto,X:x=>Math.round(x).toString(16).toUpperCase(),x:x=>Math.round(x).toString(16)};// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/identity.js
/* harmony default export */function src_identity(x){return x}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/locale.js
var defaultLocale_locale,format,formatPrefix,map=Array.prototype.map,prefixes=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];
/* harmony default export */function locale(locale){var group=void 0===locale.grouping||void 0===locale.thousands?src_identity:formatGroup(map.call(locale.grouping,Number),locale.thousands+""),currencyPrefix=void 0===locale.currency?"":locale.currency[0]+"",currencySuffix=void 0===locale.currency?"":locale.currency[1]+"",decimal=void 0===locale.decimal?".":locale.decimal+"",numerals=void 0===locale.numerals?src_identity:formatNumerals(map.call(locale.numerals,String)),percent=void 0===locale.percent?"%":locale.percent+"",minus=void 0===locale.minus?"−":locale.minus+"",nan=void 0===locale.nan?"NaN":locale.nan+"";function newFormat(specifier){specifier=formatSpecifier(specifier);var fill=specifier.fill,align=specifier.align,sign=specifier.sign,symbol=specifier.symbol,zero=specifier.zero,width=specifier.width,comma=specifier.comma,precision=specifier.precision,trim=specifier.trim,type=specifier.type;
// The "n" type is an alias for ",g".
"n"===type?(comma=!0,type="g"):formatTypes[type]||(void 0===precision&&(precision=12),trim=!0,type="g"),
// If zero fill is specified, padding goes after sign and before digits.
(zero||"0"===fill&&"="===align)&&(zero=!0,fill="0",align="=");
// Compute the prefix and suffix.
// For SI-prefix, the suffix is lazily computed.
var prefix="$"===symbol?currencyPrefix:"#"===symbol&&/[boxX]/.test(type)?"0"+type.toLowerCase():"",suffix="$"===symbol?currencySuffix:/[%p]/.test(type)?percent:"",formatType=formatTypes[type],maybeSuffix=/[defgprs%]/.test(type);
// What format function should we use?
// Is this an integer type?
// Can this type generate exponential notation?
function format(value){var i,n,c,valuePrefix=prefix,valueSuffix=suffix;if("c"===type)valueSuffix=formatType(value)+valueSuffix,value="";else{value=+value;
// Determine the sign. -0 is not less than 0, but 1 / -0 is!
var valueNegative=value<0||1/value<0;
// Perform the initial formatting.
// Break the formatted value into the integer “value” part that can be
// grouped, and fractional or exponential “suffix” part that is not.
if(value=isNaN(value)?nan:formatType(Math.abs(value),precision),
// Trim insignificant zeros.
trim&&(value=formatTrim(value)),
// If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
valueNegative&&0===+value&&"+"!==sign&&(valueNegative=!1),
// Compute the prefix and suffix.
valuePrefix=(valueNegative?"("===sign?sign:minus:"-"===sign||"("===sign?"":sign)+valuePrefix,valueSuffix=("s"===type?prefixes[8+prefixExponent/3]:"")+valueSuffix+(valueNegative&&"("===sign?")":""),maybeSuffix){i=-1,n=value.length;while(++i<n)if(c=value.charCodeAt(i),48>c||c>57){valueSuffix=(46===c?decimal+value.slice(i+1):value.slice(i))+valueSuffix,value=value.slice(0,i);break}}}
// If the fill character is not "0", grouping is applied before padding.
comma&&!zero&&(value=group(value,1/0));
// Compute the padding.
var length=valuePrefix.length+value.length+valueSuffix.length,padding=length<width?new Array(width-length+1).join(fill):"";
// If the fill character is "0", grouping is applied after padding.
// Reconstruct the final output based on the desired alignment.
switch(comma&&zero&&(value=group(padding+value,padding.length?width-valueSuffix.length:1/0),padding=""),align){case"<":value=valuePrefix+value+valueSuffix+padding;break;case"=":value=valuePrefix+padding+value+valueSuffix;break;case"^":value=padding.slice(0,length=padding.length>>1)+valuePrefix+value+valueSuffix+padding.slice(length);break;default:value=padding+valuePrefix+value+valueSuffix;break}return numerals(value)}
// Set the default precision if not specified,
// or clamp the specified precision to the supported range.
// For significant precision, it must be in [1, 21].
// For fixed precision, it must be in [0, 20].
return precision=void 0===precision?6:/[gprs]/.test(type)?Math.max(1,Math.min(21,precision)):Math.max(0,Math.min(20,precision)),format.toString=function(){return specifier+""},format}function formatPrefix(specifier,value){var f=newFormat((specifier=formatSpecifier(specifier),specifier.type="f",specifier)),e=3*Math.max(-8,Math.min(8,Math.floor(exponent(value)/3))),k=Math.pow(10,-e),prefix=prefixes[8+e/3];return function(value){return f(k*value)+prefix}}return{format:newFormat,formatPrefix:formatPrefix}}function defaultLocale(definition){return defaultLocale_locale=locale(definition),format=defaultLocale_locale.format,formatPrefix=defaultLocale_locale.formatPrefix,defaultLocale_locale}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/precisionRound.js
/* harmony default export */function precisionRound(step,max){return step=Math.abs(step),max=Math.abs(max)-step,Math.max(0,exponent(max)-exponent(step))+1}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-format/src/precisionFixed.js
/* harmony default export */function precisionFixed(step){return Math.max(0,-exponent(Math.abs(step)))}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-scale/src/tickFormat.js
function tickFormat(start,stop,count,specifier){var precision,step=tickStep(start,stop,count);switch(specifier=formatSpecifier(null==specifier?",f":specifier),specifier.type){case"s":var value=Math.max(Math.abs(start),Math.abs(stop));return null!=specifier.precision||isNaN(precision=precisionPrefix(step,value))||(specifier.precision=precision),formatPrefix(specifier,value);case"":case"e":case"g":case"p":case"r":null!=specifier.precision||isNaN(precision=precisionRound(step,Math.max(Math.abs(start),Math.abs(stop))))||(specifier.precision=precision-("e"===specifier.type));break;case"f":case"%":null!=specifier.precision||isNaN(precision=precisionFixed(step))||(specifier.precision=precision-2*("%"===specifier.type));break}return format(specifier)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-scale/src/linear.js
function linearish(scale){var domain=scale.domain;return scale.ticks=function(count){var d=domain();return ticks(d[0],d[d.length-1],null==count?10:count)},scale.tickFormat=function(count,specifier){var d=domain();return tickFormat(d[0],d[d.length-1],null==count?10:count,specifier)},scale.nice=function(count){null==count&&(count=10);var prestep,step,d=domain(),i0=0,i1=d.length-1,start=d[i0],stop=d[i1],maxIter=10;stop<start&&(step=start,start=stop,stop=step,step=i0,i0=i1,i1=step);while(maxIter-- >0){if(step=tickIncrement(start,stop,count),step===prestep)return d[i0]=start,d[i1]=stop,domain(d);if(step>0)start=Math.floor(start/step)*step,stop=Math.ceil(stop/step)*step;else{if(!(step<0))break;start=Math.ceil(start*step)/step,stop=Math.floor(stop*step)/step}prestep=step}return scale},scale}function linear_linear(){var scale=continuous();return scale.copy=function(){return copy(scale,linear_linear())},initRange.apply(scale,arguments),linearish(scale)}// CONCATENATED MODULE: ./node_modules/@facilio/charts/node_modules/d3-zoom/src/transform.js
function transform_Transform(k,x,y){this.k=k,this.x=x,this.y=y}defaultLocale({thousands:",",grouping:[3],currency:["$",""]}),transform_Transform.prototype={constructor:transform_Transform,scale:function(k){return 1===k?this:new transform_Transform(this.k*k,this.x,this.y)},translate:function(x,y){return 0===x&0===y?this:new transform_Transform(this.k,this.x+this.k*x,this.y+this.k*y)},apply:function(point){return[point[0]*this.k+this.x,point[1]*this.k+this.y]},applyX:function(x){return x*this.k+this.x},applyY:function(y){return y*this.k+this.y},invert:function(location){return[(location[0]-this.x)/this.k,(location[1]-this.y)/this.k]},invertX:function(x){return(x-this.x)/this.k},invertY:function(y){return(y-this.y)/this.k},rescaleX:function(x){return x.copy().domain(x.range().map(this.invertX,this).map(x.invert,x))},rescaleY:function(y){return y.copy().domain(y.range().map(this.invertY,this).map(y.invert,y))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var transform_identity=new transform_Transform(1,0,0);function transform(node){while(!node.__zoom)if(!(node=node.parentNode))return transform_identity;return node.__zoom}transform.prototype=transform_Transform.prototype}}]);
//# sourceMappingURL=http://localhost:5050/sourcemaps/js/chunk-common-2c5a8e32.js.map
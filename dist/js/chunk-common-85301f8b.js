"use strict";(self["webpackChunkfacilio_web"]=self["webpackChunkfacilio_web"]||[]).push([[44178],{
/***/361329:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */OY:function(){/* binding */return ReplaceCommandThatSelectsText},
/* harmony export */Sj:function(){/* binding */return ReplaceCommandWithoutChangingPosition},
/* harmony export */T4:function(){/* binding */return ReplaceCommand},
/* harmony export */Uo:function(){/* binding */return ReplaceCommandWithOffsetCursorState},
/* harmony export */hP:function(){/* binding */return ReplaceCommandThatPreservesSelection}
/* harmony export */});
/* harmony import */var _core_selection_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(203860);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/class ReplaceCommand{constructor(range,text,insertsAutoWhitespace=!1){this._range=range,this._text=text,this.insertsAutoWhitespace=insertsAutoWhitespace}getEditOperations(model,builder){builder.addTrackedEditOperation(this._range,this._text)}computeCursorState(model,helper){let inverseEditOperations=helper.getInverseEditOperations(),srcRange=inverseEditOperations[0].range;return new _core_selection_js__WEBPACK_IMPORTED_MODULE_0__/* .Selection */.Y(srcRange.endLineNumber,srcRange.endColumn,srcRange.endLineNumber,srcRange.endColumn)}}class ReplaceCommandThatSelectsText{constructor(range,text){this._range=range,this._text=text}getEditOperations(model,builder){builder.addTrackedEditOperation(this._range,this._text)}computeCursorState(model,helper){const inverseEditOperations=helper.getInverseEditOperations(),srcRange=inverseEditOperations[0].range;return new _core_selection_js__WEBPACK_IMPORTED_MODULE_0__/* .Selection */.Y(srcRange.startLineNumber,srcRange.startColumn,srcRange.endLineNumber,srcRange.endColumn)}}class ReplaceCommandWithoutChangingPosition{constructor(range,text,insertsAutoWhitespace=!1){this._range=range,this._text=text,this.insertsAutoWhitespace=insertsAutoWhitespace}getEditOperations(model,builder){builder.addTrackedEditOperation(this._range,this._text)}computeCursorState(model,helper){let inverseEditOperations=helper.getInverseEditOperations(),srcRange=inverseEditOperations[0].range;return new _core_selection_js__WEBPACK_IMPORTED_MODULE_0__/* .Selection */.Y(srcRange.startLineNumber,srcRange.startColumn,srcRange.startLineNumber,srcRange.startColumn)}}class ReplaceCommandWithOffsetCursorState{constructor(range,text,lineNumberDeltaOffset,columnDeltaOffset,insertsAutoWhitespace=!1){this._range=range,this._text=text,this._columnDeltaOffset=columnDeltaOffset,this._lineNumberDeltaOffset=lineNumberDeltaOffset,this.insertsAutoWhitespace=insertsAutoWhitespace}getEditOperations(model,builder){builder.addTrackedEditOperation(this._range,this._text)}computeCursorState(model,helper){let inverseEditOperations=helper.getInverseEditOperations(),srcRange=inverseEditOperations[0].range;return new _core_selection_js__WEBPACK_IMPORTED_MODULE_0__/* .Selection */.Y(srcRange.endLineNumber+this._lineNumberDeltaOffset,srcRange.endColumn+this._columnDeltaOffset,srcRange.endLineNumber+this._lineNumberDeltaOffset,srcRange.endColumn+this._columnDeltaOffset)}}class ReplaceCommandThatPreservesSelection{constructor(editRange,text,initialSelection,forceMoveMarkers=!1){this._range=editRange,this._text=text,this._initialSelection=initialSelection,this._forceMoveMarkers=forceMoveMarkers,this._selectionId=null}getEditOperations(model,builder){builder.addTrackedEditOperation(this._range,this._text,this._forceMoveMarkers),this._selectionId=builder.trackSelection(this._initialSelection)}computeCursorState(model,helper){return helper.getTrackedSelection(this._selectionId)}}
/***/},
/***/210291:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */U:function(){/* binding */return ShiftCommand}
/* harmony export */});
/* unused harmony export cachedStringRepeat */
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295),_controller_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(533181),_core_range_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(624314),_core_selection_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(203860),_modes_languageConfigurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(594660);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const repeatCache=Object.create(null);function cachedStringRepeat(str,count){if(count<=0)return"";repeatCache[str]||(repeatCache[str]=["",str]);const cache=repeatCache[str];for(let i=cache.length;i<=count;i++)cache[i]=cache[i-1]+str;return cache[count]}class ShiftCommand{constructor(range,opts){this._opts=opts,this._selection=range,this._selectionId=null,this._useLastEditRangeForCursorEndPosition=!1,this._selectionStartColumnStaysPut=!1}static unshiftIndent(line,column,tabSize,indentSize,insertSpaces){
// Determine the visible column where the content starts
const contentStartVisibleColumn=_controller_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .CursorColumns */.io.visibleColumnFromColumn(line,column,tabSize);if(insertSpaces){const indent=cachedStringRepeat(" ",indentSize),desiredTabStop=_controller_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .CursorColumns */.io.prevIndentTabStop(contentStartVisibleColumn,indentSize),indentCount=desiredTabStop/indentSize;// will be an integer
return cachedStringRepeat(indent,indentCount)}{const indent="\t",desiredTabStop=_controller_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .CursorColumns */.io.prevRenderTabStop(contentStartVisibleColumn,tabSize),indentCount=desiredTabStop/tabSize;// will be an integer
return cachedStringRepeat(indent,indentCount)}}static shiftIndent(line,column,tabSize,indentSize,insertSpaces){
// Determine the visible column where the content starts
const contentStartVisibleColumn=_controller_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .CursorColumns */.io.visibleColumnFromColumn(line,column,tabSize);if(insertSpaces){const indent=cachedStringRepeat(" ",indentSize),desiredTabStop=_controller_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .CursorColumns */.io.nextIndentTabStop(contentStartVisibleColumn,indentSize),indentCount=desiredTabStop/indentSize;// will be an integer
return cachedStringRepeat(indent,indentCount)}{const indent="\t",desiredTabStop=_controller_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .CursorColumns */.io.nextRenderTabStop(contentStartVisibleColumn,tabSize),indentCount=desiredTabStop/tabSize;// will be an integer
return cachedStringRepeat(indent,indentCount)}}_addEditOperation(builder,range,text){this._useLastEditRangeForCursorEndPosition?builder.addTrackedEditOperation(range,text):builder.addEditOperation(range,text)}getEditOperations(model,builder){const startLine=this._selection.startLineNumber;let endLine=this._selection.endLineNumber;1===this._selection.endColumn&&startLine!==endLine&&(endLine-=1);const{tabSize:tabSize,indentSize:indentSize,insertSpaces:insertSpaces}=this._opts,shouldIndentEmptyLines=startLine===endLine;if(this._opts.useTabStops){
// if indenting or outdenting on a whitespace only line
this._selection.isEmpty()&&/^\s*$/.test(model.getLineContent(startLine))&&(this._useLastEditRangeForCursorEndPosition=!0);
// keep track of previous line's "miss-alignment"
let previousLineExtraSpaces=0,extraSpaces=0;for(let lineNumber=startLine;lineNumber<=endLine;lineNumber++,previousLineExtraSpaces=extraSpaces){extraSpaces=0;let desiredIndent,lineText=model.getLineContent(lineNumber),indentationEndIndex=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .firstNonWhitespaceIndex */.LC(lineText);if((!this._opts.isUnshift||0!==lineText.length&&0!==indentationEndIndex)&&(shouldIndentEmptyLines||this._opts.isUnshift||0!==lineText.length)){if(-1===indentationEndIndex&&(
// the entire line is whitespace
indentationEndIndex=lineText.length),lineNumber>1){let contentStartVisibleColumn=_controller_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .CursorColumns */.io.visibleColumnFromColumn(lineText,indentationEndIndex+1,tabSize);if(contentStartVisibleColumn%indentSize!==0&&model.isCheapToTokenize(lineNumber-1)){let enterAction=_modes_languageConfigurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__/* .LanguageConfigurationRegistry */.zu.getEnterAction(this._opts.autoIndent,model,new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(lineNumber-1,model.getLineMaxColumn(lineNumber-1),lineNumber-1,model.getLineMaxColumn(lineNumber-1)));if(enterAction){if(extraSpaces=previousLineExtraSpaces,enterAction.appendText)for(let j=0,lenJ=enterAction.appendText.length;j<lenJ&&extraSpaces<indentSize;j++){if(32/* Space */!==enterAction.appendText.charCodeAt(j))break;extraSpaces++}enterAction.removeText&&(extraSpaces=Math.max(0,extraSpaces-enterAction.removeText));
// Act as if `prefixSpaces` is not part of the indentation
for(let j=0;j<extraSpaces;j++){if(0===indentationEndIndex||32/* Space */!==lineText.charCodeAt(indentationEndIndex-1))break;indentationEndIndex--}}}}this._opts.isUnshift&&0===indentationEndIndex||(desiredIndent=this._opts.isUnshift?ShiftCommand.unshiftIndent(lineText,indentationEndIndex+1,tabSize,indentSize,insertSpaces):ShiftCommand.shiftIndent(lineText,indentationEndIndex+1,tabSize,indentSize,insertSpaces),this._addEditOperation(builder,new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(lineNumber,1,lineNumber,indentationEndIndex+1),desiredIndent),lineNumber!==startLine||this._selection.isEmpty()||(
// Force the startColumn to stay put because we're inserting after it
this._selectionStartColumnStaysPut=this._selection.startColumn<=indentationEndIndex+1))}}}else{
// if indenting or outdenting on a whitespace only line
!this._opts.isUnshift&&this._selection.isEmpty()&&0===model.getLineLength(startLine)&&(this._useLastEditRangeForCursorEndPosition=!0);const oneIndent=insertSpaces?cachedStringRepeat(" ",indentSize):"\t";for(let lineNumber=startLine;lineNumber<=endLine;lineNumber++){const lineText=model.getLineContent(lineNumber);let indentationEndIndex=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .firstNonWhitespaceIndex */.LC(lineText);if((!this._opts.isUnshift||0!==lineText.length&&0!==indentationEndIndex)&&((shouldIndentEmptyLines||this._opts.isUnshift||0!==lineText.length)&&(-1===indentationEndIndex&&(
// the entire line is whitespace
indentationEndIndex=lineText.length),!this._opts.isUnshift||0!==indentationEndIndex)))if(this._opts.isUnshift){indentationEndIndex=Math.min(indentationEndIndex,indentSize);for(let i=0;i<indentationEndIndex;i++){const chr=lineText.charCodeAt(i);if(9/* Tab */===chr){indentationEndIndex=i+1;break}}this._addEditOperation(builder,new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(lineNumber,1,lineNumber,indentationEndIndex+1),"")}else this._addEditOperation(builder,new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(lineNumber,1,lineNumber,1),oneIndent),lineNumber!==startLine||this._selection.isEmpty()||(
// Force the startColumn to stay put because we're inserting after it
this._selectionStartColumnStaysPut=1===this._selection.startColumn)}}this._selectionId=builder.trackSelection(this._selection)}computeCursorState(model,helper){if(this._useLastEditRangeForCursorEndPosition){let lastOp=helper.getInverseEditOperations()[0];return new _core_selection_js__WEBPACK_IMPORTED_MODULE_4__/* .Selection */.Y(lastOp.range.endLineNumber,lastOp.range.endColumn,lastOp.range.endLineNumber,lastOp.range.endColumn)}const result=helper.getTrackedSelection(this._selectionId);if(this._selectionStartColumnStaysPut){
// The selection start should not move
let initialStartColumn=this._selection.startColumn,resultStartColumn=result.startColumn;return resultStartColumn<=initialStartColumn?result:0/* LTR */===result.getDirection()?new _core_selection_js__WEBPACK_IMPORTED_MODULE_4__/* .Selection */.Y(result.startLineNumber,initialStartColumn,result.endLineNumber,result.endColumn):new _core_selection_js__WEBPACK_IMPORTED_MODULE_4__/* .Selection */.Y(result.endLineNumber,result.endColumn,result.startLineNumber,initialStartColumn)}return result}}
/***/},
/***/760631:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */V:function(){/* binding */return TrimTrailingWhitespaceCommand}
/* harmony export */});
/* unused harmony export trimTrailingWhitespace */
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295),_core_editOperation_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(969386),_core_range_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(624314);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class TrimTrailingWhitespaceCommand{constructor(selection,cursors){this._selection=selection,this._cursors=cursors,this._selectionId=null}getEditOperations(model,builder){let ops=trimTrailingWhitespace(model,this._cursors);for(let i=0,len=ops.length;i<len;i++){let op=ops[i];builder.addEditOperation(op.range,op.text)}this._selectionId=builder.trackSelection(this._selection)}computeCursorState(model,helper){return helper.getTrackedSelection(this._selectionId)}}
/**
 * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.
 */function trimTrailingWhitespace(model,cursors){
// Sort cursors ascending
cursors.sort(((a,b)=>a.lineNumber===b.lineNumber?a.column-b.column:a.lineNumber-b.lineNumber));
// Reduce multiple cursors on the same line and only keep the last one on the line
for(let i=cursors.length-2;i>=0;i--)cursors[i].lineNumber===cursors[i+1].lineNumber&&
// Remove cursor at `i`
cursors.splice(i,1);let r=[],rLen=0,cursorIndex=0,cursorLen=cursors.length;for(let lineNumber=1,lineCount=model.getLineCount();lineNumber<=lineCount;lineNumber++){let lineContent=model.getLineContent(lineNumber),maxLineColumn=lineContent.length+1,minEditColumn=0;if(cursorIndex<cursorLen&&cursors[cursorIndex].lineNumber===lineNumber&&(minEditColumn=cursors[cursorIndex].column,cursorIndex++,minEditColumn===maxLineColumn))
// The cursor is at the end of the line => no edits for sure on this line
continue;if(0===lineContent.length)continue;let lastNonWhitespaceIndex=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .lastNonWhitespaceIndex */.ow(lineContent),fromColumn=0;if(-1===lastNonWhitespaceIndex)
// Entire line is whitespace
fromColumn=1;else{if(lastNonWhitespaceIndex===lineContent.length-1)
// There is no trailing whitespace
continue;
// There is trailing whitespace
fromColumn=lastNonWhitespaceIndex+2}fromColumn=Math.max(minEditColumn,fromColumn),r[rLen++]=_core_editOperation_js__WEBPACK_IMPORTED_MODULE_1__/* .EditOperation */.h.delete(new _core_range_js__WEBPACK_IMPORTED_MODULE_2__/* .Range */.e(lineNumber,fromColumn,lineNumber,maxLineColumn))}return r}
/***/},
/***/156345:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */Pe:function(){/* binding */return isDiffEditorConfigurationKey},
/* harmony export */ei:function(){/* binding */return isEditorConfigurationKey},
/* harmony export */fv:function(){/* binding */return CommonEditorConfiguration},
/* harmony export */nG:function(){/* binding */return TabFocus}
/* harmony export */});
/* unused harmony exports ComputedEditorOptions, editorConfigurationBaseNode */
/* harmony import */var _nls_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(663580),_base_common_event_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(104669),_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(905976),_base_common_objects_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(936248),_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(609488),_editorOptions_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(364141),_editorZoom_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(182334),_fontInfo_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(427374),_platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(423193),_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(789872),_base_common_collections_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(6626);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const TabFocus=new class{constructor(){this._tabFocus=!1,this._onDidChangeTabFocus=new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__/* .Emitter */.Q5,this.onDidChangeTabFocus=this._onDidChangeTabFocus.event}getTabFocusMode(){return this._tabFocus}setTabFocusMode(tabFocusMode){this._tabFocus!==tabFocusMode&&(this._tabFocus=tabFocusMode,this._onDidChangeTabFocus.fire(this._tabFocus))}},hasOwnProperty=Object.hasOwnProperty;class ComputedEditorOptions{constructor(){this._values=[]}_read(id){return this._values[id]}get(id){return this._values[id]}_write(id,value){this._values[id]=value}}class RawEditorOptions{constructor(){this._values=[]}_read(id){return this._values[id]}_write(id,value){this._values[id]=value}}class EditorConfiguration2{static readOptions(_options){const options=_options,result=new RawEditorOptions;for(const editorOption of _editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .editorOptionsRegistry */.Bc){const value="_never_"===editorOption.name?void 0:options[editorOption.name];result._write(editorOption.id,value)}return result}static validateOptions(options){const result=new _editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .ValidatedEditorOptions */.hu;for(const editorOption of _editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .editorOptionsRegistry */.Bc)result._write(editorOption.id,editorOption.validate(options._read(editorOption.id)));return result}static computeOptions(options,env){const result=new ComputedEditorOptions;for(const editorOption of _editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .editorOptionsRegistry */.Bc)result._write(editorOption.id,editorOption.compute(env,result,options._read(editorOption.id)));return result}static _deepEquals(a,b){if("object"!==typeof a||"object"!==typeof b)return a===b;if(Array.isArray(a)||Array.isArray(b))return!(!Array.isArray(a)||!Array.isArray(b))&&_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_9__/* .equals */.fS(a,b);for(let key in a)if(!EditorConfiguration2._deepEquals(a[key],b[key]))return!1;return!0}static checkEquals(a,b){const result=[];let somethingChanged=!1;for(const editorOption of _editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .editorOptionsRegistry */.Bc){const changed=!EditorConfiguration2._deepEquals(a._read(editorOption.id),b._read(editorOption.id));result[editorOption.id]=changed,changed&&(somethingChanged=!0)}return somethingChanged?new _editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .ConfigurationChangedEvent */.Bb(result):null}}
/**
 * Compatibility with old options
 */function migrateOptions(options){const wordWrap=options.wordWrap;!0===wordWrap?options.wordWrap="on":!1===wordWrap&&(options.wordWrap="off");const lineNumbers=options.lineNumbers;!0===lineNumbers?options.lineNumbers="on":!1===lineNumbers&&(options.lineNumbers="off");const autoClosingBrackets=options.autoClosingBrackets;!1===autoClosingBrackets&&(options.autoClosingBrackets="never",options.autoClosingQuotes="never",options.autoSurround="never");const cursorBlinking=options.cursorBlinking;"visible"===cursorBlinking&&(options.cursorBlinking="solid");const renderWhitespace=options.renderWhitespace;!0===renderWhitespace?options.renderWhitespace="boundary":!1===renderWhitespace&&(options.renderWhitespace="none");const renderLineHighlight=options.renderLineHighlight;!0===renderLineHighlight?options.renderLineHighlight="line":!1===renderLineHighlight&&(options.renderLineHighlight="none");const acceptSuggestionOnEnter=options.acceptSuggestionOnEnter;!0===acceptSuggestionOnEnter?options.acceptSuggestionOnEnter="on":!1===acceptSuggestionOnEnter&&(options.acceptSuggestionOnEnter="off");const tabCompletion=options.tabCompletion;!1===tabCompletion?options.tabCompletion="off":!0===tabCompletion&&(options.tabCompletion="onlySnippets");const suggest=options.suggest;if(suggest&&"object"===typeof suggest.filteredTypes&&suggest.filteredTypes){const mapping={method:"showMethods",function:"showFunctions",constructor:"showConstructors",deprecated:"showDeprecated",field:"showFields",variable:"showVariables",class:"showClasses",struct:"showStructs",interface:"showInterfaces",module:"showModules",property:"showProperties",event:"showEvents",operator:"showOperators",unit:"showUnits",value:"showValues",constant:"showConstants",enum:"showEnums",enumMember:"showEnumMembers",keyword:"showKeywords",text:"showWords",color:"showColors",file:"showFiles",reference:"showReferences",folder:"showFolders",typeParameter:"showTypeParameters",snippet:"showSnippets"};(0,_base_common_collections_js__WEBPACK_IMPORTED_MODULE_8__/* .forEach */.E)(mapping,(entry=>{const value=suggest.filteredTypes[entry.key];!1===value&&(suggest[entry.value]=value)}))}const hover=options.hover;!0===hover?options.hover={enabled:!0}:!1===hover&&(options.hover={enabled:!1});const parameterHints=options.parameterHints;!0===parameterHints?options.parameterHints={enabled:!0}:!1===parameterHints&&(options.parameterHints={enabled:!1});const autoIndent=options.autoIndent;!0===autoIndent?options.autoIndent="full":!1===autoIndent&&(options.autoIndent="advanced");const matchBrackets=options.matchBrackets;!0===matchBrackets?options.matchBrackets="always":!1===matchBrackets&&(options.matchBrackets="never");const{renderIndentGuides:renderIndentGuides,highlightActiveIndentGuide:highlightActiveIndentGuide}=options;options.guides||(options.guides={}),void 0!==renderIndentGuides&&(options.guides.indentation=!!renderIndentGuides),void 0!==highlightActiveIndentGuide&&(options.guides.highlightActiveIndentation=!!highlightActiveIndentGuide)}function deepCloneAndMigrateOptions(_options){const options=_base_common_objects_js__WEBPACK_IMPORTED_MODULE_2__/* .deepClone */.I8(_options);return migrateOptions(options),options}class CommonEditorConfiguration extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .Disposable */.JT{constructor(isSimpleWidget,_options){super(),this._onDidChange=this._register(new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__/* .Emitter */.Q5),this.onDidChange=this._onDidChange.event,this._onDidChangeFast=this._register(new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__/* .Emitter */.Q5),this.onDidChangeFast=this._onDidChangeFast.event,this.isSimpleWidget=isSimpleWidget,this._isDominatedByLongLines=!1,this._computeOptionsMemory=new _editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .ComputeOptionsMemory */.LJ,this._viewLineCount=1,this._lineNumbersDigitCount=1,this._rawOptions=deepCloneAndMigrateOptions(_options),this._readOptions=EditorConfiguration2.readOptions(this._rawOptions),this._validatedOptions=EditorConfiguration2.validateOptions(this._readOptions),this._register(_editorZoom_js__WEBPACK_IMPORTED_MODULE_4__/* .EditorZoom */.C.onDidChangeZoomLevel((_=>this._recomputeOptions()))),this._register(TabFocus.onDidChangeTabFocus((_=>this._recomputeOptions())))}observeReferenceElement(dimension){}updatePixelRatio(){}_recomputeOptions(){const oldOptions=this.options,newOptions=this._computeInternalOptions();if(oldOptions){const changeEvent=EditorConfiguration2.checkEquals(oldOptions,newOptions);if(null===changeEvent)
// nothing changed!
return;this.options=newOptions,this._onDidChangeFast.fire(changeEvent),this._onDidChange.fire(changeEvent)}else this.options=newOptions}getRawOptions(){return this._rawOptions}_computeInternalOptions(){const partialEnv=this._getEnvConfiguration(),bareFontInfo=_fontInfo_js__WEBPACK_IMPORTED_MODULE_5__/* .BareFontInfo */.E4.createFromValidatedSettings(this._validatedOptions,partialEnv.zoomLevel,partialEnv.pixelRatio,this.isSimpleWidget),env={memory:this._computeOptionsMemory,outerWidth:partialEnv.outerWidth,outerHeight:partialEnv.outerHeight,fontInfo:this.readConfiguration(bareFontInfo),extraEditorClassName:partialEnv.extraEditorClassName,isDominatedByLongLines:this._isDominatedByLongLines,viewLineCount:this._viewLineCount,lineNumbersDigitCount:this._lineNumbersDigitCount,emptySelectionClipboard:partialEnv.emptySelectionClipboard,pixelRatio:partialEnv.pixelRatio,tabFocusMode:TabFocus.getTabFocusMode(),accessibilitySupport:partialEnv.accessibilitySupport};return EditorConfiguration2.computeOptions(this._validatedOptions,env)}static _subsetEquals(base,subset){for(const key in subset)if(hasOwnProperty.call(subset,key)){const subsetValue=subset[key],baseValue=base[key];if(baseValue===subsetValue)continue;if(Array.isArray(baseValue)&&Array.isArray(subsetValue)){if(!_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_9__/* .equals */.fS(baseValue,subsetValue))return!1;continue}if(baseValue&&"object"===typeof baseValue&&subsetValue&&"object"===typeof subsetValue){if(!this._subsetEquals(baseValue,subsetValue))return!1;continue}return!1}return!0}updateOptions(_newOptions){if("undefined"===typeof _newOptions)return;const newOptions=deepCloneAndMigrateOptions(_newOptions);CommonEditorConfiguration._subsetEquals(this._rawOptions,newOptions)||(this._rawOptions=_base_common_objects_js__WEBPACK_IMPORTED_MODULE_2__/* .mixin */.jB(this._rawOptions,newOptions||{}),this._readOptions=EditorConfiguration2.readOptions(this._rawOptions),this._validatedOptions=EditorConfiguration2.validateOptions(this._readOptions),this._recomputeOptions())}setIsDominatedByLongLines(isDominatedByLongLines){this._isDominatedByLongLines=isDominatedByLongLines,this._recomputeOptions()}setMaxLineNumber(maxLineNumber){const lineNumbersDigitCount=CommonEditorConfiguration._digitCount(maxLineNumber);this._lineNumbersDigitCount!==lineNumbersDigitCount&&(this._lineNumbersDigitCount=lineNumbersDigitCount,this._recomputeOptions())}setViewLineCount(viewLineCount){this._viewLineCount!==viewLineCount&&(this._viewLineCount=viewLineCount,this._recomputeOptions())}static _digitCount(n){let r=0;while(n)n=Math.floor(n/10),r++;return r||1}}const editorConfigurationBaseNode=Object.freeze({id:"editor",order:5,type:"object",title:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("editorConfigurationTitle","Editor"),scope:5/* LANGUAGE_OVERRIDABLE */}),configurationRegistry=_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_7__/* .Registry */.B.as(_platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_6__/* .Extensions */.IP.Configuration),editorConfiguration=Object.assign(Object.assign({},editorConfigurationBaseNode),{properties:{"editor.tabSize":{type:"number",default:_editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .EDITOR_MODEL_DEFAULTS */.DB.tabSize,minimum:1,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("tabSize","The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.")},
// 'editor.indentSize': {
// 	'anyOf': [
// 		{
// 			type: 'string',
// 			enum: ['tabSize']
// 		},
// 		{
// 			type: 'number',
// 			minimum: 1
// 		}
// 	],
// 	default: 'tabSize',
// 	markdownDescription: nls.localize('indentSize', "The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.")
// },
"editor.insertSpaces":{type:"boolean",default:_editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .EDITOR_MODEL_DEFAULTS */.DB.insertSpaces,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("insertSpaces","Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.")},"editor.detectIndentation":{type:"boolean",default:_editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .EDITOR_MODEL_DEFAULTS */.DB.detectIndentation,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("detectIndentation","Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.")},"editor.trimAutoWhitespace":{type:"boolean",default:_editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .EDITOR_MODEL_DEFAULTS */.DB.trimAutoWhitespace,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("trimAutoWhitespace","Remove trailing auto inserted whitespace.")},"editor.largeFileOptimizations":{type:"boolean",default:_editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .EDITOR_MODEL_DEFAULTS */.DB.largeFileOptimizations,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("largeFileOptimizations","Special handling for large files to disable certain memory intensive features.")},"editor.wordBasedSuggestions":{type:"boolean",default:!0,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("wordBasedSuggestions","Controls whether completions should be computed based on words in the document.")},"editor.wordBasedSuggestionsMode":{enum:["currentDocument","matchingDocuments","allDocuments"],default:"matchingDocuments",enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("wordBasedSuggestionsMode.currentDocument","Only suggest words from the active document."),_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("wordBasedSuggestionsMode.matchingDocuments","Suggest words from all open documents of the same language."),_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("wordBasedSuggestionsMode.allDocuments","Suggest words from all open documents.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("wordBasedSuggestionsMode","Controls from which documents word based completions are computed.")},"editor.semanticHighlighting.enabled":{enum:[!0,!1,"configuredByTheme"],enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("semanticHighlighting.true","Semantic highlighting enabled for all color themes."),_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("semanticHighlighting.false","Semantic highlighting disabled for all color themes."),_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("semanticHighlighting.configuredByTheme","Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.")],default:"configuredByTheme",description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("semanticHighlighting.enabled","Controls whether the semanticHighlighting is shown for the languages that support it.")},"editor.stablePeek":{type:"boolean",default:!1,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("stablePeek","Keep peek editors open even when double clicking their content or when hitting `Escape`.")},"editor.maxTokenizationLineLength":{type:"integer",default:2e4,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("maxTokenizationLineLength","Lines above this length will not be tokenized for performance reasons")},"editor.language.brackets":{type:"array",default:!1,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("schema.brackets","Defines the bracket symbols that increase or decrease the indentation."),items:{type:"array",items:[{type:"string",description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("schema.openBracket","The opening bracket character or string sequence.")},{type:"string",description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("schema.closeBracket","The closing bracket character or string sequence.")}]}},"editor.language.colorizedBracketPairs":{type:"array",default:!1,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("schema.colorizedBracketPairs","Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled."),items:{type:"array",items:[{type:"string",description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("schema.openBracket","The opening bracket character or string sequence.")},{type:"string",description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("schema.closeBracket","The closing bracket character or string sequence.")}]}},"diffEditor.maxComputationTime":{type:"number",default:5e3,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("maxComputationTime","Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.")},"diffEditor.maxFileSize":{type:"number",default:50,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("maxFileSize","Maximum file size in MB for which to compute diffs. Use 0 for no limit.")},"diffEditor.renderSideBySide":{type:"boolean",default:!0,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("sideBySide","Controls whether the diff editor shows the diff side by side or inline.")},"diffEditor.ignoreTrimWhitespace":{type:"boolean",default:!0,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("ignoreTrimWhitespace","When enabled, the diff editor ignores changes in leading or trailing whitespace.")},"diffEditor.renderIndicators":{type:"boolean",default:!0,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("renderIndicators","Controls whether the diff editor shows +/- indicators for added/removed changes.")},"diffEditor.codeLens":{type:"boolean",default:!1,description:_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("codeLens","Controls whether the editor shows CodeLens.")},"diffEditor.wordWrap":{type:"string",enum:["off","on","inherit"],default:"inherit",markdownEnumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("wordWrap.off","Lines will never wrap."),_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("wordWrap.on","Lines will wrap at the viewport width."),_nls_js__WEBPACK_IMPORTED_MODULE_10__/* .localize */.N("wordWrap.inherit","Lines will wrap according to the `#editor.wordWrap#` setting.")]}}});function isConfigurationPropertySchema(x){return"undefined"!==typeof x.type||"undefined"!==typeof x.anyOf}
// Add properties from the Editor Option Registry
for(const editorOption of _editorOptions_js__WEBPACK_IMPORTED_MODULE_3__/* .editorOptionsRegistry */.Bc){const schema=editorOption.schema;if("undefined"!==typeof schema)if(isConfigurationPropertySchema(schema))
// This is a single schema contribution
editorConfiguration.properties[`editor.${editorOption.name}`]=schema;else for(let key in schema)hasOwnProperty.call(schema,key)&&(editorConfiguration.properties[key]=schema[key])}let cachedEditorConfigurationKeys=null;function getEditorConfigurationKeys(){return null===cachedEditorConfigurationKeys&&(cachedEditorConfigurationKeys=Object.create(null),Object.keys(editorConfiguration.properties).forEach((prop=>{cachedEditorConfigurationKeys[prop]=!0}))),cachedEditorConfigurationKeys}function isEditorConfigurationKey(key){const editorConfigurationKeys=getEditorConfigurationKeys();return editorConfigurationKeys[`editor.${key}`]||!1}function isDiffEditorConfigurationKey(key){const editorConfigurationKeys=getEditorConfigurationKeys();return editorConfigurationKeys[`diffEditor.${key}`]||!1}configurationRegistry.registerConfiguration(editorConfiguration)},
/***/364141:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */$J:function(){/* binding */return filterValidationDecorations},
/* harmony export */BH:function(){/* binding */return EditorOptions},
/* harmony export */Bb:function(){/* binding */return ConfigurationChangedEvent},
/* harmony export */Bc:function(){/* binding */return editorOptionsRegistry},
/* harmony export */DB:function(){/* binding */return EDITOR_MODEL_DEFAULTS},
/* harmony export */LJ:function(){/* binding */return ComputeOptionsMemory},
/* harmony export */NY:function(){/* binding */return stringSet},
/* harmony export */O7:function(){/* binding */return boolean},
/* harmony export */Zc:function(){/* binding */return clampedInt},
/* harmony export */d2:function(){/* binding */return TextEditorCursorStyle},
/* harmony export */gk:function(){/* binding */return EditorLayoutInfoComputer},
/* harmony export */hL:function(){/* binding */return EDITOR_FONT_DEFAULTS},
/* harmony export */hu:function(){/* binding */return ValidatedEditorOptions},
/* harmony export */n0:function(){/* binding */return EditorFontLigatures},
/* harmony export */y0:function(){/* binding */return MINIMAP_GUTTER_WIDTH}
/* harmony export */});
/* harmony import */var _nls_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(663580),_base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(901432),_model_wordHelper_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(997461);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * @internal
 * The width of the minimap gutter, in pixels.
 */
const MINIMAP_GUTTER_WIDTH=8;
//#endregion
/**
 * An event describing that the configuration of the editor has changed.
 */class ConfigurationChangedEvent{
/**
     * @internal
     */
constructor(values){this._values=values}hasChanged(id){return this._values[id]}}
/**
 * @internal
 */class ValidatedEditorOptions{constructor(){this._values=[]}_read(option){return this._values[option]}get(id){return this._values[id]}_write(option,value){this._values[option]=value}}
/**
 * @internal
 */class ComputeOptionsMemory{constructor(){this.stableMinimapLayoutInput=null,this.stableFitMaxMinimapScale=0,this.stableFitRemainingWidth=0}}
/**
 * @internal
 */class BaseEditorOption{constructor(id,name,defaultValue,schema){this.id=id,this.name=name,this.defaultValue=defaultValue,this.schema=schema}compute(env,options,value){return value}}
/**
 * @internal
 */class ComputedEditorOption{constructor(id,deps=null){this.schema=void 0,this.id=id,this.name="_never_",this.defaultValue=void 0,this.deps=deps}validate(input){return this.defaultValue}}class SimpleEditorOption{constructor(id,name,defaultValue,schema){this.id=id,this.name=name,this.defaultValue=defaultValue,this.schema=schema}validate(input){return"undefined"===typeof input?this.defaultValue:input}compute(env,options,value){return value}}
/**
 * @internal
 */function boolean(value,defaultValue){return"undefined"===typeof value?defaultValue:"false"!==value&&Boolean(value)}class EditorBooleanOption extends SimpleEditorOption{constructor(id,name,defaultValue,schema=void 0){"undefined"!==typeof schema&&(schema.type="boolean",schema.default=defaultValue),super(id,name,defaultValue,schema)}validate(input){return boolean(input,this.defaultValue)}}
/**
 * @internal
 */function clampedInt(value,defaultValue,minimum,maximum){if("undefined"===typeof value)return defaultValue;let r=parseInt(value,10);return isNaN(r)?defaultValue:(r=Math.max(minimum,r),r=Math.min(maximum,r),0|r)}class EditorIntOption extends SimpleEditorOption{constructor(id,name,defaultValue,minimum,maximum,schema=void 0){"undefined"!==typeof schema&&(schema.type="integer",schema.default=defaultValue,schema.minimum=minimum,schema.maximum=maximum),super(id,name,defaultValue,schema),this.minimum=minimum,this.maximum=maximum}static clampedInt(value,defaultValue,minimum,maximum){return clampedInt(value,defaultValue,minimum,maximum)}validate(input){return EditorIntOption.clampedInt(input,this.defaultValue,this.minimum,this.maximum)}}class EditorFloatOption extends SimpleEditorOption{constructor(id,name,defaultValue,validationFn,schema){"undefined"!==typeof schema&&(schema.type="number",schema.default=defaultValue),super(id,name,defaultValue,schema),this.validationFn=validationFn}static clamp(n,min,max){return n<min?min:n>max?max:n}static float(value,defaultValue){if("number"===typeof value)return value;if("undefined"===typeof value)return defaultValue;const r=parseFloat(value);return isNaN(r)?defaultValue:r}validate(input){return this.validationFn(EditorFloatOption.float(input,this.defaultValue))}}class EditorStringOption extends SimpleEditorOption{static string(value,defaultValue){return"string"!==typeof value?defaultValue:value}constructor(id,name,defaultValue,schema=void 0){"undefined"!==typeof schema&&(schema.type="string",schema.default=defaultValue),super(id,name,defaultValue,schema)}validate(input){return EditorStringOption.string(input,this.defaultValue)}}
/**
 * @internal
 */function stringSet(value,defaultValue,allowedValues){return"string"!==typeof value||-1===allowedValues.indexOf(value)?defaultValue:value}class EditorStringEnumOption extends SimpleEditorOption{constructor(id,name,defaultValue,allowedValues,schema=void 0){"undefined"!==typeof schema&&(schema.type="string",schema.enum=allowedValues,schema.default=defaultValue),super(id,name,defaultValue,schema),this._allowedValues=allowedValues}validate(input){return stringSet(input,this.defaultValue,this._allowedValues)}}class EditorEnumOption extends BaseEditorOption{constructor(id,name,defaultValue,defaultStringValue,allowedValues,convert,schema=void 0){"undefined"!==typeof schema&&(schema.type="string",schema.enum=allowedValues,schema.default=defaultStringValue),super(id,name,defaultValue,schema),this._allowedValues=allowedValues,this._convert=convert}validate(input){return"string"!==typeof input||-1===this._allowedValues.indexOf(input)?this.defaultValue:this._convert(input)}}
//#endregion
//#region autoIndent
function _autoIndentFromString(autoIndent){switch(autoIndent){case"none":return 0/* None */;case"keep":return 1/* Keep */;case"brackets":return 2/* Brackets */;case"advanced":return 3/* Advanced */;case"full":return 4/* Full */}}
//#endregion
//#region accessibilitySupport
class EditorAccessibilitySupport extends BaseEditorOption{constructor(){super(2/* accessibilitySupport */,"accessibilitySupport",0/* Unknown */,{type:"string",enum:["auto","on","off"],enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("accessibilitySupport.auto","The editor will use platform APIs to detect when a Screen Reader is attached."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("accessibilitySupport.on","The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("accessibilitySupport.off","The editor will never be optimized for usage with a Screen Reader.")],default:"auto",description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("accessibilitySupport","Controls whether the editor should run in a mode where it is optimized for screen readers. Setting to on will disable word wrapping.")})}validate(input){switch(input){case"auto":return 0/* Unknown */;case"off":return 1/* Disabled */;case"on":return 2/* Enabled */}return this.defaultValue}compute(env,options,value){return 0/* Unknown */===value?env.accessibilitySupport:value}}class EditorComments extends BaseEditorOption{constructor(){const defaults={insertSpace:!0,ignoreEmptyLines:!0};super(19/* comments */,"comments",defaults,{"editor.comments.insertSpace":{type:"boolean",default:defaults.insertSpace,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("comments.insertSpace","Controls whether a space character is inserted when commenting.")},"editor.comments.ignoreEmptyLines":{type:"boolean",default:defaults.ignoreEmptyLines,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("comments.ignoreEmptyLines","Controls if empty lines should be ignored with toggle, add or remove actions for line comments.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{insertSpace:boolean(input.insertSpace,this.defaultValue.insertSpace),ignoreEmptyLines:boolean(input.ignoreEmptyLines,this.defaultValue.ignoreEmptyLines)}}}function _cursorBlinkingStyleFromString(cursorBlinkingStyle){switch(cursorBlinkingStyle){case"blink":return 1/* Blink */;case"smooth":return 2/* Smooth */;case"phase":return 3/* Phase */;case"expand":return 4/* Expand */;case"solid":return 5/* Solid */}}
//#endregion
//#region cursorStyle
/**
 * The style in which the editor's cursor should be rendered.
 */var TextEditorCursorStyle;function _cursorStyleFromString(cursorStyle){switch(cursorStyle){case"line":return TextEditorCursorStyle.Line;case"block":return TextEditorCursorStyle.Block;case"underline":return TextEditorCursorStyle.Underline;case"line-thin":return TextEditorCursorStyle.LineThin;case"block-outline":return TextEditorCursorStyle.BlockOutline;case"underline-thin":return TextEditorCursorStyle.UnderlineThin}}
//#endregion
//#region editorClassName
(function(TextEditorCursorStyle){
/**
     * As a vertical line (sitting between two characters).
     */
TextEditorCursorStyle[TextEditorCursorStyle["Line"]=1]="Line",
/**
     * As a block (sitting on top of a character).
     */
TextEditorCursorStyle[TextEditorCursorStyle["Block"]=2]="Block",
/**
     * As a horizontal line (sitting under a character).
     */
TextEditorCursorStyle[TextEditorCursorStyle["Underline"]=3]="Underline",
/**
     * As a thin vertical line (sitting between two characters).
     */
TextEditorCursorStyle[TextEditorCursorStyle["LineThin"]=4]="LineThin",
/**
     * As an outlined block (sitting on top of a character).
     */
TextEditorCursorStyle[TextEditorCursorStyle["BlockOutline"]=5]="BlockOutline",
/**
     * As a thin horizontal line (sitting under a character).
     */
TextEditorCursorStyle[TextEditorCursorStyle["UnderlineThin"]=6]="UnderlineThin"})(TextEditorCursorStyle||(TextEditorCursorStyle={}));class EditorClassName extends ComputedEditorOption{constructor(){super(126/* editorClassName */,[65/* mouseStyle */,33/* extraEditorClassName */])}compute(env,options,_){const classNames=["monaco-editor"];return options.get(33/* extraEditorClassName */)&&classNames.push(options.get(33/* extraEditorClassName */)),env.extraEditorClassName&&classNames.push(env.extraEditorClassName),"default"===options.get(65/* mouseStyle */)?classNames.push("mouse-default"):"copy"===options.get(65/* mouseStyle */)&&classNames.push("mouse-copy"),options.get(99/* showUnused */)&&classNames.push("showUnused"),options.get(124/* showDeprecated */)&&classNames.push("showDeprecated"),classNames.join(" ")}}
//#endregion
//#region emptySelectionClipboard
class EditorEmptySelectionClipboard extends EditorBooleanOption{constructor(){super(32/* emptySelectionClipboard */,"emptySelectionClipboard",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("emptySelectionClipboard","Controls whether copying without a selection copies the current line.")})}compute(env,options,value){return value&&env.emptySelectionClipboard}}class EditorFind extends BaseEditorOption{constructor(){const defaults={cursorMoveOnType:!0,seedSearchStringFromSelection:"always",autoFindInSelection:"never",globalFindClipboard:!1,addExtraSpaceOnTop:!0,loop:!0};super(35/* find */,"find",defaults,{"editor.find.cursorMoveOnType":{type:"boolean",default:defaults.cursorMoveOnType,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("find.cursorMoveOnType","Controls whether the cursor should jump to find matches while typing.")},"editor.find.seedSearchStringFromSelection":{type:"string",enum:["never","always","selection"],default:defaults.seedSearchStringFromSelection,enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.find.seedSearchStringFromSelection.never","Never seed search string from the editor selection."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.find.seedSearchStringFromSelection.always","Always seed search string from the editor selection, including word at cursor position."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.find.seedSearchStringFromSelection.selection","Only seed search string from the editor selection.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("find.seedSearchStringFromSelection","Controls whether the search string in the Find Widget is seeded from the editor selection.")},"editor.find.autoFindInSelection":{type:"string",enum:["never","always","multiline"],default:defaults.autoFindInSelection,enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.find.autoFindInSelection.never","Never turn on Find in Selection automatically (default)."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.find.autoFindInSelection.always","Always turn on Find in Selection automatically."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.find.autoFindInSelection.multiline","Turn on Find in Selection automatically when multiple lines of content are selected.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("find.autoFindInSelection","Controls the condition for turning on Find in Selection automatically.")},"editor.find.globalFindClipboard":{type:"boolean",default:defaults.globalFindClipboard,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("find.globalFindClipboard","Controls whether the Find Widget should read or modify the shared find clipboard on macOS."),included:_base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__/* .isMacintosh */.dz},"editor.find.addExtraSpaceOnTop":{type:"boolean",default:defaults.addExtraSpaceOnTop,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("find.addExtraSpaceOnTop","Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.")},"editor.find.loop":{type:"boolean",default:defaults.loop,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("find.loop","Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{cursorMoveOnType:boolean(input.cursorMoveOnType,this.defaultValue.cursorMoveOnType),seedSearchStringFromSelection:"boolean"===typeof _input.seedSearchStringFromSelection?_input.seedSearchStringFromSelection?"always":"never":stringSet(input.seedSearchStringFromSelection,this.defaultValue.seedSearchStringFromSelection,["never","always","selection"]),autoFindInSelection:"boolean"===typeof _input.autoFindInSelection?_input.autoFindInSelection?"always":"never":stringSet(input.autoFindInSelection,this.defaultValue.autoFindInSelection,["never","always","multiline"]),globalFindClipboard:boolean(input.globalFindClipboard,this.defaultValue.globalFindClipboard),addExtraSpaceOnTop:boolean(input.addExtraSpaceOnTop,this.defaultValue.addExtraSpaceOnTop),loop:boolean(input.loop,this.defaultValue.loop)}}}
//#endregion
//#region fontLigatures
/**
 * @internal
 */class EditorFontLigatures extends BaseEditorOption{constructor(){super(44/* fontLigatures */,"fontLigatures",EditorFontLigatures.OFF,{anyOf:[{type:"boolean",description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("fontLigatures","Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property.")},{type:"string",description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("fontFeatureSettings","Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.")}],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("fontLigaturesGeneral","Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property."),default:!1})}validate(input){return"undefined"===typeof input?this.defaultValue:"string"===typeof input?"false"===input?EditorFontLigatures.OFF:"true"===input?EditorFontLigatures.ON:input:Boolean(input)?EditorFontLigatures.ON:EditorFontLigatures.OFF}}EditorFontLigatures.OFF='"liga" off, "calt" off',EditorFontLigatures.ON='"liga" on, "calt" on';
//#endregion
//#region fontInfo
class EditorFontInfo extends ComputedEditorOption{constructor(){super(43/* fontInfo */)}compute(env,options,_){return env.fontInfo}}
//#endregion
//#region fontSize
class EditorFontSize extends SimpleEditorOption{constructor(){super(45/* fontSize */,"fontSize",EDITOR_FONT_DEFAULTS.fontSize,{type:"number",minimum:6,maximum:100,default:EDITOR_FONT_DEFAULTS.fontSize,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("fontSize","Controls the font size in pixels.")})}validate(input){let r=EditorFloatOption.float(input,this.defaultValue);return 0===r?EDITOR_FONT_DEFAULTS.fontSize:EditorFloatOption.clamp(r,6,100)}compute(env,options,value){
// The final fontSize respects the editor zoom level.
// So take the result from env.fontInfo
return env.fontInfo.fontSize}}
//#endregion
//#region fontWeight
class EditorFontWeight extends BaseEditorOption{constructor(){super(46/* fontWeight */,"fontWeight",EDITOR_FONT_DEFAULTS.fontWeight,{anyOf:[{type:"number",minimum:EditorFontWeight.MINIMUM_VALUE,maximum:EditorFontWeight.MAXIMUM_VALUE,errorMessage:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("fontWeightErrorMessage",'Only "normal" and "bold" keywords or numbers between 1 and 1000 are allowed.')},{type:"string",pattern:"^(normal|bold|1000|[1-9][0-9]{0,2})$"},{enum:EditorFontWeight.SUGGESTION_VALUES}],default:EDITOR_FONT_DEFAULTS.fontWeight,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("fontWeight",'Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.')})}validate(input){return"normal"===input||"bold"===input?input:String(EditorIntOption.clampedInt(input,EDITOR_FONT_DEFAULTS.fontWeight,EditorFontWeight.MINIMUM_VALUE,EditorFontWeight.MAXIMUM_VALUE))}}EditorFontWeight.SUGGESTION_VALUES=["normal","bold","100","200","300","400","500","600","700","800","900"],EditorFontWeight.MINIMUM_VALUE=1,EditorFontWeight.MAXIMUM_VALUE=1e3;class EditorGoToLocation extends BaseEditorOption{constructor(){const defaults={multiple:"peek",multipleDefinitions:"peek",multipleTypeDefinitions:"peek",multipleDeclarations:"peek",multipleImplementations:"peek",multipleReferences:"peek",alternativeDefinitionCommand:"editor.action.goToReferences",alternativeTypeDefinitionCommand:"editor.action.goToReferences",alternativeDeclarationCommand:"editor.action.goToReferences",alternativeImplementationCommand:"",alternativeReferenceCommand:""},jsonSubset={type:"string",enum:["peek","gotoAndPeek","goto"],default:defaults.multiple,enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.gotoLocation.multiple.peek","Show peek view of the results (default)"),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.gotoLocation.multiple.gotoAndPeek","Go to the primary result and show a peek view"),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.gotoLocation.multiple.goto","Go to the primary result and enable peek-less navigation to others")]},alternativeCommandOptions=["","editor.action.referenceSearch.trigger","editor.action.goToReferences","editor.action.peekImplementation","editor.action.goToImplementation","editor.action.peekTypeDefinition","editor.action.goToTypeDefinition","editor.action.peekDeclaration","editor.action.revealDeclaration","editor.action.peekDefinition","editor.action.revealDefinitionAside","editor.action.revealDefinition"];super(50/* gotoLocation */,"gotoLocation",defaults,{"editor.gotoLocation.multiple":{deprecationMessage:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.gotoLocation.multiple.deprecated","This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.")},"editor.gotoLocation.multipleDefinitions":Object.assign({description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.editor.gotoLocation.multipleDefinitions","Controls the behavior the 'Go to Definition'-command when multiple target locations exist.")},jsonSubset),"editor.gotoLocation.multipleTypeDefinitions":Object.assign({description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.editor.gotoLocation.multipleTypeDefinitions","Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.")},jsonSubset),"editor.gotoLocation.multipleDeclarations":Object.assign({description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.editor.gotoLocation.multipleDeclarations","Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.")},jsonSubset),"editor.gotoLocation.multipleImplementations":Object.assign({description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.editor.gotoLocation.multipleImplemenattions","Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.")},jsonSubset),"editor.gotoLocation.multipleReferences":Object.assign({description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.editor.gotoLocation.multipleReferences","Controls the behavior the 'Go to References'-command when multiple target locations exist.")},jsonSubset),"editor.gotoLocation.alternativeDefinitionCommand":{type:"string",default:defaults.alternativeDefinitionCommand,enum:alternativeCommandOptions,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("alternativeDefinitionCommand","Alternative command id that is being executed when the result of 'Go to Definition' is the current location.")},"editor.gotoLocation.alternativeTypeDefinitionCommand":{type:"string",default:defaults.alternativeTypeDefinitionCommand,enum:alternativeCommandOptions,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("alternativeTypeDefinitionCommand","Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.")},"editor.gotoLocation.alternativeDeclarationCommand":{type:"string",default:defaults.alternativeDeclarationCommand,enum:alternativeCommandOptions,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("alternativeDeclarationCommand","Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.")},"editor.gotoLocation.alternativeImplementationCommand":{type:"string",default:defaults.alternativeImplementationCommand,enum:alternativeCommandOptions,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("alternativeImplementationCommand","Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.")},"editor.gotoLocation.alternativeReferenceCommand":{type:"string",default:defaults.alternativeReferenceCommand,enum:alternativeCommandOptions,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("alternativeReferenceCommand","Alternative command id that is being executed when the result of 'Go to Reference' is the current location.")}})}validate(_input){var _a,_b,_c,_d,_e;if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{multiple:stringSet(input.multiple,this.defaultValue.multiple,["peek","gotoAndPeek","goto"]),multipleDefinitions:null!==(_a=input.multipleDefinitions)&&void 0!==_a?_a:stringSet(input.multipleDefinitions,"peek",["peek","gotoAndPeek","goto"]),multipleTypeDefinitions:null!==(_b=input.multipleTypeDefinitions)&&void 0!==_b?_b:stringSet(input.multipleTypeDefinitions,"peek",["peek","gotoAndPeek","goto"]),multipleDeclarations:null!==(_c=input.multipleDeclarations)&&void 0!==_c?_c:stringSet(input.multipleDeclarations,"peek",["peek","gotoAndPeek","goto"]),multipleImplementations:null!==(_d=input.multipleImplementations)&&void 0!==_d?_d:stringSet(input.multipleImplementations,"peek",["peek","gotoAndPeek","goto"]),multipleReferences:null!==(_e=input.multipleReferences)&&void 0!==_e?_e:stringSet(input.multipleReferences,"peek",["peek","gotoAndPeek","goto"]),alternativeDefinitionCommand:EditorStringOption.string(input.alternativeDefinitionCommand,this.defaultValue.alternativeDefinitionCommand),alternativeTypeDefinitionCommand:EditorStringOption.string(input.alternativeTypeDefinitionCommand,this.defaultValue.alternativeTypeDefinitionCommand),alternativeDeclarationCommand:EditorStringOption.string(input.alternativeDeclarationCommand,this.defaultValue.alternativeDeclarationCommand),alternativeImplementationCommand:EditorStringOption.string(input.alternativeImplementationCommand,this.defaultValue.alternativeImplementationCommand),alternativeReferenceCommand:EditorStringOption.string(input.alternativeReferenceCommand,this.defaultValue.alternativeReferenceCommand)}}}class EditorHover extends BaseEditorOption{constructor(){const defaults={enabled:!0,delay:300,sticky:!0,above:!0};super(52/* hover */,"hover",defaults,{"editor.hover.enabled":{type:"boolean",default:defaults.enabled,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("hover.enabled","Controls whether the hover is shown.")},"editor.hover.delay":{type:"number",default:defaults.delay,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("hover.delay","Controls the delay in milliseconds after which the hover is shown.")},"editor.hover.sticky":{type:"boolean",default:defaults.sticky,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("hover.sticky","Controls whether the hover should remain visible when mouse is moved over it.")},"editor.hover.above":{type:"boolean",default:defaults.above,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("hover.above","Prefer showing hovers above the line, if there's space.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{enabled:boolean(input.enabled,this.defaultValue.enabled),delay:EditorIntOption.clampedInt(input.delay,this.defaultValue.delay,0,1e4),sticky:boolean(input.sticky,this.defaultValue.sticky),above:boolean(input.above,this.defaultValue.above)}}}
/**
 * @internal
 */class EditorLayoutInfoComputer extends ComputedEditorOption{constructor(){super(129/* layoutInfo */,[49/* glyphMargin */,57/* lineDecorationsWidth */,37/* folding */,64/* minimap */,91/* scrollbar */,59/* lineNumbers */,60/* lineNumbersMinChars */,93/* scrollBeyondLastLine */,116/* wordWrap */,119/* wordWrapColumn */,120/* wordWrapOverride1 */,121/* wordWrapOverride2 */,2/* accessibilitySupport */])}compute(env,options,_){return EditorLayoutInfoComputer.computeLayout(options,{memory:env.memory,outerWidth:env.outerWidth,outerHeight:env.outerHeight,isDominatedByLongLines:env.isDominatedByLongLines,lineHeight:env.fontInfo.lineHeight,viewLineCount:env.viewLineCount,lineNumbersDigitCount:env.lineNumbersDigitCount,typicalHalfwidthCharacterWidth:env.fontInfo.typicalHalfwidthCharacterWidth,maxDigitWidth:env.fontInfo.maxDigitWidth,pixelRatio:env.pixelRatio})}static computeContainedMinimapLineCount(input){const typicalViewportLineCount=input.height/input.lineHeight,extraLinesBeyondLastLine=input.scrollBeyondLastLine?typicalViewportLineCount-1:0,desiredRatio=(input.viewLineCount+extraLinesBeyondLastLine)/(input.pixelRatio*input.height),minimapLineCount=Math.floor(input.viewLineCount/desiredRatio);return{typicalViewportLineCount:typicalViewportLineCount,extraLinesBeyondLastLine:extraLinesBeyondLastLine,desiredRatio:desiredRatio,minimapLineCount:minimapLineCount}}static _computeMinimapLayout(input,memory){const outerWidth=input.outerWidth,outerHeight=input.outerHeight,pixelRatio=input.pixelRatio;if(!input.minimap.enabled)return{renderMinimap:0/* None */,minimapLeft:0,minimapWidth:0,minimapHeightIsEditorHeight:!1,minimapIsSampling:!1,minimapScale:1,minimapLineHeight:1,minimapCanvasInnerWidth:0,minimapCanvasInnerHeight:Math.floor(pixelRatio*outerHeight),minimapCanvasOuterWidth:0,minimapCanvasOuterHeight:outerHeight};
// Can use memory if only the `viewLineCount` and `remainingWidth` have changed
const stableMinimapLayoutInput=memory.stableMinimapLayoutInput,couldUseMemory=stableMinimapLayoutInput&&input.outerHeight===stableMinimapLayoutInput.outerHeight&&input.lineHeight===stableMinimapLayoutInput.lineHeight&&input.typicalHalfwidthCharacterWidth===stableMinimapLayoutInput.typicalHalfwidthCharacterWidth&&input.pixelRatio===stableMinimapLayoutInput.pixelRatio&&input.scrollBeyondLastLine===stableMinimapLayoutInput.scrollBeyondLastLine&&input.minimap.enabled===stableMinimapLayoutInput.minimap.enabled&&input.minimap.side===stableMinimapLayoutInput.minimap.side&&input.minimap.size===stableMinimapLayoutInput.minimap.size&&input.minimap.showSlider===stableMinimapLayoutInput.minimap.showSlider&&input.minimap.renderCharacters===stableMinimapLayoutInput.minimap.renderCharacters&&input.minimap.maxColumn===stableMinimapLayoutInput.minimap.maxColumn&&input.minimap.scale===stableMinimapLayoutInput.minimap.scale&&input.verticalScrollbarWidth===stableMinimapLayoutInput.verticalScrollbarWidth&&input.isViewportWrapping===stableMinimapLayoutInput.isViewportWrapping,lineHeight=input.lineHeight,typicalHalfwidthCharacterWidth=input.typicalHalfwidthCharacterWidth,scrollBeyondLastLine=input.scrollBeyondLastLine,minimapRenderCharacters=input.minimap.renderCharacters;let minimapScale=pixelRatio>=2?Math.round(2*input.minimap.scale):input.minimap.scale;const minimapMaxColumn=input.minimap.maxColumn,minimapSize=input.minimap.size,minimapSide=input.minimap.side,verticalScrollbarWidth=input.verticalScrollbarWidth,viewLineCount=input.viewLineCount,remainingWidth=input.remainingWidth,isViewportWrapping=input.isViewportWrapping,baseCharHeight=minimapRenderCharacters?2:3;let minimapCanvasInnerHeight=Math.floor(pixelRatio*outerHeight);const minimapCanvasOuterHeight=minimapCanvasInnerHeight/pixelRatio;let minimapHeightIsEditorHeight=!1,minimapIsSampling=!1,minimapLineHeight=baseCharHeight*minimapScale,minimapCharWidth=minimapScale/pixelRatio,minimapWidthMultiplier=1;if("fill"===minimapSize||"fit"===minimapSize){const{typicalViewportLineCount:typicalViewportLineCount,extraLinesBeyondLastLine:extraLinesBeyondLastLine,desiredRatio:desiredRatio,minimapLineCount:minimapLineCount}=EditorLayoutInfoComputer.computeContainedMinimapLineCount({viewLineCount:viewLineCount,scrollBeyondLastLine:scrollBeyondLastLine,height:outerHeight,lineHeight:lineHeight,pixelRatio:pixelRatio}),ratio=viewLineCount/minimapLineCount;
// ratio is intentionally not part of the layout to avoid the layout changing all the time
// when doing sampling
if(ratio>1)minimapHeightIsEditorHeight=!0,minimapIsSampling=!0,minimapScale=1,minimapLineHeight=1,minimapCharWidth=minimapScale/pixelRatio;else{let fitBecomesFill=!1,maxMinimapScale=minimapScale+1;if("fit"===minimapSize){const effectiveMinimapHeight=Math.ceil((viewLineCount+extraLinesBeyondLastLine)*minimapLineHeight);isViewportWrapping&&couldUseMemory&&remainingWidth<=memory.stableFitRemainingWidth?(
// There is a loop when using `fit` and viewport wrapping:
// - view line count impacts minimap layout
// - minimap layout impacts viewport width
// - viewport width impacts view line count
// To break the loop, once we go to a smaller minimap scale, we try to stick with it.
fitBecomesFill=!0,maxMinimapScale=memory.stableFitMaxMinimapScale):fitBecomesFill=effectiveMinimapHeight>minimapCanvasInnerHeight}if("fill"===minimapSize||fitBecomesFill){minimapHeightIsEditorHeight=!0;const configuredMinimapScale=minimapScale;minimapLineHeight=Math.min(lineHeight*pixelRatio,Math.max(1,Math.floor(1/desiredRatio))),isViewportWrapping&&couldUseMemory&&remainingWidth<=memory.stableFitRemainingWidth&&(
// There is a loop when using `fill` and viewport wrapping:
// - view line count impacts minimap layout
// - minimap layout impacts viewport width
// - viewport width impacts view line count
// To break the loop, once we go to a smaller minimap scale, we try to stick with it.
maxMinimapScale=memory.stableFitMaxMinimapScale),minimapScale=Math.min(maxMinimapScale,Math.max(1,Math.floor(minimapLineHeight/baseCharHeight))),minimapScale>configuredMinimapScale&&(minimapWidthMultiplier=Math.min(2,minimapScale/configuredMinimapScale)),minimapCharWidth=minimapScale/pixelRatio/minimapWidthMultiplier,minimapCanvasInnerHeight=Math.ceil(Math.max(typicalViewportLineCount,viewLineCount+extraLinesBeyondLastLine)*minimapLineHeight),isViewportWrapping?(
// remember for next time
memory.stableMinimapLayoutInput=input,memory.stableFitRemainingWidth=remainingWidth,memory.stableFitMaxMinimapScale=minimapScale):(memory.stableMinimapLayoutInput=null,memory.stableFitRemainingWidth=0)}}}
// Given:
// (leaving 2px for the cursor to have space after the last character)
// viewportColumn = (contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth
// minimapWidth = viewportColumn * minimapCharWidth
// contentWidth = remainingWidth - minimapWidth
// What are good values for contentWidth and minimapWidth ?
// minimapWidth = ((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth) * minimapCharWidth
// typicalHalfwidthCharacterWidth * minimapWidth = (contentWidth - verticalScrollbarWidth - 2) * minimapCharWidth
// typicalHalfwidthCharacterWidth * minimapWidth = (remainingWidth - minimapWidth - verticalScrollbarWidth - 2) * minimapCharWidth
// (typicalHalfwidthCharacterWidth + minimapCharWidth) * minimapWidth = (remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth
// minimapWidth = ((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth)
const minimapMaxWidth=Math.floor(minimapMaxColumn*minimapCharWidth),minimapWidth=Math.min(minimapMaxWidth,Math.max(0,Math.floor((remainingWidth-verticalScrollbarWidth-2)*minimapCharWidth/(typicalHalfwidthCharacterWidth+minimapCharWidth)))+MINIMAP_GUTTER_WIDTH);let minimapCanvasInnerWidth=Math.floor(pixelRatio*minimapWidth);const minimapCanvasOuterWidth=minimapCanvasInnerWidth/pixelRatio;minimapCanvasInnerWidth=Math.floor(minimapCanvasInnerWidth*minimapWidthMultiplier);const renderMinimap=minimapRenderCharacters?1/* Text */:2/* Blocks */,minimapLeft="left"===minimapSide?0:outerWidth-minimapWidth-verticalScrollbarWidth;return{renderMinimap:renderMinimap,minimapLeft:minimapLeft,minimapWidth:minimapWidth,minimapHeightIsEditorHeight:minimapHeightIsEditorHeight,minimapIsSampling:minimapIsSampling,minimapScale:minimapScale,minimapLineHeight:minimapLineHeight,minimapCanvasInnerWidth:minimapCanvasInnerWidth,minimapCanvasInnerHeight:minimapCanvasInnerHeight,minimapCanvasOuterWidth:minimapCanvasOuterWidth,minimapCanvasOuterHeight:minimapCanvasOuterHeight}}static computeLayout(options,env){const outerWidth=0|env.outerWidth,outerHeight=0|env.outerHeight,lineHeight=0|env.lineHeight,lineNumbersDigitCount=0|env.lineNumbersDigitCount,typicalHalfwidthCharacterWidth=env.typicalHalfwidthCharacterWidth,maxDigitWidth=env.maxDigitWidth,pixelRatio=env.pixelRatio,viewLineCount=env.viewLineCount,wordWrapOverride2=options.get(121/* wordWrapOverride2 */),wordWrapOverride1="inherit"===wordWrapOverride2?options.get(120/* wordWrapOverride1 */):wordWrapOverride2,wordWrap="inherit"===wordWrapOverride1?options.get(116/* wordWrap */):wordWrapOverride1,wordWrapColumn=options.get(119/* wordWrapColumn */),accessibilitySupport=options.get(2/* accessibilitySupport */),isDominatedByLongLines=env.isDominatedByLongLines,showGlyphMargin=options.get(49/* glyphMargin */),showLineNumbers=0/* Off */!==options.get(59/* lineNumbers */).renderType,lineNumbersMinChars=options.get(60/* lineNumbersMinChars */),scrollBeyondLastLine=options.get(93/* scrollBeyondLastLine */),minimap=options.get(64/* minimap */),scrollbar=options.get(91/* scrollbar */),verticalScrollbarWidth=scrollbar.verticalScrollbarSize,verticalScrollbarHasArrows=scrollbar.verticalHasArrows,scrollbarArrowSize=scrollbar.arrowSize,horizontalScrollbarHeight=scrollbar.horizontalScrollbarSize,rawLineDecorationsWidth=options.get(57/* lineDecorationsWidth */),folding=options.get(37/* folding */);let lineDecorationsWidth;if("string"===typeof rawLineDecorationsWidth&&/^\d+(\.\d+)?ch$/.test(rawLineDecorationsWidth)){const multiple=parseFloat(rawLineDecorationsWidth.substr(0,rawLineDecorationsWidth.length-2));lineDecorationsWidth=EditorIntOption.clampedInt(multiple*typicalHalfwidthCharacterWidth,0,0,1e3)}else lineDecorationsWidth=EditorIntOption.clampedInt(rawLineDecorationsWidth,0,0,1e3);folding&&(lineDecorationsWidth+=16);let lineNumbersWidth=0;if(showLineNumbers){const digitCount=Math.max(lineNumbersDigitCount,lineNumbersMinChars);lineNumbersWidth=Math.round(digitCount*maxDigitWidth)}let glyphMarginWidth=0;showGlyphMargin&&(glyphMarginWidth=lineHeight);let glyphMarginLeft=0,lineNumbersLeft=glyphMarginLeft+glyphMarginWidth,decorationsLeft=lineNumbersLeft+lineNumbersWidth,contentLeft=decorationsLeft+lineDecorationsWidth;const remainingWidth=outerWidth-glyphMarginWidth-lineNumbersWidth-lineDecorationsWidth;let isWordWrapMinified=!1,isViewportWrapping=!1,wrappingColumn=-1;2/* Enabled */!==accessibilitySupport&&(
// See https://github.com/microsoft/vscode/issues/27766
// Never enable wrapping when a screen reader is attached
// because arrow down etc. will not move the cursor in the way
// a screen reader expects.
"inherit"===wordWrapOverride1&&isDominatedByLongLines?(
// Force viewport width wrapping if model is dominated by long lines
isWordWrapMinified=!0,isViewportWrapping=!0):"on"===wordWrap||"bounded"===wordWrap?isViewportWrapping=!0:"wordWrapColumn"===wordWrap&&(wrappingColumn=wordWrapColumn));const minimapLayout=EditorLayoutInfoComputer._computeMinimapLayout({outerWidth:outerWidth,outerHeight:outerHeight,lineHeight:lineHeight,typicalHalfwidthCharacterWidth:typicalHalfwidthCharacterWidth,pixelRatio:pixelRatio,scrollBeyondLastLine:scrollBeyondLastLine,minimap:minimap,verticalScrollbarWidth:verticalScrollbarWidth,viewLineCount:viewLineCount,remainingWidth:remainingWidth,isViewportWrapping:isViewportWrapping},env.memory||new ComputeOptionsMemory);0/* None */!==minimapLayout.renderMinimap&&0===minimapLayout.minimapLeft&&(
// the minimap is rendered to the left, so move everything to the right
glyphMarginLeft+=minimapLayout.minimapWidth,lineNumbersLeft+=minimapLayout.minimapWidth,decorationsLeft+=minimapLayout.minimapWidth,contentLeft+=minimapLayout.minimapWidth);const contentWidth=remainingWidth-minimapLayout.minimapWidth,viewportColumn=Math.max(1,Math.floor((contentWidth-verticalScrollbarWidth-2)/typicalHalfwidthCharacterWidth)),verticalArrowSize=verticalScrollbarHasArrows?scrollbarArrowSize:0;
// (leaving 2px for the cursor to have space after the last character)
return isViewportWrapping&&(
// compute the actual wrappingColumn
wrappingColumn=Math.max(1,viewportColumn),"bounded"===wordWrap&&(wrappingColumn=Math.min(wrappingColumn,wordWrapColumn))),{width:outerWidth,height:outerHeight,glyphMarginLeft:glyphMarginLeft,glyphMarginWidth:glyphMarginWidth,lineNumbersLeft:lineNumbersLeft,lineNumbersWidth:lineNumbersWidth,decorationsLeft:decorationsLeft,decorationsWidth:lineDecorationsWidth,contentLeft:contentLeft,contentWidth:contentWidth,minimap:minimapLayout,viewportColumn:viewportColumn,isWordWrapMinified:isWordWrapMinified,isViewportWrapping:isViewportWrapping,wrappingColumn:wrappingColumn,verticalScrollbarWidth:verticalScrollbarWidth,horizontalScrollbarHeight:horizontalScrollbarHeight,overviewRuler:{top:verticalArrowSize,width:verticalScrollbarWidth,height:outerHeight-2*verticalArrowSize,right:0}}}}class EditorLightbulb extends BaseEditorOption{constructor(){const defaults={enabled:!0};super(56/* lightbulb */,"lightbulb",defaults,{"editor.lightbulb.enabled":{type:"boolean",default:defaults.enabled,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("codeActions","Enables the code action lightbulb in the editor.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{enabled:boolean(input.enabled,this.defaultValue.enabled)}}}class EditorInlayHints extends BaseEditorOption{constructor(){const defaults={enabled:!0,fontSize:0,fontFamily:""};super(125/* inlayHints */,"inlayHints",defaults,{"editor.inlayHints.enabled":{type:"boolean",default:defaults.enabled,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("inlayHints.enable","Enables the inlay hints in the editor.")},"editor.inlayHints.fontSize":{type:"number",default:defaults.fontSize,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("inlayHints.fontSize","Controls font size of inlay hints in the editor. A default of 90% of `#editor.fontSize#` is used when the configured value is less than `5` or greater than the editor font size.")},"editor.inlayHints.fontFamily":{type:"string",default:defaults.fontFamily,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("inlayHints.fontFamily","Controls font family of inlay hints in the editor. When set to empty, the `#editor.fontFamily#` is used.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{enabled:boolean(input.enabled,this.defaultValue.enabled),fontSize:EditorIntOption.clampedInt(input.fontSize,this.defaultValue.fontSize,0,100),fontFamily:EditorStringOption.string(input.fontFamily,this.defaultValue.fontFamily)}}}
//#endregion
//#region lineHeight
class EditorLineHeight extends EditorFloatOption{constructor(){super(58/* lineHeight */,"lineHeight",EDITOR_FONT_DEFAULTS.lineHeight,(x=>EditorFloatOption.clamp(x,0,150)),{markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("lineHeight","Controls the line height. \n - Use 0 to automatically compute the line height from the font size.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values.")})}compute(env,options,value){
// The lineHeight is computed from the fontSize if it is 0.
// Moreover, the final lineHeight respects the editor zoom level.
// So take the result from env.fontInfo
return env.fontInfo.lineHeight}}class EditorMinimap extends BaseEditorOption{constructor(){const defaults={enabled:!0,size:"proportional",side:"right",showSlider:"mouseover",renderCharacters:!0,maxColumn:120,scale:1};super(64/* minimap */,"minimap",defaults,{"editor.minimap.enabled":{type:"boolean",default:defaults.enabled,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("minimap.enabled","Controls whether the minimap is shown.")},"editor.minimap.size":{type:"string",enum:["proportional","fill","fit"],enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("minimap.size.proportional","The minimap has the same size as the editor contents (and might scroll)."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("minimap.size.fill","The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling)."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("minimap.size.fit","The minimap will shrink as necessary to never be larger than the editor (no scrolling).")],default:defaults.size,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("minimap.size","Controls the size of the minimap.")},"editor.minimap.side":{type:"string",enum:["left","right"],default:defaults.side,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("minimap.side","Controls the side where to render the minimap.")},"editor.minimap.showSlider":{type:"string",enum:["always","mouseover"],default:defaults.showSlider,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("minimap.showSlider","Controls when the minimap slider is shown.")},"editor.minimap.scale":{type:"number",default:defaults.scale,minimum:1,maximum:3,enum:[1,2,3],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("minimap.scale","Scale of content drawn in the minimap: 1, 2 or 3.")},"editor.minimap.renderCharacters":{type:"boolean",default:defaults.renderCharacters,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("minimap.renderCharacters","Render the actual characters on a line as opposed to color blocks.")},"editor.minimap.maxColumn":{type:"number",default:defaults.maxColumn,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("minimap.maxColumn","Limit the width of the minimap to render at most a certain number of columns.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{enabled:boolean(input.enabled,this.defaultValue.enabled),size:stringSet(input.size,this.defaultValue.size,["proportional","fill","fit"]),side:stringSet(input.side,this.defaultValue.side,["right","left"]),showSlider:stringSet(input.showSlider,this.defaultValue.showSlider,["always","mouseover"]),renderCharacters:boolean(input.renderCharacters,this.defaultValue.renderCharacters),scale:EditorIntOption.clampedInt(input.scale,1,1,3),maxColumn:EditorIntOption.clampedInt(input.maxColumn,this.defaultValue.maxColumn,1,1e4)}}}
//#endregion
//#region multiCursorModifier
function _multiCursorModifierFromString(multiCursorModifier){return"ctrlCmd"===multiCursorModifier?_base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__/* .isMacintosh */.dz?"metaKey":"ctrlKey":"altKey"}class EditorPadding extends BaseEditorOption{constructor(){super(74/* padding */,"padding",{top:0,bottom:0},{"editor.padding.top":{type:"number",default:0,minimum:0,maximum:1e3,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("padding.top","Controls the amount of space between the top edge of the editor and the first line.")},"editor.padding.bottom":{type:"number",default:0,minimum:0,maximum:1e3,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("padding.bottom","Controls the amount of space between the bottom edge of the editor and the last line.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{top:EditorIntOption.clampedInt(input.top,0,0,1e3),bottom:EditorIntOption.clampedInt(input.bottom,0,0,1e3)}}}class EditorParameterHints extends BaseEditorOption{constructor(){const defaults={enabled:!0,cycle:!1};super(75/* parameterHints */,"parameterHints",defaults,{"editor.parameterHints.enabled":{type:"boolean",default:defaults.enabled,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("parameterHints.enabled","Enables a pop-up that shows parameter documentation and type information as you type.")},"editor.parameterHints.cycle":{type:"boolean",default:defaults.cycle,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("parameterHints.cycle","Controls whether the parameter hints menu cycles or closes when reaching the end of the list.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{enabled:boolean(input.enabled,this.defaultValue.enabled),cycle:boolean(input.cycle,this.defaultValue.cycle)}}}
//#endregion
//#region pixelRatio
class EditorPixelRatio extends ComputedEditorOption{constructor(){super(127/* pixelRatio */)}compute(env,options,_){return env.pixelRatio}}class EditorQuickSuggestions extends BaseEditorOption{constructor(){const defaults={other:!0,comments:!1,strings:!1};super(78/* quickSuggestions */,"quickSuggestions",defaults,{anyOf:[{type:"boolean"},{type:"object",properties:{strings:{type:"boolean",default:defaults.strings,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("quickSuggestions.strings","Enable quick suggestions inside strings.")},comments:{type:"boolean",default:defaults.comments,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("quickSuggestions.comments","Enable quick suggestions inside comments.")},other:{type:"boolean",default:defaults.other,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("quickSuggestions.other","Enable quick suggestions outside of strings and comments.")}}}],default:defaults,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("quickSuggestions","Controls whether suggestions should automatically show up while typing.")}),this.defaultValue=defaults}validate(_input){if("boolean"===typeof _input)return _input;if(_input&&"object"===typeof _input){const input=_input,opts={other:boolean(input.other,this.defaultValue.other),comments:boolean(input.comments,this.defaultValue.comments),strings:boolean(input.strings,this.defaultValue.strings)};return!!(opts.other&&opts.comments&&opts.strings)||!!(opts.other||opts.comments||opts.strings)&&opts}return this.defaultValue}}class EditorRenderLineNumbersOption extends BaseEditorOption{constructor(){super(59/* lineNumbers */,"lineNumbers",{renderType:1/* On */,renderFn:null},{type:"string",enum:["off","on","relative","interval"],enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("lineNumbers.off","Line numbers are not rendered."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("lineNumbers.on","Line numbers are rendered as absolute number."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("lineNumbers.relative","Line numbers are rendered as distance in lines to cursor position."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("lineNumbers.interval","Line numbers are rendered every 10 lines.")],default:"on",description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("lineNumbers","Controls the display of line numbers.")})}validate(lineNumbers){let renderType=this.defaultValue.renderType,renderFn=this.defaultValue.renderFn;return"undefined"!==typeof lineNumbers&&("function"===typeof lineNumbers?(renderType=4/* Custom */,renderFn=lineNumbers):renderType="interval"===lineNumbers?3/* Interval */:"relative"===lineNumbers?2/* Relative */:"on"===lineNumbers?1/* On */:0/* Off */),{renderType:renderType,renderFn:renderFn}}}
//#endregion
//#region renderValidationDecorations
/**
 * @internal
 */function filterValidationDecorations(options){const renderValidationDecorations=options.get(86/* renderValidationDecorations */);return"editable"===renderValidationDecorations?options.get(80/* readOnly */):"on"!==renderValidationDecorations}class EditorRulers extends BaseEditorOption{constructor(){const defaults=[],columnSchema={type:"number",description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("rulers.size","Number of monospace characters at which this editor ruler will render.")};super(90/* rulers */,"rulers",defaults,{type:"array",items:{anyOf:[columnSchema,{type:["object"],properties:{column:columnSchema,color:{type:"string",description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("rulers.color","Color of this editor ruler."),format:"color-hex"}}}]},default:defaults,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("rulers","Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.")})}validate(input){if(Array.isArray(input)){let rulers=[];for(let _element of input)if("number"===typeof _element)rulers.push({column:EditorIntOption.clampedInt(_element,0,0,1e4),color:null});else if(_element&&"object"===typeof _element){const element=_element;rulers.push({column:EditorIntOption.clampedInt(element.column,0,0,1e4),color:element.color})}return rulers.sort(((a,b)=>a.column-b.column)),rulers}return this.defaultValue}}function _scrollbarVisibilityFromString(visibility,defaultValue){if("string"!==typeof visibility)return defaultValue;switch(visibility){case"hidden":return 2/* Hidden */;case"visible":return 3/* Visible */;default:return 1/* Auto */}}class EditorScrollbar extends BaseEditorOption{constructor(){const defaults={vertical:1/* Auto */,horizontal:1/* Auto */,arrowSize:11,useShadows:!0,verticalHasArrows:!1,horizontalHasArrows:!1,horizontalScrollbarSize:12,horizontalSliderSize:12,verticalScrollbarSize:14,verticalSliderSize:14,handleMouseWheel:!0,alwaysConsumeMouseWheel:!0,scrollByPage:!1};super(91/* scrollbar */,"scrollbar",defaults,{"editor.scrollbar.vertical":{type:"string",enum:["auto","visible","hidden"],enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollbar.vertical.auto","The vertical scrollbar will be visible only when necessary."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollbar.vertical.visible","The vertical scrollbar will always be visible."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollbar.vertical.fit","The vertical scrollbar will always be hidden.")],default:"auto",description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollbar.vertical","Controls the visibility of the vertical scrollbar.")},"editor.scrollbar.horizontal":{type:"string",enum:["auto","visible","hidden"],enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollbar.horizontal.auto","The horizontal scrollbar will be visible only when necessary."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollbar.horizontal.visible","The horizontal scrollbar will always be visible."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollbar.horizontal.fit","The horizontal scrollbar will always be hidden.")],default:"auto",description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollbar.horizontal","Controls the visibility of the horizontal scrollbar.")},"editor.scrollbar.verticalScrollbarSize":{type:"number",default:defaults.verticalScrollbarSize,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollbar.verticalScrollbarSize","The width of the vertical scrollbar.")},"editor.scrollbar.horizontalScrollbarSize":{type:"number",default:defaults.horizontalScrollbarSize,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollbar.horizontalScrollbarSize","The height of the horizontal scrollbar.")},"editor.scrollbar.scrollByPage":{type:"boolean",default:defaults.scrollByPage,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollbar.scrollByPage","Controls whether clicks scroll by page or jump to click position.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input,horizontalScrollbarSize=EditorIntOption.clampedInt(input.horizontalScrollbarSize,this.defaultValue.horizontalScrollbarSize,0,1e3),verticalScrollbarSize=EditorIntOption.clampedInt(input.verticalScrollbarSize,this.defaultValue.verticalScrollbarSize,0,1e3);return{arrowSize:EditorIntOption.clampedInt(input.arrowSize,this.defaultValue.arrowSize,0,1e3),vertical:_scrollbarVisibilityFromString(input.vertical,this.defaultValue.vertical),horizontal:_scrollbarVisibilityFromString(input.horizontal,this.defaultValue.horizontal),useShadows:boolean(input.useShadows,this.defaultValue.useShadows),verticalHasArrows:boolean(input.verticalHasArrows,this.defaultValue.verticalHasArrows),horizontalHasArrows:boolean(input.horizontalHasArrows,this.defaultValue.horizontalHasArrows),handleMouseWheel:boolean(input.handleMouseWheel,this.defaultValue.handleMouseWheel),alwaysConsumeMouseWheel:boolean(input.alwaysConsumeMouseWheel,this.defaultValue.alwaysConsumeMouseWheel),horizontalScrollbarSize:horizontalScrollbarSize,horizontalSliderSize:EditorIntOption.clampedInt(input.horizontalSliderSize,horizontalScrollbarSize,0,1e3),verticalScrollbarSize:verticalScrollbarSize,verticalSliderSize:EditorIntOption.clampedInt(input.verticalSliderSize,verticalScrollbarSize,0,1e3),scrollByPage:boolean(input.scrollByPage,this.defaultValue.scrollByPage)}}}
/**
 * Configuration options for inline suggestions
 */class InlineEditorSuggest extends BaseEditorOption{constructor(){const defaults={enabled:!0,mode:"subwordSmart"};super(54/* inlineSuggest */,"inlineSuggest",defaults,{"editor.inlineSuggest.enabled":{type:"boolean",default:defaults.enabled,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("inlineSuggest.enabled","Controls whether to automatically show inline suggestions in the editor.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{enabled:boolean(input.enabled,this.defaultValue.enabled),mode:stringSet(input.mode,this.defaultValue.mode,["prefix","subword","subwordSmart"])}}}
/**
 * Configuration options for inline suggestions
 */class BracketPairColorization extends BaseEditorOption{constructor(){const defaults={enabled:EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions.enabled};super(12/* bracketPairColorization */,"bracketPairColorization",defaults,{"editor.bracketPairColorization.enabled":{type:"boolean",default:defaults.enabled,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("bracketPairColorization.enabled","Controls whether bracket pair colorization is enabled or not. Use 'workbench.colorCustomizations' to override the bracket highlight colors.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{enabled:boolean(input.enabled,this.defaultValue.enabled)}}}
/**
 * Configuration options for inline suggestions
 */class GuideOptions extends BaseEditorOption{constructor(){const defaults={bracketPairs:!1,bracketPairsHorizontal:"active",highlightActiveBracketPair:!0,indentation:!0,highlightActiveIndentation:!0};super(13/* guides */,"guides",defaults,{"editor.guides.bracketPairs":{type:["boolean","string"],enum:[!0,"active",!1],enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.guides.bracketPairs.true","Enables bracket pair guides."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.guides.bracketPairs.active","Enables bracket pair guides only for the active bracket pair."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.guides.bracketPairs.false","Disables bracket pair guides.")],default:defaults.bracketPairs,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.guides.bracketPairs","Controls whether bracket pair guides are enabled or not.")},"editor.guides.bracketPairsHorizontal":{type:["boolean","string"],enum:[!0,"active",!1],enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.guides.bracketPairsHorizontal.true","Enables horizontal guides as addition to vertical bracket pair guides."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.guides.bracketPairsHorizontal.active","Enables horizontal guides only for the active bracket pair."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.guides.bracketPairsHorizontal.false","Disables horizontal bracket pair guides.")],default:defaults.bracketPairsHorizontal,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.guides.bracketPairsHorizontal","Controls whether horizontal bracket pair guides are enabled or not.")},"editor.guides.highlightActiveBracketPair":{type:"boolean",default:defaults.highlightActiveBracketPair,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.guides.highlightActiveBracketPair","Controls whether bracket pair guides are enabled or not.")},"editor.guides.indentation":{type:"boolean",default:defaults.indentation,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.guides.indentation","Controls whether the editor should render indent guides.")},"editor.guides.highlightActiveIndentation":{type:"boolean",default:defaults.highlightActiveIndentation,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.guides.highlightActiveIndentation","Controls whether the editor should highlight the active indent guide.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{bracketPairs:primitiveSet(input.bracketPairs,this.defaultValue.bracketPairs,[!0,!1,"active"]),bracketPairsHorizontal:primitiveSet(input.bracketPairsHorizontal,this.defaultValue.bracketPairsHorizontal,[!0,!1,"active"]),highlightActiveBracketPair:boolean(input.highlightActiveBracketPair,this.defaultValue.highlightActiveBracketPair),indentation:boolean(input.indentation,this.defaultValue.indentation),highlightActiveIndentation:boolean(input.highlightActiveIndentation,this.defaultValue.highlightActiveIndentation)}}}function primitiveSet(value,defaultValue,allowedValues){const idx=allowedValues.indexOf(value);return-1===idx?defaultValue:allowedValues[idx]}class EditorSuggest extends BaseEditorOption{constructor(){const defaults={insertMode:"insert",filterGraceful:!0,snippetsPreventQuickSuggestions:!0,localityBonus:!1,shareSuggestSelections:!1,showIcons:!0,showStatusBar:!1,preview:!1,previewMode:"subwordSmart",showInlineDetails:!0,showMethods:!0,showFunctions:!0,showConstructors:!0,showDeprecated:!0,showFields:!0,showVariables:!0,showClasses:!0,showStructs:!0,showInterfaces:!0,showModules:!0,showProperties:!0,showEvents:!0,showOperators:!0,showUnits:!0,showValues:!0,showConstants:!0,showEnums:!0,showEnumMembers:!0,showKeywords:!0,showWords:!0,showColors:!0,showFiles:!0,showReferences:!0,showFolders:!0,showTypeParameters:!0,showSnippets:!0,showUsers:!0,showIssues:!0};super(105/* suggest */,"suggest",defaults,{"editor.suggest.insertMode":{type:"string",enum:["insert","replace"],enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.insertMode.insert","Insert suggestion without overwriting text right of the cursor."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.insertMode.replace","Insert suggestion and overwrite text right of the cursor.")],default:defaults.insertMode,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.insertMode","Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.")},"editor.suggest.filterGraceful":{type:"boolean",default:defaults.filterGraceful,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.filterGraceful","Controls whether filtering and sorting suggestions accounts for small typos.")},"editor.suggest.localityBonus":{type:"boolean",default:defaults.localityBonus,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.localityBonus","Controls whether sorting favors words that appear close to the cursor.")},"editor.suggest.shareSuggestSelections":{type:"boolean",default:defaults.shareSuggestSelections,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.shareSuggestSelections","Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).")},"editor.suggest.snippetsPreventQuickSuggestions":{type:"boolean",default:defaults.snippetsPreventQuickSuggestions,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.snippetsPreventQuickSuggestions","Controls whether an active snippet prevents quick suggestions.")},"editor.suggest.showIcons":{type:"boolean",default:defaults.showIcons,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.showIcons","Controls whether to show or hide icons in suggestions.")},"editor.suggest.showStatusBar":{type:"boolean",default:defaults.showStatusBar,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.showStatusBar","Controls the visibility of the status bar at the bottom of the suggest widget.")},"editor.suggest.preview":{type:"boolean",default:defaults.preview,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.preview","Controls whether to preview the suggestion outcome in the editor.")},"editor.suggest.showInlineDetails":{type:"boolean",default:defaults.showInlineDetails,description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.showInlineDetails","Controls whether suggest details show inline with the label or only in the details widget")},"editor.suggest.maxVisibleSuggestions":{type:"number",deprecationMessage:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggest.maxVisibleSuggestions.dep","This setting is deprecated. The suggest widget can now be resized.")},"editor.suggest.filteredTypes":{type:"object",deprecationMessage:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("deprecated","This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.")},"editor.suggest.showMethods":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showMethods","When enabled IntelliSense shows `method`-suggestions.")},"editor.suggest.showFunctions":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showFunctions","When enabled IntelliSense shows `function`-suggestions.")},"editor.suggest.showConstructors":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showConstructors","When enabled IntelliSense shows `constructor`-suggestions.")},"editor.suggest.showDeprecated":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showDeprecated","When enabled IntelliSense shows `deprecated`-suggestions.")},"editor.suggest.showFields":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showFields","When enabled IntelliSense shows `field`-suggestions.")},"editor.suggest.showVariables":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showVariables","When enabled IntelliSense shows `variable`-suggestions.")},"editor.suggest.showClasses":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showClasss","When enabled IntelliSense shows `class`-suggestions.")},"editor.suggest.showStructs":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showStructs","When enabled IntelliSense shows `struct`-suggestions.")},"editor.suggest.showInterfaces":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showInterfaces","When enabled IntelliSense shows `interface`-suggestions.")},"editor.suggest.showModules":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showModules","When enabled IntelliSense shows `module`-suggestions.")},"editor.suggest.showProperties":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showPropertys","When enabled IntelliSense shows `property`-suggestions.")},"editor.suggest.showEvents":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showEvents","When enabled IntelliSense shows `event`-suggestions.")},"editor.suggest.showOperators":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showOperators","When enabled IntelliSense shows `operator`-suggestions.")},"editor.suggest.showUnits":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showUnits","When enabled IntelliSense shows `unit`-suggestions.")},"editor.suggest.showValues":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showValues","When enabled IntelliSense shows `value`-suggestions.")},"editor.suggest.showConstants":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showConstants","When enabled IntelliSense shows `constant`-suggestions.")},"editor.suggest.showEnums":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showEnums","When enabled IntelliSense shows `enum`-suggestions.")},"editor.suggest.showEnumMembers":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showEnumMembers","When enabled IntelliSense shows `enumMember`-suggestions.")},"editor.suggest.showKeywords":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showKeywords","When enabled IntelliSense shows `keyword`-suggestions.")},"editor.suggest.showWords":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showTexts","When enabled IntelliSense shows `text`-suggestions.")},"editor.suggest.showColors":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showColors","When enabled IntelliSense shows `color`-suggestions.")},"editor.suggest.showFiles":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showFiles","When enabled IntelliSense shows `file`-suggestions.")},"editor.suggest.showReferences":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showReferences","When enabled IntelliSense shows `reference`-suggestions.")},"editor.suggest.showCustomcolors":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showCustomcolors","When enabled IntelliSense shows `customcolor`-suggestions.")},"editor.suggest.showFolders":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showFolders","When enabled IntelliSense shows `folder`-suggestions.")},"editor.suggest.showTypeParameters":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showTypeParameters","When enabled IntelliSense shows `typeParameter`-suggestions.")},"editor.suggest.showSnippets":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showSnippets","When enabled IntelliSense shows `snippet`-suggestions.")},"editor.suggest.showUsers":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showUsers","When enabled IntelliSense shows `user`-suggestions.")},"editor.suggest.showIssues":{type:"boolean",default:!0,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.suggest.showIssues","When enabled IntelliSense shows `issues`-suggestions.")}})}validate(_input){if(!_input||"object"!==typeof _input)return this.defaultValue;const input=_input;return{insertMode:stringSet(input.insertMode,this.defaultValue.insertMode,["insert","replace"]),filterGraceful:boolean(input.filterGraceful,this.defaultValue.filterGraceful),snippetsPreventQuickSuggestions:boolean(input.snippetsPreventQuickSuggestions,this.defaultValue.filterGraceful),localityBonus:boolean(input.localityBonus,this.defaultValue.localityBonus),shareSuggestSelections:boolean(input.shareSuggestSelections,this.defaultValue.shareSuggestSelections),showIcons:boolean(input.showIcons,this.defaultValue.showIcons),showStatusBar:boolean(input.showStatusBar,this.defaultValue.showStatusBar),preview:boolean(input.preview,this.defaultValue.preview),previewMode:stringSet(input.previewMode,this.defaultValue.previewMode,["prefix","subword","subwordSmart"]),showInlineDetails:boolean(input.showInlineDetails,this.defaultValue.showInlineDetails),showMethods:boolean(input.showMethods,this.defaultValue.showMethods),showFunctions:boolean(input.showFunctions,this.defaultValue.showFunctions),showConstructors:boolean(input.showConstructors,this.defaultValue.showConstructors),showDeprecated:boolean(input.showDeprecated,this.defaultValue.showDeprecated),showFields:boolean(input.showFields,this.defaultValue.showFields),showVariables:boolean(input.showVariables,this.defaultValue.showVariables),showClasses:boolean(input.showClasses,this.defaultValue.showClasses),showStructs:boolean(input.showStructs,this.defaultValue.showStructs),showInterfaces:boolean(input.showInterfaces,this.defaultValue.showInterfaces),showModules:boolean(input.showModules,this.defaultValue.showModules),showProperties:boolean(input.showProperties,this.defaultValue.showProperties),showEvents:boolean(input.showEvents,this.defaultValue.showEvents),showOperators:boolean(input.showOperators,this.defaultValue.showOperators),showUnits:boolean(input.showUnits,this.defaultValue.showUnits),showValues:boolean(input.showValues,this.defaultValue.showValues),showConstants:boolean(input.showConstants,this.defaultValue.showConstants),showEnums:boolean(input.showEnums,this.defaultValue.showEnums),showEnumMembers:boolean(input.showEnumMembers,this.defaultValue.showEnumMembers),showKeywords:boolean(input.showKeywords,this.defaultValue.showKeywords),showWords:boolean(input.showWords,this.defaultValue.showWords),showColors:boolean(input.showColors,this.defaultValue.showColors),showFiles:boolean(input.showFiles,this.defaultValue.showFiles),showReferences:boolean(input.showReferences,this.defaultValue.showReferences),showFolders:boolean(input.showFolders,this.defaultValue.showFolders),showTypeParameters:boolean(input.showTypeParameters,this.defaultValue.showTypeParameters),showSnippets:boolean(input.showSnippets,this.defaultValue.showSnippets),showUsers:boolean(input.showUsers,this.defaultValue.showUsers),showIssues:boolean(input.showIssues,this.defaultValue.showIssues)}}}class SmartSelect extends BaseEditorOption{constructor(){super(101/* smartSelect */,"smartSelect",{selectLeadingAndTrailingWhitespace:!0},{"editor.smartSelect.selectLeadingAndTrailingWhitespace":{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("selectLeadingAndTrailingWhitespace","Whether leading and trailing whitespace should always be selected."),default:!0,type:"boolean"}})}validate(input){return input&&"object"===typeof input?{selectLeadingAndTrailingWhitespace:boolean(input.selectLeadingAndTrailingWhitespace,this.defaultValue.selectLeadingAndTrailingWhitespace)}:this.defaultValue}}
//#endregion
//#region tabFocusMode
class EditorTabFocusMode extends ComputedEditorOption{constructor(){super(128/* tabFocusMode */,[80/* readOnly */])}compute(env,options,_){const readOnly=options.get(80/* readOnly */);return!!readOnly||env.tabFocusMode}}function _wrappingIndentFromString(wrappingIndent){switch(wrappingIndent){case"none":return 0/* None */;case"same":return 1/* Same */;case"indent":return 2/* Indent */;case"deepIndent":return 3/* DeepIndent */}}class EditorWrappingInfoComputer extends ComputedEditorOption{constructor(){super(130/* wrappingInfo */,[129/* layoutInfo */])}compute(env,options,_){const layoutInfo=options.get(129/* layoutInfo */);return{isDominatedByLongLines:env.isDominatedByLongLines,isWordWrapMinified:layoutInfo.isWordWrapMinified,isViewportWrapping:layoutInfo.isViewportWrapping,wrappingColumn:layoutInfo.wrappingColumn}}}
//#endregion
const DEFAULT_WINDOWS_FONT_FAMILY="Consolas, 'Courier New', monospace",DEFAULT_MAC_FONT_FAMILY="Menlo, Monaco, 'Courier New', monospace",DEFAULT_LINUX_FONT_FAMILY="'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",EDITOR_FONT_DEFAULTS={fontFamily:_base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__/* .isMacintosh */.dz?DEFAULT_MAC_FONT_FAMILY:_base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__/* .isLinux */.IJ?DEFAULT_LINUX_FONT_FAMILY:DEFAULT_WINDOWS_FONT_FAMILY,fontWeight:"normal",fontSize:_base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__/* .isMacintosh */.dz?12:14,lineHeight:0,letterSpacing:0},EDITOR_MODEL_DEFAULTS={tabSize:4,indentSize:4,insertSpaces:!0,detectIndentation:!0,trimAutoWhitespace:!0,largeFileOptimizations:!0,bracketPairColorizationOptions:{enabled:!1}},editorOptionsRegistry=[];function register(option){return editorOptionsRegistry[option.id]=option,option}const EditorOptions={acceptSuggestionOnCommitCharacter:register(new EditorBooleanOption(0/* acceptSuggestionOnCommitCharacter */,"acceptSuggestionOnCommitCharacter",!0,{markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("acceptSuggestionOnCommitCharacter","Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.")})),acceptSuggestionOnEnter:register(new EditorStringEnumOption(1/* acceptSuggestionOnEnter */,"acceptSuggestionOnEnter","on",["on","smart","off"],{markdownEnumDescriptions:["",_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("acceptSuggestionOnEnterSmart","Only accept a suggestion with `Enter` when it makes a textual change."),""],markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("acceptSuggestionOnEnter","Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.")})),accessibilitySupport:register(new EditorAccessibilitySupport),accessibilityPageSize:register(new EditorIntOption(3/* accessibilityPageSize */,"accessibilityPageSize",10,1,1073741824/* MAX_SAFE_SMALL_INTEGER */,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("accessibilityPageSize","Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.")})),ariaLabel:register(new EditorStringOption(4/* ariaLabel */,"ariaLabel",_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editorViewAccessibleLabel","Editor content"))),autoClosingBrackets:register(new EditorStringEnumOption(5/* autoClosingBrackets */,"autoClosingBrackets","languageDefined",["always","languageDefined","beforeWhitespace","never"],{enumDescriptions:["",_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoClosingBrackets.languageDefined","Use language configurations to determine when to autoclose brackets."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoClosingBrackets.beforeWhitespace","Autoclose brackets only when the cursor is to the left of whitespace."),""],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("autoClosingBrackets","Controls whether the editor should automatically close brackets after the user adds an opening bracket.")})),autoClosingDelete:register(new EditorStringEnumOption(6/* autoClosingDelete */,"autoClosingDelete","auto",["always","auto","never"],{enumDescriptions:["",_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoClosingDelete.auto","Remove adjacent closing quotes or brackets only if they were automatically inserted."),""],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("autoClosingDelete","Controls whether the editor should remove adjacent closing quotes or brackets when deleting.")})),autoClosingOvertype:register(new EditorStringEnumOption(7/* autoClosingOvertype */,"autoClosingOvertype","auto",["always","auto","never"],{enumDescriptions:["",_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoClosingOvertype.auto","Type over closing quotes or brackets only if they were automatically inserted."),""],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("autoClosingOvertype","Controls whether the editor should type over closing quotes or brackets.")})),autoClosingQuotes:register(new EditorStringEnumOption(8/* autoClosingQuotes */,"autoClosingQuotes","languageDefined",["always","languageDefined","beforeWhitespace","never"],{enumDescriptions:["",_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoClosingQuotes.languageDefined","Use language configurations to determine when to autoclose quotes."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoClosingQuotes.beforeWhitespace","Autoclose quotes only when the cursor is to the left of whitespace."),""],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("autoClosingQuotes","Controls whether the editor should automatically close quotes after the user adds an opening quote.")})),autoIndent:register(new EditorEnumOption(9/* autoIndent */,"autoIndent",4/* Full */,"full",["none","keep","brackets","advanced","full"],_autoIndentFromString,{enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoIndent.none","The editor will not insert indentation automatically."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoIndent.keep","The editor will keep the current line's indentation."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoIndent.brackets","The editor will keep the current line's indentation and honor language defined brackets."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoIndent.advanced","The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoIndent.full","The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("autoIndent","Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.")})),automaticLayout:register(new EditorBooleanOption(10/* automaticLayout */,"automaticLayout",!1)),autoSurround:register(new EditorStringEnumOption(11/* autoSurround */,"autoSurround","languageDefined",["languageDefined","quotes","brackets","never"],{enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoSurround.languageDefined","Use language configurations to determine when to automatically surround selections."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoSurround.quotes","Surround with quotes but not brackets."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("editor.autoSurround.brackets","Surround with brackets but not quotes."),""],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("autoSurround","Controls whether the editor should automatically surround selections when typing quotes or brackets.")})),bracketPairColorization:register(new BracketPairColorization),bracketPairGuides:register(new GuideOptions),stickyTabStops:register(new EditorBooleanOption(103/* stickyTabStops */,"stickyTabStops",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("stickyTabStops","Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.")})),codeLens:register(new EditorBooleanOption(14/* codeLens */,"codeLens",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("codeLens","Controls whether the editor shows CodeLens.")})),codeLensFontFamily:register(new EditorStringOption(15/* codeLensFontFamily */,"codeLensFontFamily","",{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("codeLensFontFamily","Controls the font family for CodeLens.")})),codeLensFontSize:register(new EditorIntOption(16/* codeLensFontSize */,"codeLensFontSize",0,0,100,{type:"number",default:0,minimum:0,maximum:100,markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("codeLensFontSize","Controls the font size in pixels for CodeLens. When set to `0`, the 90% of `#editor.fontSize#` is used.")})),colorDecorators:register(new EditorBooleanOption(17/* colorDecorators */,"colorDecorators",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("colorDecorators","Controls whether the editor should render the inline color decorators and color picker.")})),columnSelection:register(new EditorBooleanOption(18/* columnSelection */,"columnSelection",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("columnSelection","Enable that the selection with the mouse and keys is doing column selection.")})),comments:register(new EditorComments),contextmenu:register(new EditorBooleanOption(20/* contextmenu */,"contextmenu",!0)),copyWithSyntaxHighlighting:register(new EditorBooleanOption(21/* copyWithSyntaxHighlighting */,"copyWithSyntaxHighlighting",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("copyWithSyntaxHighlighting","Controls whether syntax highlighting should be copied into the clipboard.")})),cursorBlinking:register(new EditorEnumOption(22/* cursorBlinking */,"cursorBlinking",1/* Blink */,"blink",["blink","smooth","phase","expand","solid"],_cursorBlinkingStyleFromString,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("cursorBlinking","Control the cursor animation style.")})),cursorSmoothCaretAnimation:register(new EditorBooleanOption(23/* cursorSmoothCaretAnimation */,"cursorSmoothCaretAnimation",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("cursorSmoothCaretAnimation","Controls whether the smooth caret animation should be enabled.")})),cursorStyle:register(new EditorEnumOption(24/* cursorStyle */,"cursorStyle",TextEditorCursorStyle.Line,"line",["line","block","underline","line-thin","block-outline","underline-thin"],_cursorStyleFromString,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("cursorStyle","Controls the cursor style.")})),cursorSurroundingLines:register(new EditorIntOption(25/* cursorSurroundingLines */,"cursorSurroundingLines",0,0,1073741824/* MAX_SAFE_SMALL_INTEGER */,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("cursorSurroundingLines","Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.")})),cursorSurroundingLinesStyle:register(new EditorStringEnumOption(26/* cursorSurroundingLinesStyle */,"cursorSurroundingLinesStyle","default",["default","all"],{enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("cursorSurroundingLinesStyle.default","`cursorSurroundingLines` is enforced only when triggered via the keyboard or API."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("cursorSurroundingLinesStyle.all","`cursorSurroundingLines` is enforced always.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("cursorSurroundingLinesStyle","Controls when `cursorSurroundingLines` should be enforced.")})),cursorWidth:register(new EditorIntOption(27/* cursorWidth */,"cursorWidth",0,0,1073741824/* MAX_SAFE_SMALL_INTEGER */,{markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("cursorWidth","Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.")})),disableLayerHinting:register(new EditorBooleanOption(28/* disableLayerHinting */,"disableLayerHinting",!1)),disableMonospaceOptimizations:register(new EditorBooleanOption(29/* disableMonospaceOptimizations */,"disableMonospaceOptimizations",!1)),domReadOnly:register(new EditorBooleanOption(30/* domReadOnly */,"domReadOnly",!1)),dragAndDrop:register(new EditorBooleanOption(31/* dragAndDrop */,"dragAndDrop",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("dragAndDrop","Controls whether the editor should allow moving selections via drag and drop.")})),emptySelectionClipboard:register(new EditorEmptySelectionClipboard),extraEditorClassName:register(new EditorStringOption(33/* extraEditorClassName */,"extraEditorClassName","")),fastScrollSensitivity:register(new EditorFloatOption(34/* fastScrollSensitivity */,"fastScrollSensitivity",5,(x=>x<=0?5:x),{markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("fastScrollSensitivity","Scrolling speed multiplier when pressing `Alt`.")})),find:register(new EditorFind),fixedOverflowWidgets:register(new EditorBooleanOption(36/* fixedOverflowWidgets */,"fixedOverflowWidgets",!1)),folding:register(new EditorBooleanOption(37/* folding */,"folding",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("folding","Controls whether the editor has code folding enabled.")})),foldingStrategy:register(new EditorStringEnumOption(38/* foldingStrategy */,"foldingStrategy","auto",["auto","indentation"],{enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("foldingStrategy.auto","Use a language-specific folding strategy if available, else the indentation-based one."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("foldingStrategy.indentation","Use the indentation-based folding strategy.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("foldingStrategy","Controls the strategy for computing folding ranges.")})),foldingHighlight:register(new EditorBooleanOption(39/* foldingHighlight */,"foldingHighlight",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("foldingHighlight","Controls whether the editor should highlight folded ranges.")})),foldingImportsByDefault:register(new EditorBooleanOption(40/* foldingImportsByDefault */,"foldingImportsByDefault",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("foldingImportsByDefault","Controls whether the editor automatically collapses import ranges.")})),unfoldOnClickAfterEndOfLine:register(new EditorBooleanOption(41/* unfoldOnClickAfterEndOfLine */,"unfoldOnClickAfterEndOfLine",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("unfoldOnClickAfterEndOfLine","Controls whether clicking on the empty content after a folded line will unfold the line.")})),fontFamily:register(new EditorStringOption(42/* fontFamily */,"fontFamily",EDITOR_FONT_DEFAULTS.fontFamily,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("fontFamily","Controls the font family.")})),fontInfo:register(new EditorFontInfo),fontLigatures2:register(new EditorFontLigatures),fontSize:register(new EditorFontSize),fontWeight:register(new EditorFontWeight),formatOnPaste:register(new EditorBooleanOption(47/* formatOnPaste */,"formatOnPaste",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("formatOnPaste","Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.")})),formatOnType:register(new EditorBooleanOption(48/* formatOnType */,"formatOnType",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("formatOnType","Controls whether the editor should automatically format the line after typing.")})),glyphMargin:register(new EditorBooleanOption(49/* glyphMargin */,"glyphMargin",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("glyphMargin","Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.")})),gotoLocation:register(new EditorGoToLocation),hideCursorInOverviewRuler:register(new EditorBooleanOption(51/* hideCursorInOverviewRuler */,"hideCursorInOverviewRuler",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("hideCursorInOverviewRuler","Controls whether the cursor should be hidden in the overview ruler.")})),hover:register(new EditorHover),inDiffEditor:register(new EditorBooleanOption(53/* inDiffEditor */,"inDiffEditor",!1)),letterSpacing:register(new EditorFloatOption(55/* letterSpacing */,"letterSpacing",EDITOR_FONT_DEFAULTS.letterSpacing,(x=>EditorFloatOption.clamp(x,-5,20)),{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("letterSpacing","Controls the letter spacing in pixels.")})),lightbulb:register(new EditorLightbulb),lineDecorationsWidth:register(new SimpleEditorOption(57/* lineDecorationsWidth */,"lineDecorationsWidth",10)),lineHeight:register(new EditorLineHeight),lineNumbers:register(new EditorRenderLineNumbersOption),lineNumbersMinChars:register(new EditorIntOption(60/* lineNumbersMinChars */,"lineNumbersMinChars",5,1,300)),linkedEditing:register(new EditorBooleanOption(61/* linkedEditing */,"linkedEditing",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("linkedEditing","Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.")})),links:register(new EditorBooleanOption(62/* links */,"links",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("links","Controls whether the editor should detect links and make them clickable.")})),matchBrackets:register(new EditorStringEnumOption(63/* matchBrackets */,"matchBrackets","always",["always","near","never"],{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("matchBrackets","Highlight matching brackets.")})),minimap:register(new EditorMinimap),mouseStyle:register(new EditorStringEnumOption(65/* mouseStyle */,"mouseStyle","text",["text","default","copy"])),mouseWheelScrollSensitivity:register(new EditorFloatOption(66/* mouseWheelScrollSensitivity */,"mouseWheelScrollSensitivity",1,(x=>0===x?1:x),{markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("mouseWheelScrollSensitivity","A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.")})),mouseWheelZoom:register(new EditorBooleanOption(67/* mouseWheelZoom */,"mouseWheelZoom",!1,{markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("mouseWheelZoom","Zoom the font of the editor when using mouse wheel and holding `Ctrl`.")})),multiCursorMergeOverlapping:register(new EditorBooleanOption(68/* multiCursorMergeOverlapping */,"multiCursorMergeOverlapping",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("multiCursorMergeOverlapping","Merge multiple cursors when they are overlapping.")})),multiCursorModifier:register(new EditorEnumOption(69/* multiCursorModifier */,"multiCursorModifier","altKey","alt",["ctrlCmd","alt"],_multiCursorModifierFromString,{markdownEnumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("multiCursorModifier.ctrlCmd","Maps to `Control` on Windows and Linux and to `Command` on macOS."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("multiCursorModifier.alt","Maps to `Alt` on Windows and Linux and to `Option` on macOS.")],markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N({key:"multiCursorModifier",comment:["- `ctrlCmd` refers to a value the setting can take and should not be localized.","- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized."]},"The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).")})),multiCursorPaste:register(new EditorStringEnumOption(70/* multiCursorPaste */,"multiCursorPaste","spread",["spread","full"],{markdownEnumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("multiCursorPaste.spread","Each cursor pastes a single line of the text."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("multiCursorPaste.full","Each cursor pastes the full text.")],markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("multiCursorPaste","Controls pasting when the line count of the pasted text matches the cursor count.")})),occurrencesHighlight:register(new EditorBooleanOption(71/* occurrencesHighlight */,"occurrencesHighlight",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("occurrencesHighlight","Controls whether the editor should highlight semantic symbol occurrences.")})),overviewRulerBorder:register(new EditorBooleanOption(72/* overviewRulerBorder */,"overviewRulerBorder",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("overviewRulerBorder","Controls whether a border should be drawn around the overview ruler.")})),overviewRulerLanes:register(new EditorIntOption(73/* overviewRulerLanes */,"overviewRulerLanes",3,0,3)),padding:register(new EditorPadding),parameterHints:register(new EditorParameterHints),peekWidgetDefaultFocus:register(new EditorStringEnumOption(76/* peekWidgetDefaultFocus */,"peekWidgetDefaultFocus","tree",["tree","editor"],{enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("peekWidgetDefaultFocus.tree","Focus the tree when opening peek"),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("peekWidgetDefaultFocus.editor","Focus the editor when opening peek")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("peekWidgetDefaultFocus","Controls whether to focus the inline editor or the tree in the peek widget.")})),definitionLinkOpensInPeek:register(new EditorBooleanOption(77/* definitionLinkOpensInPeek */,"definitionLinkOpensInPeek",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("definitionLinkOpensInPeek","Controls whether the Go to Definition mouse gesture always opens the peek widget.")})),quickSuggestions:register(new EditorQuickSuggestions),quickSuggestionsDelay:register(new EditorIntOption(79/* quickSuggestionsDelay */,"quickSuggestionsDelay",10,0,1073741824/* MAX_SAFE_SMALL_INTEGER */,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("quickSuggestionsDelay","Controls the delay in milliseconds after which quick suggestions will show up.")})),readOnly:register(new EditorBooleanOption(80/* readOnly */,"readOnly",!1)),renameOnType:register(new EditorBooleanOption(81/* renameOnType */,"renameOnType",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("renameOnType","Controls whether the editor auto renames on type."),markdownDeprecationMessage:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("renameOnTypeDeprecate","Deprecated, use `editor.linkedEditing` instead.")})),renderControlCharacters:register(new EditorBooleanOption(82/* renderControlCharacters */,"renderControlCharacters",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("renderControlCharacters","Controls whether the editor should render control characters."),restricted:!0})),renderFinalNewline:register(new EditorBooleanOption(83/* renderFinalNewline */,"renderFinalNewline",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("renderFinalNewline","Render last line number when the file ends with a newline.")})),renderLineHighlight:register(new EditorStringEnumOption(84/* renderLineHighlight */,"renderLineHighlight","line",["none","gutter","line","all"],{enumDescriptions:["","","",_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("renderLineHighlight.all","Highlights both the gutter and the current line.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("renderLineHighlight","Controls how the editor should render the current line highlight.")})),renderLineHighlightOnlyWhenFocus:register(new EditorBooleanOption(85/* renderLineHighlightOnlyWhenFocus */,"renderLineHighlightOnlyWhenFocus",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("renderLineHighlightOnlyWhenFocus","Controls if the editor should render the current line highlight only when the editor is focused.")})),renderValidationDecorations:register(new EditorStringEnumOption(86/* renderValidationDecorations */,"renderValidationDecorations","editable",["editable","on","off"])),renderWhitespace:register(new EditorStringEnumOption(87/* renderWhitespace */,"renderWhitespace","selection",["none","boundary","selection","trailing","all"],{enumDescriptions:["",_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("renderWhitespace.boundary","Render whitespace characters except for single spaces between words."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("renderWhitespace.selection","Render whitespace characters only on selected text."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("renderWhitespace.trailing","Render only trailing whitespace characters."),""],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("renderWhitespace","Controls how the editor should render whitespace characters.")})),revealHorizontalRightPadding:register(new EditorIntOption(88/* revealHorizontalRightPadding */,"revealHorizontalRightPadding",30,0,1e3)),roundedSelection:register(new EditorBooleanOption(89/* roundedSelection */,"roundedSelection",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("roundedSelection","Controls whether selections should have rounded corners.")})),rulers:register(new EditorRulers),scrollbar:register(new EditorScrollbar),scrollBeyondLastColumn:register(new EditorIntOption(92/* scrollBeyondLastColumn */,"scrollBeyondLastColumn",5,0,1073741824/* MAX_SAFE_SMALL_INTEGER */,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollBeyondLastColumn","Controls the number of extra characters beyond which the editor will scroll horizontally.")})),scrollBeyondLastLine:register(new EditorBooleanOption(93/* scrollBeyondLastLine */,"scrollBeyondLastLine",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollBeyondLastLine","Controls whether the editor will scroll beyond the last line.")})),scrollPredominantAxis:register(new EditorBooleanOption(94/* scrollPredominantAxis */,"scrollPredominantAxis",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("scrollPredominantAxis","Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.")})),selectionClipboard:register(new EditorBooleanOption(95/* selectionClipboard */,"selectionClipboard",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("selectionClipboard","Controls whether the Linux primary clipboard should be supported."),included:_base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__/* .isLinux */.IJ})),selectionHighlight:register(new EditorBooleanOption(96/* selectionHighlight */,"selectionHighlight",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("selectionHighlight","Controls whether the editor should highlight matches similar to the selection.")})),selectOnLineNumbers:register(new EditorBooleanOption(97/* selectOnLineNumbers */,"selectOnLineNumbers",!0)),showFoldingControls:register(new EditorStringEnumOption(98/* showFoldingControls */,"showFoldingControls","mouseover",["always","mouseover"],{enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("showFoldingControls.always","Always show the folding controls."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("showFoldingControls.mouseover","Only show the folding controls when the mouse is over the gutter.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("showFoldingControls","Controls when the folding controls on the gutter are shown.")})),showUnused:register(new EditorBooleanOption(99/* showUnused */,"showUnused",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("showUnused","Controls fading out of unused code.")})),showDeprecated:register(new EditorBooleanOption(124/* showDeprecated */,"showDeprecated",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("showDeprecated","Controls strikethrough deprecated variables.")})),inlayHints:register(new EditorInlayHints),snippetSuggestions:register(new EditorStringEnumOption(100/* snippetSuggestions */,"snippetSuggestions","inline",["top","bottom","inline","none"],{enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("snippetSuggestions.top","Show snippet suggestions on top of other suggestions."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("snippetSuggestions.bottom","Show snippet suggestions below other suggestions."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("snippetSuggestions.inline","Show snippets suggestions with other suggestions."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("snippetSuggestions.none","Do not show snippet suggestions.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("snippetSuggestions","Controls whether snippets are shown with other suggestions and how they are sorted.")})),smartSelect:register(new SmartSelect),smoothScrolling:register(new EditorBooleanOption(102/* smoothScrolling */,"smoothScrolling",!1,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("smoothScrolling","Controls whether the editor will scroll using an animation.")})),stopRenderingLineAfter:register(new EditorIntOption(104/* stopRenderingLineAfter */,"stopRenderingLineAfter",1e4,-1,1073741824/* MAX_SAFE_SMALL_INTEGER */)),suggest:register(new EditorSuggest),inlineSuggest:register(new InlineEditorSuggest),suggestFontSize:register(new EditorIntOption(106/* suggestFontSize */,"suggestFontSize",0,0,1e3,{markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggestFontSize","Font size for the suggest widget. When set to `0`, the value of `#editor.fontSize#` is used.")})),suggestLineHeight:register(new EditorIntOption(107/* suggestLineHeight */,"suggestLineHeight",0,0,1e3,{markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggestLineHeight","Line height for the suggest widget. When set to `0`, the value of `#editor.lineHeight#` is used. The minimum value is 8.")})),suggestOnTriggerCharacters:register(new EditorBooleanOption(108/* suggestOnTriggerCharacters */,"suggestOnTriggerCharacters",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggestOnTriggerCharacters","Controls whether suggestions should automatically show up when typing trigger characters.")})),suggestSelection:register(new EditorStringEnumOption(109/* suggestSelection */,"suggestSelection","recentlyUsed",["first","recentlyUsed","recentlyUsedByPrefix"],{markdownEnumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggestSelection.first","Always select the first suggestion."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggestSelection.recentlyUsed","Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggestSelection.recentlyUsedByPrefix","Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("suggestSelection","Controls how suggestions are pre-selected when showing the suggest list.")})),tabCompletion:register(new EditorStringEnumOption(110/* tabCompletion */,"tabCompletion","off",["on","off","onlySnippets"],{enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("tabCompletion.on","Tab complete will insert the best matching suggestion when pressing tab."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("tabCompletion.off","Disable tab completions."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("tabCompletion.onlySnippets","Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("tabCompletion","Enables tab completions.")})),tabIndex:register(new EditorIntOption(111/* tabIndex */,"tabIndex",0,-1,1073741824/* MAX_SAFE_SMALL_INTEGER */)),unusualLineTerminators:register(new EditorStringEnumOption(112/* unusualLineTerminators */,"unusualLineTerminators","prompt",["auto","off","prompt"],{enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("unusualLineTerminators.auto","Unusual line terminators are automatically removed."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("unusualLineTerminators.off","Unusual line terminators are ignored."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("unusualLineTerminators.prompt","Unusual line terminators prompt to be removed.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("unusualLineTerminators","Remove unusual line terminators that might cause problems.")})),useShadowDOM:register(new EditorBooleanOption(113/* useShadowDOM */,"useShadowDOM",!0)),useTabStops:register(new EditorBooleanOption(114/* useTabStops */,"useTabStops",!0,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("useTabStops","Inserting and deleting whitespace follows tab stops.")})),wordSeparators:register(new EditorStringOption(115/* wordSeparators */,"wordSeparators",_model_wordHelper_js__WEBPACK_IMPORTED_MODULE_1__/* .USUAL_WORD_SEPARATORS */.vu,{description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("wordSeparators","Characters that will be used as word separators when doing word related navigations or operations.")})),wordWrap:register(new EditorStringEnumOption(116/* wordWrap */,"wordWrap","off",["off","on","wordWrapColumn","bounded"],{markdownEnumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("wordWrap.off","Lines will never wrap."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("wordWrap.on","Lines will wrap at the viewport width."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N({key:"wordWrap.wordWrapColumn",comment:["- `editor.wordWrapColumn` refers to a different setting and should not be localized."]},"Lines will wrap at `#editor.wordWrapColumn#`."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N({key:"wordWrap.bounded",comment:["- viewport means the edge of the visible window size.","- `editor.wordWrapColumn` refers to a different setting and should not be localized."]},"Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N({key:"wordWrap",comment:["- 'off', 'on', 'wordWrapColumn' and 'bounded' refer to values the setting can take and should not be localized.","- `editor.wordWrapColumn` refers to a different setting and should not be localized."]},"Controls how lines should wrap.")})),wordWrapBreakAfterCharacters:register(new EditorStringOption(117/* wordWrapBreakAfterCharacters */,"wordWrapBreakAfterCharacters"," \t})]?|/&.,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣")),wordWrapBreakBeforeCharacters:register(new EditorStringOption(118/* wordWrapBreakBeforeCharacters */,"wordWrapBreakBeforeCharacters","([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋")),wordWrapColumn:register(new EditorIntOption(119/* wordWrapColumn */,"wordWrapColumn",80,1,1073741824/* MAX_SAFE_SMALL_INTEGER */,{markdownDescription:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N({key:"wordWrapColumn",comment:["- `editor.wordWrap` refers to a different setting and should not be localized.","- 'wordWrapColumn' and 'bounded' refer to values the different setting can take and should not be localized."]},"Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.")})),wordWrapOverride1:register(new EditorStringEnumOption(120/* wordWrapOverride1 */,"wordWrapOverride1","inherit",["off","on","inherit"])),wordWrapOverride2:register(new EditorStringEnumOption(121/* wordWrapOverride2 */,"wordWrapOverride2","inherit",["off","on","inherit"])),wrappingIndent:register(new EditorEnumOption(122/* wrappingIndent */,"wrappingIndent",1/* Same */,"same",["none","same","indent","deepIndent"],_wrappingIndentFromString,{enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("wrappingIndent.none","No indentation. Wrapped lines begin at column 1."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("wrappingIndent.same","Wrapped lines get the same indentation as the parent."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("wrappingIndent.indent","Wrapped lines get +1 indentation toward the parent."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("wrappingIndent.deepIndent","Wrapped lines get +2 indentation toward the parent.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("wrappingIndent","Controls the indentation of wrapped lines.")})),wrappingStrategy:register(new EditorStringEnumOption(123/* wrappingStrategy */,"wrappingStrategy","simple",["simple","advanced"],{enumDescriptions:[_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("wrappingStrategy.simple","Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width."),_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("wrappingStrategy.advanced","Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.")],description:_nls_js__WEBPACK_IMPORTED_MODULE_2__/* .localize */.N("wrappingStrategy","Controls the algorithm that computes wrapping points.")})),
// Leave these at the end (because they have dependencies!)
editorClassName:register(new EditorClassName),pixelRatio:register(new EditorPixelRatio),tabFocusMode:register(new EditorTabFocusMode),layoutInfo:register(new EditorLayoutInfoComputer),wrappingInfo:register(new EditorWrappingInfoComputer)};
/***/},
/***/182334:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */C:function(){/* binding */return EditorZoom}
/* harmony export */});
/* harmony import */var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(104669);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/const EditorZoom=new class{constructor(){this._zoomLevel=0,this._onDidChangeZoomLevel=new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__/* .Emitter */.Q5,this.onDidChangeZoomLevel=this._onDidChangeZoomLevel.event}getZoomLevel(){return this._zoomLevel}setZoomLevel(zoomLevel){zoomLevel=Math.min(Math.max(-5,zoomLevel),20),this._zoomLevel!==zoomLevel&&(this._zoomLevel=zoomLevel,this._onDidChangeZoomLevel.fire(this._zoomLevel))}};
/***/},
/***/427374:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */E4:function(){/* binding */return BareFontInfo},
/* harmony export */pR:function(){/* binding */return FontInfo}
/* harmony export */});
/* unused harmony export SERIALIZED_FONT_INFO_VERSION */
/* harmony import */var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(901432),_editorZoom_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(182334);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Determined from empirical observations.
 * @internal
 */
const GOLDEN_LINE_HEIGHT_RATIO=_base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__/* .isMacintosh */.dz?1.5:1.35,MINIMUM_LINE_HEIGHT=8;
/**
 * @internal
 */class BareFontInfo{
/**
     * @internal
     */
constructor(opts){this._bareFontInfoBrand=void 0,this.zoomLevel=opts.zoomLevel,this.pixelRatio=opts.pixelRatio,this.fontFamily=String(opts.fontFamily),this.fontWeight=String(opts.fontWeight),this.fontSize=opts.fontSize,this.fontFeatureSettings=opts.fontFeatureSettings,this.lineHeight=0|opts.lineHeight,this.letterSpacing=opts.letterSpacing}
/**
     * @internal
     */static createFromValidatedSettings(options,zoomLevel,pixelRatio,ignoreEditorZoom){const fontFamily=options.get(42/* fontFamily */),fontWeight=options.get(46/* fontWeight */),fontSize=options.get(45/* fontSize */),fontFeatureSettings=options.get(44/* fontLigatures */),lineHeight=options.get(58/* lineHeight */),letterSpacing=options.get(55/* letterSpacing */);return BareFontInfo._create(fontFamily,fontWeight,fontSize,fontFeatureSettings,lineHeight,letterSpacing,zoomLevel,pixelRatio,ignoreEditorZoom)}
/**
     * @internal
     */static _create(fontFamily,fontWeight,fontSize,fontFeatureSettings,lineHeight,letterSpacing,zoomLevel,pixelRatio,ignoreEditorZoom){0===lineHeight?lineHeight=GOLDEN_LINE_HEIGHT_RATIO*fontSize:lineHeight<MINIMUM_LINE_HEIGHT&&(
// Values too small to be line heights in pixels are probably in ems. Accept them gracefully.
lineHeight*=fontSize),
// Enforce integer, minimum constraints
lineHeight=Math.round(lineHeight),lineHeight<MINIMUM_LINE_HEIGHT&&(lineHeight=MINIMUM_LINE_HEIGHT);const editorZoomLevelMultiplier=1+(ignoreEditorZoom?0:.1*_editorZoom_js__WEBPACK_IMPORTED_MODULE_1__/* .EditorZoom */.C.getZoomLevel());return fontSize*=editorZoomLevelMultiplier,lineHeight*=editorZoomLevelMultiplier,new BareFontInfo({zoomLevel:zoomLevel,pixelRatio:pixelRatio,fontFamily:fontFamily,fontWeight:fontWeight,fontSize:fontSize,fontFeatureSettings:fontFeatureSettings,lineHeight:lineHeight,letterSpacing:letterSpacing})}
/**
     * @internal
     */getId(){return this.zoomLevel+"-"+this.pixelRatio+"-"+this.fontFamily+"-"+this.fontWeight+"-"+this.fontSize+"-"+this.fontFeatureSettings+"-"+this.lineHeight+"-"+this.letterSpacing}
/**
     * @internal
     */getMassagedFontFamily(fallbackFontFamily){const fontFamily=BareFontInfo._wrapInQuotes(this.fontFamily);return fallbackFontFamily&&this.fontFamily!==fallbackFontFamily?`${fontFamily}, ${fallbackFontFamily}`:fontFamily}static _wrapInQuotes(fontFamily){return/[,"']/.test(fontFamily)?fontFamily:/[+ ]/.test(fontFamily)?`"${fontFamily}"`:fontFamily}}
// change this whenever `FontInfo` members are changed
const SERIALIZED_FONT_INFO_VERSION=1;class FontInfo extends BareFontInfo{
/**
     * @internal
     */
constructor(opts,isTrusted){super(opts),this._editorStylingBrand=void 0,this.version=SERIALIZED_FONT_INFO_VERSION,this.isTrusted=isTrusted,this.isMonospace=opts.isMonospace,this.typicalHalfwidthCharacterWidth=opts.typicalHalfwidthCharacterWidth,this.typicalFullwidthCharacterWidth=opts.typicalFullwidthCharacterWidth,this.canUseHalfwidthRightwardsArrow=opts.canUseHalfwidthRightwardsArrow,this.spaceWidth=opts.spaceWidth,this.middotWidth=opts.middotWidth,this.wsmiddotWidth=opts.wsmiddotWidth,this.maxDigitWidth=opts.maxDigitWidth}
/**
     * @internal
     */equals(other){return this.fontFamily===other.fontFamily&&this.fontWeight===other.fontWeight&&this.fontSize===other.fontSize&&this.fontFeatureSettings===other.fontFeatureSettings&&this.lineHeight===other.lineHeight&&this.letterSpacing===other.letterSpacing&&this.typicalHalfwidthCharacterWidth===other.typicalHalfwidthCharacterWidth&&this.typicalFullwidthCharacterWidth===other.typicalFullwidthCharacterWidth&&this.canUseHalfwidthRightwardsArrow===other.canUseHalfwidthRightwardsArrow&&this.spaceWidth===other.spaceWidth&&this.middotWidth===other.middotWidth&&this.wsmiddotWidth===other.wsmiddotWidth&&this.maxDigitWidth===other.maxDigitWidth}}
/***/},
/***/926653:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
// EXPORTS
__webpack_require__.d(__webpack_exports__,{U:function(){/* binding */return CursorsController}});
// UNUSED EXPORTS: CursorModelState
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/errors.js
var errors=__webpack_require__(817301),strings=__webpack_require__(697295),cursorCommon=__webpack_require__(533181),position=__webpack_require__(50187),core_range=__webpack_require__(624314),core_selection=__webpack_require__(203860);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/strings.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/controller/oneCursor.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Represents a single cursor.
*/
class Cursor{constructor(context){this._selTrackedRange=null,this._trackSelection=!0,this._setState(context,new cursorCommon/* SingleCursorState */.rS(new core_range/* Range */.e(1,1,1,1),0,new position/* Position */.L(1,1),0),new cursorCommon/* SingleCursorState */.rS(new core_range/* Range */.e(1,1,1,1),0,new position/* Position */.L(1,1),0))}dispose(context){this._removeTrackedRange(context)}startTrackingSelection(context){this._trackSelection=!0,this._updateTrackedRange(context)}stopTrackingSelection(context){this._trackSelection=!1,this._removeTrackedRange(context)}_updateTrackedRange(context){this._trackSelection&&(this._selTrackedRange=context.model._setTrackedRange(this._selTrackedRange,this.modelState.selection,0/* AlwaysGrowsWhenTypingAtEdges */))}_removeTrackedRange(context){this._selTrackedRange=context.model._setTrackedRange(this._selTrackedRange,null,0/* AlwaysGrowsWhenTypingAtEdges */)}asCursorState(){return new cursorCommon/* CursorState */.Vi(this.modelState,this.viewState)}readSelectionFromMarkers(context){const range=context.model._getTrackedRange(this._selTrackedRange);return 0/* LTR */===this.modelState.selection.getDirection()?new core_selection/* Selection */.Y(range.startLineNumber,range.startColumn,range.endLineNumber,range.endColumn):new core_selection/* Selection */.Y(range.endLineNumber,range.endColumn,range.startLineNumber,range.startColumn)}ensureValidState(context){this._setState(context,this.modelState,this.viewState)}setState(context,modelState,viewState){this._setState(context,modelState,viewState)}static _validatePositionWithCache(viewModel,position,cacheInput,cacheOutput){return position.equals(cacheInput)?cacheOutput:viewModel.normalizePosition(position,2/* None */)}static _validateViewState(viewModel,viewState){const position=viewState.position,sStartPosition=viewState.selectionStart.getStartPosition(),sEndPosition=viewState.selectionStart.getEndPosition(),validPosition=viewModel.normalizePosition(position,2/* None */),validSStartPosition=this._validatePositionWithCache(viewModel,sStartPosition,position,validPosition),validSEndPosition=this._validatePositionWithCache(viewModel,sEndPosition,sStartPosition,validSStartPosition);return position.equals(validPosition)&&sStartPosition.equals(validSStartPosition)&&sEndPosition.equals(validSEndPosition)?viewState:new cursorCommon/* SingleCursorState */.rS(core_range/* Range */.e.fromPositions(validSStartPosition,validSEndPosition),viewState.selectionStartLeftoverVisibleColumns+sStartPosition.column-validSStartPosition.column,validPosition,viewState.leftoverVisibleColumns+position.column-validPosition.column)}_setState(context,modelState,viewState){if(viewState&&(viewState=Cursor._validateViewState(context.viewModel,viewState)),modelState){
// Validate new model state
const selectionStart=context.model.validateRange(modelState.selectionStart),selectionStartLeftoverVisibleColumns=modelState.selectionStart.equalsRange(selectionStart)?modelState.selectionStartLeftoverVisibleColumns:0,position=context.model.validatePosition(modelState.position),leftoverVisibleColumns=modelState.position.equals(position)?modelState.leftoverVisibleColumns:0;modelState=new cursorCommon/* SingleCursorState */.rS(selectionStart,selectionStartLeftoverVisibleColumns,position,leftoverVisibleColumns)}else{if(!viewState)return;
// We only have the view state => compute the model state
const selectionStart=context.model.validateRange(context.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart)),position=context.model.validatePosition(context.coordinatesConverter.convertViewPositionToModelPosition(viewState.position));modelState=new cursorCommon/* SingleCursorState */.rS(selectionStart,viewState.selectionStartLeftoverVisibleColumns,position,viewState.leftoverVisibleColumns)}if(viewState){
// Validate new view state
const viewSelectionStart=context.coordinatesConverter.validateViewRange(viewState.selectionStart,modelState.selectionStart),viewPosition=context.coordinatesConverter.validateViewPosition(viewState.position,modelState.position);viewState=new cursorCommon/* SingleCursorState */.rS(viewSelectionStart,modelState.selectionStartLeftoverVisibleColumns,viewPosition,modelState.leftoverVisibleColumns)}else{
// We only have the model state => compute the view state
const viewSelectionStart1=context.coordinatesConverter.convertModelPositionToViewPosition(new position/* Position */.L(modelState.selectionStart.startLineNumber,modelState.selectionStart.startColumn)),viewSelectionStart2=context.coordinatesConverter.convertModelPositionToViewPosition(new position/* Position */.L(modelState.selectionStart.endLineNumber,modelState.selectionStart.endColumn)),viewSelectionStart=new core_range/* Range */.e(viewSelectionStart1.lineNumber,viewSelectionStart1.column,viewSelectionStart2.lineNumber,viewSelectionStart2.column),viewPosition=context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);viewState=new cursorCommon/* SingleCursorState */.rS(viewSelectionStart,modelState.selectionStartLeftoverVisibleColumns,viewPosition,modelState.leftoverVisibleColumns)}this.modelState=modelState,this.viewState=viewState,this._updateTrackedRange(context)}}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCollection.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class CursorCollection{constructor(context){this.context=context,this.primaryCursor=new Cursor(context),this.secondaryCursors=[],this.lastAddedCursorIndex=0}dispose(){this.primaryCursor.dispose(this.context),this.killSecondaryCursors()}startTrackingSelections(){this.primaryCursor.startTrackingSelection(this.context);for(let i=0,len=this.secondaryCursors.length;i<len;i++)this.secondaryCursors[i].startTrackingSelection(this.context)}stopTrackingSelections(){this.primaryCursor.stopTrackingSelection(this.context);for(let i=0,len=this.secondaryCursors.length;i<len;i++)this.secondaryCursors[i].stopTrackingSelection(this.context)}updateContext(context){this.context=context}ensureValidState(){this.primaryCursor.ensureValidState(this.context);for(let i=0,len=this.secondaryCursors.length;i<len;i++)this.secondaryCursors[i].ensureValidState(this.context)}readSelectionFromMarkers(){let result=[];result[0]=this.primaryCursor.readSelectionFromMarkers(this.context);for(let i=0,len=this.secondaryCursors.length;i<len;i++)result[i+1]=this.secondaryCursors[i].readSelectionFromMarkers(this.context);return result}getAll(){let result=[];result[0]=this.primaryCursor.asCursorState();for(let i=0,len=this.secondaryCursors.length;i<len;i++)result[i+1]=this.secondaryCursors[i].asCursorState();return result}getViewPositions(){let result=[];result[0]=this.primaryCursor.viewState.position;for(let i=0,len=this.secondaryCursors.length;i<len;i++)result[i+1]=this.secondaryCursors[i].viewState.position;return result}getTopMostViewPosition(){let result=this.primaryCursor.viewState.position;for(let i=0,len=this.secondaryCursors.length;i<len;i++){const viewPosition=this.secondaryCursors[i].viewState.position;viewPosition.isBefore(result)&&(result=viewPosition)}return result}getBottomMostViewPosition(){let result=this.primaryCursor.viewState.position;for(let i=0,len=this.secondaryCursors.length;i<len;i++){const viewPosition=this.secondaryCursors[i].viewState.position;result.isBeforeOrEqual(viewPosition)&&(result=viewPosition)}return result}getSelections(){let result=[];result[0]=this.primaryCursor.modelState.selection;for(let i=0,len=this.secondaryCursors.length;i<len;i++)result[i+1]=this.secondaryCursors[i].modelState.selection;return result}getViewSelections(){let result=[];result[0]=this.primaryCursor.viewState.selection;for(let i=0,len=this.secondaryCursors.length;i<len;i++)result[i+1]=this.secondaryCursors[i].viewState.selection;return result}setSelections(selections){this.setStates(cursorCommon/* CursorState */.Vi.fromModelSelections(selections))}getPrimaryCursor(){return this.primaryCursor.asCursorState()}setStates(states){null!==states&&(this.primaryCursor.setState(this.context,states[0].modelState,states[0].viewState),this._setSecondaryStates(states.slice(1)))}
/**
     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.
     */_setSecondaryStates(secondaryStates){const secondaryCursorsLength=this.secondaryCursors.length,secondaryStatesLength=secondaryStates.length;if(secondaryCursorsLength<secondaryStatesLength){let createCnt=secondaryStatesLength-secondaryCursorsLength;for(let i=0;i<createCnt;i++)this._addSecondaryCursor()}else if(secondaryCursorsLength>secondaryStatesLength){let removeCnt=secondaryCursorsLength-secondaryStatesLength;for(let i=0;i<removeCnt;i++)this._removeSecondaryCursor(this.secondaryCursors.length-1)}for(let i=0;i<secondaryStatesLength;i++)this.secondaryCursors[i].setState(this.context,secondaryStates[i].modelState,secondaryStates[i].viewState)}killSecondaryCursors(){this._setSecondaryStates([])}_addSecondaryCursor(){this.secondaryCursors.push(new Cursor(this.context)),this.lastAddedCursorIndex=this.secondaryCursors.length}getLastAddedCursorIndex(){return 0===this.secondaryCursors.length||0===this.lastAddedCursorIndex?0:this.lastAddedCursorIndex}_removeSecondaryCursor(removeIndex){this.lastAddedCursorIndex>=removeIndex+1&&this.lastAddedCursorIndex--,this.secondaryCursors[removeIndex].dispose(this.context),this.secondaryCursors.splice(removeIndex,1)}_getAll(){let result=[];result[0]=this.primaryCursor;for(let i=0,len=this.secondaryCursors.length;i<len;i++)result[i+1]=this.secondaryCursors[i];return result}normalize(){if(0===this.secondaryCursors.length)return;let cursors=this._getAll(),sortedCursors=[];for(let i=0,len=cursors.length;i<len;i++)sortedCursors.push({index:i,selection:cursors[i].modelState.selection});sortedCursors.sort(((a,b)=>a.selection.startLineNumber===b.selection.startLineNumber?a.selection.startColumn-b.selection.startColumn:a.selection.startLineNumber-b.selection.startLineNumber));for(let sortedCursorIndex=0;sortedCursorIndex<sortedCursors.length-1;sortedCursorIndex++){const current=sortedCursors[sortedCursorIndex],next=sortedCursors[sortedCursorIndex+1],currentSelection=current.selection,nextSelection=next.selection;if(!this.context.cursorConfig.multiCursorMergeOverlapping)continue;let shouldMergeCursors;if(
// Merge touching cursors if one of them is collapsed
shouldMergeCursors=nextSelection.isEmpty()||currentSelection.isEmpty()?nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition()):nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition()),shouldMergeCursors){const winnerSortedCursorIndex=current.index<next.index?sortedCursorIndex:sortedCursorIndex+1,looserSortedCursorIndex=current.index<next.index?sortedCursorIndex+1:sortedCursorIndex,looserIndex=sortedCursors[looserSortedCursorIndex].index,winnerIndex=sortedCursors[winnerSortedCursorIndex].index,looserSelection=sortedCursors[looserSortedCursorIndex].selection,winnerSelection=sortedCursors[winnerSortedCursorIndex].selection;if(!looserSelection.equalsSelection(winnerSelection)){const resultingRange=looserSelection.plusRange(winnerSelection),looserSelectionIsLTR=looserSelection.selectionStartLineNumber===looserSelection.startLineNumber&&looserSelection.selectionStartColumn===looserSelection.startColumn,winnerSelectionIsLTR=winnerSelection.selectionStartLineNumber===winnerSelection.startLineNumber&&winnerSelection.selectionStartColumn===winnerSelection.startColumn;
// Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)
let resultingSelectionIsLTR,resultingSelection;looserIndex===this.lastAddedCursorIndex?(resultingSelectionIsLTR=looserSelectionIsLTR,this.lastAddedCursorIndex=winnerIndex):
// Winner takes it all
resultingSelectionIsLTR=winnerSelectionIsLTR,resultingSelection=resultingSelectionIsLTR?new core_selection/* Selection */.Y(resultingRange.startLineNumber,resultingRange.startColumn,resultingRange.endLineNumber,resultingRange.endColumn):new core_selection/* Selection */.Y(resultingRange.endLineNumber,resultingRange.endColumn,resultingRange.startLineNumber,resultingRange.startColumn),sortedCursors[winnerSortedCursorIndex].selection=resultingSelection;const resultingState=cursorCommon/* CursorState */.Vi.fromModelSelection(resultingSelection);cursors[winnerIndex].setState(this.context,resultingState.modelState,resultingState.viewState)}for(const sortedCursor of sortedCursors)sortedCursor.index>looserIndex&&sortedCursor.index--;cursors.splice(looserIndex,1),sortedCursors.splice(looserSortedCursorIndex,1),this._removeSecondaryCursor(looserIndex-1),sortedCursorIndex--}}}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorDeleteOperations.js
var cursorDeleteOperations=__webpack_require__(531380),cursorTypeOperations=__webpack_require__(840419),textModelEvents=__webpack_require__(983256),viewEvents=__webpack_require__(533805),lifecycle=__webpack_require__(905976),viewModelEventDispatcher=__webpack_require__(969903);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorTypeOperations.js + 1 modules
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/controller/cursor.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * A snapshot of the cursor and the model state
 */
class CursorModelState{constructor(model,cursor){this.modelVersionId=model.getVersionId(),this.cursorState=cursor.getCursorStates()}equals(other){if(!other)return!1;if(this.modelVersionId!==other.modelVersionId)return!1;if(this.cursorState.length!==other.cursorState.length)return!1;for(let i=0,len=this.cursorState.length;i<len;i++)if(!this.cursorState[i].equals(other.cursorState[i]))return!1;return!0}}class AutoClosedAction{constructor(model,autoClosedCharactersDecorations,autoClosedEnclosingDecorations){this._model=model,this._autoClosedCharactersDecorations=autoClosedCharactersDecorations,this._autoClosedEnclosingDecorations=autoClosedEnclosingDecorations}static getAllAutoClosedCharacters(autoClosedActions){let autoClosedCharacters=[];for(const autoClosedAction of autoClosedActions)autoClosedCharacters=autoClosedCharacters.concat(autoClosedAction.getAutoClosedCharactersRanges());return autoClosedCharacters}dispose(){this._autoClosedCharactersDecorations=this._model.deltaDecorations(this._autoClosedCharactersDecorations,[]),this._autoClosedEnclosingDecorations=this._model.deltaDecorations(this._autoClosedEnclosingDecorations,[])}getAutoClosedCharactersRanges(){let result=[];for(let i=0;i<this._autoClosedCharactersDecorations.length;i++){const decorationRange=this._model.getDecorationRange(this._autoClosedCharactersDecorations[i]);decorationRange&&result.push(decorationRange)}return result}isValid(selections){let enclosingRanges=[];for(let i=0;i<this._autoClosedEnclosingDecorations.length;i++){const decorationRange=this._model.getDecorationRange(this._autoClosedEnclosingDecorations[i]);if(decorationRange&&(enclosingRanges.push(decorationRange),decorationRange.startLineNumber!==decorationRange.endLineNumber))
// Stop tracking if the range becomes multiline...
return!1}enclosingRanges.sort(core_range/* Range */.e.compareRangesUsingStarts),selections.sort(core_range/* Range */.e.compareRangesUsingStarts);for(let i=0;i<selections.length;i++){if(i>=enclosingRanges.length)return!1;if(!enclosingRanges[i].strictContainsRange(selections[i]))return!1}return!0}}class CursorsController extends lifecycle/* Disposable */.JT{constructor(model,viewModel,coordinatesConverter,cursorConfig){super(),this._model=model,this._knownModelVersionId=this._model.getVersionId(),this._viewModel=viewModel,this._coordinatesConverter=coordinatesConverter,this.context=new cursorCommon/* CursorContext */.zp(this._model,this._viewModel,this._coordinatesConverter,cursorConfig),this._cursors=new CursorCollection(this.context),this._hasFocus=!1,this._isHandling=!1,this._isDoingComposition=!1,this._selectionsWhenCompositionStarted=null,this._columnSelectData=null,this._autoClosedActions=[],this._prevEditOperationType=0/* Other */}dispose(){this._cursors.dispose(),this._autoClosedActions=(0,lifecycle/* dispose */.B9)(this._autoClosedActions),super.dispose()}updateConfiguration(cursorConfig){this.context=new cursorCommon/* CursorContext */.zp(this._model,this._viewModel,this._coordinatesConverter,cursorConfig),this._cursors.updateContext(this.context)}onLineMappingChanged(eventsCollector){this._knownModelVersionId===this._model.getVersionId()&&
// Ensure valid state
this.setStates(eventsCollector,"viewModel",0/* NotSet */,this.getCursorStates())}setHasFocus(hasFocus){this._hasFocus=hasFocus}_validateAutoClosedActions(){if(this._autoClosedActions.length>0){let selections=this._cursors.getSelections();for(let i=0;i<this._autoClosedActions.length;i++){const autoClosedAction=this._autoClosedActions[i];autoClosedAction.isValid(selections)||(autoClosedAction.dispose(),this._autoClosedActions.splice(i,1),i--)}}}
// ------ some getters/setters
getPrimaryCursorState(){return this._cursors.getPrimaryCursor()}getLastAddedCursorIndex(){return this._cursors.getLastAddedCursorIndex()}getCursorStates(){return this._cursors.getAll()}setStates(eventsCollector,source,reason,states){let reachedMaxCursorCount=!1;null!==states&&states.length>CursorsController.MAX_CURSOR_COUNT&&(states=states.slice(0,CursorsController.MAX_CURSOR_COUNT),reachedMaxCursorCount=!0);const oldState=new CursorModelState(this._model,this);return this._cursors.setStates(states),this._cursors.normalize(),this._columnSelectData=null,this._validateAutoClosedActions(),this._emitStateChangedIfNecessary(eventsCollector,source,reason,oldState,reachedMaxCursorCount)}setCursorColumnSelectData(columnSelectData){this._columnSelectData=columnSelectData}revealPrimary(eventsCollector,source,revealHorizontal,scrollType){const viewPositions=this._cursors.getViewPositions();if(viewPositions.length>1)this._emitCursorRevealRange(eventsCollector,source,null,this._cursors.getViewSelections(),0/* Simple */,revealHorizontal,scrollType);else{const viewPosition=viewPositions[0],viewRange=new core_range/* Range */.e(viewPosition.lineNumber,viewPosition.column,viewPosition.lineNumber,viewPosition.column);this._emitCursorRevealRange(eventsCollector,source,viewRange,null,0/* Simple */,revealHorizontal,scrollType)}}_revealPrimaryCursor(eventsCollector,source,verticalType,revealHorizontal,scrollType){const viewPositions=this._cursors.getViewPositions();if(viewPositions.length>1)this._emitCursorRevealRange(eventsCollector,source,null,this._cursors.getViewSelections(),verticalType,revealHorizontal,scrollType);else{const viewPosition=viewPositions[0],viewRange=new core_range/* Range */.e(viewPosition.lineNumber,viewPosition.column,viewPosition.lineNumber,viewPosition.column);this._emitCursorRevealRange(eventsCollector,source,viewRange,null,verticalType,revealHorizontal,scrollType)}}_emitCursorRevealRange(eventsCollector,source,viewRange,viewSelections,verticalType,revealHorizontal,scrollType){eventsCollector.emitViewEvent(new viewEvents/* ViewRevealRangeRequestEvent */.Qb(source,viewRange,viewSelections,verticalType,revealHorizontal,scrollType))}saveState(){let result=[];const selections=this._cursors.getSelections();for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];result.push({inSelectionMode:!selection.isEmpty(),selectionStart:{lineNumber:selection.selectionStartLineNumber,column:selection.selectionStartColumn},position:{lineNumber:selection.positionLineNumber,column:selection.positionColumn}})}return result}restoreState(eventsCollector,states){let desiredSelections=[];for(let i=0,len=states.length;i<len;i++){const state=states[i];let positionLineNumber=1,positionColumn=1;
// Avoid missing properties on the literal
state.position&&state.position.lineNumber&&(positionLineNumber=state.position.lineNumber),state.position&&state.position.column&&(positionColumn=state.position.column);let selectionStartLineNumber=positionLineNumber,selectionStartColumn=positionColumn;
// Avoid missing properties on the literal
state.selectionStart&&state.selectionStart.lineNumber&&(selectionStartLineNumber=state.selectionStart.lineNumber),state.selectionStart&&state.selectionStart.column&&(selectionStartColumn=state.selectionStart.column),desiredSelections.push({selectionStartLineNumber:selectionStartLineNumber,selectionStartColumn:selectionStartColumn,positionLineNumber:positionLineNumber,positionColumn:positionColumn})}this.setStates(eventsCollector,"restoreState",0/* NotSet */,cursorCommon/* CursorState */.Vi.fromModelSelections(desiredSelections)),this.revealPrimary(eventsCollector,"restoreState",!0,1/* Immediate */)}onModelContentChanged(eventsCollector,e){if(e instanceof textModelEvents/* ModelInjectedTextChangedEvent */.D8){
// If injected texts change, the view positions of all cursors need to be updated.
if(this._isHandling)
// The view positions will be updated when handling finishes
return;
// setStates might remove markers, which could trigger a decoration change.
// If there are injected text decorations for that line, `onModelContentChanged` is emitted again
// and an endless recursion happens.
// _isHandling prevents that.
this._isHandling=!0;try{this.setStates(eventsCollector,"modelChange",0/* NotSet */,this.getCursorStates())}finally{this._isHandling=!1}}else{if(this._knownModelVersionId=e.versionId,this._isHandling)return;const hadFlushEvent=e.containsEvent(1/* Flush */);if(this._prevEditOperationType=0/* Other */,hadFlushEvent)
// a model.setValue() was called
this._cursors.dispose(),this._cursors=new CursorCollection(this.context),this._validateAutoClosedActions(),this._emitStateChangedIfNecessary(eventsCollector,"model",1/* ContentFlush */,null,!1);else if(this._hasFocus&&e.resultingSelection&&e.resultingSelection.length>0){const cursorState=cursorCommon/* CursorState */.Vi.fromModelSelections(e.resultingSelection);this.setStates(eventsCollector,"modelChange",e.isUndoing?5/* Undo */:e.isRedoing?6/* Redo */:2/* RecoverFromMarkers */,cursorState)&&this._revealPrimaryCursor(eventsCollector,"modelChange",0/* Simple */,!0,0/* Smooth */)}else{const selectionsFromMarkers=this._cursors.readSelectionFromMarkers();this.setStates(eventsCollector,"modelChange",2/* RecoverFromMarkers */,cursorCommon/* CursorState */.Vi.fromModelSelections(selectionsFromMarkers))}}}getSelection(){return this._cursors.getPrimaryCursor().modelState.selection}getTopMostViewPosition(){return this._cursors.getTopMostViewPosition()}getBottomMostViewPosition(){return this._cursors.getBottomMostViewPosition()}getCursorColumnSelectData(){if(this._columnSelectData)return this._columnSelectData;const primaryCursor=this._cursors.getPrimaryCursor(),viewSelectionStart=primaryCursor.viewState.selectionStart.getStartPosition(),viewPosition=primaryCursor.viewState.position;return{isReal:!1,fromViewLineNumber:viewSelectionStart.lineNumber,fromViewVisualColumn:cursorCommon/* CursorColumns */.io.visibleColumnFromColumn2(this.context.cursorConfig,this._viewModel,viewSelectionStart),toViewLineNumber:viewPosition.lineNumber,toViewVisualColumn:cursorCommon/* CursorColumns */.io.visibleColumnFromColumn2(this.context.cursorConfig,this._viewModel,viewPosition)}}getSelections(){return this._cursors.getSelections()}setSelections(eventsCollector,source,selections,reason){this.setStates(eventsCollector,source,reason,cursorCommon/* CursorState */.Vi.fromModelSelections(selections))}getPrevEditOperationType(){return this._prevEditOperationType}setPrevEditOperationType(type){this._prevEditOperationType=type}
// ------ auxiliary handling logic
_pushAutoClosedAction(autoClosedCharactersRanges,autoClosedEnclosingRanges){let autoClosedCharactersDeltaDecorations=[],autoClosedEnclosingDeltaDecorations=[];for(let i=0,len=autoClosedCharactersRanges.length;i<len;i++)autoClosedCharactersDeltaDecorations.push({range:autoClosedCharactersRanges[i],options:{description:"auto-closed-character",inlineClassName:"auto-closed-character",stickiness:1/* NeverGrowsWhenTypingAtEdges */}}),autoClosedEnclosingDeltaDecorations.push({range:autoClosedEnclosingRanges[i],options:{description:"auto-closed-enclosing",stickiness:1/* NeverGrowsWhenTypingAtEdges */}});const autoClosedCharactersDecorations=this._model.deltaDecorations([],autoClosedCharactersDeltaDecorations),autoClosedEnclosingDecorations=this._model.deltaDecorations([],autoClosedEnclosingDeltaDecorations);this._autoClosedActions.push(new AutoClosedAction(this._model,autoClosedCharactersDecorations,autoClosedEnclosingDecorations))}_executeEditOperation(opResult){if(!opResult)
// Nothing to execute
return;opResult.shouldPushStackElementBefore&&this._model.pushStackElement();const result=CommandExecutor.executeCommands(this._model,this._cursors.getSelections(),opResult.commands);if(result){
// The commands were applied correctly
this._interpretCommandResult(result);
// Check for auto-closing closed characters
let autoClosedCharactersRanges=[],autoClosedEnclosingRanges=[];for(let i=0;i<opResult.commands.length;i++){const command=opResult.commands[i];command instanceof cursorTypeOperations/* TypeWithAutoClosingCommand */.g&&command.enclosingRange&&command.closeCharacterRange&&(autoClosedCharactersRanges.push(command.closeCharacterRange),autoClosedEnclosingRanges.push(command.enclosingRange))}autoClosedCharactersRanges.length>0&&this._pushAutoClosedAction(autoClosedCharactersRanges,autoClosedEnclosingRanges),this._prevEditOperationType=opResult.type}opResult.shouldPushStackElementAfter&&this._model.pushStackElement()}_interpretCommandResult(cursorState){cursorState&&0!==cursorState.length||(cursorState=this._cursors.readSelectionFromMarkers()),this._columnSelectData=null,this._cursors.setSelections(cursorState),this._cursors.normalize()}
// -----------------------------------------------------------------------------------------------------------
// ----- emitting events
_emitStateChangedIfNecessary(eventsCollector,source,reason,oldState,reachedMaxCursorCount){const newState=new CursorModelState(this._model,this);if(newState.equals(oldState))return!1;const selections=this._cursors.getSelections(),viewSelections=this._cursors.getViewSelections();
// Only after the view has been notified, let the rest of the world know...
if(
// Let the view get the event first.
eventsCollector.emitViewEvent(new viewEvents/* ViewCursorStateChangedEvent */.e$(viewSelections,selections)),!oldState||oldState.cursorState.length!==newState.cursorState.length||newState.cursorState.some(((newCursorState,i)=>!newCursorState.modelState.equals(oldState.cursorState[i].modelState)))){const oldSelections=oldState?oldState.cursorState.map((s=>s.modelState.selection)):null,oldModelVersionId=oldState?oldState.modelVersionId:0;eventsCollector.emitOutgoingEvent(new viewModelEventDispatcher/* CursorStateChangedEvent */.H6(oldSelections,selections,oldModelVersionId,newState.modelVersionId,source||"keyboard",reason,reachedMaxCursorCount))}return!0}
// -----------------------------------------------------------------------------------------------------------
// ----- handlers beyond this point
_findAutoClosingPairs(edits){if(!edits.length)return null;let indices=[];for(let i=0,len=edits.length;i<len;i++){const edit=edits[i];if(!edit.text||edit.text.indexOf("\n")>=0)return null;const m=edit.text.match(/([)\]}>'"`])([^)\]}>'"`]*)$/);if(!m)return null;const closeChar=m[1],autoClosingPairsCandidates=this.context.cursorConfig.autoClosingPairs.autoClosingPairsCloseSingleChar.get(closeChar);if(!autoClosingPairsCandidates||1!==autoClosingPairsCandidates.length)return null;const openChar=autoClosingPairsCandidates[0].open,closeCharIndex=edit.text.length-m[2].length-1,openCharIndex=edit.text.lastIndexOf(openChar,closeCharIndex-1);if(-1===openCharIndex)return null;indices.push([openCharIndex,closeCharIndex])}return indices}executeEdits(eventsCollector,source,edits,cursorStateComputer){let autoClosingIndices=null;"snippet"===source&&(autoClosingIndices=this._findAutoClosingPairs(edits)),autoClosingIndices&&(edits[0]._isTracked=!0);let autoClosedCharactersRanges=[],autoClosedEnclosingRanges=[];const selections=this._model.pushEditOperations(this.getSelections(),edits,(undoEdits=>{if(autoClosingIndices)for(let i=0,len=autoClosingIndices.length;i<len;i++){const[openCharInnerIndex,closeCharInnerIndex]=autoClosingIndices[i],undoEdit=undoEdits[i],lineNumber=undoEdit.range.startLineNumber,openCharIndex=undoEdit.range.startColumn-1+openCharInnerIndex,closeCharIndex=undoEdit.range.startColumn-1+closeCharInnerIndex;autoClosedCharactersRanges.push(new core_range/* Range */.e(lineNumber,closeCharIndex+1,lineNumber,closeCharIndex+2)),autoClosedEnclosingRanges.push(new core_range/* Range */.e(lineNumber,openCharIndex+1,lineNumber,closeCharIndex+2))}const selections=cursorStateComputer(undoEdits);return selections&&(
// Don't recover the selection from markers because
// we know what it should be.
this._isHandling=!0),selections}));selections&&(this._isHandling=!1,this.setSelections(eventsCollector,source,selections,0/* NotSet */)),autoClosedCharactersRanges.length>0&&this._pushAutoClosedAction(autoClosedCharactersRanges,autoClosedEnclosingRanges)}_executeEdit(callback,eventsCollector,source,cursorChangeReason=0/* NotSet */){if(this.context.cursorConfig.readOnly)
// we cannot edit when read only...
return;const oldState=new CursorModelState(this._model,this);this._cursors.stopTrackingSelections(),this._isHandling=!0;try{this._cursors.ensureValidState(),callback()}catch(err){(0,errors/* onUnexpectedError */.dL)(err)}this._isHandling=!1,this._cursors.startTrackingSelections(),this._validateAutoClosedActions(),this._emitStateChangedIfNecessary(eventsCollector,source,cursorChangeReason,oldState,!1)&&this._revealPrimaryCursor(eventsCollector,source,0/* Simple */,!0,0/* Smooth */)}setIsDoingComposition(isDoingComposition){this._isDoingComposition=isDoingComposition}getAutoClosedCharacters(){return AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions)}startComposition(eventsCollector){this._selectionsWhenCompositionStarted=this.getSelections().slice(0)}endComposition(eventsCollector,source){this._executeEdit((()=>{"keyboard"===source&&(
// composition finishes, let's check if we need to auto complete if necessary.
this._executeEditOperation(cursorTypeOperations/* TypeOperations */.u.compositionEndWithInterceptors(this._prevEditOperationType,this.context.cursorConfig,this._model,this._selectionsWhenCompositionStarted,this.getSelections(),this.getAutoClosedCharacters())),this._selectionsWhenCompositionStarted=null)}),eventsCollector,source)}type(eventsCollector,text,source){this._executeEdit((()=>{if("keyboard"===source){
// If this event is coming straight from the keyboard, look for electric characters and enter
const len=text.length;let offset=0;while(offset<len){const charLength=strings/* nextCharLength */.vH(text,offset),chr=text.substr(offset,charLength);
// Here we must interpret each typed character individually
this._executeEditOperation(cursorTypeOperations/* TypeOperations */.u.typeWithInterceptors(this._isDoingComposition,this._prevEditOperationType,this.context.cursorConfig,this._model,this.getSelections(),this.getAutoClosedCharacters(),chr)),offset+=charLength}}else this._executeEditOperation(cursorTypeOperations/* TypeOperations */.u.typeWithoutInterceptors(this._prevEditOperationType,this.context.cursorConfig,this._model,this.getSelections(),text))}),eventsCollector,source)}compositionType(eventsCollector,text,replacePrevCharCnt,replaceNextCharCnt,positionDelta,source){if(0!==text.length||0!==replacePrevCharCnt||0!==replaceNextCharCnt)this._executeEdit((()=>{this._executeEditOperation(cursorTypeOperations/* TypeOperations */.u.compositionType(this._prevEditOperationType,this.context.cursorConfig,this._model,this.getSelections(),text,replacePrevCharCnt,replaceNextCharCnt,positionDelta))}),eventsCollector,source);else
// this edit is a no-op
if(0!==positionDelta){
// but it still wants to move the cursor
const newSelections=this.getSelections().map((selection=>{const position=selection.getPosition();return new core_selection/* Selection */.Y(position.lineNumber,position.column+positionDelta,position.lineNumber,position.column+positionDelta)}));this.setSelections(eventsCollector,source,newSelections,0/* NotSet */)}}paste(eventsCollector,text,pasteOnNewLine,multicursorText,source){this._executeEdit((()=>{this._executeEditOperation(cursorTypeOperations/* TypeOperations */.u.paste(this.context.cursorConfig,this._model,this.getSelections(),text,pasteOnNewLine,multicursorText||[]))}),eventsCollector,source,4/* Paste */)}cut(eventsCollector,source){this._executeEdit((()=>{this._executeEditOperation(cursorDeleteOperations/* DeleteOperations */.A.cut(this.context.cursorConfig,this._model,this.getSelections()))}),eventsCollector,source)}executeCommand(eventsCollector,command,source){this._executeEdit((()=>{this._cursors.killSecondaryCursors(),this._executeEditOperation(new cursorCommon/* EditOperationResult */.Tp(0/* Other */,[command],{shouldPushStackElementBefore:!1,shouldPushStackElementAfter:!1}))}),eventsCollector,source)}executeCommands(eventsCollector,commands,source){this._executeEdit((()=>{this._executeEditOperation(new cursorCommon/* EditOperationResult */.Tp(0/* Other */,commands,{shouldPushStackElementBefore:!1,shouldPushStackElementAfter:!1}))}),eventsCollector,source)}}CursorsController.MAX_CURSOR_COUNT=1e4;class CommandExecutor{static executeCommands(model,selectionsBefore,commands){const ctx={model:model,selectionsBefore:selectionsBefore,trackedRanges:[],trackedRangesDirection:[]},result=this._innerExecuteCommands(ctx,commands);for(let i=0,len=ctx.trackedRanges.length;i<len;i++)ctx.model._setTrackedRange(ctx.trackedRanges[i],null,0/* AlwaysGrowsWhenTypingAtEdges */);return result}static _innerExecuteCommands(ctx,commands){if(this._arrayIsEmpty(commands))return null;const commandsData=this._getEditOperations(ctx,commands);if(0===commandsData.operations.length)return null;const rawOperations=commandsData.operations,loserCursorsMap=this._getLoserCursorMap(rawOperations);if(loserCursorsMap.hasOwnProperty("0"))return null;
// Remove operations belonging to losing cursors
let filteredOperations=[];for(let i=0,len=rawOperations.length;i<len;i++)loserCursorsMap.hasOwnProperty(rawOperations[i].identifier.major.toString())||filteredOperations.push(rawOperations[i]);
// TODO@Alex: find a better way to do this.
// give the hint that edit operations are tracked to the model
commandsData.hadTrackedEditOperation&&filteredOperations.length>0&&(filteredOperations[0]._isTracked=!0);let selectionsAfter=ctx.model.pushEditOperations(ctx.selectionsBefore,filteredOperations,(inverseEditOperations=>{let groupedInverseEditOperations=[];for(let i=0;i<ctx.selectionsBefore.length;i++)groupedInverseEditOperations[i]=[];for(const op of inverseEditOperations)op.identifier&&groupedInverseEditOperations[op.identifier.major].push(op);const minorBasedSorter=(a,b)=>a.identifier.minor-b.identifier.minor;let cursorSelections=[];for(let i=0;i<ctx.selectionsBefore.length;i++)groupedInverseEditOperations[i].length>0?(groupedInverseEditOperations[i].sort(minorBasedSorter),cursorSelections[i]=commands[i].computeCursorState(ctx.model,{getInverseEditOperations:()=>groupedInverseEditOperations[i],getTrackedSelection:id=>{const idx=parseInt(id,10),range=ctx.model._getTrackedRange(ctx.trackedRanges[idx]);return 0/* LTR */===ctx.trackedRangesDirection[idx]?new core_selection/* Selection */.Y(range.startLineNumber,range.startColumn,range.endLineNumber,range.endColumn):new core_selection/* Selection */.Y(range.endLineNumber,range.endColumn,range.startLineNumber,range.startColumn)}})):cursorSelections[i]=ctx.selectionsBefore[i];return cursorSelections}));selectionsAfter||(selectionsAfter=ctx.selectionsBefore);
// Extract losing cursors
let losingCursors=[];for(let losingCursorIndex in loserCursorsMap)loserCursorsMap.hasOwnProperty(losingCursorIndex)&&losingCursors.push(parseInt(losingCursorIndex,10));
// Sort losing cursors descending
losingCursors.sort(((a,b)=>b-a));
// Remove losing cursors
for(const losingCursor of losingCursors)selectionsAfter.splice(losingCursor,1);return selectionsAfter}static _arrayIsEmpty(commands){for(let i=0,len=commands.length;i<len;i++)if(commands[i])return!1;return!0}static _getEditOperations(ctx,commands){let operations=[],hadTrackedEditOperation=!1;for(let i=0,len=commands.length;i<len;i++){const command=commands[i];if(command){const r=this._getEditOperationsFromCommand(ctx,i,command);operations=operations.concat(r.operations),hadTrackedEditOperation=hadTrackedEditOperation||r.hadTrackedEditOperation}}return{operations:operations,hadTrackedEditOperation:hadTrackedEditOperation}}static _getEditOperationsFromCommand(ctx,majorIdentifier,command){
// This method acts as a transaction, if the command fails
// everything it has done is ignored
let operations=[],operationMinor=0;const addEditOperation=(range,text,forceMoveMarkers=!1)=>{core_range/* Range */.e.isEmpty(range)&&""===text||operations.push({identifier:{major:majorIdentifier,minor:operationMinor++},range:range,text:text,forceMoveMarkers:forceMoveMarkers,isAutoWhitespaceEdit:command.insertsAutoWhitespace})};let hadTrackedEditOperation=!1;const addTrackedEditOperation=(selection,text,forceMoveMarkers)=>{hadTrackedEditOperation=!0,addEditOperation(selection,text,forceMoveMarkers)},trackSelection=(_selection,trackPreviousOnEmpty)=>{const selection=core_selection/* Selection */.Y.liftSelection(_selection);let stickiness;if(selection.isEmpty())if("boolean"===typeof trackPreviousOnEmpty)stickiness=trackPreviousOnEmpty?2/* GrowsOnlyWhenTypingBefore */:3/* GrowsOnlyWhenTypingAfter */;else{
// Try to lock it with surrounding text
const maxLineColumn=ctx.model.getLineMaxColumn(selection.startLineNumber);stickiness=selection.startColumn===maxLineColumn?2/* GrowsOnlyWhenTypingBefore */:3/* GrowsOnlyWhenTypingAfter */}else stickiness=1/* NeverGrowsWhenTypingAtEdges */;const l=ctx.trackedRanges.length,id=ctx.model._setTrackedRange(null,selection,stickiness);return ctx.trackedRanges[l]=id,ctx.trackedRangesDirection[l]=selection.getDirection(),l.toString()},editOperationBuilder={addEditOperation:addEditOperation,addTrackedEditOperation:addTrackedEditOperation,trackSelection:trackSelection};try{command.getEditOperations(ctx.model,editOperationBuilder)}catch(e){
// TODO@Alex use notification service if this should be user facing
// e.friendlyMessage = nls.localize('corrupt.commands', "Unexpected exception while executing command.");
return(0,errors/* onUnexpectedError */.dL)(e),{operations:[],hadTrackedEditOperation:!1}}return{operations:operations,hadTrackedEditOperation:hadTrackedEditOperation}}static _getLoserCursorMap(operations){
// This is destructive on the array
operations=operations.slice(0),
// Sort operations with last one first
operations.sort(((a,b)=>-core_range/* Range */.e.compareRangesUsingEnds(a.range,b.range)));
// Operations can not overlap!
let loserCursorsMap={};for(let i=1;i<operations.length;i++){const previousOp=operations[i-1],currentOp=operations[i];if(core_range/* Range */.e.getStartPosition(previousOp.range).isBefore(core_range/* Range */.e.getEndPosition(currentOp.range))){let loserMajor;
// previousOp loses the battle
loserMajor=previousOp.identifier.major>currentOp.identifier.major?previousOp.identifier.major:currentOp.identifier.major,loserCursorsMap[loserMajor.toString()]=!0;for(let j=0;j<operations.length;j++)operations[j].identifier.major===loserMajor&&(operations.splice(j,1),j<i&&i--,j--);i>0&&i--}}return loserCursorsMap}}
/***/},
/***/203675:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */l:function(){/* binding */return AtomicTabMoveOperations}
/* harmony export */});
/* harmony import */var _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(533181);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/class AtomicTabMoveOperations{
/**
     * Get the visible column at the position. If we get to a non-whitespace character first
     * or past the end of string then return -1.
     *
     * **Note** `position` and the return value are 0-based.
     */
static whitespaceVisibleColumn(lineContent,position,tabSize){const lineLength=lineContent.length;let visibleColumn=0,prevTabStopPosition=-1,prevTabStopVisibleColumn=-1;for(let i=0;i<lineLength;i++){if(i===position)return[prevTabStopPosition,prevTabStopVisibleColumn,visibleColumn];visibleColumn%tabSize===0&&(prevTabStopPosition=i,prevTabStopVisibleColumn=visibleColumn);const chCode=lineContent.charCodeAt(i);switch(chCode){case 32/* Space */:visibleColumn+=1;break;case 9/* Tab */:
// Skip to the next multiple of tabSize.
visibleColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.nextRenderTabStop(visibleColumn,tabSize);break;default:return[-1,-1,-1]}}return position===lineLength?[prevTabStopPosition,prevTabStopVisibleColumn,visibleColumn]:[-1,-1,-1]}
/**
     * Return the position that should result from a move left, right or to the
     * nearest tab, if atomic tabs are enabled. Left and right are used for the
     * arrow key movements, nearest is used for mouse selection. It returns
     * -1 if atomic tabs are not relevant and you should fall back to normal
     * behaviour.
     *
     * **Note**: `position` and the return value are 0-based.
     */static atomicPosition(lineContent,position,tabSize,direction){const lineLength=lineContent.length,[prevTabStopPosition,prevTabStopVisibleColumn,visibleColumn]=AtomicTabMoveOperations.whitespaceVisibleColumn(lineContent,position,tabSize);
// Get the 0-based visible column corresponding to the position, or return
// -1 if it is not in the initial whitespace.
if(-1===visibleColumn)return-1;
// Is the output left or right of the current position. The case for nearest
// where it is the same as the current position is handled in the switch.
let left;switch(direction){case 0/* Left */:left=!0;break;case 1/* Right */:left=!1;break;case 2/* Nearest */:
// The code below assumes the output position is either left or right
// of the input position. If it is the same, return immediately.
if(visibleColumn%tabSize===0)return position;
// Go to the nearest indentation.
left=visibleColumn%tabSize<=tabSize/2;break}
// If going left, we can just use the info about the last tab stop position and
// last tab stop visible column that we computed in the first walk over the whitespace.
if(left){if(-1===prevTabStopPosition)return-1;
// If the direction is left, we need to keep scanning right to ensure
// that targetVisibleColumn + tabSize is before non-whitespace.
// This is so that when we press left at the end of a partial
// indentation it only goes one character. For example '      foo' with
// tabSize 4, should jump from position 6 to position 5, not 4.
let currentVisibleColumn=prevTabStopVisibleColumn;for(let i=prevTabStopPosition;i<lineLength;++i){if(currentVisibleColumn===prevTabStopVisibleColumn+tabSize)
// It is a full indentation.
return prevTabStopPosition;const chCode=lineContent.charCodeAt(i);switch(chCode){case 32/* Space */:currentVisibleColumn+=1;break;case 9/* Tab */:currentVisibleColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.nextRenderTabStop(currentVisibleColumn,tabSize);break;default:return-1}}return currentVisibleColumn===prevTabStopVisibleColumn+tabSize?prevTabStopPosition:-1;
// It must have been a partial indentation.
}
// We are going right.
const targetVisibleColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.nextRenderTabStop(visibleColumn,tabSize);
// We can just continue from where whitespaceVisibleColumn got to.
let currentVisibleColumn=visibleColumn;for(let i=position;i<lineLength;i++){if(currentVisibleColumn===targetVisibleColumn)return i;const chCode=lineContent.charCodeAt(i);switch(chCode){case 32/* Space */:currentVisibleColumn+=1;break;case 9/* Tab */:currentVisibleColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.nextRenderTabStop(currentVisibleColumn,tabSize);break;default:return-1}}
// This condition handles when the target column is at the end of the line.
return currentVisibleColumn===targetVisibleColumn?lineLength:-1}}
/***/},
/***/172792:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */U:function(){/* binding */return ColumnSelection}
/* harmony export */});
/* harmony import */var _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(533181),_core_position_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(50187),_core_range_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(624314);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class ColumnSelection{static columnSelect(config,model,fromLineNumber,fromVisibleColumn,toLineNumber,toVisibleColumn){let lineCount=Math.abs(toLineNumber-fromLineNumber)+1,reversed=fromLineNumber>toLineNumber,isRTL=fromVisibleColumn>toVisibleColumn,isLTR=fromVisibleColumn<toVisibleColumn,result=[];
// console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);
for(let i=0;i<lineCount;i++){let lineNumber=fromLineNumber+(reversed?-i:i),startColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.columnFromVisibleColumn2(config,model,lineNumber,fromVisibleColumn),endColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.columnFromVisibleColumn2(config,model,lineNumber,toVisibleColumn),visibleStartColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.visibleColumnFromColumn2(config,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_1__/* .Position */.L(lineNumber,startColumn)),visibleEndColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.visibleColumnFromColumn2(config,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_1__/* .Position */.L(lineNumber,endColumn));
// console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);
if(isLTR){if(visibleStartColumn>toVisibleColumn)continue;if(visibleEndColumn<fromVisibleColumn)continue}if(isRTL){if(visibleEndColumn>fromVisibleColumn)continue;if(visibleStartColumn<toVisibleColumn)continue}result.push(new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .SingleCursorState */.rS(new _core_range_js__WEBPACK_IMPORTED_MODULE_2__/* .Range */.e(lineNumber,startColumn,lineNumber,startColumn),0,new _core_position_js__WEBPACK_IMPORTED_MODULE_1__/* .Position */.L(lineNumber,endColumn),0))}if(0===result.length)
// We are after all the lines, so add cursor at the end of each line
for(let i=0;i<lineCount;i++){const lineNumber=fromLineNumber+(reversed?-i:i),maxColumn=model.getLineMaxColumn(lineNumber);result.push(new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .SingleCursorState */.rS(new _core_range_js__WEBPACK_IMPORTED_MODULE_2__/* .Range */.e(lineNumber,maxColumn,lineNumber,maxColumn),0,new _core_position_js__WEBPACK_IMPORTED_MODULE_1__/* .Position */.L(lineNumber,maxColumn),0))}return{viewStates:result,reversed:reversed,fromLineNumber:fromLineNumber,fromVisualColumn:fromVisibleColumn,toLineNumber:toLineNumber,toVisualColumn:toVisibleColumn}}static columnSelectLeft(config,model,prevColumnSelectData){let toViewVisualColumn=prevColumnSelectData.toViewVisualColumn;return toViewVisualColumn>0&&toViewVisualColumn--,ColumnSelection.columnSelect(config,model,prevColumnSelectData.fromViewLineNumber,prevColumnSelectData.fromViewVisualColumn,prevColumnSelectData.toViewLineNumber,toViewVisualColumn)}static columnSelectRight(config,model,prevColumnSelectData){let maxVisualViewColumn=0;const minViewLineNumber=Math.min(prevColumnSelectData.fromViewLineNumber,prevColumnSelectData.toViewLineNumber),maxViewLineNumber=Math.max(prevColumnSelectData.fromViewLineNumber,prevColumnSelectData.toViewLineNumber);for(let lineNumber=minViewLineNumber;lineNumber<=maxViewLineNumber;lineNumber++){const lineMaxViewColumn=model.getLineMaxColumn(lineNumber),lineMaxVisualViewColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.visibleColumnFromColumn2(config,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_1__/* .Position */.L(lineNumber,lineMaxViewColumn));maxVisualViewColumn=Math.max(maxVisualViewColumn,lineMaxVisualViewColumn)}let toViewVisualColumn=prevColumnSelectData.toViewVisualColumn;return toViewVisualColumn<maxVisualViewColumn&&toViewVisualColumn++,this.columnSelect(config,model,prevColumnSelectData.fromViewLineNumber,prevColumnSelectData.fromViewVisualColumn,prevColumnSelectData.toViewLineNumber,toViewVisualColumn)}static columnSelectUp(config,model,prevColumnSelectData,isPaged){const linesCount=isPaged?config.pageSize:1,toViewLineNumber=Math.max(1,prevColumnSelectData.toViewLineNumber-linesCount);return this.columnSelect(config,model,prevColumnSelectData.fromViewLineNumber,prevColumnSelectData.fromViewVisualColumn,toViewLineNumber,prevColumnSelectData.toViewVisualColumn)}static columnSelectDown(config,model,prevColumnSelectData,isPaged){const linesCount=isPaged?config.pageSize:1,toViewLineNumber=Math.min(model.getLineCount(),prevColumnSelectData.toViewLineNumber+linesCount);return this.columnSelect(config,model,prevColumnSelectData.fromViewLineNumber,prevColumnSelectData.fromViewVisualColumn,toViewLineNumber,prevColumnSelectData.toViewVisualColumn)}}
/***/},
/***/547707:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */i:function(){/* binding */return CursorColumns}
/* harmony export */});
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Common operations that work and make sense both on the model and on the view model.
 */class CursorColumns{static visibleColumnFromColumn(lineContent,column,tabSize){const lineContentLength=lineContent.length,endOffset=column-1<lineContentLength?column-1:lineContentLength;let result=0,i=0;while(i<endOffset){const codePoint=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getNextCodePoint */.ZH(lineContent,endOffset,i);if(i+=codePoint>=65536/* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */?2:1,9/* Tab */===codePoint)result=CursorColumns.nextRenderTabStop(result,tabSize);else{let graphemeBreakType=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getGraphemeBreakType */.S6(codePoint);while(i<endOffset){const nextCodePoint=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getNextCodePoint */.ZH(lineContent,endOffset,i),nextGraphemeBreakType=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getGraphemeBreakType */.S6(nextCodePoint);if(_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .breakBetweenGraphemeBreakType */.fi(graphemeBreakType,nextGraphemeBreakType))break;i+=nextCodePoint>=65536/* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */?2:1,graphemeBreakType=nextGraphemeBreakType}_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isFullWidthCharacter */.K7(codePoint)||_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isEmojiImprecise */.C8(codePoint)?result+=2:result+=1}}return result}
/**
     * Returns an array that maps one based columns to one based visible columns. The entry at position 0 is -1.
    */static visibleColumnsByColumns(lineContent,tabSize){const endOffset=lineContent.length;let result=new Array;result.push(-1);let pos=0,i=0;while(i<endOffset){const codePoint=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getNextCodePoint */.ZH(lineContent,endOffset,i);if(i+=codePoint>=65536/* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */?2:1,result.push(pos),codePoint>=65536/* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */&&result.push(pos),9/* Tab */===codePoint)pos=CursorColumns.nextRenderTabStop(pos,tabSize);else{let graphemeBreakType=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getGraphemeBreakType */.S6(codePoint);while(i<endOffset){const nextCodePoint=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getNextCodePoint */.ZH(lineContent,endOffset,i),nextGraphemeBreakType=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getGraphemeBreakType */.S6(nextCodePoint);if(_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .breakBetweenGraphemeBreakType */.fi(graphemeBreakType,nextGraphemeBreakType))break;i+=nextCodePoint>=65536/* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */?2:1,result.push(pos),codePoint>=65536/* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */&&result.push(pos),graphemeBreakType=nextGraphemeBreakType}_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isFullWidthCharacter */.K7(codePoint)||_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isEmojiImprecise */.C8(codePoint)?pos+=2:pos+=1}}return result.push(pos),result}static visibleColumnFromColumn2(config,model,position){return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber),position.column,config.tabSize)}static columnFromVisibleColumn(lineContent,visibleColumn,tabSize){if(visibleColumn<=0)return 1;const lineLength=lineContent.length;let beforeVisibleColumn=0,beforeColumn=1,i=0;while(i<lineLength){const codePoint=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getNextCodePoint */.ZH(lineContent,lineLength,i);let afterVisibleColumn;if(i+=codePoint>=65536/* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */?2:1,9/* Tab */===codePoint)afterVisibleColumn=CursorColumns.nextRenderTabStop(beforeVisibleColumn,tabSize);else{let graphemeBreakType=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getGraphemeBreakType */.S6(codePoint);while(i<lineLength){const nextCodePoint=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getNextCodePoint */.ZH(lineContent,lineLength,i),nextGraphemeBreakType=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getGraphemeBreakType */.S6(nextCodePoint);if(_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .breakBetweenGraphemeBreakType */.fi(graphemeBreakType,nextGraphemeBreakType))break;i+=nextCodePoint>=65536/* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */?2:1,graphemeBreakType=nextGraphemeBreakType}afterVisibleColumn=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isFullWidthCharacter */.K7(codePoint)||_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isEmojiImprecise */.C8(codePoint)?beforeVisibleColumn+2:beforeVisibleColumn+1}const afterColumn=i+1;if(afterVisibleColumn>=visibleColumn){const beforeDelta=visibleColumn-beforeVisibleColumn,afterDelta=afterVisibleColumn-visibleColumn;return afterDelta<beforeDelta?afterColumn:beforeColumn}beforeVisibleColumn=afterVisibleColumn,beforeColumn=afterColumn}
// walked the entire string
return lineLength+1}static columnFromVisibleColumn2(config,model,lineNumber,visibleColumn){let result=this.columnFromVisibleColumn(model.getLineContent(lineNumber),visibleColumn,config.tabSize),minColumn=model.getLineMinColumn(lineNumber);if(result<minColumn)return minColumn;let maxColumn=model.getLineMaxColumn(lineNumber);return result>maxColumn?maxColumn:result}
/**
     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)
     */static nextRenderTabStop(visibleColumn,tabSize){return visibleColumn+tabSize-visibleColumn%tabSize}
/**
     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)
     */static nextIndentTabStop(visibleColumn,indentSize){return visibleColumn+indentSize-visibleColumn%indentSize}
/**
     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)
     */static prevRenderTabStop(column,tabSize){return Math.max(0,column-1-(column-1)%tabSize)}
/**
     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)
     */static prevIndentTabStop(column,indentSize){return Math.max(0,column-1-(column-1)%indentSize)}}
/***/},
/***/533181:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */LM:function(){/* binding */return CursorConfiguration},
/* harmony export */LN:function(){/* binding */return isQuote},
/* harmony export */Tp:function(){/* binding */return EditOperationResult},
/* harmony export */Vi:function(){/* binding */return CursorState},
/* harmony export */io:function(){/* reexport safe */return _cursorColumns_js__WEBPACK_IMPORTED_MODULE_3__.i},
/* harmony export */rS:function(){/* binding */return SingleCursorState},
/* harmony export */zp:function(){/* binding */return CursorContext}
/* harmony export */});
/* unused harmony exports PartialModelCursorState, PartialViewCursorState */
/* harmony import */var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(817301),_core_position_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(50187),_core_range_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(624314),_core_selection_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(203860),_model_textModel_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(724979),_modes_languageConfigurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(594660),_cursorColumns_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(547707);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const autoCloseAlways=()=>!0,autoCloseNever=()=>!1,autoCloseBeforeWhitespace=chr=>" "===chr||"\t"===chr;class CursorConfiguration{constructor(languageId,modelOptions,configuration){this._cursorMoveConfigurationBrand=void 0,this._languageId=languageId;const options=configuration.options,layoutInfo=options.get(129/* layoutInfo */);this.readOnly=options.get(80/* readOnly */),this.tabSize=modelOptions.tabSize,this.indentSize=modelOptions.indentSize,this.insertSpaces=modelOptions.insertSpaces,this.stickyTabStops=options.get(103/* stickyTabStops */),this.lineHeight=options.get(58/* lineHeight */),this.pageSize=Math.max(1,Math.floor(layoutInfo.height/this.lineHeight)-2),this.useTabStops=options.get(114/* useTabStops */),this.wordSeparators=options.get(115/* wordSeparators */),this.emptySelectionClipboard=options.get(32/* emptySelectionClipboard */),this.copyWithSyntaxHighlighting=options.get(21/* copyWithSyntaxHighlighting */),this.multiCursorMergeOverlapping=options.get(68/* multiCursorMergeOverlapping */),this.multiCursorPaste=options.get(70/* multiCursorPaste */),this.autoClosingBrackets=options.get(5/* autoClosingBrackets */),this.autoClosingQuotes=options.get(8/* autoClosingQuotes */),this.autoClosingDelete=options.get(6/* autoClosingDelete */),this.autoClosingOvertype=options.get(7/* autoClosingOvertype */),this.autoSurround=options.get(11/* autoSurround */),this.autoIndent=options.get(9/* autoIndent */),this.surroundingPairs={},this._electricChars=null,this.shouldAutoCloseBefore={quote:CursorConfiguration._getShouldAutoClose(languageId,this.autoClosingQuotes),bracket:CursorConfiguration._getShouldAutoClose(languageId,this.autoClosingBrackets)},this.autoClosingPairs=_modes_languageConfigurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__/* .LanguageConfigurationRegistry */.zu.getAutoClosingPairs(languageId);let surroundingPairs=CursorConfiguration._getSurroundingPairs(languageId);if(surroundingPairs)for(const pair of surroundingPairs)this.surroundingPairs[pair.open]=pair.close}static shouldRecreate(e){return e.hasChanged(129/* layoutInfo */)||e.hasChanged(115/* wordSeparators */)||e.hasChanged(32/* emptySelectionClipboard */)||e.hasChanged(68/* multiCursorMergeOverlapping */)||e.hasChanged(70/* multiCursorPaste */)||e.hasChanged(5/* autoClosingBrackets */)||e.hasChanged(8/* autoClosingQuotes */)||e.hasChanged(6/* autoClosingDelete */)||e.hasChanged(7/* autoClosingOvertype */)||e.hasChanged(11/* autoSurround */)||e.hasChanged(114/* useTabStops */)||e.hasChanged(58/* lineHeight */)||e.hasChanged(80/* readOnly */)}get electricChars(){if(!this._electricChars){this._electricChars={};let electricChars=CursorConfiguration._getElectricCharacters(this._languageId);if(electricChars)for(const char of electricChars)this._electricChars[char]=!0}return this._electricChars}normalizeIndentation(str){return _model_textModel_js__WEBPACK_IMPORTED_MODULE_1__/* .TextModel */.yO.normalizeIndentation(str,this.indentSize,this.insertSpaces)}static _getElectricCharacters(languageId){try{return _modes_languageConfigurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__/* .LanguageConfigurationRegistry */.zu.getElectricCharacters(languageId)}catch(e){return(0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__/* .onUnexpectedError */.dL)(e),null}}static _getShouldAutoClose(languageId,autoCloseConfig){switch(autoCloseConfig){case"beforeWhitespace":return autoCloseBeforeWhitespace;case"languageDefined":return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageId);case"always":return autoCloseAlways;case"never":return autoCloseNever}}static _getLanguageDefinedShouldAutoClose(languageId){try{const autoCloseBeforeSet=_modes_languageConfigurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__/* .LanguageConfigurationRegistry */.zu.getAutoCloseBeforeSet(languageId);return c=>-1!==autoCloseBeforeSet.indexOf(c)}catch(e){return(0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__/* .onUnexpectedError */.dL)(e),autoCloseNever}}static _getSurroundingPairs(languageId){try{return _modes_languageConfigurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__/* .LanguageConfigurationRegistry */.zu.getSurroundingPairs(languageId)}catch(e){return(0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__/* .onUnexpectedError */.dL)(e),null}}}
/**
 * Represents the cursor state on either the model or on the view model.
 */class SingleCursorState{constructor(selectionStart,selectionStartLeftoverVisibleColumns,position,leftoverVisibleColumns){this._singleCursorStateBrand=void 0,this.selectionStart=selectionStart,this.selectionStartLeftoverVisibleColumns=selectionStartLeftoverVisibleColumns,this.position=position,this.leftoverVisibleColumns=leftoverVisibleColumns,this.selection=SingleCursorState._computeSelection(this.selectionStart,this.position)}equals(other){return this.selectionStartLeftoverVisibleColumns===other.selectionStartLeftoverVisibleColumns&&this.leftoverVisibleColumns===other.leftoverVisibleColumns&&this.position.equals(other.position)&&this.selectionStart.equalsRange(other.selectionStart)}hasSelection(){return!this.selection.isEmpty()||!this.selectionStart.isEmpty()}move(inSelectionMode,lineNumber,column,leftoverVisibleColumns){return inSelectionMode?new SingleCursorState(this.selectionStart,this.selectionStartLeftoverVisibleColumns,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column),leftoverVisibleColumns):new SingleCursorState(new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(lineNumber,column,lineNumber,column),leftoverVisibleColumns,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column),leftoverVisibleColumns)}static _computeSelection(selectionStart,position){let startLineNumber,startColumn,endLineNumber,endColumn;return selectionStart.isEmpty()?(startLineNumber=selectionStart.startLineNumber,startColumn=selectionStart.startColumn,endLineNumber=position.lineNumber,endColumn=position.column):position.isBeforeOrEqual(selectionStart.getStartPosition())?(startLineNumber=selectionStart.endLineNumber,startColumn=selectionStart.endColumn,endLineNumber=position.lineNumber,endColumn=position.column):(startLineNumber=selectionStart.startLineNumber,startColumn=selectionStart.startColumn,endLineNumber=position.lineNumber,endColumn=position.column),new _core_selection_js__WEBPACK_IMPORTED_MODULE_6__/* .Selection */.Y(startLineNumber,startColumn,endLineNumber,endColumn)}}class CursorContext{constructor(model,viewModel,coordinatesConverter,cursorConfig){this._cursorContextBrand=void 0,this.model=model,this.viewModel=viewModel,this.coordinatesConverter=coordinatesConverter,this.cursorConfig=cursorConfig}}class PartialModelCursorState{constructor(modelState){this.modelState=modelState,this.viewState=null}}class PartialViewCursorState{constructor(viewState){this.modelState=null,this.viewState=viewState}}class CursorState{constructor(modelState,viewState){this._cursorStateBrand=void 0,this.modelState=modelState,this.viewState=viewState}static fromModelState(modelState){return new PartialModelCursorState(modelState)}static fromViewState(viewState){return new PartialViewCursorState(viewState)}static fromModelSelection(modelSelection){const selectionStartLineNumber=modelSelection.selectionStartLineNumber,selectionStartColumn=modelSelection.selectionStartColumn,positionLineNumber=modelSelection.positionLineNumber,positionColumn=modelSelection.positionColumn,modelState=new SingleCursorState(new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(selectionStartLineNumber,selectionStartColumn,selectionStartLineNumber,selectionStartColumn),0,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(positionLineNumber,positionColumn),0);return CursorState.fromModelState(modelState)}static fromModelSelections(modelSelections){let states=[];for(let i=0,len=modelSelections.length;i<len;i++)states[i]=this.fromModelSelection(modelSelections[i]);return states}equals(other){return this.viewState.equals(other.viewState)&&this.modelState.equals(other.modelState)}}class EditOperationResult{constructor(type,commands,opts){this._editOperationResultBrand=void 0,this.type=type,this.commands=commands,this.shouldPushStackElementBefore=opts.shouldPushStackElementBefore,this.shouldPushStackElementAfter=opts.shouldPushStackElementAfter}}function isQuote(ch){return"'"===ch||'"'===ch||"`"===ch}
/***/},
/***/531380:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */A:function(){/* binding */return DeleteOperations}
/* harmony export */});
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295),_commands_replaceCommand_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(361329),_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(533181),_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(388784),_core_range_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(624314),_core_position_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(50187);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class DeleteOperations{static deleteRight(prevEditOperationType,config,model,selections){let commands=[],shouldPushStackElementBefore=3/* DeletingRight */!==prevEditOperationType;for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];let deleteSelection=selection;if(deleteSelection.isEmpty()){let position=selection.getPosition(),rightOfPosition=_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_2__/* .MoveOperations */.o.right(config,model,position);deleteSelection=new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(rightOfPosition.lineNumber,rightOfPosition.column,position.lineNumber,position.column)}deleteSelection.isEmpty()?
// Probably at end of file => ignore
commands[i]=null:(deleteSelection.startLineNumber!==deleteSelection.endLineNumber&&(shouldPushStackElementBefore=!0),commands[i]=new _commands_replaceCommand_js__WEBPACK_IMPORTED_MODULE_4__/* .ReplaceCommand */.T4(deleteSelection,""))}return[shouldPushStackElementBefore,commands]}static isAutoClosingPairDelete(autoClosingDelete,autoClosingBrackets,autoClosingQuotes,autoClosingPairsOpen,model,selections,autoClosedCharacters){if("never"===autoClosingBrackets&&"never"===autoClosingQuotes)return!1;if("never"===autoClosingDelete)return!1;for(let i=0,len=selections.length;i<len;i++){const selection=selections[i],position=selection.getPosition();if(!selection.isEmpty())return!1;const lineText=model.getLineContent(position.lineNumber);if(position.column<2||position.column>=lineText.length+1)return!1;const character=lineText.charAt(position.column-2),autoClosingPairCandidates=autoClosingPairsOpen.get(character);if(!autoClosingPairCandidates)return!1;if((0,_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .isQuote */.LN)(character)){if("never"===autoClosingQuotes)return!1}else if("never"===autoClosingBrackets)return!1;const afterCharacter=lineText.charAt(position.column-1);let foundAutoClosingPair=!1;for(const autoClosingPairCandidate of autoClosingPairCandidates)autoClosingPairCandidate.open===character&&autoClosingPairCandidate.close===afterCharacter&&(foundAutoClosingPair=!0);if(!foundAutoClosingPair)return!1;
// Must delete the pair only if it was automatically inserted by the editor
if("auto"===autoClosingDelete){let found=!1;for(let j=0,lenJ=autoClosedCharacters.length;j<lenJ;j++){const autoClosedCharacter=autoClosedCharacters[j];if(position.lineNumber===autoClosedCharacter.startLineNumber&&position.column===autoClosedCharacter.startColumn){found=!0;break}}if(!found)return!1}}return!0}static _runAutoClosingPairDelete(config,model,selections){let commands=[];for(let i=0,len=selections.length;i<len;i++){const position=selections[i].getPosition(),deleteSelection=new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(position.lineNumber,position.column-1,position.lineNumber,position.column+1);commands[i]=new _commands_replaceCommand_js__WEBPACK_IMPORTED_MODULE_4__/* .ReplaceCommand */.T4(deleteSelection,"")}return[!0,commands]}static deleteLeft(prevEditOperationType,config,model,selections,autoClosedCharacters){if(this.isAutoClosingPairDelete(config.autoClosingDelete,config.autoClosingBrackets,config.autoClosingQuotes,config.autoClosingPairs.autoClosingPairsOpenByEnd,model,selections,autoClosedCharacters))return this._runAutoClosingPairDelete(config,model,selections);const commands=[];let shouldPushStackElementBefore=2/* DeletingLeft */!==prevEditOperationType;for(let i=0,len=selections.length;i<len;i++){let deleteRange=DeleteOperations.getDeleteRange(selections[i],model,config);
// Ignore empty delete ranges, as they have no effect
// They happen if the cursor is at the beginning of the file.
deleteRange.isEmpty()?commands[i]=null:(deleteRange.startLineNumber!==deleteRange.endLineNumber&&(shouldPushStackElementBefore=!0),commands[i]=new _commands_replaceCommand_js__WEBPACK_IMPORTED_MODULE_4__/* .ReplaceCommand */.T4(deleteRange,""))}return[shouldPushStackElementBefore,commands]}static getDeleteRange(selection,model,config){if(!selection.isEmpty())return selection;const position=selection.getPosition();
// Unintend when using tab stops and cursor is within indentation
if(config.useTabStops&&position.column>1){const lineContent=model.getLineContent(position.lineNumber),firstNonWhitespaceIndex=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .firstNonWhitespaceIndex */.LC(lineContent),lastIndentationColumn=-1===firstNonWhitespaceIndex?/* entire string is whitespace */lineContent.length+1:firstNonWhitespaceIndex+1;if(position.column<=lastIndentationColumn){const fromVisibleColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .CursorColumns */.io.visibleColumnFromColumn2(config,model,position),toVisibleColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .CursorColumns */.io.prevIndentTabStop(fromVisibleColumn,config.indentSize),toColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .CursorColumns */.io.columnFromVisibleColumn2(config,model,position.lineNumber,toVisibleColumn);return new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(position.lineNumber,toColumn,position.lineNumber,position.column)}}return _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e.fromPositions(DeleteOperations.getPositionAfterDeleteLeft(position,model),position)}static getPositionAfterDeleteLeft(position,model){if(position.column>1){
// Convert 1-based columns to 0-based offsets and back.
const idx=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getLeftDeleteOffset */.oH(position.column-1,model.getLineContent(position.lineNumber));return position.with(void 0,idx+1)}if(position.lineNumber>1){const newLine=position.lineNumber-1;return new _core_position_js__WEBPACK_IMPORTED_MODULE_5__/* .Position */.L(newLine,model.getLineMaxColumn(newLine))}return position}static cut(config,model,selections){let commands=[],lastCutRange=null;selections.sort(((a,b)=>_core_position_js__WEBPACK_IMPORTED_MODULE_5__/* .Position */.L.compare(a.getStartPosition(),b.getEndPosition())));for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];if(selection.isEmpty())if(config.emptySelectionClipboard){
// This is a full line cut
let startLineNumber,startColumn,endLineNumber,endColumn,position=selection.getPosition();position.lineNumber<model.getLineCount()?(
// Cutting a line in the middle of the model
startLineNumber=position.lineNumber,startColumn=1,endLineNumber=position.lineNumber+1,endColumn=1):position.lineNumber>1&&(null===lastCutRange||void 0===lastCutRange?void 0:lastCutRange.endLineNumber)!==position.lineNumber?(
// Cutting the last line & there are more than 1 lines in the model & a previous cut operation does not touch the current cut operation
startLineNumber=position.lineNumber-1,startColumn=model.getLineMaxColumn(position.lineNumber-1),endLineNumber=position.lineNumber,endColumn=model.getLineMaxColumn(position.lineNumber)):(
// Cutting the single line that the model contains
startLineNumber=position.lineNumber,startColumn=1,endLineNumber=position.lineNumber,endColumn=model.getLineMaxColumn(position.lineNumber));let deleteSelection=new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(startLineNumber,startColumn,endLineNumber,endColumn);lastCutRange=deleteSelection,deleteSelection.isEmpty()?commands[i]=null:commands[i]=new _commands_replaceCommand_js__WEBPACK_IMPORTED_MODULE_4__/* .ReplaceCommand */.T4(deleteSelection,"")}else
// Cannot cut empty selection
commands[i]=null;else commands[i]=new _commands_replaceCommand_js__WEBPACK_IMPORTED_MODULE_4__/* .ReplaceCommand */.T4(selection,"")}return new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .EditOperationResult */.Tp(0/* Other */,commands,{shouldPushStackElementBefore:!0,shouldPushStackElementAfter:!0})}}
/***/},
/***/183814:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */N:function(){/* binding */return CursorMove},
/* harmony export */P:function(){/* binding */return CursorMoveCommands}
/* harmony export */});
/* harmony import */var CursorMove,_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(998401),_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(533181),_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(388784),_cursorWordOperations_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(5795),_core_position_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(50187),_core_range_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(624314);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class CursorMoveCommands{static addCursorDown(viewModel,cursors,useLogicalLine){let result=[],resultLen=0;for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i];result[resultLen++]=new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi(cursor.modelState,cursor.viewState),result[resultLen++]=useLogicalLine?_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.translateDown(viewModel.cursorConfig,viewModel.model,cursor.modelState)):_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.translateDown(viewModel.cursorConfig,viewModel,cursor.viewState))}return result}static addCursorUp(viewModel,cursors,useLogicalLine){let result=[],resultLen=0;for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i];result[resultLen++]=new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi(cursor.modelState,cursor.viewState),result[resultLen++]=useLogicalLine?_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.translateUp(viewModel.cursorConfig,viewModel.model,cursor.modelState)):_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.translateUp(viewModel.cursorConfig,viewModel,cursor.viewState))}return result}static moveToBeginningOfLine(viewModel,cursors,inSelectionMode){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i];result[i]=this._moveToLineStart(viewModel,cursor,inSelectionMode)}return result}static _moveToLineStart(viewModel,cursor,inSelectionMode){const currentViewStateColumn=cursor.viewState.position.column,currentModelStateColumn=cursor.modelState.position.column,isFirstLineOfWrappedLine=currentViewStateColumn===currentModelStateColumn,currentViewStatelineNumber=cursor.viewState.position.lineNumber,firstNonBlankColumn=viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber),isBeginningOfViewLine=currentViewStateColumn===firstNonBlankColumn;return isFirstLineOfWrappedLine||isBeginningOfViewLine?this._moveToLineStartByModel(viewModel,cursor,inSelectionMode):this._moveToLineStartByView(viewModel,cursor,inSelectionMode)}static _moveToLineStartByView(viewModel,cursor,inSelectionMode){return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveToBeginningOfLine(viewModel.cursorConfig,viewModel,cursor.viewState,inSelectionMode))}static _moveToLineStartByModel(viewModel,cursor,inSelectionMode){return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveToBeginningOfLine(viewModel.cursorConfig,viewModel.model,cursor.modelState,inSelectionMode))}static moveToEndOfLine(viewModel,cursors,inSelectionMode,sticky){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i];result[i]=this._moveToLineEnd(viewModel,cursor,inSelectionMode,sticky)}return result}static _moveToLineEnd(viewModel,cursor,inSelectionMode,sticky){const viewStatePosition=cursor.viewState.position,viewModelMaxColumn=viewModel.getLineMaxColumn(viewStatePosition.lineNumber),isEndOfViewLine=viewStatePosition.column===viewModelMaxColumn,modelStatePosition=cursor.modelState.position,modelMaxColumn=viewModel.model.getLineMaxColumn(modelStatePosition.lineNumber),isEndLineOfWrappedLine=viewModelMaxColumn-viewStatePosition.column===modelMaxColumn-modelStatePosition.column;return isEndOfViewLine||isEndLineOfWrappedLine?this._moveToLineEndByModel(viewModel,cursor,inSelectionMode,sticky):this._moveToLineEndByView(viewModel,cursor,inSelectionMode,sticky)}static _moveToLineEndByView(viewModel,cursor,inSelectionMode,sticky){return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveToEndOfLine(viewModel.cursorConfig,viewModel,cursor.viewState,inSelectionMode,sticky))}static _moveToLineEndByModel(viewModel,cursor,inSelectionMode,sticky){return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveToEndOfLine(viewModel.cursorConfig,viewModel.model,cursor.modelState,inSelectionMode,sticky))}static expandLineSelection(viewModel,cursors){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i],startLineNumber=cursor.modelState.selection.startLineNumber,lineCount=viewModel.model.getLineCount();let endColumn,endLineNumber=cursor.modelState.selection.endLineNumber;endLineNumber===lineCount?endColumn=viewModel.model.getLineMaxColumn(lineCount):(endLineNumber++,endColumn=1),result[i]=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .SingleCursorState */.rS(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(startLineNumber,1,startLineNumber,1),0,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(endLineNumber,endColumn),0))}return result}static moveToBeginningOfBuffer(viewModel,cursors,inSelectionMode){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i];result[i]=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveToBeginningOfBuffer(viewModel.cursorConfig,viewModel.model,cursor.modelState,inSelectionMode))}return result}static moveToEndOfBuffer(viewModel,cursors,inSelectionMode){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i];result[i]=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveToEndOfBuffer(viewModel.cursorConfig,viewModel.model,cursor.modelState,inSelectionMode))}return result}static selectAll(viewModel,cursor){const lineCount=viewModel.model.getLineCount(),maxColumn=viewModel.model.getLineMaxColumn(lineCount);return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .SingleCursorState */.rS(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(1,1,1,1),0,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineCount,maxColumn),0))}static line(viewModel,cursor,inSelectionMode,_position,_viewPosition){const position=viewModel.model.validatePosition(_position),viewPosition=_viewPosition?viewModel.coordinatesConverter.validateViewPosition(new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(_viewPosition.lineNumber,_viewPosition.column),position):viewModel.coordinatesConverter.convertModelPositionToViewPosition(position);if(!inSelectionMode||!cursor.modelState.hasSelection()){
// Entering line selection for the first time
const lineCount=viewModel.model.getLineCount();let selectToLineNumber=position.lineNumber+1,selectToColumn=1;return selectToLineNumber>lineCount&&(selectToLineNumber=lineCount,selectToColumn=viewModel.model.getLineMaxColumn(selectToLineNumber)),_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .SingleCursorState */.rS(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(position.lineNumber,1,selectToLineNumber,selectToColumn),0,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(selectToLineNumber,selectToColumn),0))}
// Continuing line selection
const enteringLineNumber=cursor.modelState.selectionStart.getStartPosition().lineNumber;if(position.lineNumber<enteringLineNumber)return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(),viewPosition.lineNumber,1,0));if(position.lineNumber>enteringLineNumber){const lineCount=viewModel.getLineCount();let selectToViewLineNumber=viewPosition.lineNumber+1,selectToViewColumn=1;return selectToViewLineNumber>lineCount&&(selectToViewLineNumber=lineCount,selectToViewColumn=viewModel.getLineMaxColumn(selectToViewLineNumber)),_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(),selectToViewLineNumber,selectToViewColumn,0))}{const endPositionOfSelectionStart=cursor.modelState.selectionStart.getEndPosition();return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(),endPositionOfSelectionStart.lineNumber,endPositionOfSelectionStart.column,0))}}static word(viewModel,cursor,inSelectionMode,_position){const position=viewModel.model.validatePosition(_position);return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(_cursorWordOperations_js__WEBPACK_IMPORTED_MODULE_2__/* .WordOperations */.w.word(viewModel.cursorConfig,viewModel.model,cursor.modelState,inSelectionMode,position))}static cancelSelection(viewModel,cursor){if(!cursor.modelState.hasSelection())return new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi(cursor.modelState,cursor.viewState);const lineNumber=cursor.viewState.position.lineNumber,column=cursor.viewState.position.column;return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .SingleCursorState */.rS(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(lineNumber,column,lineNumber,column),0,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column),0))}static moveTo(viewModel,cursor,inSelectionMode,_position,_viewPosition){const position=viewModel.model.validatePosition(_position),viewPosition=_viewPosition?viewModel.coordinatesConverter.validateViewPosition(new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(_viewPosition.lineNumber,_viewPosition.column),position):viewModel.coordinatesConverter.convertModelPositionToViewPosition(position);return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(cursor.viewState.move(inSelectionMode,viewPosition.lineNumber,viewPosition.column,0))}static simpleMove(viewModel,cursors,direction,inSelectionMode,value,unit){switch(direction){case 0/* Left */:return 4/* HalfLine */===unit?this._moveHalfLineLeft(viewModel,cursors,inSelectionMode):this._moveLeft(viewModel,cursors,inSelectionMode,value);case 1/* Right */:return 4/* HalfLine */===unit?this._moveHalfLineRight(viewModel,cursors,inSelectionMode):this._moveRight(viewModel,cursors,inSelectionMode,value);case 2/* Up */:return 2/* WrappedLine */===unit?this._moveUpByViewLines(viewModel,cursors,inSelectionMode,value):this._moveUpByModelLines(viewModel,cursors,inSelectionMode,value);case 3/* Down */:return 2/* WrappedLine */===unit?this._moveDownByViewLines(viewModel,cursors,inSelectionMode,value):this._moveDownByModelLines(viewModel,cursors,inSelectionMode,value);case 4/* PrevBlankLine */:return 2/* WrappedLine */===unit?cursors.map((cursor=>_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveToPrevBlankLine(viewModel.cursorConfig,viewModel,cursor.viewState,inSelectionMode)))):cursors.map((cursor=>_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveToPrevBlankLine(viewModel.cursorConfig,viewModel.model,cursor.modelState,inSelectionMode))));case 5/* NextBlankLine */:return 2/* WrappedLine */===unit?cursors.map((cursor=>_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveToNextBlankLine(viewModel.cursorConfig,viewModel,cursor.viewState,inSelectionMode)))):cursors.map((cursor=>_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveToNextBlankLine(viewModel.cursorConfig,viewModel.model,cursor.modelState,inSelectionMode))));case 6/* WrappedLineStart */:
// Move to the beginning of the current view line
return this._moveToViewMinColumn(viewModel,cursors,inSelectionMode);case 7/* WrappedLineFirstNonWhitespaceCharacter */:
// Move to the first non-whitespace column of the current view line
return this._moveToViewFirstNonWhitespaceColumn(viewModel,cursors,inSelectionMode);case 8/* WrappedLineColumnCenter */:
// Move to the "center" of the current view line
return this._moveToViewCenterColumn(viewModel,cursors,inSelectionMode);case 9/* WrappedLineEnd */:
// Move to the end of the current view line
return this._moveToViewMaxColumn(viewModel,cursors,inSelectionMode);case 10/* WrappedLineLastNonWhitespaceCharacter */:
// Move to the last non-whitespace column of the current view line
return this._moveToViewLastNonWhitespaceColumn(viewModel,cursors,inSelectionMode);default:return null}}static viewportMove(viewModel,cursors,direction,inSelectionMode,value){const visibleViewRange=viewModel.getCompletelyVisibleViewRange(),visibleModelRange=viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);switch(direction){case 11/* ViewPortTop */:{
// Move to the nth line start in the viewport (from the top)
const modelLineNumber=this._firstLineNumberInRange(viewModel.model,visibleModelRange,value),modelColumn=viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);return[this._moveToModelPosition(viewModel,cursors[0],inSelectionMode,modelLineNumber,modelColumn)]}case 13/* ViewPortBottom */:{
// Move to the nth line start in the viewport (from the bottom)
const modelLineNumber=this._lastLineNumberInRange(viewModel.model,visibleModelRange,value),modelColumn=viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);return[this._moveToModelPosition(viewModel,cursors[0],inSelectionMode,modelLineNumber,modelColumn)]}case 12/* ViewPortCenter */:{
// Move to the line start in the viewport center
const modelLineNumber=Math.round((visibleModelRange.startLineNumber+visibleModelRange.endLineNumber)/2),modelColumn=viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);return[this._moveToModelPosition(viewModel,cursors[0],inSelectionMode,modelLineNumber,modelColumn)]}case 14/* ViewPortIfOutside */:{
// Move to a position inside the viewport
let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i];result[i]=this.findPositionInViewportIfOutside(viewModel,cursor,visibleViewRange,inSelectionMode)}return result}default:return null}}static findPositionInViewportIfOutside(viewModel,cursor,visibleViewRange,inSelectionMode){let viewLineNumber=cursor.viewState.position.lineNumber;if(visibleViewRange.startLineNumber<=viewLineNumber&&viewLineNumber<=visibleViewRange.endLineNumber-1)
// Nothing to do, cursor is in viewport
return new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi(cursor.modelState,cursor.viewState);{let newViewLineNumber;newViewLineNumber=viewLineNumber>visibleViewRange.endLineNumber-1?visibleViewRange.endLineNumber-1:viewLineNumber<visibleViewRange.startLineNumber?visibleViewRange.startLineNumber:viewLineNumber;const position=_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.vertical(viewModel.cursorConfig,viewModel,viewLineNumber,cursor.viewState.position.column,cursor.viewState.leftoverVisibleColumns,newViewLineNumber,!1);return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(cursor.viewState.move(inSelectionMode,position.lineNumber,position.column,position.leftoverVisibleColumns))}}
/**
     * Find the nth line start included in the range (from the start).
     */static _firstLineNumberInRange(model,range,count){let startLineNumber=range.startLineNumber;return range.startColumn!==model.getLineMinColumn(startLineNumber)&&
// Move on to the second line if the first line start is not included in the range
startLineNumber++,Math.min(range.endLineNumber,startLineNumber+count-1)}
/**
     * Find the nth line start included in the range (from the end).
     */static _lastLineNumberInRange(model,range,count){let startLineNumber=range.startLineNumber;return range.startColumn!==model.getLineMinColumn(startLineNumber)&&
// Move on to the second line if the first line start is not included in the range
startLineNumber++,Math.max(startLineNumber,range.endLineNumber-count+1)}static _moveLeft(viewModel,cursors,inSelectionMode,noOfColumns){return cursors.map((cursor=>_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveLeft(viewModel.cursorConfig,viewModel,cursor.viewState,inSelectionMode,noOfColumns))))}static _moveHalfLineLeft(viewModel,cursors,inSelectionMode){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i],viewLineNumber=cursor.viewState.position.lineNumber,halfLine=Math.round(viewModel.getLineContent(viewLineNumber).length/2);result[i]=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveLeft(viewModel.cursorConfig,viewModel,cursor.viewState,inSelectionMode,halfLine))}return result}static _moveRight(viewModel,cursors,inSelectionMode,noOfColumns){return cursors.map((cursor=>_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveRight(viewModel.cursorConfig,viewModel,cursor.viewState,inSelectionMode,noOfColumns))))}static _moveHalfLineRight(viewModel,cursors,inSelectionMode){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i],viewLineNumber=cursor.viewState.position.lineNumber,halfLine=Math.round(viewModel.getLineContent(viewLineNumber).length/2);result[i]=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveRight(viewModel.cursorConfig,viewModel,cursor.viewState,inSelectionMode,halfLine))}return result}static _moveDownByViewLines(viewModel,cursors,inSelectionMode,linesCount){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i];result[i]=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveDown(viewModel.cursorConfig,viewModel,cursor.viewState,inSelectionMode,linesCount))}return result}static _moveDownByModelLines(viewModel,cursors,inSelectionMode,linesCount){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i];result[i]=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveDown(viewModel.cursorConfig,viewModel.model,cursor.modelState,inSelectionMode,linesCount))}return result}static _moveUpByViewLines(viewModel,cursors,inSelectionMode,linesCount){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i];result[i]=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveUp(viewModel.cursorConfig,viewModel,cursor.viewState,inSelectionMode,linesCount))}return result}static _moveUpByModelLines(viewModel,cursors,inSelectionMode,linesCount){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i];result[i]=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(_cursorMoveOperations_js__WEBPACK_IMPORTED_MODULE_1__/* .MoveOperations */.o.moveUp(viewModel.cursorConfig,viewModel.model,cursor.modelState,inSelectionMode,linesCount))}return result}static _moveToViewPosition(viewModel,cursor,inSelectionMode,toViewLineNumber,toViewColumn){return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromViewState(cursor.viewState.move(inSelectionMode,toViewLineNumber,toViewColumn,0))}static _moveToModelPosition(viewModel,cursor,inSelectionMode,toModelLineNumber,toModelColumn){return _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorState */.Vi.fromModelState(cursor.modelState.move(inSelectionMode,toModelLineNumber,toModelColumn,0))}static _moveToViewMinColumn(viewModel,cursors,inSelectionMode){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i],viewLineNumber=cursor.viewState.position.lineNumber,viewColumn=viewModel.getLineMinColumn(viewLineNumber);result[i]=this._moveToViewPosition(viewModel,cursor,inSelectionMode,viewLineNumber,viewColumn)}return result}static _moveToViewFirstNonWhitespaceColumn(viewModel,cursors,inSelectionMode){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i],viewLineNumber=cursor.viewState.position.lineNumber,viewColumn=viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);result[i]=this._moveToViewPosition(viewModel,cursor,inSelectionMode,viewLineNumber,viewColumn)}return result}static _moveToViewCenterColumn(viewModel,cursors,inSelectionMode){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i],viewLineNumber=cursor.viewState.position.lineNumber,viewColumn=Math.round((viewModel.getLineMaxColumn(viewLineNumber)+viewModel.getLineMinColumn(viewLineNumber))/2);result[i]=this._moveToViewPosition(viewModel,cursor,inSelectionMode,viewLineNumber,viewColumn)}return result}static _moveToViewMaxColumn(viewModel,cursors,inSelectionMode){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i],viewLineNumber=cursor.viewState.position.lineNumber,viewColumn=viewModel.getLineMaxColumn(viewLineNumber);result[i]=this._moveToViewPosition(viewModel,cursor,inSelectionMode,viewLineNumber,viewColumn)}return result}static _moveToViewLastNonWhitespaceColumn(viewModel,cursors,inSelectionMode){let result=[];for(let i=0,len=cursors.length;i<len;i++){const cursor=cursors[i],viewLineNumber=cursor.viewState.position.lineNumber,viewColumn=viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);result[i]=this._moveToViewPosition(viewModel,cursor,inSelectionMode,viewLineNumber,viewColumn)}return result}}(function(CursorMove){const isCursorMoveArgs=function(arg){if(!_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__/* .isObject */.Kn(arg))return!1;let cursorMoveArg=arg;return!!_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__/* .isString */.HD(cursorMoveArg.to)&&(!(!_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__/* .isUndefined */.o8(cursorMoveArg.select)&&!_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__/* .isBoolean */.jn(cursorMoveArg.select))&&(!(!_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__/* .isUndefined */.o8(cursorMoveArg.by)&&!_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__/* .isString */.HD(cursorMoveArg.by))&&!(!_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__/* .isUndefined */.o8(cursorMoveArg.value)&&!_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__/* .isNumber */.hj(cursorMoveArg.value))))};function parse(args){if(!args.to)
// illegal arguments
return null;let direction;switch(args.to){case CursorMove.RawDirection.Left:direction=0/* Left */;break;case CursorMove.RawDirection.Right:direction=1/* Right */;break;case CursorMove.RawDirection.Up:direction=2/* Up */;break;case CursorMove.RawDirection.Down:direction=3/* Down */;break;case CursorMove.RawDirection.PrevBlankLine:direction=4/* PrevBlankLine */;break;case CursorMove.RawDirection.NextBlankLine:direction=5/* NextBlankLine */;break;case CursorMove.RawDirection.WrappedLineStart:direction=6/* WrappedLineStart */;break;case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:direction=7/* WrappedLineFirstNonWhitespaceCharacter */;break;case CursorMove.RawDirection.WrappedLineColumnCenter:direction=8/* WrappedLineColumnCenter */;break;case CursorMove.RawDirection.WrappedLineEnd:direction=9/* WrappedLineEnd */;break;case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:direction=10/* WrappedLineLastNonWhitespaceCharacter */;break;case CursorMove.RawDirection.ViewPortTop:direction=11/* ViewPortTop */;break;case CursorMove.RawDirection.ViewPortBottom:direction=13/* ViewPortBottom */;break;case CursorMove.RawDirection.ViewPortCenter:direction=12/* ViewPortCenter */;break;case CursorMove.RawDirection.ViewPortIfOutside:direction=14/* ViewPortIfOutside */;break;default:
// illegal arguments
return null}let unit=0/* None */;switch(args.by){case CursorMove.RawUnit.Line:unit=1/* Line */;break;case CursorMove.RawUnit.WrappedLine:unit=2/* WrappedLine */;break;case CursorMove.RawUnit.Character:unit=3/* Character */;break;case CursorMove.RawUnit.HalfLine:unit=4/* HalfLine */;break}return{direction:direction,unit:unit,select:!!args.select,value:args.value||1}}CursorMove.description={description:"Move cursor to a logical position in the view",args:[{name:"Cursor move argument object",description:"Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t```\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t```\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t",constraint:isCursorMoveArgs,schema:{type:"object",required:["to"],properties:{to:{type:"string",enum:["left","right","up","down","prevBlankLine","nextBlankLine","wrappedLineStart","wrappedLineEnd","wrappedLineColumnCenter","wrappedLineFirstNonWhitespaceCharacter","wrappedLineLastNonWhitespaceCharacter","viewPortTop","viewPortCenter","viewPortBottom","viewPortIfOutside"]},by:{type:"string",enum:["line","wrappedLine","character","halfLine"]},value:{type:"number",default:1},select:{type:"boolean",default:!1}}}}]},
/**
     * Positions in the view for cursor move command.
     */
CursorMove.RawDirection={Left:"left",Right:"right",Up:"up",Down:"down",PrevBlankLine:"prevBlankLine",NextBlankLine:"nextBlankLine",WrappedLineStart:"wrappedLineStart",WrappedLineFirstNonWhitespaceCharacter:"wrappedLineFirstNonWhitespaceCharacter",WrappedLineColumnCenter:"wrappedLineColumnCenter",WrappedLineEnd:"wrappedLineEnd",WrappedLineLastNonWhitespaceCharacter:"wrappedLineLastNonWhitespaceCharacter",ViewPortTop:"viewPortTop",ViewPortCenter:"viewPortCenter",ViewPortBottom:"viewPortBottom",ViewPortIfOutside:"viewPortIfOutside"},
/**
     * Units for Cursor move 'by' argument
     */
CursorMove.RawUnit={Line:"line",WrappedLine:"wrappedLine",Character:"character",HalfLine:"halfLine"},CursorMove.parse=parse})(CursorMove||(CursorMove={}))},
/***/388784:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */o:function(){/* binding */return MoveOperations}
/* harmony export */});
/* unused harmony export CursorPosition */
/* harmony import */var _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(533181),_core_position_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(50187),_core_range_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(624314),_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(697295),_cursorAtomicMoveOperations_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(203675);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class CursorPosition{constructor(lineNumber,column,leftoverVisibleColumns){this._cursorPositionBrand=void 0,this.lineNumber=lineNumber,this.column=column,this.leftoverVisibleColumns=leftoverVisibleColumns}}class MoveOperations{static leftPosition(model,position){if(position.column>model.getLineMinColumn(position.lineNumber))return position.delta(void 0,-_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__/* .prevCharLength */.HO(model.getLineContent(position.lineNumber),position.column-1));if(position.lineNumber>1){const newLineNumber=position.lineNumber-1;return new _core_position_js__WEBPACK_IMPORTED_MODULE_3__/* .Position */.L(newLineNumber,model.getLineMaxColumn(newLineNumber))}return position}static leftPositionAtomicSoftTabs(model,position,tabSize){if(position.column<=model.getLineIndentColumn(position.lineNumber)){const minColumn=model.getLineMinColumn(position.lineNumber),lineContent=model.getLineContent(position.lineNumber),newPosition=_cursorAtomicMoveOperations_js__WEBPACK_IMPORTED_MODULE_2__/* .AtomicTabMoveOperations */.l.atomicPosition(lineContent,position.column-1,tabSize,0/* Left */);if(-1!==newPosition&&newPosition+1>=minColumn)return new _core_position_js__WEBPACK_IMPORTED_MODULE_3__/* .Position */.L(position.lineNumber,newPosition+1)}return this.leftPosition(model,position)}static left(config,model,position){const pos=config.stickyTabStops?MoveOperations.leftPositionAtomicSoftTabs(model,position,config.tabSize):MoveOperations.leftPosition(model,position);return new CursorPosition(pos.lineNumber,pos.column,0)}
/**
     * @param noOfColumns Must be either `1`
     * or `Math.round(viewModel.getLineContent(viewLineNumber).length / 2)` (for half lines).
    */static moveLeft(config,model,cursor,inSelectionMode,noOfColumns){let lineNumber,column;if(cursor.hasSelection()&&!inSelectionMode)
// If the user has a selection and does not want to extend it,
// put the cursor at the beginning of the selection.
lineNumber=cursor.selection.startLineNumber,column=cursor.selection.startColumn;else{
// This has no effect if noOfColumns === 1.
// It is ok to do so in the half-line scenario.
const pos=cursor.position.delta(void 0,-(noOfColumns-1)),normalizedPos=model.normalizePosition(MoveOperations.clipPositionColumn(pos,model),0/* Left */),p=MoveOperations.left(config,model,normalizedPos);
// We clip the position before normalization, as normalization is not defined
// for possibly negative columns.
lineNumber=p.lineNumber,column=p.column}return cursor.move(inSelectionMode,lineNumber,column,0)}
/**
     * Adjusts the column so that it is within min/max of the line.
    */static clipPositionColumn(position,model){return new _core_position_js__WEBPACK_IMPORTED_MODULE_3__/* .Position */.L(position.lineNumber,MoveOperations.clipRange(position.column,model.getLineMinColumn(position.lineNumber),model.getLineMaxColumn(position.lineNumber)))}static clipRange(value,min,max){return value<min?min:value>max?max:value}static rightPosition(model,lineNumber,column){return column<model.getLineMaxColumn(lineNumber)?column+=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__/* .nextCharLength */.vH(model.getLineContent(lineNumber),column-1):lineNumber<model.getLineCount()&&(lineNumber+=1,column=model.getLineMinColumn(lineNumber)),new _core_position_js__WEBPACK_IMPORTED_MODULE_3__/* .Position */.L(lineNumber,column)}static rightPositionAtomicSoftTabs(model,lineNumber,column,tabSize,indentSize){if(column<model.getLineIndentColumn(lineNumber)){const lineContent=model.getLineContent(lineNumber),newPosition=_cursorAtomicMoveOperations_js__WEBPACK_IMPORTED_MODULE_2__/* .AtomicTabMoveOperations */.l.atomicPosition(lineContent,column-1,tabSize,1/* Right */);if(-1!==newPosition)return new _core_position_js__WEBPACK_IMPORTED_MODULE_3__/* .Position */.L(lineNumber,newPosition+1)}return this.rightPosition(model,lineNumber,column)}static right(config,model,position){const pos=config.stickyTabStops?MoveOperations.rightPositionAtomicSoftTabs(model,position.lineNumber,position.column,config.tabSize,config.indentSize):MoveOperations.rightPosition(model,position.lineNumber,position.column);return new CursorPosition(pos.lineNumber,pos.column,0)}static moveRight(config,model,cursor,inSelectionMode,noOfColumns){let lineNumber,column;if(cursor.hasSelection()&&!inSelectionMode)
// If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection
lineNumber=cursor.selection.endLineNumber,column=cursor.selection.endColumn;else{const pos=cursor.position.delta(void 0,noOfColumns-1),normalizedPos=model.normalizePosition(MoveOperations.clipPositionColumn(pos,model),1/* Right */),r=MoveOperations.right(config,model,normalizedPos);lineNumber=r.lineNumber,column=r.column}return cursor.move(inSelectionMode,lineNumber,column,0)}static vertical(config,model,lineNumber,column,leftoverVisibleColumns,newLineNumber,allowMoveOnEdgeLine){const currentVisibleColumn=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.visibleColumnFromColumn(model.getLineContent(lineNumber),column,config.tabSize)+leftoverVisibleColumns,lineCount=model.getLineCount(),wasOnFirstPosition=1===lineNumber&&1===column,wasOnLastPosition=lineNumber===lineCount&&column===model.getLineMaxColumn(lineNumber),wasAtEdgePosition=newLineNumber<lineNumber?wasOnFirstPosition:wasOnLastPosition;return lineNumber=newLineNumber,lineNumber<1?(lineNumber=1,column=allowMoveOnEdgeLine?model.getLineMinColumn(lineNumber):Math.min(model.getLineMaxColumn(lineNumber),column)):lineNumber>lineCount?(lineNumber=lineCount,column=allowMoveOnEdgeLine?model.getLineMaxColumn(lineNumber):Math.min(model.getLineMaxColumn(lineNumber),column)):column=_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.columnFromVisibleColumn2(config,model,lineNumber,currentVisibleColumn),leftoverVisibleColumns=wasAtEdgePosition?0:currentVisibleColumn-_cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .CursorColumns */.io.visibleColumnFromColumn(model.getLineContent(lineNumber),column,config.tabSize),new CursorPosition(lineNumber,column,leftoverVisibleColumns)}static down(config,model,lineNumber,column,leftoverVisibleColumns,count,allowMoveOnLastLine){return this.vertical(config,model,lineNumber,column,leftoverVisibleColumns,lineNumber+count,allowMoveOnLastLine)}static moveDown(config,model,cursor,inSelectionMode,linesCount){let lineNumber,column;cursor.hasSelection()&&!inSelectionMode?(
// If we are in selection mode, move down acts relative to the end of selection
lineNumber=cursor.selection.endLineNumber,column=cursor.selection.endColumn):(lineNumber=cursor.position.lineNumber,column=cursor.position.column);let r=MoveOperations.down(config,model,lineNumber,column,cursor.leftoverVisibleColumns,linesCount,!0);return cursor.move(inSelectionMode,r.lineNumber,r.column,r.leftoverVisibleColumns)}static translateDown(config,model,cursor){let selection=cursor.selection,selectionStart=MoveOperations.down(config,model,selection.selectionStartLineNumber,selection.selectionStartColumn,cursor.selectionStartLeftoverVisibleColumns,1,!1),position=MoveOperations.down(config,model,selection.positionLineNumber,selection.positionColumn,cursor.leftoverVisibleColumns,1,!1);return new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .SingleCursorState */.rS(new _core_range_js__WEBPACK_IMPORTED_MODULE_4__/* .Range */.e(selectionStart.lineNumber,selectionStart.column,selectionStart.lineNumber,selectionStart.column),selectionStart.leftoverVisibleColumns,new _core_position_js__WEBPACK_IMPORTED_MODULE_3__/* .Position */.L(position.lineNumber,position.column),position.leftoverVisibleColumns)}static up(config,model,lineNumber,column,leftoverVisibleColumns,count,allowMoveOnFirstLine){return this.vertical(config,model,lineNumber,column,leftoverVisibleColumns,lineNumber-count,allowMoveOnFirstLine)}static moveUp(config,model,cursor,inSelectionMode,linesCount){let lineNumber,column;cursor.hasSelection()&&!inSelectionMode?(
// If we are in selection mode, move up acts relative to the beginning of selection
lineNumber=cursor.selection.startLineNumber,column=cursor.selection.startColumn):(lineNumber=cursor.position.lineNumber,column=cursor.position.column);let r=MoveOperations.up(config,model,lineNumber,column,cursor.leftoverVisibleColumns,linesCount,!0);return cursor.move(inSelectionMode,r.lineNumber,r.column,r.leftoverVisibleColumns)}static translateUp(config,model,cursor){let selection=cursor.selection,selectionStart=MoveOperations.up(config,model,selection.selectionStartLineNumber,selection.selectionStartColumn,cursor.selectionStartLeftoverVisibleColumns,1,!1),position=MoveOperations.up(config,model,selection.positionLineNumber,selection.positionColumn,cursor.leftoverVisibleColumns,1,!1);return new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_0__/* .SingleCursorState */.rS(new _core_range_js__WEBPACK_IMPORTED_MODULE_4__/* .Range */.e(selectionStart.lineNumber,selectionStart.column,selectionStart.lineNumber,selectionStart.column),selectionStart.leftoverVisibleColumns,new _core_position_js__WEBPACK_IMPORTED_MODULE_3__/* .Position */.L(position.lineNumber,position.column),position.leftoverVisibleColumns)}static _isBlankLine(model,lineNumber){return 0===model.getLineFirstNonWhitespaceColumn(lineNumber)}static moveToPrevBlankLine(config,model,cursor,inSelectionMode){let lineNumber=cursor.position.lineNumber;
// If our current line is blank, move to the previous non-blank line
while(lineNumber>1&&this._isBlankLine(model,lineNumber))lineNumber--;
// Find the previous blank line
while(lineNumber>1&&!this._isBlankLine(model,lineNumber))lineNumber--;return cursor.move(inSelectionMode,lineNumber,model.getLineMinColumn(lineNumber),0)}static moveToNextBlankLine(config,model,cursor,inSelectionMode){const lineCount=model.getLineCount();let lineNumber=cursor.position.lineNumber;
// If our current line is blank, move to the next non-blank line
while(lineNumber<lineCount&&this._isBlankLine(model,lineNumber))lineNumber++;
// Find the next blank line
while(lineNumber<lineCount&&!this._isBlankLine(model,lineNumber))lineNumber++;return cursor.move(inSelectionMode,lineNumber,model.getLineMinColumn(lineNumber),0)}static moveToBeginningOfLine(config,model,cursor,inSelectionMode){let column,lineNumber=cursor.position.lineNumber,minColumn=model.getLineMinColumn(lineNumber),firstNonBlankColumn=model.getLineFirstNonWhitespaceColumn(lineNumber)||minColumn,relevantColumnNumber=cursor.position.column;return column=relevantColumnNumber===firstNonBlankColumn?minColumn:firstNonBlankColumn,cursor.move(inSelectionMode,lineNumber,column,0)}static moveToEndOfLine(config,model,cursor,inSelectionMode,sticky){let lineNumber=cursor.position.lineNumber,maxColumn=model.getLineMaxColumn(lineNumber);return cursor.move(inSelectionMode,lineNumber,maxColumn,sticky?1073741824/* MAX_SAFE_SMALL_INTEGER */-maxColumn:0)}static moveToBeginningOfBuffer(config,model,cursor,inSelectionMode){return cursor.move(inSelectionMode,1,1,0)}static moveToEndOfBuffer(config,model,cursor,inSelectionMode){let lastLineNumber=model.getLineCount(),lastColumn=model.getLineMaxColumn(lastLineNumber);return cursor.move(inSelectionMode,lastLineNumber,lastColumn,0)}}
/***/},
/***/840419:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
// EXPORTS
__webpack_require__.d(__webpack_exports__,{u:function(){/* binding */return TypeOperations},g:function(){/* binding */return TypeWithAutoClosingCommand}});
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/errors.js
var errors=__webpack_require__(817301),strings=__webpack_require__(697295),replaceCommand=__webpack_require__(361329),shiftCommand=__webpack_require__(210291),core_range=__webpack_require__(624314),selection=__webpack_require__(203860);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/strings.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/commands/surroundSelectionCommand.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class SurroundSelectionCommand{constructor(range,charBeforeSelection,charAfterSelection){this._range=range,this._charBeforeSelection=charBeforeSelection,this._charAfterSelection=charAfterSelection}getEditOperations(model,builder){builder.addTrackedEditOperation(new core_range/* Range */.e(this._range.startLineNumber,this._range.startColumn,this._range.startLineNumber,this._range.startColumn),this._charBeforeSelection),builder.addTrackedEditOperation(new core_range/* Range */.e(this._range.endLineNumber,this._range.endColumn,this._range.endLineNumber,this._range.endColumn),this._charAfterSelection)}computeCursorState(model,helper){let inverseEditOperations=helper.getInverseEditOperations(),firstOperationRange=inverseEditOperations[0].range,secondOperationRange=inverseEditOperations[1].range;return new selection/* Selection */.Y(firstOperationRange.endLineNumber,firstOperationRange.endColumn,secondOperationRange.endLineNumber,secondOperationRange.endColumn-this._charAfterSelection.length)}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCommon.js
var cursorCommon=__webpack_require__(533181),wordCharacterClassifier=__webpack_require__(759410),languageConfiguration=__webpack_require__(397354),languageConfigurationRegistry=__webpack_require__(594660);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/controller/wordCharacterClassifier.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorTypeOperations.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class TypeOperations{static indent(config,model,selections){if(null===model||null===selections)return[];let commands=[];for(let i=0,len=selections.length;i<len;i++)commands[i]=new shiftCommand/* ShiftCommand */.U(selections[i],{isUnshift:!1,tabSize:config.tabSize,indentSize:config.indentSize,insertSpaces:config.insertSpaces,useTabStops:config.useTabStops,autoIndent:config.autoIndent});return commands}static outdent(config,model,selections){let commands=[];for(let i=0,len=selections.length;i<len;i++)commands[i]=new shiftCommand/* ShiftCommand */.U(selections[i],{isUnshift:!0,tabSize:config.tabSize,indentSize:config.indentSize,insertSpaces:config.insertSpaces,useTabStops:config.useTabStops,autoIndent:config.autoIndent});return commands}static shiftIndent(config,indentation,count){return count=count||1,shiftCommand/* ShiftCommand */.U.shiftIndent(indentation,indentation.length+count,config.tabSize,config.indentSize,config.insertSpaces)}static unshiftIndent(config,indentation,count){return count=count||1,shiftCommand/* ShiftCommand */.U.unshiftIndent(indentation,indentation.length+count,config.tabSize,config.indentSize,config.insertSpaces)}static _distributedPaste(config,model,selections,text){let commands=[];for(let i=0,len=selections.length;i<len;i++)commands[i]=new replaceCommand/* ReplaceCommand */.T4(selections[i],text[i]);return new cursorCommon/* EditOperationResult */.Tp(0/* Other */,commands,{shouldPushStackElementBefore:!0,shouldPushStackElementAfter:!0})}static _simplePaste(config,model,selections,text,pasteOnNewLine){let commands=[];for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];let position=selection.getPosition();if(pasteOnNewLine&&!selection.isEmpty()&&(pasteOnNewLine=!1),pasteOnNewLine&&text.indexOf("\n")!==text.length-1&&(pasteOnNewLine=!1),pasteOnNewLine){
// Paste entire line at the beginning of line
let typeSelection=new core_range/* Range */.e(position.lineNumber,1,position.lineNumber,1);commands[i]=new replaceCommand/* ReplaceCommandThatPreservesSelection */.hP(typeSelection,text,selection,!0)}else commands[i]=new replaceCommand/* ReplaceCommand */.T4(selection,text)}return new cursorCommon/* EditOperationResult */.Tp(0/* Other */,commands,{shouldPushStackElementBefore:!0,shouldPushStackElementAfter:!0})}static _distributePasteToCursors(config,selections,text,pasteOnNewLine,multicursorText){if(pasteOnNewLine)return null;if(1===selections.length)return null;if(multicursorText&&multicursorText.length===selections.length)return multicursorText;if("spread"===config.multiCursorPaste){
// Try to spread the pasted text in case the line count matches the cursor count
// Remove trailing \n if present
10/* LineFeed */===text.charCodeAt(text.length-1)&&(text=text.substr(0,text.length-1)),
// Remove trailing \r if present
13/* CarriageReturn */===text.charCodeAt(text.length-1)&&(text=text.substr(0,text.length-1));let lines=strings/* splitLines */.uq(text);if(lines.length===selections.length)return lines}return null}static paste(config,model,selections,text,pasteOnNewLine,multicursorText){const distributedPaste=this._distributePasteToCursors(config,selections,text,pasteOnNewLine,multicursorText);return distributedPaste?(selections=selections.sort(core_range/* Range */.e.compareRangesUsingStarts),this._distributedPaste(config,model,selections,distributedPaste)):this._simplePaste(config,model,selections,text,pasteOnNewLine)}static _goodIndentForLine(config,model,lineNumber){let action=null,indentation="";const expectedIndentAction=languageConfigurationRegistry/* LanguageConfigurationRegistry */.zu.getInheritIndentForLine(config.autoIndent,model,lineNumber,!1);if(expectedIndentAction)action=expectedIndentAction.action,indentation=expectedIndentAction.indentation;else if(lineNumber>1){let lastLineNumber;for(lastLineNumber=lineNumber-1;lastLineNumber>=1;lastLineNumber--){const lineText=model.getLineContent(lastLineNumber),nonWhitespaceIdx=strings/* lastNonWhitespaceIndex */.ow(lineText);if(nonWhitespaceIdx>=0)break}if(lastLineNumber<1)
// No previous line with content found
return null;const maxColumn=model.getLineMaxColumn(lastLineNumber),expectedEnterAction=languageConfigurationRegistry/* LanguageConfigurationRegistry */.zu.getEnterAction(config.autoIndent,model,new core_range/* Range */.e(lastLineNumber,maxColumn,lastLineNumber,maxColumn));expectedEnterAction&&(indentation=expectedEnterAction.indentation+expectedEnterAction.appendText)}return action&&(action===languageConfiguration/* IndentAction */.wU.Indent&&(indentation=TypeOperations.shiftIndent(config,indentation)),action===languageConfiguration/* IndentAction */.wU.Outdent&&(indentation=TypeOperations.unshiftIndent(config,indentation)),indentation=config.normalizeIndentation(indentation)),indentation||null}static _replaceJumpToNextIndent(config,model,selection,insertsAutoWhitespace){let typeText="",position=selection.getStartPosition();if(config.insertSpaces){let visibleColumnFromColumn=cursorCommon/* CursorColumns */.io.visibleColumnFromColumn2(config,model,position),indentSize=config.indentSize,spacesCnt=indentSize-visibleColumnFromColumn%indentSize;for(let i=0;i<spacesCnt;i++)typeText+=" "}else typeText="\t";return new replaceCommand/* ReplaceCommand */.T4(selection,typeText,insertsAutoWhitespace)}static tab(config,model,selections){let commands=[];for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];if(selection.isEmpty()){let lineText=model.getLineContent(selection.startLineNumber);if(/^\s*$/.test(lineText)&&model.isCheapToTokenize(selection.startLineNumber)){let goodIndent=this._goodIndentForLine(config,model,selection.startLineNumber);goodIndent=goodIndent||"\t";let possibleTypeText=config.normalizeIndentation(goodIndent);if(!lineText.startsWith(possibleTypeText)){commands[i]=new replaceCommand/* ReplaceCommand */.T4(new core_range/* Range */.e(selection.startLineNumber,1,selection.startLineNumber,lineText.length+1),possibleTypeText,!0);continue}}commands[i]=this._replaceJumpToNextIndent(config,model,selection,!0)}else{if(selection.startLineNumber===selection.endLineNumber){let lineMaxColumn=model.getLineMaxColumn(selection.startLineNumber);if(1!==selection.startColumn||selection.endColumn!==lineMaxColumn){
// This is a single line selection that is not the entire line
commands[i]=this._replaceJumpToNextIndent(config,model,selection,!1);continue}}commands[i]=new shiftCommand/* ShiftCommand */.U(selection,{isUnshift:!1,tabSize:config.tabSize,indentSize:config.indentSize,insertSpaces:config.insertSpaces,useTabStops:config.useTabStops,autoIndent:config.autoIndent})}}return commands}static compositionType(prevEditOperationType,config,model,selections,text,replacePrevCharCnt,replaceNextCharCnt,positionDelta){const commands=selections.map((selection=>this._compositionType(model,selection,text,replacePrevCharCnt,replaceNextCharCnt,positionDelta)));return new cursorCommon/* EditOperationResult */.Tp(4/* TypingOther */,commands,{shouldPushStackElementBefore:shouldPushStackElementBetween(prevEditOperationType,4/* TypingOther */),shouldPushStackElementAfter:!1})}static _compositionType(model,selection,text,replacePrevCharCnt,replaceNextCharCnt,positionDelta){if(!selection.isEmpty())
// looks like https://github.com/microsoft/vscode/issues/2773
// where a cursor operation occurred before a canceled composition
// => ignore composition
return null;const pos=selection.getPosition(),startColumn=Math.max(1,pos.column-replacePrevCharCnt),endColumn=Math.min(model.getLineMaxColumn(pos.lineNumber),pos.column+replaceNextCharCnt),range=new core_range/* Range */.e(pos.lineNumber,startColumn,pos.lineNumber,endColumn),oldText=model.getValueInRange(range);return oldText===text&&0===positionDelta?null:new replaceCommand/* ReplaceCommandWithOffsetCursorState */.Uo(range,text,0,positionDelta)}static _typeCommand(range,text,keepPosition){return keepPosition?new replaceCommand/* ReplaceCommandWithoutChangingPosition */.Sj(range,text,!0):new replaceCommand/* ReplaceCommand */.T4(range,text,!0)}static _enter(config,model,keepPosition,range){if(0/* None */===config.autoIndent)return TypeOperations._typeCommand(range,"\n",keepPosition);if(!model.isCheapToTokenize(range.getStartPosition().lineNumber)||1/* Keep */===config.autoIndent){let lineText=model.getLineContent(range.startLineNumber),indentation=strings/* getLeadingWhitespace */.V8(lineText).substring(0,range.startColumn-1);return TypeOperations._typeCommand(range,"\n"+config.normalizeIndentation(indentation),keepPosition)}const r=languageConfigurationRegistry/* LanguageConfigurationRegistry */.zu.getEnterAction(config.autoIndent,model,range);if(r){if(r.indentAction===languageConfiguration/* IndentAction */.wU.None)
// Nothing special
return TypeOperations._typeCommand(range,"\n"+config.normalizeIndentation(r.indentation+r.appendText),keepPosition);if(r.indentAction===languageConfiguration/* IndentAction */.wU.Indent)
// Indent once
return TypeOperations._typeCommand(range,"\n"+config.normalizeIndentation(r.indentation+r.appendText),keepPosition);if(r.indentAction===languageConfiguration/* IndentAction */.wU.IndentOutdent){
// Ultra special
const normalIndent=config.normalizeIndentation(r.indentation),increasedIndent=config.normalizeIndentation(r.indentation+r.appendText),typeText="\n"+increasedIndent+"\n"+normalIndent;return keepPosition?new replaceCommand/* ReplaceCommandWithoutChangingPosition */.Sj(range,typeText,!0):new replaceCommand/* ReplaceCommandWithOffsetCursorState */.Uo(range,typeText,-1,increasedIndent.length-normalIndent.length,!0)}if(r.indentAction===languageConfiguration/* IndentAction */.wU.Outdent){const actualIndentation=TypeOperations.unshiftIndent(config,r.indentation);return TypeOperations._typeCommand(range,"\n"+config.normalizeIndentation(actualIndentation+r.appendText),keepPosition)}}const lineText=model.getLineContent(range.startLineNumber),indentation=strings/* getLeadingWhitespace */.V8(lineText).substring(0,range.startColumn-1);if(config.autoIndent>=4/* Full */){const ir=languageConfigurationRegistry/* LanguageConfigurationRegistry */.zu.getIndentForEnter(config.autoIndent,model,range,{unshiftIndent:indent=>TypeOperations.unshiftIndent(config,indent),shiftIndent:indent=>TypeOperations.shiftIndent(config,indent),normalizeIndentation:indent=>config.normalizeIndentation(indent)});if(ir){let oldEndViewColumn=cursorCommon/* CursorColumns */.io.visibleColumnFromColumn2(config,model,range.getEndPosition());const oldEndColumn=range.endColumn,newLineContent=model.getLineContent(range.endLineNumber),firstNonWhitespace=strings/* firstNonWhitespaceIndex */.LC(newLineContent);if(range=firstNonWhitespace>=0?range.setEndPosition(range.endLineNumber,Math.max(range.endColumn,firstNonWhitespace+1)):range.setEndPosition(range.endLineNumber,model.getLineMaxColumn(range.endLineNumber)),keepPosition)return new replaceCommand/* ReplaceCommandWithoutChangingPosition */.Sj(range,"\n"+config.normalizeIndentation(ir.afterEnter),!0);{let offset=0;return oldEndColumn<=firstNonWhitespace+1&&(config.insertSpaces||(oldEndViewColumn=Math.ceil(oldEndViewColumn/config.indentSize)),offset=Math.min(oldEndViewColumn+1-config.normalizeIndentation(ir.afterEnter).length-1,0)),new replaceCommand/* ReplaceCommandWithOffsetCursorState */.Uo(range,"\n"+config.normalizeIndentation(ir.afterEnter),0,offset,!0)}}}return TypeOperations._typeCommand(range,"\n"+config.normalizeIndentation(indentation),keepPosition)}static _isAutoIndentType(config,model,selections){if(config.autoIndent<4/* Full */)return!1;for(let i=0,len=selections.length;i<len;i++)if(!model.isCheapToTokenize(selections[i].getEndPosition().lineNumber))return!1;return!0}static _runAutoIndentType(config,model,range,ch){const currentIndentation=languageConfigurationRegistry/* LanguageConfigurationRegistry */.zu.getIndentationAtPosition(model,range.startLineNumber,range.startColumn),actualIndentation=languageConfigurationRegistry/* LanguageConfigurationRegistry */.zu.getIndentActionForType(config.autoIndent,model,range,ch,{shiftIndent:indentation=>TypeOperations.shiftIndent(config,indentation),unshiftIndent:indentation=>TypeOperations.unshiftIndent(config,indentation)});if(null===actualIndentation)return null;if(actualIndentation!==config.normalizeIndentation(currentIndentation)){const firstNonWhitespace=model.getLineFirstNonWhitespaceColumn(range.startLineNumber);return 0===firstNonWhitespace?TypeOperations._typeCommand(new core_range/* Range */.e(range.startLineNumber,1,range.endLineNumber,range.endColumn),config.normalizeIndentation(actualIndentation)+ch,!1):TypeOperations._typeCommand(new core_range/* Range */.e(range.startLineNumber,1,range.endLineNumber,range.endColumn),config.normalizeIndentation(actualIndentation)+model.getLineContent(range.startLineNumber).substring(firstNonWhitespace-1,range.startColumn-1)+ch,!1)}return null}static _isAutoClosingOvertype(config,model,selections,autoClosedCharacters,ch){if("never"===config.autoClosingOvertype)return!1;if(!config.autoClosingPairs.autoClosingPairsCloseSingleChar.has(ch))return!1;for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];if(!selection.isEmpty())return!1;const position=selection.getPosition(),lineText=model.getLineContent(position.lineNumber),afterCharacter=lineText.charAt(position.column-1);if(afterCharacter!==ch)return!1;
// Do not over-type quotes after a backslash
const chIsQuote=(0,cursorCommon/* isQuote */.LN)(ch),beforeCharacter=position.column>2?lineText.charCodeAt(position.column-2):0/* Null */;if(92/* Backslash */===beforeCharacter&&chIsQuote)return!1;
// Must over-type a closing character typed by the editor
if("auto"===config.autoClosingOvertype){let found=!1;for(let j=0,lenJ=autoClosedCharacters.length;j<lenJ;j++){const autoClosedCharacter=autoClosedCharacters[j];if(position.lineNumber===autoClosedCharacter.startLineNumber&&position.column===autoClosedCharacter.startColumn){found=!0;break}}if(!found)return!1}}return!0}static _runAutoClosingOvertype(prevEditOperationType,config,model,selections,ch){let commands=[];for(let i=0,len=selections.length;i<len;i++){const selection=selections[i],position=selection.getPosition(),typeSelection=new core_range/* Range */.e(position.lineNumber,position.column,position.lineNumber,position.column+1);commands[i]=new replaceCommand/* ReplaceCommand */.T4(typeSelection,ch)}return new cursorCommon/* EditOperationResult */.Tp(4/* TypingOther */,commands,{shouldPushStackElementBefore:shouldPushStackElementBetween(prevEditOperationType,4/* TypingOther */),shouldPushStackElementAfter:!1})}static _isBeforeClosingBrace(config,lineAfter){
// If the start of lineAfter can be interpretted as both a starting or ending brace, default to returning false
const nextChar=lineAfter.charAt(0),potentialStartingBraces=config.autoClosingPairs.autoClosingPairsOpenByStart.get(nextChar)||[],potentialClosingBraces=config.autoClosingPairs.autoClosingPairsCloseByStart.get(nextChar)||[],isBeforeStartingBrace=potentialStartingBraces.some((x=>lineAfter.startsWith(x.open))),isBeforeClosingBrace=potentialClosingBraces.some((x=>lineAfter.startsWith(x.close)));return!isBeforeStartingBrace&&isBeforeClosingBrace}static _findAutoClosingPairOpen(config,model,positions,ch){const autoClosingPairCandidates=config.autoClosingPairs.autoClosingPairsOpenByEnd.get(ch);if(!autoClosingPairCandidates)return null;
// Determine which auto-closing pair it is
let autoClosingPair=null;for(const autoClosingPairCandidate of autoClosingPairCandidates)if(null===autoClosingPair||autoClosingPairCandidate.open.length>autoClosingPair.open.length){let candidateIsMatch=!0;for(const position of positions){const relevantText=model.getValueInRange(new core_range/* Range */.e(position.lineNumber,position.column-autoClosingPairCandidate.open.length+1,position.lineNumber,position.column));if(relevantText+ch!==autoClosingPairCandidate.open){candidateIsMatch=!1;break}}candidateIsMatch&&(autoClosingPair=autoClosingPairCandidate)}return autoClosingPair}static _findSubAutoClosingPairClose(config,autoClosingPair){if(autoClosingPair.open.length<=1)return"";const lastChar=autoClosingPair.close.charAt(autoClosingPair.close.length-1),subPairCandidates=config.autoClosingPairs.autoClosingPairsCloseByEnd.get(lastChar)||[];
// get candidates with the same last character as close
let subPairMatch=null;for(const x of subPairCandidates)x.open!==autoClosingPair.open&&autoClosingPair.open.includes(x.open)&&autoClosingPair.close.endsWith(x.close)&&(!subPairMatch||x.open.length>subPairMatch.open.length)&&(subPairMatch=x);return subPairMatch?subPairMatch.close:""}static _getAutoClosingPairClose(config,model,selections,ch,insertOpenCharacter){const chIsQuote=(0,cursorCommon/* isQuote */.LN)(ch),autoCloseConfig=chIsQuote?config.autoClosingQuotes:config.autoClosingBrackets;if("never"===autoCloseConfig)return null;const autoClosingPair=this._findAutoClosingPairOpen(config,model,selections.map((s=>s.getPosition())),ch);if(!autoClosingPair)return null;const subAutoClosingPairClose=this._findSubAutoClosingPairClose(config,autoClosingPair);let isSubAutoClosingPairPresent=!0;const shouldAutoCloseBefore=chIsQuote?config.shouldAutoCloseBefore.quote:config.shouldAutoCloseBefore.bracket;for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];if(!selection.isEmpty())return null;const position=selection.getPosition(),lineText=model.getLineContent(position.lineNumber),lineAfter=lineText.substring(position.column-1);
// Only consider auto closing the pair if an allowed character follows or if another autoclosed pair closing brace follows
if(lineAfter.startsWith(subAutoClosingPairClose)||(isSubAutoClosingPairPresent=!1),lineText.length>position.column-1){const characterAfter=lineText.charAt(position.column-1),isBeforeCloseBrace=TypeOperations._isBeforeClosingBrace(config,lineAfter);if(!isBeforeCloseBrace&&!shouldAutoCloseBefore(characterAfter))return null}if(!model.isCheapToTokenize(position.lineNumber))
// Do not force tokenization
return null;
// Do not auto-close ' or " after a word character
if(1===autoClosingPair.open.length&&("'"===ch||'"'===ch)&&"always"!==autoCloseConfig){const wordSeparators=(0,wordCharacterClassifier/* getMapForWordSeparators */.u)(config.wordSeparators);if(insertOpenCharacter&&position.column>1&&0/* Regular */===wordSeparators.get(lineText.charCodeAt(position.column-2)))return null;if(!insertOpenCharacter&&position.column>2&&0/* Regular */===wordSeparators.get(lineText.charCodeAt(position.column-3)))return null}model.forceTokenization(position.lineNumber);const lineTokens=model.getLineTokens(position.lineNumber);let shouldAutoClosePair=!1;try{shouldAutoClosePair=languageConfigurationRegistry/* LanguageConfigurationRegistry */.zu.shouldAutoClosePair(autoClosingPair,lineTokens,insertOpenCharacter?position.column:position.column-1)}catch(e){(0,errors/* onUnexpectedError */.dL)(e)}if(!shouldAutoClosePair)return null}return isSubAutoClosingPairPresent?autoClosingPair.close.substring(0,autoClosingPair.close.length-subAutoClosingPairClose.length):autoClosingPair.close}static _runAutoClosingOpenCharType(prevEditOperationType,config,model,selections,ch,insertOpenCharacter,autoClosingPairClose){let commands=[];for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];commands[i]=new TypeWithAutoClosingCommand(selection,ch,insertOpenCharacter,autoClosingPairClose)}return new cursorCommon/* EditOperationResult */.Tp(4/* TypingOther */,commands,{shouldPushStackElementBefore:!0,shouldPushStackElementAfter:!1})}static _shouldSurroundChar(config,ch){return(0,cursorCommon/* isQuote */.LN)(ch)?"quotes"===config.autoSurround||"languageDefined"===config.autoSurround:"brackets"===config.autoSurround||"languageDefined"===config.autoSurround}static _isSurroundSelectionType(config,model,selections,ch){if(!TypeOperations._shouldSurroundChar(config,ch)||!config.surroundingPairs.hasOwnProperty(ch))return!1;const isTypingAQuoteCharacter=(0,cursorCommon/* isQuote */.LN)(ch);for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];if(selection.isEmpty())return!1;let selectionContainsOnlyWhitespace=!0;for(let lineNumber=selection.startLineNumber;lineNumber<=selection.endLineNumber;lineNumber++){const lineText=model.getLineContent(lineNumber),startIndex=lineNumber===selection.startLineNumber?selection.startColumn-1:0,endIndex=lineNumber===selection.endLineNumber?selection.endColumn-1:lineText.length,selectedText=lineText.substring(startIndex,endIndex);if(/[^ \t]/.test(selectedText)){
// this selected text contains something other than whitespace
selectionContainsOnlyWhitespace=!1;break}}if(selectionContainsOnlyWhitespace)return!1;if(isTypingAQuoteCharacter&&selection.startLineNumber===selection.endLineNumber&&selection.startColumn+1===selection.endColumn){const selectionText=model.getValueInRange(selection);if((0,cursorCommon/* isQuote */.LN)(selectionText))
// Typing a quote character on top of another quote character
// => disable surround selection type
return!1}}return!0}static _runSurroundSelectionType(prevEditOperationType,config,model,selections,ch){let commands=[];for(let i=0,len=selections.length;i<len;i++){const selection=selections[i],closeCharacter=config.surroundingPairs[ch];commands[i]=new SurroundSelectionCommand(selection,ch,closeCharacter)}return new cursorCommon/* EditOperationResult */.Tp(0/* Other */,commands,{shouldPushStackElementBefore:!0,shouldPushStackElementAfter:!0})}static _isTypeInterceptorElectricChar(config,model,selections){return!(1!==selections.length||!model.isCheapToTokenize(selections[0].getEndPosition().lineNumber))}static _typeInterceptorElectricChar(prevEditOperationType,config,model,selection,ch){if(!config.electricChars.hasOwnProperty(ch)||!selection.isEmpty())return null;let position=selection.getPosition();model.forceTokenization(position.lineNumber);let electricAction,lineTokens=model.getLineTokens(position.lineNumber);try{electricAction=languageConfigurationRegistry/* LanguageConfigurationRegistry */.zu.onElectricCharacter(ch,lineTokens,position.column)}catch(e){return(0,errors/* onUnexpectedError */.dL)(e),null}if(!electricAction)return null;if(electricAction.matchOpenBracket){let endColumn=(lineTokens.getLineContent()+ch).lastIndexOf(electricAction.matchOpenBracket)+1,match=model.findMatchingBracketUp(electricAction.matchOpenBracket,{lineNumber:position.lineNumber,column:endColumn});if(match){if(match.startLineNumber===position.lineNumber)
// matched something on the same line => no change in indentation
return null;let matchLine=model.getLineContent(match.startLineNumber),matchLineIndentation=strings/* getLeadingWhitespace */.V8(matchLine),newIndentation=config.normalizeIndentation(matchLineIndentation),lineText=model.getLineContent(position.lineNumber),lineFirstNonBlankColumn=model.getLineFirstNonWhitespaceColumn(position.lineNumber)||position.column,prefix=lineText.substring(lineFirstNonBlankColumn-1,position.column-1),typeText=newIndentation+prefix+ch,typeSelection=new core_range/* Range */.e(position.lineNumber,1,position.lineNumber,position.column);const command=new replaceCommand/* ReplaceCommand */.T4(typeSelection,typeText);return new cursorCommon/* EditOperationResult */.Tp(getTypingOperation(typeText,prevEditOperationType),[command],{shouldPushStackElementBefore:!1,shouldPushStackElementAfter:!0})}}return null}
/**
     * This is very similar with typing, but the character is already in the text buffer!
     */static compositionEndWithInterceptors(prevEditOperationType,config,model,selectionsWhenCompositionStarted,selections,autoClosedCharacters){if(!selectionsWhenCompositionStarted||selection/* Selection */.Y.selectionsArrEqual(selectionsWhenCompositionStarted,selections))
// no content was typed
return null;let ch=null;
// extract last typed character
for(const selection of selections){if(!selection.isEmpty())return null;const position=selection.getPosition(),currentChar=model.getValueInRange(new core_range/* Range */.e(position.lineNumber,position.column-1,position.lineNumber,position.column));if(null===ch)ch=currentChar;else if(ch!==currentChar)return null}if(!ch)return null;if(this._isAutoClosingOvertype(config,model,selections,autoClosedCharacters,ch)){
// Unfortunately, the close character is at this point "doubled", so we need to delete it...
const commands=selections.map((s=>new replaceCommand/* ReplaceCommand */.T4(new core_range/* Range */.e(s.positionLineNumber,s.positionColumn,s.positionLineNumber,s.positionColumn+1),"",!1)));return new cursorCommon/* EditOperationResult */.Tp(4/* TypingOther */,commands,{shouldPushStackElementBefore:!0,shouldPushStackElementAfter:!1})}const autoClosingPairClose=this._getAutoClosingPairClose(config,model,selections,ch,!1);return null!==autoClosingPairClose?this._runAutoClosingOpenCharType(prevEditOperationType,config,model,selections,ch,!1,autoClosingPairClose):null}static typeWithInterceptors(isDoingComposition,prevEditOperationType,config,model,selections,autoClosedCharacters,ch){if(!isDoingComposition&&"\n"===ch){let commands=[];for(let i=0,len=selections.length;i<len;i++)commands[i]=TypeOperations._enter(config,model,!1,selections[i]);return new cursorCommon/* EditOperationResult */.Tp(4/* TypingOther */,commands,{shouldPushStackElementBefore:!0,shouldPushStackElementAfter:!1})}if(!isDoingComposition&&this._isAutoIndentType(config,model,selections)){let commands=[],autoIndentFails=!1;for(let i=0,len=selections.length;i<len;i++)if(commands[i]=this._runAutoIndentType(config,model,selections[i],ch),!commands[i]){autoIndentFails=!0;break}if(!autoIndentFails)return new cursorCommon/* EditOperationResult */.Tp(4/* TypingOther */,commands,{shouldPushStackElementBefore:!0,shouldPushStackElementAfter:!1})}if(!isDoingComposition&&this._isAutoClosingOvertype(config,model,selections,autoClosedCharacters,ch))return this._runAutoClosingOvertype(prevEditOperationType,config,model,selections,ch);if(!isDoingComposition){const autoClosingPairClose=this._getAutoClosingPairClose(config,model,selections,ch,!0);if(autoClosingPairClose)return this._runAutoClosingOpenCharType(prevEditOperationType,config,model,selections,ch,!0,autoClosingPairClose)}if(this._isSurroundSelectionType(config,model,selections,ch))return this._runSurroundSelectionType(prevEditOperationType,config,model,selections,ch);
// Electric characters make sense only when dealing with a single cursor,
// as multiple cursors typing brackets for example would interfer with bracket matching
if(!isDoingComposition&&this._isTypeInterceptorElectricChar(config,model,selections)){const r=this._typeInterceptorElectricChar(prevEditOperationType,config,model,selections[0],ch);if(r)return r}
// A simple character type
let commands=[];for(let i=0,len=selections.length;i<len;i++)commands[i]=new replaceCommand/* ReplaceCommand */.T4(selections[i],ch);const opType=getTypingOperation(ch,prevEditOperationType);return new cursorCommon/* EditOperationResult */.Tp(opType,commands,{shouldPushStackElementBefore:shouldPushStackElementBetween(prevEditOperationType,opType),shouldPushStackElementAfter:!1})}static typeWithoutInterceptors(prevEditOperationType,config,model,selections,str){let commands=[];for(let i=0,len=selections.length;i<len;i++)commands[i]=new replaceCommand/* ReplaceCommand */.T4(selections[i],str);const opType=getTypingOperation(str,prevEditOperationType);return new cursorCommon/* EditOperationResult */.Tp(opType,commands,{shouldPushStackElementBefore:shouldPushStackElementBetween(prevEditOperationType,opType),shouldPushStackElementAfter:!1})}static lineInsertBefore(config,model,selections){if(null===model||null===selections)return[];let commands=[];for(let i=0,len=selections.length;i<len;i++){let lineNumber=selections[i].positionLineNumber;if(1===lineNumber)commands[i]=new replaceCommand/* ReplaceCommandWithoutChangingPosition */.Sj(new core_range/* Range */.e(1,1,1,1),"\n");else{lineNumber--;let column=model.getLineMaxColumn(lineNumber);commands[i]=this._enter(config,model,!1,new core_range/* Range */.e(lineNumber,column,lineNumber,column))}}return commands}static lineInsertAfter(config,model,selections){if(null===model||null===selections)return[];let commands=[];for(let i=0,len=selections.length;i<len;i++){const lineNumber=selections[i].positionLineNumber;let column=model.getLineMaxColumn(lineNumber);commands[i]=this._enter(config,model,!1,new core_range/* Range */.e(lineNumber,column,lineNumber,column))}return commands}static lineBreakInsert(config,model,selections){let commands=[];for(let i=0,len=selections.length;i<len;i++)commands[i]=this._enter(config,model,!0,selections[i]);return commands}}class TypeWithAutoClosingCommand extends replaceCommand/* ReplaceCommandWithOffsetCursorState */.Uo{constructor(selection,openCharacter,insertOpenCharacter,closeCharacter){super(selection,(insertOpenCharacter?openCharacter:"")+closeCharacter,0,-closeCharacter.length),this._openCharacter=openCharacter,this._closeCharacter=closeCharacter,this.closeCharacterRange=null,this.enclosingRange=null}computeCursorState(model,helper){let inverseEditOperations=helper.getInverseEditOperations(),range=inverseEditOperations[0].range;return this.closeCharacterRange=new core_range/* Range */.e(range.startLineNumber,range.endColumn-this._closeCharacter.length,range.endLineNumber,range.endColumn),this.enclosingRange=new core_range/* Range */.e(range.startLineNumber,range.endColumn-this._openCharacter.length-this._closeCharacter.length,range.endLineNumber,range.endColumn),super.computeCursorState(model,helper)}}function getTypingOperation(typedText,previousTypingOperation){return" "===typedText?5/* TypingFirstSpace */===previousTypingOperation||6/* TypingConsecutiveSpace */===previousTypingOperation?6/* TypingConsecutiveSpace */:5/* TypingFirstSpace */:4/* TypingOther */}function shouldPushStackElementBetween(previousTypingOperation,typingOperation){return!(!isTypingOperation(previousTypingOperation)||isTypingOperation(typingOperation))||5/* TypingFirstSpace */!==previousTypingOperation&&normalizeOperationType(previousTypingOperation)!==normalizeOperationType(typingOperation)}function normalizeOperationType(type){return 6/* TypingConsecutiveSpace */===type||5/* TypingFirstSpace */===type?"space":type}function isTypingOperation(type){return 4/* TypingOther */===type||5/* TypingFirstSpace */===type||6/* TypingConsecutiveSpace */===type}
/***/},
/***/5795:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */L:function(){/* binding */return WordPartOperations},
/* harmony export */w:function(){/* binding */return WordOperations}
/* harmony export */});
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295),_cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(533181),_cursorDeleteOperations_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(531380),_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(759410),_core_position_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(50187),_core_range_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(624314);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class WordOperations{static _createWord(lineContent,wordType,nextCharClass,start,end){
// console.log('WORD ==> ' + start + ' => ' + end + ':::: <<<' + lineContent.substring(start, end) + '>>>');
return{start:start,end:end,wordType:wordType,nextCharClass:nextCharClass}}static _findPreviousWordOnLine(wordSeparators,model,position){let lineContent=model.getLineContent(position.lineNumber);return this._doFindPreviousWordOnLine(lineContent,wordSeparators,position)}static _doFindPreviousWordOnLine(lineContent,wordSeparators,position){let wordType=0/* None */;for(let chIndex=position.column-2;chIndex>=0;chIndex--){let chCode=lineContent.charCodeAt(chIndex),chClass=wordSeparators.get(chCode);if(0/* Regular */===chClass){if(2/* Separator */===wordType)return this._createWord(lineContent,wordType,chClass,chIndex+1,this._findEndOfWord(lineContent,wordSeparators,wordType,chIndex+1));wordType=1/* Regular */}else if(2/* WordSeparator */===chClass){if(1/* Regular */===wordType)return this._createWord(lineContent,wordType,chClass,chIndex+1,this._findEndOfWord(lineContent,wordSeparators,wordType,chIndex+1));wordType=2/* Separator */}else if(1/* Whitespace */===chClass&&0/* None */!==wordType)return this._createWord(lineContent,wordType,chClass,chIndex+1,this._findEndOfWord(lineContent,wordSeparators,wordType,chIndex+1))}return 0/* None */!==wordType?this._createWord(lineContent,wordType,1/* Whitespace */,0,this._findEndOfWord(lineContent,wordSeparators,wordType,0)):null}static _findEndOfWord(lineContent,wordSeparators,wordType,startIndex){let len=lineContent.length;for(let chIndex=startIndex;chIndex<len;chIndex++){let chCode=lineContent.charCodeAt(chIndex),chClass=wordSeparators.get(chCode);if(1/* Whitespace */===chClass)return chIndex;if(1/* Regular */===wordType&&2/* WordSeparator */===chClass)return chIndex;if(2/* Separator */===wordType&&0/* Regular */===chClass)return chIndex}return len}static _findNextWordOnLine(wordSeparators,model,position){let lineContent=model.getLineContent(position.lineNumber);return this._doFindNextWordOnLine(lineContent,wordSeparators,position)}static _doFindNextWordOnLine(lineContent,wordSeparators,position){let wordType=0/* None */,len=lineContent.length;for(let chIndex=position.column-1;chIndex<len;chIndex++){let chCode=lineContent.charCodeAt(chIndex),chClass=wordSeparators.get(chCode);if(0/* Regular */===chClass){if(2/* Separator */===wordType)return this._createWord(lineContent,wordType,chClass,this._findStartOfWord(lineContent,wordSeparators,wordType,chIndex-1),chIndex);wordType=1/* Regular */}else if(2/* WordSeparator */===chClass){if(1/* Regular */===wordType)return this._createWord(lineContent,wordType,chClass,this._findStartOfWord(lineContent,wordSeparators,wordType,chIndex-1),chIndex);wordType=2/* Separator */}else if(1/* Whitespace */===chClass&&0/* None */!==wordType)return this._createWord(lineContent,wordType,chClass,this._findStartOfWord(lineContent,wordSeparators,wordType,chIndex-1),chIndex)}return 0/* None */!==wordType?this._createWord(lineContent,wordType,1/* Whitespace */,this._findStartOfWord(lineContent,wordSeparators,wordType,len-1),len):null}static _findStartOfWord(lineContent,wordSeparators,wordType,startIndex){for(let chIndex=startIndex;chIndex>=0;chIndex--){let chCode=lineContent.charCodeAt(chIndex),chClass=wordSeparators.get(chCode);if(1/* Whitespace */===chClass)return chIndex+1;if(1/* Regular */===wordType&&2/* WordSeparator */===chClass)return chIndex+1;if(2/* Separator */===wordType&&0/* Regular */===chClass)return chIndex+1}return 0}static moveWordLeft(wordSeparators,model,position,wordNavigationType){let lineNumber=position.lineNumber,column=position.column;1===column&&lineNumber>1&&(lineNumber-=1,column=model.getLineMaxColumn(lineNumber));let prevWordOnLine=WordOperations._findPreviousWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column));if(0/* WordStart */===wordNavigationType)return new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,prevWordOnLine?prevWordOnLine.start+1:1);if(1/* WordStartFast */===wordNavigationType)return prevWordOnLine&&2/* Separator */===prevWordOnLine.wordType&&prevWordOnLine.end-prevWordOnLine.start===1&&0/* Regular */===prevWordOnLine.nextCharClass&&(
// Skip over a word made up of one single separator and followed by a regular character
prevWordOnLine=WordOperations._findPreviousWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,prevWordOnLine.start+1))),new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,prevWordOnLine?prevWordOnLine.start+1:1);if(3/* WordAccessibility */===wordNavigationType){while(prevWordOnLine&&2/* Separator */===prevWordOnLine.wordType)
// Skip over words made up of only separators
prevWordOnLine=WordOperations._findPreviousWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,prevWordOnLine.start+1));return new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,prevWordOnLine?prevWordOnLine.start+1:1)}
// We are stopping at the ending of words
return prevWordOnLine&&column<=prevWordOnLine.end+1&&(prevWordOnLine=WordOperations._findPreviousWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,prevWordOnLine.start+1))),new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,prevWordOnLine?prevWordOnLine.end+1:1)}static _moveWordPartLeft(model,position){const lineNumber=position.lineNumber,maxColumn=model.getLineMaxColumn(lineNumber);if(1===position.column)return lineNumber>1?new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber-1,model.getLineMaxColumn(lineNumber-1)):position;const lineContent=model.getLineContent(lineNumber);for(let column=position.column-1;column>1;column--){const left=lineContent.charCodeAt(column-2),right=lineContent.charCodeAt(column-1);if(95/* Underline */===left&&95/* Underline */!==right)
// snake_case_variables
return new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column);if(_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isLowerAsciiLetter */.mK(left)&&_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isUpperAsciiLetter */.df(right))
// camelCaseVariables
return new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column);if(_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isUpperAsciiLetter */.df(left)&&_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isUpperAsciiLetter */.df(right)&&column+1<maxColumn){const rightRight=lineContent.charCodeAt(column);if(_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isLowerAsciiLetter */.mK(rightRight))return new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column)}}return new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,1)}static moveWordRight(wordSeparators,model,position,wordNavigationType){let lineNumber=position.lineNumber,column=position.column,movedDown=!1;column===model.getLineMaxColumn(lineNumber)&&lineNumber<model.getLineCount()&&(movedDown=!0,lineNumber+=1,column=1);let nextWordOnLine=WordOperations._findNextWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column));if(2/* WordEnd */===wordNavigationType)nextWordOnLine&&2/* Separator */===nextWordOnLine.wordType&&nextWordOnLine.end-nextWordOnLine.start===1&&0/* Regular */===nextWordOnLine.nextCharClass&&(
// Skip over a word made up of one single separator and followed by a regular character
nextWordOnLine=WordOperations._findNextWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,nextWordOnLine.end+1))),column=nextWordOnLine?nextWordOnLine.end+1:model.getLineMaxColumn(lineNumber);else if(3/* WordAccessibility */===wordNavigationType){movedDown&&(
// If we move to the next line, pretend that the cursor is right before the first character.
// This is needed when the first word starts right at the first character - and in order not to miss it,
// we need to start before.
column=0);while(nextWordOnLine&&(2/* Separator */===nextWordOnLine.wordType||nextWordOnLine.start+1<=column))
// Skip over a word made up of one single separator
// Also skip over word if it begins before current cursor position to ascertain we're moving forward at least 1 character.
nextWordOnLine=WordOperations._findNextWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,nextWordOnLine.end+1));column=nextWordOnLine?nextWordOnLine.start+1:model.getLineMaxColumn(lineNumber)}else nextWordOnLine&&!movedDown&&column>=nextWordOnLine.start+1&&(nextWordOnLine=WordOperations._findNextWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,nextWordOnLine.end+1))),column=nextWordOnLine?nextWordOnLine.start+1:model.getLineMaxColumn(lineNumber);return new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column)}static _moveWordPartRight(model,position){const lineNumber=position.lineNumber,maxColumn=model.getLineMaxColumn(lineNumber);if(position.column===maxColumn)return lineNumber<model.getLineCount()?new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber+1,1):position;const lineContent=model.getLineContent(lineNumber);for(let column=position.column+1;column<maxColumn;column++){const left=lineContent.charCodeAt(column-2),right=lineContent.charCodeAt(column-1);if(95/* Underline */!==left&&95/* Underline */===right)
// snake_case_variables
return new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column);if(_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isLowerAsciiLetter */.mK(left)&&_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isUpperAsciiLetter */.df(right))
// camelCaseVariables
return new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column);if(_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isUpperAsciiLetter */.df(left)&&_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isUpperAsciiLetter */.df(right)&&column+1<maxColumn){const rightRight=lineContent.charCodeAt(column);if(_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isLowerAsciiLetter */.mK(rightRight))return new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column)}}return new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,maxColumn)}static _deleteWordLeftWhitespace(model,position){const lineContent=model.getLineContent(position.lineNumber),startIndex=position.column-2,lastNonWhitespace=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .lastNonWhitespaceIndex */.ow(lineContent,startIndex);return lastNonWhitespace+1<startIndex?new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(position.lineNumber,lastNonWhitespace+2,position.lineNumber,position.column):null}static deleteWordLeft(ctx,wordNavigationType){const wordSeparators=ctx.wordSeparators,model=ctx.model,selection=ctx.selection,whitespaceHeuristics=ctx.whitespaceHeuristics;if(!selection.isEmpty())return selection;if(_cursorDeleteOperations_js__WEBPACK_IMPORTED_MODULE_2__/* .DeleteOperations */.A.isAutoClosingPairDelete(ctx.autoClosingDelete,ctx.autoClosingBrackets,ctx.autoClosingQuotes,ctx.autoClosingPairs.autoClosingPairsOpenByEnd,ctx.model,[ctx.selection],ctx.autoClosedCharacters)){const position=ctx.selection.getPosition();return new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(position.lineNumber,position.column-1,position.lineNumber,position.column+1)}const position=new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(selection.positionLineNumber,selection.positionColumn);let lineNumber=position.lineNumber,column=position.column;if(1===lineNumber&&1===column)
// Ignore deleting at beginning of file
return null;if(whitespaceHeuristics){let r=this._deleteWordLeftWhitespace(model,position);if(r)return r}let prevWordOnLine=WordOperations._findPreviousWordOnLine(wordSeparators,model,position);return 0/* WordStart */===wordNavigationType?prevWordOnLine?column=prevWordOnLine.start+1:column>1?column=1:(lineNumber--,column=model.getLineMaxColumn(lineNumber)):(prevWordOnLine&&column<=prevWordOnLine.end+1&&(prevWordOnLine=WordOperations._findPreviousWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,prevWordOnLine.start+1))),prevWordOnLine?column=prevWordOnLine.end+1:column>1?column=1:(lineNumber--,column=model.getLineMaxColumn(lineNumber))),new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(lineNumber,column,position.lineNumber,position.column)}static deleteInsideWord(wordSeparators,model,selection){if(!selection.isEmpty())return selection;const position=new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(selection.positionLineNumber,selection.positionColumn);let r=this._deleteInsideWordWhitespace(model,position);return r||this._deleteInsideWordDetermineDeleteRange(wordSeparators,model,position)}static _charAtIsWhitespace(str,index){const charCode=str.charCodeAt(index);return 32/* Space */===charCode||9/* Tab */===charCode}static _deleteInsideWordWhitespace(model,position){const lineContent=model.getLineContent(position.lineNumber),lineContentLength=lineContent.length;if(0===lineContentLength)
// empty line
return null;let leftIndex=Math.max(position.column-2,0);if(!this._charAtIsWhitespace(lineContent,leftIndex))
// touches a non-whitespace character to the left
return null;let rightIndex=Math.min(position.column-1,lineContentLength-1);if(!this._charAtIsWhitespace(lineContent,rightIndex))
// touches a non-whitespace character to the right
return null;
// walk over whitespace to the left
while(leftIndex>0&&this._charAtIsWhitespace(lineContent,leftIndex-1))leftIndex--;
// walk over whitespace to the right
while(rightIndex+1<lineContentLength&&this._charAtIsWhitespace(lineContent,rightIndex+1))rightIndex++;return new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(position.lineNumber,leftIndex+1,position.lineNumber,rightIndex+2)}static _deleteInsideWordDetermineDeleteRange(wordSeparators,model,position){const lineContent=model.getLineContent(position.lineNumber),lineLength=lineContent.length;if(0===lineLength)
// empty line
return position.lineNumber>1?new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(position.lineNumber-1,model.getLineMaxColumn(position.lineNumber-1),position.lineNumber,1):position.lineNumber<model.getLineCount()?new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(position.lineNumber,1,position.lineNumber+1,1):new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(position.lineNumber,1,position.lineNumber,1);const touchesWord=word=>word.start+1<=position.column&&position.column<=word.end+1,createRangeWithPosition=(startColumn,endColumn)=>(startColumn=Math.min(startColumn,position.column),endColumn=Math.max(endColumn,position.column),new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(position.lineNumber,startColumn,position.lineNumber,endColumn)),deleteWordAndAdjacentWhitespace=word=>{let startColumn=word.start+1,endColumn=word.end+1,expandedToTheRight=!1;while(endColumn-1<lineLength&&this._charAtIsWhitespace(lineContent,endColumn-1))expandedToTheRight=!0,endColumn++;if(!expandedToTheRight)while(startColumn>1&&this._charAtIsWhitespace(lineContent,startColumn-2))startColumn--;return createRangeWithPosition(startColumn,endColumn)},prevWordOnLine=WordOperations._findPreviousWordOnLine(wordSeparators,model,position);if(prevWordOnLine&&touchesWord(prevWordOnLine))return deleteWordAndAdjacentWhitespace(prevWordOnLine);const nextWordOnLine=WordOperations._findNextWordOnLine(wordSeparators,model,position);return nextWordOnLine&&touchesWord(nextWordOnLine)?deleteWordAndAdjacentWhitespace(nextWordOnLine):prevWordOnLine&&nextWordOnLine?createRangeWithPosition(prevWordOnLine.end+1,nextWordOnLine.start+1):prevWordOnLine?createRangeWithPosition(prevWordOnLine.start+1,prevWordOnLine.end+1):nextWordOnLine?createRangeWithPosition(nextWordOnLine.start+1,nextWordOnLine.end+1):createRangeWithPosition(1,lineLength+1)}static _deleteWordPartLeft(model,selection){if(!selection.isEmpty())return selection;const pos=selection.getPosition(),toPosition=WordOperations._moveWordPartLeft(model,pos);return new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(pos.lineNumber,pos.column,toPosition.lineNumber,toPosition.column)}static _findFirstNonWhitespaceChar(str,startIndex){let len=str.length;for(let chIndex=startIndex;chIndex<len;chIndex++){let ch=str.charAt(chIndex);if(" "!==ch&&"\t"!==ch)return chIndex}return len}static _deleteWordRightWhitespace(model,position){const lineContent=model.getLineContent(position.lineNumber),startIndex=position.column-1,firstNonWhitespace=this._findFirstNonWhitespaceChar(lineContent,startIndex);return startIndex+1<firstNonWhitespace?new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(position.lineNumber,position.column,position.lineNumber,firstNonWhitespace+1):null}static deleteWordRight(ctx,wordNavigationType){const wordSeparators=ctx.wordSeparators,model=ctx.model,selection=ctx.selection,whitespaceHeuristics=ctx.whitespaceHeuristics;if(!selection.isEmpty())return selection;const position=new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(selection.positionLineNumber,selection.positionColumn);let lineNumber=position.lineNumber,column=position.column;const lineCount=model.getLineCount(),maxColumn=model.getLineMaxColumn(lineNumber);if(lineNumber===lineCount&&column===maxColumn)
// Ignore deleting at end of file
return null;if(whitespaceHeuristics){let r=this._deleteWordRightWhitespace(model,position);if(r)return r}let nextWordOnLine=WordOperations._findNextWordOnLine(wordSeparators,model,position);return 2/* WordEnd */===wordNavigationType?nextWordOnLine?column=nextWordOnLine.end+1:column<maxColumn||lineNumber===lineCount?column=maxColumn:(lineNumber++,nextWordOnLine=WordOperations._findNextWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,1)),column=nextWordOnLine?nextWordOnLine.start+1:model.getLineMaxColumn(lineNumber)):(nextWordOnLine&&column>=nextWordOnLine.start+1&&(nextWordOnLine=WordOperations._findNextWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,nextWordOnLine.end+1))),nextWordOnLine?column=nextWordOnLine.start+1:column<maxColumn||lineNumber===lineCount?column=maxColumn:(lineNumber++,nextWordOnLine=WordOperations._findNextWordOnLine(wordSeparators,model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,1)),column=nextWordOnLine?nextWordOnLine.start+1:model.getLineMaxColumn(lineNumber))),new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(lineNumber,column,position.lineNumber,position.column)}static _deleteWordPartRight(model,selection){if(!selection.isEmpty())return selection;const pos=selection.getPosition(),toPosition=WordOperations._moveWordPartRight(model,pos);return new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(pos.lineNumber,pos.column,toPosition.lineNumber,toPosition.column)}static _createWordAtPosition(model,lineNumber,word){const range=new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(lineNumber,word.start+1,lineNumber,word.end+1);return{word:model.getValueInRange(range),startColumn:range.startColumn,endColumn:range.endColumn}}static getWordAtPosition(model,_wordSeparators,position){const wordSeparators=(0,_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_3__/* .getMapForWordSeparators */.u)(_wordSeparators),prevWord=WordOperations._findPreviousWordOnLine(wordSeparators,model,position);if(prevWord&&1/* Regular */===prevWord.wordType&&prevWord.start<=position.column-1&&position.column-1<=prevWord.end)return WordOperations._createWordAtPosition(model,position.lineNumber,prevWord);const nextWord=WordOperations._findNextWordOnLine(wordSeparators,model,position);return nextWord&&1/* Regular */===nextWord.wordType&&nextWord.start<=position.column-1&&position.column-1<=nextWord.end?WordOperations._createWordAtPosition(model,position.lineNumber,nextWord):null}static word(config,model,cursor,inSelectionMode,position){const wordSeparators=(0,_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_3__/* .getMapForWordSeparators */.u)(config.wordSeparators);let startColumn,endColumn,prevWord=WordOperations._findPreviousWordOnLine(wordSeparators,model,position),nextWord=WordOperations._findNextWordOnLine(wordSeparators,model,position);if(!inSelectionMode){
// Entering word selection for the first time
let startColumn,endColumn;return prevWord&&1/* Regular */===prevWord.wordType&&prevWord.start<=position.column-1&&position.column-1<=prevWord.end?(
// isTouchingPrevWord
startColumn=prevWord.start+1,endColumn=prevWord.end+1):nextWord&&1/* Regular */===nextWord.wordType&&nextWord.start<=position.column-1&&position.column-1<=nextWord.end?(
// isTouchingNextWord
startColumn=nextWord.start+1,endColumn=nextWord.end+1):(startColumn=prevWord?prevWord.end+1:1,endColumn=nextWord?nextWord.start+1:model.getLineMaxColumn(position.lineNumber)),new _cursorCommon_js__WEBPACK_IMPORTED_MODULE_1__/* .SingleCursorState */.rS(new _core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e(position.lineNumber,startColumn,position.lineNumber,endColumn),0,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(position.lineNumber,endColumn),0)}prevWord&&1/* Regular */===prevWord.wordType&&prevWord.start<position.column-1&&position.column-1<prevWord.end?(
// isInsidePrevWord
startColumn=prevWord.start+1,endColumn=prevWord.end+1):nextWord&&1/* Regular */===nextWord.wordType&&nextWord.start<position.column-1&&position.column-1<nextWord.end?(
// isInsideNextWord
startColumn=nextWord.start+1,endColumn=nextWord.end+1):(startColumn=position.column,endColumn=position.column);let column,lineNumber=position.lineNumber;if(cursor.selectionStart.containsPosition(position))column=cursor.selectionStart.endColumn;else if(position.isBeforeOrEqual(cursor.selectionStart.getStartPosition())){column=startColumn;let possiblePosition=new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column);cursor.selectionStart.containsPosition(possiblePosition)&&(column=cursor.selectionStart.endColumn)}else{column=endColumn;let possiblePosition=new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineNumber,column);cursor.selectionStart.containsPosition(possiblePosition)&&(column=cursor.selectionStart.startColumn)}return cursor.move(!0,lineNumber,column,0)}}class WordPartOperations extends WordOperations{static deleteWordPartLeft(ctx){const candidates=enforceDefined([WordOperations.deleteWordLeft(ctx,0/* WordStart */),WordOperations.deleteWordLeft(ctx,2/* WordEnd */),WordOperations._deleteWordPartLeft(ctx.model,ctx.selection)]);return candidates.sort(_core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e.compareRangesUsingEnds),candidates[2]}static deleteWordPartRight(ctx){const candidates=enforceDefined([WordOperations.deleteWordRight(ctx,0/* WordStart */),WordOperations.deleteWordRight(ctx,2/* WordEnd */),WordOperations._deleteWordPartRight(ctx.model,ctx.selection)]);return candidates.sort(_core_range_js__WEBPACK_IMPORTED_MODULE_5__/* .Range */.e.compareRangesUsingStarts),candidates[0]}static moveWordPartLeft(wordSeparators,model,position){const candidates=enforceDefined([WordOperations.moveWordLeft(wordSeparators,model,position,0/* WordStart */),WordOperations.moveWordLeft(wordSeparators,model,position,2/* WordEnd */),WordOperations._moveWordPartLeft(model,position)]);return candidates.sort(_core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L.compare),candidates[2]}static moveWordPartRight(wordSeparators,model,position){const candidates=enforceDefined([WordOperations.moveWordRight(wordSeparators,model,position,0/* WordStart */),WordOperations.moveWordRight(wordSeparators,model,position,2/* WordEnd */),WordOperations._moveWordPartRight(model,position)]);return candidates.sort(_core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L.compare),candidates[0]}}function enforceDefined(arr){return arr.filter((el=>Boolean(el)))}
/***/},
/***/759410:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */u:function(){/* binding */return getMapForWordSeparators}
/* harmony export */});
/* unused harmony export WordCharacterClassifier */
/* harmony import */var _core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(744906);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/class WordCharacterClassifier extends _core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__/* .CharacterClassifier */.N{constructor(wordSeparators){super(0/* Regular */);for(let i=0,len=wordSeparators.length;i<len;i++)this.set(wordSeparators.charCodeAt(i),2/* WordSeparator */);this.set(32/* Space */,1/* Whitespace */),this.set(9/* Tab */,1/* Whitespace */)}}function once(computeFn){let cache={};// TODO@Alex unbounded cache
return input=>(cache.hasOwnProperty(input)||(cache[input]=computeFn(input)),cache[input])}const getMapForWordSeparators=once((input=>new WordCharacterClassifier(input)));
/***/},
/***/744906:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */N:function(){/* binding */return CharacterClassifier},
/* harmony export */q:function(){/* binding */return CharacterSet}
/* harmony export */});
/* harmony import */var _base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(385427);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * A fast character classifier that uses a compact array for ASCII values.
 */class CharacterClassifier{constructor(_defaultValue){let defaultValue=(0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__/* .toUint8 */.K)(_defaultValue);this._defaultValue=defaultValue,this._asciiMap=CharacterClassifier._createAsciiMap(defaultValue),this._map=new Map}static _createAsciiMap(defaultValue){let asciiMap=new Uint8Array(256);for(let i=0;i<256;i++)asciiMap[i]=defaultValue;return asciiMap}set(charCode,_value){let value=(0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__/* .toUint8 */.K)(_value);charCode>=0&&charCode<256?this._asciiMap[charCode]=value:this._map.set(charCode,value)}get(charCode){return charCode>=0&&charCode<256?this._asciiMap[charCode]:this._map.get(charCode)||this._defaultValue}}class CharacterSet{constructor(){this._actual=new CharacterClassifier(0/* False */)}add(charCode){this._actual.set(charCode,1/* True */)}has(charCode){return 1/* True */===this._actual.get(charCode)}}
/***/},
/***/969386:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */h:function(){/* binding */return EditOperation}
/* harmony export */});
/* harmony import */var _range_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(624314);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/class EditOperation{static insert(position,text){return{range:new _range_js__WEBPACK_IMPORTED_MODULE_0__/* .Range */.e(position.lineNumber,position.column,position.lineNumber,position.column),text:text,forceMoveMarkers:!0}}static delete(range){return{range:range,text:null}}static replace(range,text){return{range:range,text:text}}static replaceMove(range,text){return{range:range,text:text,forceMoveMarkers:!0}}}
/***/},
/***/878411:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */A:function(){/* binding */return LineTokens}
/* harmony export */});
/* unused harmony export SlicedLineTokens */
/* harmony import */var _modes_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(860303);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/class LineTokens{constructor(tokens,text,decoder){this._lineTokensBrand=void 0,this._tokens=tokens,this._tokensCount=this._tokens.length>>>1,this._text=text,this._languageIdCodec=decoder}static createEmpty(lineContent,decoder){const defaultMetadata=LineTokens.defaultTokenMetadata,tokens=new Uint32Array(2);return tokens[0]=lineContent.length,tokens[1]=defaultMetadata,new LineTokens(tokens,lineContent,decoder)}equals(other){return other instanceof LineTokens&&this.slicedEquals(other,0,this._tokensCount)}slicedEquals(other,sliceFromTokenIndex,sliceTokenCount){if(this._text!==other._text)return!1;if(this._tokensCount!==other._tokensCount)return!1;const from=sliceFromTokenIndex<<1,to=from+(sliceTokenCount<<1);for(let i=from;i<to;i++)if(this._tokens[i]!==other._tokens[i])return!1;return!0}getLineContent(){return this._text}getCount(){return this._tokensCount}getStartOffset(tokenIndex){return tokenIndex>0?this._tokens[tokenIndex-1<<1]:0}getMetadata(tokenIndex){const metadata=this._tokens[1+(tokenIndex<<1)];return metadata}getLanguageId(tokenIndex){const metadata=this._tokens[1+(tokenIndex<<1)],languageId=_modes_js__WEBPACK_IMPORTED_MODULE_0__/* .TokenMetadata */.NX.getLanguageId(metadata);return this._languageIdCodec.decodeLanguageId(languageId)}getStandardTokenType(tokenIndex){const metadata=this._tokens[1+(tokenIndex<<1)];return _modes_js__WEBPACK_IMPORTED_MODULE_0__/* .TokenMetadata */.NX.getTokenType(metadata)}getForeground(tokenIndex){const metadata=this._tokens[1+(tokenIndex<<1)];return _modes_js__WEBPACK_IMPORTED_MODULE_0__/* .TokenMetadata */.NX.getForeground(metadata)}getClassName(tokenIndex){const metadata=this._tokens[1+(tokenIndex<<1)];return _modes_js__WEBPACK_IMPORTED_MODULE_0__/* .TokenMetadata */.NX.getClassNameFromMetadata(metadata)}getInlineStyle(tokenIndex,colorMap){const metadata=this._tokens[1+(tokenIndex<<1)];return _modes_js__WEBPACK_IMPORTED_MODULE_0__/* .TokenMetadata */.NX.getInlineStyleFromMetadata(metadata,colorMap)}getEndOffset(tokenIndex){return this._tokens[tokenIndex<<1]}
/**
     * Find the token containing offset `offset`.
     * @param offset The search offset
     * @return The index of the token containing the offset.
     */findTokenIndexAtOffset(offset){return LineTokens.findIndexInTokensArray(this._tokens,offset)}inflate(){return this}sliceAndInflate(startOffset,endOffset,deltaOffset){return new SlicedLineTokens(this,startOffset,endOffset,deltaOffset)}static convertToEndOffset(tokens,lineTextLength){const tokenCount=tokens.length>>>1,lastTokenIndex=tokenCount-1;for(let tokenIndex=0;tokenIndex<lastTokenIndex;tokenIndex++)tokens[tokenIndex<<1]=tokens[tokenIndex+1<<1];tokens[lastTokenIndex<<1]=lineTextLength}static findIndexInTokensArray(tokens,desiredIndex){if(tokens.length<=2)return 0;let low=0,high=(tokens.length>>>1)-1;while(low<high){const mid=low+Math.floor((high-low)/2),endOffset=tokens[mid<<1];if(endOffset===desiredIndex)return mid+1;endOffset<desiredIndex?low=mid+1:endOffset>desiredIndex&&(high=mid)}return low}
/**
     * @pure
     * @param insertTokens Must be sorted by offset.
    */withInserted(insertTokens){if(0===insertTokens.length)return this;let nextOriginalTokenIdx=0,nextInsertTokenIdx=0,text="";const newTokens=new Array;let originalEndOffset=0;while(1){let nextOriginalTokenEndOffset=nextOriginalTokenIdx<this._tokensCount?this._tokens[nextOriginalTokenIdx<<1]:-1,nextInsertToken=nextInsertTokenIdx<insertTokens.length?insertTokens[nextInsertTokenIdx]:null;if(-1!==nextOriginalTokenEndOffset&&(null===nextInsertToken||nextOriginalTokenEndOffset<=nextInsertToken.offset)){
// original token ends before next insert token
text+=this._text.substring(originalEndOffset,nextOriginalTokenEndOffset);const metadata=this._tokens[1+(nextOriginalTokenIdx<<1)];newTokens.push(text.length,metadata),nextOriginalTokenIdx++,originalEndOffset=nextOriginalTokenEndOffset}else{if(!nextInsertToken)break;if(nextInsertToken.offset>originalEndOffset){
// insert token is in the middle of the next token.
text+=this._text.substring(originalEndOffset,nextInsertToken.offset);const metadata=this._tokens[1+(nextOriginalTokenIdx<<1)];newTokens.push(text.length,metadata),originalEndOffset=nextInsertToken.offset}text+=nextInsertToken.text,newTokens.push(text.length,nextInsertToken.tokenMetadata),nextInsertTokenIdx++}}return new LineTokens(new Uint32Array(newTokens),text,this._languageIdCodec)}}LineTokens.defaultTokenMetadata=16793600;class SlicedLineTokens{constructor(source,startOffset,endOffset,deltaOffset){this._source=source,this._startOffset=startOffset,this._endOffset=endOffset,this._deltaOffset=deltaOffset,this._firstTokenIndex=source.findTokenIndexAtOffset(startOffset),this._tokensCount=0;for(let i=this._firstTokenIndex,len=source.getCount();i<len;i++){const tokenStartOffset=source.getStartOffset(i);if(tokenStartOffset>=endOffset)break;this._tokensCount++}}equals(other){return other instanceof SlicedLineTokens&&(this._startOffset===other._startOffset&&this._endOffset===other._endOffset&&this._deltaOffset===other._deltaOffset&&this._source.slicedEquals(other._source,this._firstTokenIndex,this._tokensCount))}getCount(){return this._tokensCount}getForeground(tokenIndex){return this._source.getForeground(this._firstTokenIndex+tokenIndex)}getEndOffset(tokenIndex){const tokenEndOffset=this._source.getEndOffset(this._firstTokenIndex+tokenIndex);return Math.min(this._endOffset,tokenEndOffset)-this._startOffset+this._deltaOffset}getClassName(tokenIndex){return this._source.getClassName(this._firstTokenIndex+tokenIndex)}getInlineStyle(tokenIndex,colorMap){return this._source.getInlineStyle(this._firstTokenIndex+tokenIndex,colorMap)}findTokenIndexAtOffset(offset){return this._source.findTokenIndexAtOffset(offset+this._startOffset-this._deltaOffset)-this._firstTokenIndex}}
/***/},
/***/50187:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */L:function(){/* binding */return Position}
/* harmony export */});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * A position in the editor.
 */
class Position{constructor(lineNumber,column){this.lineNumber=lineNumber,this.column=column}
/**
     * Create a new position from this position.
     *
     * @param newLineNumber new line number
     * @param newColumn new column
     */with(newLineNumber=this.lineNumber,newColumn=this.column){return newLineNumber===this.lineNumber&&newColumn===this.column?this:new Position(newLineNumber,newColumn)}
/**
     * Derive a new position from this position.
     *
     * @param deltaLineNumber line number delta
     * @param deltaColumn column delta
     */delta(deltaLineNumber=0,deltaColumn=0){return this.with(this.lineNumber+deltaLineNumber,this.column+deltaColumn)}
/**
     * Test if this position equals other position
     */equals(other){return Position.equals(this,other)}
/**
     * Test if position `a` equals position `b`
     */static equals(a,b){return!a&&!b||!!a&&!!b&&a.lineNumber===b.lineNumber&&a.column===b.column}
/**
     * Test if this position is before other position.
     * If the two positions are equal, the result will be false.
     */isBefore(other){return Position.isBefore(this,other)}
/**
     * Test if position `a` is before position `b`.
     * If the two positions are equal, the result will be false.
     */static isBefore(a,b){return a.lineNumber<b.lineNumber||!(b.lineNumber<a.lineNumber)&&a.column<b.column}
/**
     * Test if this position is before other position.
     * If the two positions are equal, the result will be true.
     */isBeforeOrEqual(other){return Position.isBeforeOrEqual(this,other)}
/**
     * Test if position `a` is before position `b`.
     * If the two positions are equal, the result will be true.
     */static isBeforeOrEqual(a,b){return a.lineNumber<b.lineNumber||!(b.lineNumber<a.lineNumber)&&a.column<=b.column}
/**
     * A function that compares positions, useful for sorting
     */static compare(a,b){let aLineNumber=0|a.lineNumber,bLineNumber=0|b.lineNumber;if(aLineNumber===bLineNumber){let aColumn=0|a.column,bColumn=0|b.column;return aColumn-bColumn}return aLineNumber-bLineNumber}
/**
     * Clone this position.
     */clone(){return new Position(this.lineNumber,this.column)}
/**
     * Convert to a human-readable representation.
     */toString(){return"("+this.lineNumber+","+this.column+")"}
// ---
/**
     * Create a `Position` from an `IPosition`.
     */
static lift(pos){return new Position(pos.lineNumber,pos.column)}
/**
     * Test if `obj` is an `IPosition`.
     */static isIPosition(obj){return obj&&"number"===typeof obj.lineNumber&&"number"===typeof obj.column}}
/***/},
/***/624314:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */e:function(){/* binding */return Range}
/* harmony export */});
/* harmony import */var _position_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(50187);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)
 */class Range{constructor(startLineNumber,startColumn,endLineNumber,endColumn){startLineNumber>endLineNumber||startLineNumber===endLineNumber&&startColumn>endColumn?(this.startLineNumber=endLineNumber,this.startColumn=endColumn,this.endLineNumber=startLineNumber,this.endColumn=startColumn):(this.startLineNumber=startLineNumber,this.startColumn=startColumn,this.endLineNumber=endLineNumber,this.endColumn=endColumn)}
/**
     * Test if this range is empty.
     */isEmpty(){return Range.isEmpty(this)}
/**
     * Test if `range` is empty.
     */static isEmpty(range){return range.startLineNumber===range.endLineNumber&&range.startColumn===range.endColumn}
/**
     * Test if position is in this range. If the position is at the edges, will return true.
     */containsPosition(position){return Range.containsPosition(this,position)}
/**
     * Test if `position` is in `range`. If the position is at the edges, will return true.
     */static containsPosition(range,position){return!(position.lineNumber<range.startLineNumber||position.lineNumber>range.endLineNumber)&&(!(position.lineNumber===range.startLineNumber&&position.column<range.startColumn)&&!(position.lineNumber===range.endLineNumber&&position.column>range.endColumn))}
/**
     * Test if range is in this range. If the range is equal to this range, will return true.
     */containsRange(range){return Range.containsRange(this,range)}
/**
     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.
     */static containsRange(range,otherRange){return!(otherRange.startLineNumber<range.startLineNumber||otherRange.endLineNumber<range.startLineNumber)&&(!(otherRange.startLineNumber>range.endLineNumber||otherRange.endLineNumber>range.endLineNumber)&&(!(otherRange.startLineNumber===range.startLineNumber&&otherRange.startColumn<range.startColumn)&&!(otherRange.endLineNumber===range.endLineNumber&&otherRange.endColumn>range.endColumn)))}
/**
     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.
     */strictContainsRange(range){return Range.strictContainsRange(this,range)}
/**
     * Test if `otherRange` is strictly in `range` (must start after, and end before). If the ranges are equal, will return false.
     */static strictContainsRange(range,otherRange){return!(otherRange.startLineNumber<range.startLineNumber||otherRange.endLineNumber<range.startLineNumber)&&(!(otherRange.startLineNumber>range.endLineNumber||otherRange.endLineNumber>range.endLineNumber)&&(!(otherRange.startLineNumber===range.startLineNumber&&otherRange.startColumn<=range.startColumn)&&!(otherRange.endLineNumber===range.endLineNumber&&otherRange.endColumn>=range.endColumn)))}
/**
     * A reunion of the two ranges.
     * The smallest position will be used as the start point, and the largest one as the end point.
     */plusRange(range){return Range.plusRange(this,range)}
/**
     * A reunion of the two ranges.
     * The smallest position will be used as the start point, and the largest one as the end point.
     */static plusRange(a,b){let startLineNumber,startColumn,endLineNumber,endColumn;return b.startLineNumber<a.startLineNumber?(startLineNumber=b.startLineNumber,startColumn=b.startColumn):b.startLineNumber===a.startLineNumber?(startLineNumber=b.startLineNumber,startColumn=Math.min(b.startColumn,a.startColumn)):(startLineNumber=a.startLineNumber,startColumn=a.startColumn),b.endLineNumber>a.endLineNumber?(endLineNumber=b.endLineNumber,endColumn=b.endColumn):b.endLineNumber===a.endLineNumber?(endLineNumber=b.endLineNumber,endColumn=Math.max(b.endColumn,a.endColumn)):(endLineNumber=a.endLineNumber,endColumn=a.endColumn),new Range(startLineNumber,startColumn,endLineNumber,endColumn)}
/**
     * A intersection of the two ranges.
     */intersectRanges(range){return Range.intersectRanges(this,range)}
/**
     * A intersection of the two ranges.
     */static intersectRanges(a,b){let resultStartLineNumber=a.startLineNumber,resultStartColumn=a.startColumn,resultEndLineNumber=a.endLineNumber,resultEndColumn=a.endColumn,otherStartLineNumber=b.startLineNumber,otherStartColumn=b.startColumn,otherEndLineNumber=b.endLineNumber,otherEndColumn=b.endColumn;
// Check if selection is now empty
return resultStartLineNumber<otherStartLineNumber?(resultStartLineNumber=otherStartLineNumber,resultStartColumn=otherStartColumn):resultStartLineNumber===otherStartLineNumber&&(resultStartColumn=Math.max(resultStartColumn,otherStartColumn)),resultEndLineNumber>otherEndLineNumber?(resultEndLineNumber=otherEndLineNumber,resultEndColumn=otherEndColumn):resultEndLineNumber===otherEndLineNumber&&(resultEndColumn=Math.min(resultEndColumn,otherEndColumn)),resultStartLineNumber>resultEndLineNumber||resultStartLineNumber===resultEndLineNumber&&resultStartColumn>resultEndColumn?null:new Range(resultStartLineNumber,resultStartColumn,resultEndLineNumber,resultEndColumn)}
/**
     * Test if this range equals other.
     */equalsRange(other){return Range.equalsRange(this,other)}
/**
     * Test if range `a` equals `b`.
     */static equalsRange(a,b){return!!a&&!!b&&a.startLineNumber===b.startLineNumber&&a.startColumn===b.startColumn&&a.endLineNumber===b.endLineNumber&&a.endColumn===b.endColumn}
/**
     * Return the end position (which will be after or equal to the start position)
     */getEndPosition(){return Range.getEndPosition(this)}
/**
     * Return the end position (which will be after or equal to the start position)
     */static getEndPosition(range){return new _position_js__WEBPACK_IMPORTED_MODULE_0__/* .Position */.L(range.endLineNumber,range.endColumn)}
/**
     * Return the start position (which will be before or equal to the end position)
     */getStartPosition(){return Range.getStartPosition(this)}
/**
     * Return the start position (which will be before or equal to the end position)
     */static getStartPosition(range){return new _position_js__WEBPACK_IMPORTED_MODULE_0__/* .Position */.L(range.startLineNumber,range.startColumn)}
/**
     * Transform to a user presentable string representation.
     */toString(){return"["+this.startLineNumber+","+this.startColumn+" -> "+this.endLineNumber+","+this.endColumn+"]"}
/**
     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.
     */setEndPosition(endLineNumber,endColumn){return new Range(this.startLineNumber,this.startColumn,endLineNumber,endColumn)}
/**
     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.
     */setStartPosition(startLineNumber,startColumn){return new Range(startLineNumber,startColumn,this.endLineNumber,this.endColumn)}
/**
     * Create a new empty range using this range's start position.
     */collapseToStart(){return Range.collapseToStart(this)}
/**
     * Create a new empty range using this range's start position.
     */static collapseToStart(range){return new Range(range.startLineNumber,range.startColumn,range.startLineNumber,range.startColumn)}
// ---
static fromPositions(start,end=start){return new Range(start.lineNumber,start.column,end.lineNumber,end.column)}static lift(range){return range?new Range(range.startLineNumber,range.startColumn,range.endLineNumber,range.endColumn):null}
/**
     * Test if `obj` is an `IRange`.
     */static isIRange(obj){return obj&&"number"===typeof obj.startLineNumber&&"number"===typeof obj.startColumn&&"number"===typeof obj.endLineNumber&&"number"===typeof obj.endColumn}
/**
     * Test if the two ranges are touching in any way.
     */static areIntersectingOrTouching(a,b){
// Check if `a` is before `b`
return!(a.endLineNumber<b.startLineNumber||a.endLineNumber===b.startLineNumber&&a.endColumn<b.startColumn)&&!(b.endLineNumber<a.startLineNumber||b.endLineNumber===a.startLineNumber&&b.endColumn<a.startColumn);
// Check if `b` is before `a`
}
/**
     * Test if the two ranges are intersecting. If the ranges are touching it returns true.
     */static areIntersecting(a,b){
// Check if `a` is before `b`
return!(a.endLineNumber<b.startLineNumber||a.endLineNumber===b.startLineNumber&&a.endColumn<=b.startColumn)&&!(b.endLineNumber<a.startLineNumber||b.endLineNumber===a.startLineNumber&&b.endColumn<=a.startColumn);
// Check if `b` is before `a`
}
/**
     * A function that compares ranges, useful for sorting ranges
     * It will first compare ranges on the startPosition and then on the endPosition
     */static compareRangesUsingStarts(a,b){if(a&&b){const aStartLineNumber=0|a.startLineNumber,bStartLineNumber=0|b.startLineNumber;if(aStartLineNumber===bStartLineNumber){const aStartColumn=0|a.startColumn,bStartColumn=0|b.startColumn;if(aStartColumn===bStartColumn){const aEndLineNumber=0|a.endLineNumber,bEndLineNumber=0|b.endLineNumber;if(aEndLineNumber===bEndLineNumber){const aEndColumn=0|a.endColumn,bEndColumn=0|b.endColumn;return aEndColumn-bEndColumn}return aEndLineNumber-bEndLineNumber}return aStartColumn-bStartColumn}return aStartLineNumber-bStartLineNumber}const aExists=a?1:0,bExists=b?1:0;return aExists-bExists}
/**
     * A function that compares ranges, useful for sorting ranges
     * It will first compare ranges on the endPosition and then on the startPosition
     */static compareRangesUsingEnds(a,b){return a.endLineNumber===b.endLineNumber?a.endColumn===b.endColumn?a.startLineNumber===b.startLineNumber?a.startColumn-b.startColumn:a.startLineNumber-b.startLineNumber:a.endColumn-b.endColumn:a.endLineNumber-b.endLineNumber}
/**
     * Test if the range spans multiple lines.
     */static spansMultipleLines(range){return range.endLineNumber>range.startLineNumber}}
/***/},
/***/89636:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */h:function(){/* binding */return RGBA8}
/* harmony export */});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * A very VM friendly rgba datastructure.
 * Please don't touch unless you take a look at the IR.
 */
class RGBA8{constructor(r,g,b,a){this._rgba8Brand=void 0,this.r=RGBA8._clamp(r),this.g=RGBA8._clamp(g),this.b=RGBA8._clamp(b),this.a=RGBA8._clamp(a)}equals(other){return this.r===other.r&&this.g===other.g&&this.b===other.b&&this.a===other.a}static _clamp(c){return c<0?0:c>255?255:0|c}}RGBA8.Empty=new RGBA8(0,0,0,0)},
/***/203860:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */Y:function(){/* binding */return Selection}
/* harmony export */});
/* harmony import */var _position_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(50187),_range_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(624314);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * A selection in the editor.
 * The selection is a range that has an orientation.
 */
class Selection extends _range_js__WEBPACK_IMPORTED_MODULE_0__/* .Range */.e{constructor(selectionStartLineNumber,selectionStartColumn,positionLineNumber,positionColumn){super(selectionStartLineNumber,selectionStartColumn,positionLineNumber,positionColumn),this.selectionStartLineNumber=selectionStartLineNumber,this.selectionStartColumn=selectionStartColumn,this.positionLineNumber=positionLineNumber,this.positionColumn=positionColumn}
/**
     * Transform to a human-readable representation.
     */toString(){return"["+this.selectionStartLineNumber+","+this.selectionStartColumn+" -> "+this.positionLineNumber+","+this.positionColumn+"]"}
/**
     * Test if equals other selection.
     */equalsSelection(other){return Selection.selectionsEqual(this,other)}
/**
     * Test if the two selections are equal.
     */static selectionsEqual(a,b){return a.selectionStartLineNumber===b.selectionStartLineNumber&&a.selectionStartColumn===b.selectionStartColumn&&a.positionLineNumber===b.positionLineNumber&&a.positionColumn===b.positionColumn}
/**
     * Get directions (LTR or RTL).
     */getDirection(){return this.selectionStartLineNumber===this.startLineNumber&&this.selectionStartColumn===this.startColumn?0/* LTR */:1/* RTL */}
/**
     * Create a new selection with a different `positionLineNumber` and `positionColumn`.
     */setEndPosition(endLineNumber,endColumn){return 0/* LTR */===this.getDirection()?new Selection(this.startLineNumber,this.startColumn,endLineNumber,endColumn):new Selection(endLineNumber,endColumn,this.startLineNumber,this.startColumn)}
/**
     * Get the position at `positionLineNumber` and `positionColumn`.
     */getPosition(){return new _position_js__WEBPACK_IMPORTED_MODULE_1__/* .Position */.L(this.positionLineNumber,this.positionColumn)}
/**
     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.
     */setStartPosition(startLineNumber,startColumn){return 0/* LTR */===this.getDirection()?new Selection(startLineNumber,startColumn,this.endLineNumber,this.endColumn):new Selection(this.endLineNumber,this.endColumn,startLineNumber,startColumn)}
// ----
/**
     * Create a `Selection` from one or two positions
     */
static fromPositions(start,end=start){return new Selection(start.lineNumber,start.column,end.lineNumber,end.column)}
/**
     * Create a `Selection` from an `ISelection`.
     */static liftSelection(sel){return new Selection(sel.selectionStartLineNumber,sel.selectionStartColumn,sel.positionLineNumber,sel.positionColumn)}
/**
     * `a` equals `b`.
     */static selectionsArrEqual(a,b){if(a&&!b||!a&&b)return!1;if(!a&&!b)return!0;if(a.length!==b.length)return!1;for(let i=0,len=a.length;i<len;i++)if(!this.selectionsEqual(a[i],b[i]))return!1;return!0}
/**
     * Test if `obj` is an `ISelection`.
     */static isISelection(obj){return obj&&"number"===typeof obj.selectionStartLineNumber&&"number"===typeof obj.selectionStartColumn&&"number"===typeof obj.positionLineNumber&&"number"===typeof obj.positionColumn}
/**
     * Create with a direction.
     */static createWithDirection(startLineNumber,startColumn,endLineNumber,endColumn,direction){return 0/* LTR */===direction?new Selection(startLineNumber,startColumn,endLineNumber,endColumn):new Selection(endLineNumber,endColumn,startLineNumber,startColumn)}}
/***/},
/***/150072:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */kH:function(){/* binding */return decodeUTF16LE},
/* harmony export */l$:function(){/* binding */return createStringBuilder},
/* harmony export */lZ:function(){/* binding */return hasTextDecoder},
/* harmony export */oe:function(){/* binding */return getPlatformTextDecoder}
/* harmony export */});
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295),_base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(901432),_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(153060);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
let _utf16LE_TextDecoder,_utf16BE_TextDecoder,_platformTextDecoder;function getUTF16LE_TextDecoder(){return _utf16LE_TextDecoder||(_utf16LE_TextDecoder=new TextDecoder("UTF-16LE")),_utf16LE_TextDecoder}function getUTF16BE_TextDecoder(){return _utf16BE_TextDecoder||(_utf16BE_TextDecoder=new TextDecoder("UTF-16BE")),_utf16BE_TextDecoder}function getPlatformTextDecoder(){return _platformTextDecoder||(_platformTextDecoder=_base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__/* .isLittleEndian */.r()?getUTF16LE_TextDecoder():getUTF16BE_TextDecoder()),_platformTextDecoder}const hasTextDecoder="undefined"!==typeof TextDecoder;let createStringBuilder,decodeUTF16LE;function standardDecodeUTF16LE(source,offset,len){const view=new Uint16Array(source.buffer,offset,len);return len>0&&(65279===view[0]||65534===view[0])?compatDecodeUTF16LE(source,offset,len):getUTF16LE_TextDecoder().decode(view)}function compatDecodeUTF16LE(source,offset,len){let result=[],resultLen=0;for(let i=0;i<len;i++){const charCode=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_2__/* .readUInt16LE */.mP(source,offset);offset+=2,result[resultLen++]=String.fromCharCode(charCode)}return result.join("")}hasTextDecoder?(createStringBuilder=capacity=>new StringBuilder(capacity),decodeUTF16LE=standardDecodeUTF16LE):(createStringBuilder=capacity=>new CompatStringBuilder,decodeUTF16LE=compatDecodeUTF16LE);class StringBuilder{constructor(capacity){this._capacity=0|capacity,this._buffer=new Uint16Array(this._capacity),this._completedStrings=null,this._bufferLength=0}reset(){this._completedStrings=null,this._bufferLength=0}build(){return null!==this._completedStrings?(this._flushBuffer(),this._completedStrings.join("")):this._buildBuffer()}_buildBuffer(){if(0===this._bufferLength)return"";const view=new Uint16Array(this._buffer.buffer,0,this._bufferLength);return getPlatformTextDecoder().decode(view)}_flushBuffer(){const bufferString=this._buildBuffer();this._bufferLength=0,null===this._completedStrings?this._completedStrings=[bufferString]:this._completedStrings[this._completedStrings.length]=bufferString}write1(charCode){const remainingSpace=this._capacity-this._bufferLength;remainingSpace<=1&&(0===remainingSpace||_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isHighSurrogate */.ZG(charCode))&&this._flushBuffer(),this._buffer[this._bufferLength++]=charCode}appendASCII(charCode){this._bufferLength===this._capacity&&
// buffer is full
this._flushBuffer(),this._buffer[this._bufferLength++]=charCode}appendASCIIString(str){const strLen=str.length;if(this._bufferLength+strLen>=this._capacity)
// This string does not fit in the remaining buffer space
return this._flushBuffer(),void(this._completedStrings[this._completedStrings.length]=str);for(let i=0;i<strLen;i++)this._buffer[this._bufferLength++]=str.charCodeAt(i)}}class CompatStringBuilder{constructor(){this._pieces=[],this._piecesLen=0}reset(){this._pieces=[],this._piecesLen=0}build(){return this._pieces.join("")}write1(charCode){this._pieces[this._piecesLen++]=String.fromCharCode(charCode)}appendASCII(charCode){this._pieces[this._piecesLen++]=String.fromCharCode(charCode)}appendASCIIString(str){this._pieces[this._piecesLen++]=str}}
/***/},
/***/85600:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */Hi:function(){/* binding */return TokenizationResult2},
/* harmony export */WU:function(){/* binding */return Token},
/* harmony export */hG:function(){/* binding */return TokenizationResult}
/* harmony export */});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class Token{constructor(offset,type,language){this._tokenBrand=void 0,this.offset=0|offset,// @perf
this.type=type,this.language=language}toString(){return"("+this.offset+", "+this.type+")"}}class TokenizationResult{constructor(tokens,endState){this._tokenizationResultBrand=void 0,this.tokens=tokens,this.endState=endState}}class TokenizationResult2{constructor(tokens,endState){this._tokenizationResult2Brand=void 0,this.tokens=tokens,this.endState=endState}}
/***/},
/***/230653:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */p:function(){/* binding */return InternalEditorAction}
/* harmony export */});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class InternalEditorAction{constructor(id,label,alias,precondition,run,contextKeyService){this.id=id,this.label=label,this.alias=alias,this._precondition=precondition,this._run=run,this._contextKeyService=contextKeyService}isSupported(){return this._contextKeyService.contextMatchesRules(this._precondition)}run(){return this.isSupported()?this._run():Promise.resolve(void 0)}}
/***/},
/***/296518:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/**
 * @internal
 */
function isThemeColor(o){return o&&"string"===typeof o.id}
/**
 * The type of the `IEditor`.
 */
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */I:function(){/* binding */return isThemeColor},
/* harmony export */g:function(){/* binding */return EditorType}
/* harmony export */});const EditorType={ICodeEditor:"vs.editor.ICodeEditor",IDiffEditor:"vs.editor.IDiffEditor"};
/***/},
/***/29102:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */u:function(){/* binding */return EditorContextKeys}
/* harmony export */});
/* harmony import */var EditorContextKeys,_nls_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(663580),_platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(938819);
/* harmony import */(function(EditorContextKeys){EditorContextKeys.editorSimpleInput=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorSimpleInput",!1,!0),
/**
     * A context key that is set when the editor's text has focus (cursor is blinking).
     * Is false when focus is in simple editor widgets (repl input, scm commit input).
     */
EditorContextKeys.editorTextFocus=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorTextFocus",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorTextFocus","Whether the editor text has focus (cursor is blinking)")),
/**
     * A context key that is set when the editor's text or an editor's widget has focus.
     */
EditorContextKeys.focus=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorFocus",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorFocus","Whether the editor or an editor widget has focus (e.g. focus is in the find widget)")),
/**
     * A context key that is set when any editor input has focus (regular editor, repl input...).
     */
EditorContextKeys.textInputFocus=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("textInputFocus",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("textInputFocus","Whether an editor or a rich text input has focus (cursor is blinking)")),EditorContextKeys.readOnly=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorReadonly",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorReadonly","Whether the editor is read only")),EditorContextKeys.inDiffEditor=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("inDiffEditor",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("inDiffEditor","Whether the context is a diff editor")),EditorContextKeys.columnSelection=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorColumnSelection",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorColumnSelection","Whether `editor.columnSelection` is enabled")),EditorContextKeys.writable=EditorContextKeys.readOnly.toNegated(),EditorContextKeys.hasNonEmptySelection=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasSelection",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasSelection","Whether the editor has text selected")),EditorContextKeys.hasOnlyEmptySelection=EditorContextKeys.hasNonEmptySelection.toNegated(),EditorContextKeys.hasMultipleSelections=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasMultipleSelections",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasMultipleSelections","Whether the editor has multiple selections")),EditorContextKeys.hasSingleSelection=EditorContextKeys.hasMultipleSelections.toNegated(),EditorContextKeys.tabMovesFocus=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorTabMovesFocus",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorTabMovesFocus","Whether `Tab` will move focus out of the editor")),EditorContextKeys.tabDoesNotMoveFocus=EditorContextKeys.tabMovesFocus.toNegated(),EditorContextKeys.isInWalkThroughSnippet=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("isInEmbeddedEditor",!1,!0),EditorContextKeys.canUndo=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("canUndo",!1,!0),EditorContextKeys.canRedo=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("canRedo",!1,!0),EditorContextKeys.hoverVisible=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHoverVisible",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHoverVisible","Whether the editor hover is visible")),
/**
     * A context key that is set when an editor is part of a larger editor, like notebooks or
     * (future) a diff editor
     */
EditorContextKeys.inCompositeEditor=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("inCompositeEditor",void 0,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("inCompositeEditor","Whether the editor is part of a larger editor (e.g. notebooks)")),EditorContextKeys.notInCompositeEditor=EditorContextKeys.inCompositeEditor.toNegated(),
// -- mode context keys
EditorContextKeys.languageId=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorLangId","",_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorLangId","The language identifier of the editor")),EditorContextKeys.hasCompletionItemProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasCompletionItemProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasCompletionItemProvider","Whether the editor has a completion item provider")),EditorContextKeys.hasCodeActionsProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasCodeActionsProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasCodeActionsProvider","Whether the editor has a code actions provider")),EditorContextKeys.hasCodeLensProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasCodeLensProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasCodeLensProvider","Whether the editor has a code lens provider")),EditorContextKeys.hasDefinitionProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasDefinitionProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasDefinitionProvider","Whether the editor has a definition provider")),EditorContextKeys.hasDeclarationProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasDeclarationProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasDeclarationProvider","Whether the editor has a declaration provider")),EditorContextKeys.hasImplementationProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasImplementationProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasImplementationProvider","Whether the editor has an implementation provider")),EditorContextKeys.hasTypeDefinitionProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasTypeDefinitionProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasTypeDefinitionProvider","Whether the editor has a type definition provider")),EditorContextKeys.hasHoverProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasHoverProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasHoverProvider","Whether the editor has a hover provider")),EditorContextKeys.hasDocumentHighlightProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasDocumentHighlightProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasDocumentHighlightProvider","Whether the editor has a document highlight provider")),EditorContextKeys.hasDocumentSymbolProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasDocumentSymbolProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasDocumentSymbolProvider","Whether the editor has a document symbol provider")),EditorContextKeys.hasReferenceProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasReferenceProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasReferenceProvider","Whether the editor has a reference provider")),EditorContextKeys.hasRenameProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasRenameProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasRenameProvider","Whether the editor has a rename provider")),EditorContextKeys.hasSignatureHelpProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasSignatureHelpProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasSignatureHelpProvider","Whether the editor has a signature help provider")),EditorContextKeys.hasInlayHintsProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasInlayHintsProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasInlayHintsProvider","Whether the editor has an inline hints provider")),
// -- mode context keys: formatting
EditorContextKeys.hasDocumentFormattingProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasDocumentFormattingProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasDocumentFormattingProvider","Whether the editor has a document formatting provider")),EditorContextKeys.hasDocumentSelectionFormattingProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasDocumentSelectionFormattingProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasDocumentSelectionFormattingProvider","Whether the editor has a document selection formatting provider")),EditorContextKeys.hasMultipleDocumentFormattingProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasMultipleDocumentFormattingProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasMultipleDocumentFormattingProvider","Whether the editor has multiple document formatting providers")),EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider=new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__/* .RawContextKey */.uy("editorHasMultipleDocumentSelectionFormattingProvider",!1,_nls_js__WEBPACK_IMPORTED_MODULE_1__/* .localize */.N("editorHasMultipleDocumentSelectionFormattingProvider","Whether the editor has multiple document selection formatting providers"))})(EditorContextKeys||(EditorContextKeys={}))},
/***/984973:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */F5:function(){/* binding */return MinimapPosition},
/* harmony export */Qi:function(){/* binding */return ValidAnnotatedEditOperation},
/* harmony export */UO:function(){/* binding */return IndentGuide},
/* harmony export */dJ:function(){/* binding */return TextModelResolvedOptions},
/* harmony export */je:function(){/* binding */return ApplyEditsResult},
/* harmony export */s6:function(){/* binding */return HorizontalGuidesState},
/* harmony export */sh:function(){/* binding */return OverviewRulerLane},
/* harmony export */tk:function(){/* binding */return FindMatch},
/* harmony export */vW:function(){/* binding */return IndentGuideHorizontalLine}
/* harmony export */});
/* harmony import */var OverviewRulerLane,MinimapPosition,HorizontalGuidesState,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(936248);
/**
 * Vertical Lane in the overview ruler of the editor.
 */(function(OverviewRulerLane){OverviewRulerLane[OverviewRulerLane["Left"]=1]="Left",OverviewRulerLane[OverviewRulerLane["Center"]=2]="Center",OverviewRulerLane[OverviewRulerLane["Right"]=4]="Right",OverviewRulerLane[OverviewRulerLane["Full"]=7]="Full"})(OverviewRulerLane||(OverviewRulerLane={})),function(MinimapPosition){MinimapPosition[MinimapPosition["Inline"]=1]="Inline",MinimapPosition[MinimapPosition["Gutter"]=2]="Gutter"}(MinimapPosition||(MinimapPosition={}));class TextModelResolvedOptions{
/**
     * @internal
     */
constructor(src){this._textModelResolvedOptionsBrand=void 0,this.tabSize=Math.max(1,0|src.tabSize),this.indentSize=0|src.tabSize,this.insertSpaces=Boolean(src.insertSpaces),this.defaultEOL=0|src.defaultEOL,this.trimAutoWhitespace=Boolean(src.trimAutoWhitespace),this.bracketPairColorizationOptions=src.bracketPairColorizationOptions}
/**
     * @internal
     */equals(other){return this.tabSize===other.tabSize&&this.indentSize===other.indentSize&&this.insertSpaces===other.insertSpaces&&this.defaultEOL===other.defaultEOL&&this.trimAutoWhitespace===other.trimAutoWhitespace&&(0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__/* .equals */.fS)(this.bracketPairColorizationOptions,other.bracketPairColorizationOptions)}
/**
     * @internal
     */createChangeEvent(newOpts){return{tabSize:this.tabSize!==newOpts.tabSize,indentSize:this.indentSize!==newOpts.indentSize,insertSpaces:this.insertSpaces!==newOpts.insertSpaces,trimAutoWhitespace:this.trimAutoWhitespace!==newOpts.trimAutoWhitespace}}}class FindMatch{
/**
     * @internal
     */
constructor(range,matches){this._findMatchBrand=void 0,this.range=range,this.matches=matches}}
/**
 * @internal
 */(function(HorizontalGuidesState){HorizontalGuidesState[HorizontalGuidesState["Disabled"]=0]="Disabled",HorizontalGuidesState[HorizontalGuidesState["EnabledForActive"]=1]="EnabledForActive",HorizontalGuidesState[HorizontalGuidesState["Enabled"]=2]="Enabled"})(HorizontalGuidesState||(HorizontalGuidesState={}));
/**
 * @internal
 */
class IndentGuide{constructor(visibleColumn,className,
/**
     * If set, this indent guide is a horizontal guide (no vertical part).
     * It starts at visibleColumn and continues until endColumn.
    */
horizontalLine){this.visibleColumn=visibleColumn,this.className=className,this.horizontalLine=horizontalLine}}
/**
 * @internal
 */class IndentGuideHorizontalLine{constructor(top,endColumn){this.top=top,this.endColumn=endColumn}}
/**
 * @internal
 */class ValidAnnotatedEditOperation{constructor(identifier,range,text,forceMoveMarkers,isAutoWhitespaceEdit,_isTracked){this.identifier=identifier,this.range=range,this.text=text,this.forceMoveMarkers=forceMoveMarkers,this.isAutoWhitespaceEdit=isAutoWhitespaceEdit,this._isTracked=_isTracked}}
/**
 * @internal
 */class ApplyEditsResult{constructor(reverseEdits,changes,trimAutoWhitespaceLineNumbers){this.reverseEdits=reverseEdits,this.changes=changes,this.trimAutoWhitespaceLineNumbers=trimAutoWhitespaceLineNumbers}}
/***/},
/***/295215:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */NL:function(){/* binding */return EditStack},
/* harmony export */e9:function(){/* binding */return isEditStackElement}
/* harmony export */});
/* unused harmony exports SingleModelEditStackData, SingleModelEditStackElement, MultiModelEditStackElement */
/* harmony import */var _nls_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(663580),_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(817301),_core_selection_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(203860),_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(70666),_textChange_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(260962),_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(153060),_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(195935);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function uriGetComparisonKey(resource){return resource.toString()}class SingleModelEditStackData{constructor(beforeVersionId,afterVersionId,beforeEOL,afterEOL,beforeCursorState,afterCursorState,changes){this.beforeVersionId=beforeVersionId,this.afterVersionId=afterVersionId,this.beforeEOL=beforeEOL,this.afterEOL=afterEOL,this.beforeCursorState=beforeCursorState,this.afterCursorState=afterCursorState,this.changes=changes}static create(model,beforeCursorState){const alternativeVersionId=model.getAlternativeVersionId(),eol=getModelEOL(model);return new SingleModelEditStackData(alternativeVersionId,alternativeVersionId,eol,eol,beforeCursorState,beforeCursorState,[])}append(model,textChanges,afterEOL,afterVersionId,afterCursorState){textChanges.length>0&&(this.changes=(0,_textChange_js__WEBPACK_IMPORTED_MODULE_2__/* .compressConsecutiveTextChanges */.b)(this.changes,textChanges)),this.afterEOL=afterEOL,this.afterVersionId=afterVersionId,this.afterCursorState=afterCursorState}static _writeSelectionsSize(selections){return 4+16*(selections?selections.length:0)}static _writeSelections(b,selections,offset){if(_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .writeUInt32BE */.T4(b,selections?selections.length:0,offset),offset+=4,selections)for(const selection of selections)_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .writeUInt32BE */.T4(b,selection.selectionStartLineNumber,offset),offset+=4,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .writeUInt32BE */.T4(b,selection.selectionStartColumn,offset),offset+=4,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .writeUInt32BE */.T4(b,selection.positionLineNumber,offset),offset+=4,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .writeUInt32BE */.T4(b,selection.positionColumn,offset),offset+=4;return offset}static _readSelections(b,offset,dest){const count=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .readUInt32BE */.Ag(b,offset);offset+=4;for(let i=0;i<count;i++){const selectionStartLineNumber=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .readUInt32BE */.Ag(b,offset);offset+=4;const selectionStartColumn=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .readUInt32BE */.Ag(b,offset);offset+=4;const positionLineNumber=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .readUInt32BE */.Ag(b,offset);offset+=4;const positionColumn=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .readUInt32BE */.Ag(b,offset);offset+=4,dest.push(new _core_selection_js__WEBPACK_IMPORTED_MODULE_5__/* .Selection */.Y(selectionStartLineNumber,selectionStartColumn,positionLineNumber,positionColumn))}return offset}serialize(){let necessarySize=10+SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState)+SingleModelEditStackData._writeSelectionsSize(this.afterCursorState)+4;for(const change of this.changes)necessarySize+=change.writeSize();const b=new Uint8Array(necessarySize);let offset=0;_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .writeUInt32BE */.T4(b,this.beforeVersionId,offset),offset+=4,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .writeUInt32BE */.T4(b,this.afterVersionId,offset),offset+=4,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .writeUInt8 */.Cg(b,this.beforeEOL,offset),offset+=1,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .writeUInt8 */.Cg(b,this.afterEOL,offset),offset+=1,offset=SingleModelEditStackData._writeSelections(b,this.beforeCursorState,offset),offset=SingleModelEditStackData._writeSelections(b,this.afterCursorState,offset),_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .writeUInt32BE */.T4(b,this.changes.length,offset),offset+=4;for(const change of this.changes)offset=change.write(b,offset);return b.buffer}static deserialize(source){const b=new Uint8Array(source);let offset=0;const beforeVersionId=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .readUInt32BE */.Ag(b,offset);offset+=4;const afterVersionId=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .readUInt32BE */.Ag(b,offset);offset+=4;const beforeEOL=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .readUInt8 */.Q$(b,offset);offset+=1;const afterEOL=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .readUInt8 */.Q$(b,offset);offset+=1;const beforeCursorState=[];offset=SingleModelEditStackData._readSelections(b,offset,beforeCursorState);const afterCursorState=[];offset=SingleModelEditStackData._readSelections(b,offset,afterCursorState);const changeCount=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .readUInt32BE */.Ag(b,offset);offset+=4;const changes=[];for(let i=0;i<changeCount;i++)offset=_textChange_js__WEBPACK_IMPORTED_MODULE_2__/* .TextChange */.q.read(b,offset,changes);return new SingleModelEditStackData(beforeVersionId,afterVersionId,beforeEOL,afterEOL,beforeCursorState,afterCursorState,changes)}}class SingleModelEditStackElement{constructor(model,beforeCursorState){this.model=model,this._data=SingleModelEditStackData.create(model,beforeCursorState)}get type(){return 0/* Resource */}get resource(){return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__/* .URI */.o.isUri(this.model)?this.model:this.model.uri}get label(){return _nls_js__WEBPACK_IMPORTED_MODULE_6__/* .localize */.N("edit","Typing")}toString(){const data=this._data instanceof SingleModelEditStackData?this._data:SingleModelEditStackData.deserialize(this._data);return data.changes.map((change=>change.toString())).join(", ")}matchesResource(resource){const uri=_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__/* .URI */.o.isUri(this.model)?this.model:this.model.uri;return uri.toString()===resource.toString()}setModel(model){this.model=model}canAppend(model){return this.model===model&&this._data instanceof SingleModelEditStackData}append(model,textChanges,afterEOL,afterVersionId,afterCursorState){this._data instanceof SingleModelEditStackData&&this._data.append(model,textChanges,afterEOL,afterVersionId,afterCursorState)}close(){this._data instanceof SingleModelEditStackData&&(this._data=this._data.serialize())}open(){this._data instanceof SingleModelEditStackData||(this._data=SingleModelEditStackData.deserialize(this._data))}undo(){if(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__/* .URI */.o.isUri(this.model))
// don't have a model
throw new Error("Invalid SingleModelEditStackElement");this._data instanceof SingleModelEditStackData&&(this._data=this._data.serialize());const data=SingleModelEditStackData.deserialize(this._data);this.model._applyUndo(data.changes,data.beforeEOL,data.beforeVersionId,data.beforeCursorState)}redo(){if(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__/* .URI */.o.isUri(this.model))
// don't have a model
throw new Error("Invalid SingleModelEditStackElement");this._data instanceof SingleModelEditStackData&&(this._data=this._data.serialize());const data=SingleModelEditStackData.deserialize(this._data);this.model._applyRedo(data.changes,data.afterEOL,data.afterVersionId,data.afterCursorState)}heapSize(){return this._data instanceof SingleModelEditStackData&&(this._data=this._data.serialize()),this._data.byteLength+168/*heap overhead*/}}class MultiModelEditStackElement{constructor(label,editStackElements){this.type=1/* Workspace */,this.label=label,this._isOpen=!0,this._editStackElementsArr=editStackElements.slice(0),this._editStackElementsMap=new Map;for(const editStackElement of this._editStackElementsArr){const key=uriGetComparisonKey(editStackElement.resource);this._editStackElementsMap.set(key,editStackElement)}this._delegate=null}get resources(){return this._editStackElementsArr.map((editStackElement=>editStackElement.resource))}prepareUndoRedo(){if(this._delegate)return this._delegate.prepareUndoRedo(this)}matchesResource(resource){const key=uriGetComparisonKey(resource);return this._editStackElementsMap.has(key)}setModel(model){const key=uriGetComparisonKey(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__/* .URI */.o.isUri(model)?model:model.uri);this._editStackElementsMap.has(key)&&this._editStackElementsMap.get(key).setModel(model)}canAppend(model){if(!this._isOpen)return!1;const key=uriGetComparisonKey(model.uri);if(this._editStackElementsMap.has(key)){const editStackElement=this._editStackElementsMap.get(key);return editStackElement.canAppend(model)}return!1}append(model,textChanges,afterEOL,afterVersionId,afterCursorState){const key=uriGetComparisonKey(model.uri),editStackElement=this._editStackElementsMap.get(key);editStackElement.append(model,textChanges,afterEOL,afterVersionId,afterCursorState)}close(){this._isOpen=!1}open(){
// cannot reopen
}undo(){this._isOpen=!1;for(const editStackElement of this._editStackElementsArr)editStackElement.undo()}redo(){for(const editStackElement of this._editStackElementsArr)editStackElement.redo()}heapSize(resource){const key=uriGetComparisonKey(resource);if(this._editStackElementsMap.has(key)){const editStackElement=this._editStackElementsMap.get(key);return editStackElement.heapSize()}return 0}split(){return this._editStackElementsArr}toString(){let result=[];for(const editStackElement of this._editStackElementsArr)result.push(`${(0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__/* .basename */.EZ)(editStackElement.resource)}: ${editStackElement}`);return`{${result.join(", ")}}`}}function getModelEOL(model){const eol=model.getEOL();return"\n"===eol?0/* LF */:1/* CRLF */}function isEditStackElement(element){return!!element&&(element instanceof SingleModelEditStackElement||element instanceof MultiModelEditStackElement)}class EditStack{constructor(model,undoRedoService){this._model=model,this._undoRedoService=undoRedoService}pushStackElement(){const lastElement=this._undoRedoService.getLastElement(this._model.uri);isEditStackElement(lastElement)&&lastElement.close()}popStackElement(){const lastElement=this._undoRedoService.getLastElement(this._model.uri);isEditStackElement(lastElement)&&lastElement.open()}clear(){this._undoRedoService.removeElements(this._model.uri)}_getOrCreateEditStackElement(beforeCursorState){const lastElement=this._undoRedoService.getLastElement(this._model.uri);if(isEditStackElement(lastElement)&&lastElement.canAppend(this._model))return lastElement;const newElement=new SingleModelEditStackElement(this._model,beforeCursorState);return this._undoRedoService.pushElement(newElement),newElement}pushEOL(eol){const editStackElement=this._getOrCreateEditStackElement(null);this._model.setEOL(eol),editStackElement.append(this._model,[],getModelEOL(this._model),this._model.getAlternativeVersionId(),null)}pushEditOperation(beforeCursorState,editOperations,cursorStateComputer){const editStackElement=this._getOrCreateEditStackElement(beforeCursorState),inverseEditOperations=this._model.applyEdits(editOperations,!0),afterCursorState=EditStack._computeCursorState(cursorStateComputer,inverseEditOperations),textChanges=inverseEditOperations.map(((op,index)=>({index:index,textChange:op.textChange})));return textChanges.sort(((a,b)=>a.textChange.oldPosition===b.textChange.oldPosition?a.index-b.index:a.textChange.oldPosition-b.textChange.oldPosition)),editStackElement.append(this._model,textChanges.map((op=>op.textChange)),getModelEOL(this._model),this._model.getAlternativeVersionId(),afterCursorState),afterCursorState}static _computeCursorState(cursorStateComputer,inverseEditOperations){try{return cursorStateComputer?cursorStateComputer(inverseEditOperations):null}catch(e){return(0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__/* .onUnexpectedError */.dL)(e),null}}}
/***/},
/***/260962:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */b:function(){/* binding */return compressConsecutiveTextChanges},
/* harmony export */q:function(){/* binding */return TextChange}
/* harmony export */});
/* harmony import */var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(153060),_core_stringBuilder_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(150072);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function escapeNewLine(str){return str.replace(/\n/g,"\\n").replace(/\r/g,"\\r")}class TextChange{constructor(oldPosition,oldText,newPosition,newText){this.oldPosition=oldPosition,this.oldText=oldText,this.newPosition=newPosition,this.newText=newText}get oldLength(){return this.oldText.length}get oldEnd(){return this.oldPosition+this.oldText.length}get newLength(){return this.newText.length}get newEnd(){return this.newPosition+this.newText.length}toString(){return 0===this.oldText.length?`(insert@${this.oldPosition} "${escapeNewLine(this.newText)}")`:0===this.newText.length?`(delete@${this.oldPosition} "${escapeNewLine(this.oldText)}")`:`(replace@${this.oldPosition} "${escapeNewLine(this.oldText)}" with "${escapeNewLine(this.newText)}")`}static _writeStringSize(str){return 4+2*str.length}static _writeString(b,str,offset){const len=str.length;_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__/* .writeUInt32BE */.T4(b,len,offset),offset+=4;for(let i=0;i<len;i++)_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__/* .writeUInt16LE */.oq(b,str.charCodeAt(i),offset),offset+=2;return offset}static _readString(b,offset){const len=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__/* .readUInt32BE */.Ag(b,offset);return offset+=4,(0,_core_stringBuilder_js__WEBPACK_IMPORTED_MODULE_1__/* .decodeUTF16LE */.kH)(b,offset,len)}writeSize(){return 8+TextChange._writeStringSize(this.oldText)+TextChange._writeStringSize(this.newText)}write(b,offset){return _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__/* .writeUInt32BE */.T4(b,this.oldPosition,offset),offset+=4,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__/* .writeUInt32BE */.T4(b,this.newPosition,offset),offset+=4,offset=TextChange._writeString(b,this.oldText,offset),offset=TextChange._writeString(b,this.newText,offset),offset}static read(b,offset,dest){const oldPosition=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__/* .readUInt32BE */.Ag(b,offset);offset+=4;const newPosition=_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__/* .readUInt32BE */.Ag(b,offset);offset+=4;const oldText=TextChange._readString(b,offset);offset+=TextChange._writeStringSize(oldText);const newText=TextChange._readString(b,offset);return offset+=TextChange._writeStringSize(newText),dest.push(new TextChange(oldPosition,oldText,newPosition,newText)),offset}}function compressConsecutiveTextChanges(prevEdits,currEdits){if(null===prevEdits||0===prevEdits.length)return currEdits;const compressor=new TextChangeCompressor(prevEdits,currEdits);return compressor.compress()}class TextChangeCompressor{constructor(prevEdits,currEdits){this._prevEdits=prevEdits,this._currEdits=currEdits,this._result=[],this._resultLen=0,this._prevLen=this._prevEdits.length,this._prevDeltaOffset=0,this._currLen=this._currEdits.length,this._currDeltaOffset=0}compress(){let prevIndex=0,currIndex=0,prevEdit=this._getPrev(prevIndex),currEdit=this._getCurr(currIndex);while(prevIndex<this._prevLen||currIndex<this._currLen){if(null===prevEdit){this._acceptCurr(currEdit),currEdit=this._getCurr(++currIndex);continue}if(null===currEdit){this._acceptPrev(prevEdit),prevEdit=this._getPrev(++prevIndex);continue}if(currEdit.oldEnd<=prevEdit.newPosition){this._acceptCurr(currEdit),currEdit=this._getCurr(++currIndex);continue}if(prevEdit.newEnd<=currEdit.oldPosition){this._acceptPrev(prevEdit),prevEdit=this._getPrev(++prevIndex);continue}if(currEdit.oldPosition<prevEdit.newPosition){const[e1,e2]=TextChangeCompressor._splitCurr(currEdit,prevEdit.newPosition-currEdit.oldPosition);this._acceptCurr(e1),currEdit=e2;continue}if(prevEdit.newPosition<currEdit.oldPosition){const[e1,e2]=TextChangeCompressor._splitPrev(prevEdit,currEdit.oldPosition-prevEdit.newPosition);this._acceptPrev(e1),prevEdit=e2;continue}
// At this point, currEdit.oldPosition === prevEdit.newPosition
let mergePrev,mergeCurr;if(currEdit.oldEnd===prevEdit.newEnd)mergePrev=prevEdit,mergeCurr=currEdit,prevEdit=this._getPrev(++prevIndex),currEdit=this._getCurr(++currIndex);else if(currEdit.oldEnd<prevEdit.newEnd){const[e1,e2]=TextChangeCompressor._splitPrev(prevEdit,currEdit.oldLength);mergePrev=e1,mergeCurr=currEdit,prevEdit=e2,currEdit=this._getCurr(++currIndex)}else{const[e1,e2]=TextChangeCompressor._splitCurr(currEdit,prevEdit.newLength);mergePrev=prevEdit,mergeCurr=e1,prevEdit=this._getPrev(++prevIndex),currEdit=e2}this._result[this._resultLen++]=new TextChange(mergePrev.oldPosition,mergePrev.oldText,mergeCurr.newPosition,mergeCurr.newText),this._prevDeltaOffset+=mergePrev.newLength-mergePrev.oldLength,this._currDeltaOffset+=mergeCurr.newLength-mergeCurr.oldLength}const merged=TextChangeCompressor._merge(this._result),cleaned=TextChangeCompressor._removeNoOps(merged);return cleaned}_acceptCurr(currEdit){this._result[this._resultLen++]=TextChangeCompressor._rebaseCurr(this._prevDeltaOffset,currEdit),this._currDeltaOffset+=currEdit.newLength-currEdit.oldLength}_getCurr(currIndex){return currIndex<this._currLen?this._currEdits[currIndex]:null}_acceptPrev(prevEdit){this._result[this._resultLen++]=TextChangeCompressor._rebasePrev(this._currDeltaOffset,prevEdit),this._prevDeltaOffset+=prevEdit.newLength-prevEdit.oldLength}_getPrev(prevIndex){return prevIndex<this._prevLen?this._prevEdits[prevIndex]:null}static _rebaseCurr(prevDeltaOffset,currEdit){return new TextChange(currEdit.oldPosition-prevDeltaOffset,currEdit.oldText,currEdit.newPosition,currEdit.newText)}static _rebasePrev(currDeltaOffset,prevEdit){return new TextChange(prevEdit.oldPosition,prevEdit.oldText,prevEdit.newPosition+currDeltaOffset,prevEdit.newText)}static _splitPrev(edit,offset){const preText=edit.newText.substr(0,offset),postText=edit.newText.substr(offset);return[new TextChange(edit.oldPosition,edit.oldText,edit.newPosition,preText),new TextChange(edit.oldEnd,"",edit.newPosition+offset,postText)]}static _splitCurr(edit,offset){const preText=edit.oldText.substr(0,offset),postText=edit.oldText.substr(offset);return[new TextChange(edit.oldPosition,preText,edit.newPosition,edit.newText),new TextChange(edit.oldPosition+offset,postText,edit.newEnd,"")]}static _merge(edits){if(0===edits.length)return edits;let result=[],resultLen=0,prev=edits[0];for(let i=1;i<edits.length;i++){const curr=edits[i];prev.oldEnd===curr.oldPosition?
// Merge into `prev`
prev=new TextChange(prev.oldPosition,prev.oldText+curr.oldText,prev.newPosition,prev.newText+curr.newText):(result[resultLen++]=prev,prev=curr)}return result[resultLen++]=prev,result}static _removeNoOps(edits){if(0===edits.length)return edits;let result=[],resultLen=0;for(let i=0;i<edits.length;i++){const edit=edits[i];edit.oldText!==edit.newText&&(result[resultLen++]=edit)}return result}}
/***/},
/***/724979:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
// EXPORTS
__webpack_require__.d(__webpack_exports__,{WE:function(){/* binding */return BracketPairGuidesClassNames},qx:function(){/* binding */return ModelDecorationOptions},yO:function(){/* binding */return TextModel}});
// UNUSED EXPORTS: DidChangeContentEmitter, DidChangeDecorationsEmitter, LONG_LINE_BOUNDARY, ModelDecorationInjectedTextOptions, ModelDecorationMinimapOptions, ModelDecorationOverviewRulerOptions, createTextBuffer, createTextBufferFactory
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/errors.js
var errors=__webpack_require__(817301),common_event=__webpack_require__(104669),lifecycle=__webpack_require__(905976),strings=__webpack_require__(697295),uri=__webpack_require__(70666),editorOptions=__webpack_require__(364141),core_position=__webpack_require__(50187),core_range=__webpack_require__(624314),selection=__webpack_require__(203860),model=__webpack_require__(984973),editStack=__webpack_require__(295215);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/event.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/indentationGuesser.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class SpacesDiffResult{constructor(){this.spacesDiff=0,this.looksLikeAlignment=!1}}
/**
 * Compute the diff in spaces between two line's indentation.
 */function spacesDiff(a,aLength,b,bLength,result){
// This can go both ways (e.g.):
//  - a: "\t"
//  - b: "\t    "
//  => This should count 1 tab and 4 spaces
let i;for(result.spacesDiff=0,result.looksLikeAlignment=!1,i=0;i<aLength&&i<bLength;i++){let aCharCode=a.charCodeAt(i),bCharCode=b.charCodeAt(i);if(aCharCode!==bCharCode)break}let aSpacesCnt=0,aTabsCount=0;for(let j=i;j<aLength;j++){let aCharCode=a.charCodeAt(j);32/* Space */===aCharCode?aSpacesCnt++:aTabsCount++}let bSpacesCnt=0,bTabsCount=0;for(let j=i;j<bLength;j++){let bCharCode=b.charCodeAt(j);32/* Space */===bCharCode?bSpacesCnt++:bTabsCount++}if(aSpacesCnt>0&&aTabsCount>0)return;if(bSpacesCnt>0&&bTabsCount>0)return;let tabsDiff=Math.abs(aTabsCount-bTabsCount),spacesDiff=Math.abs(aSpacesCnt-bSpacesCnt);if(0===tabsDiff)
// check if the indentation difference might be caused by alignment reasons
// sometime folks like to align their code, but this should not be used as a hint
return result.spacesDiff=spacesDiff,void(spacesDiff>0&&0<=bSpacesCnt-1&&bSpacesCnt-1<a.length&&bSpacesCnt<b.length&&32/* Space */!==b.charCodeAt(bSpacesCnt)&&32/* Space */===a.charCodeAt(bSpacesCnt-1)&&44/* Comma */===a.charCodeAt(a.length-1)&&(
// This looks like an alignment desire: e.g.
// const a = b + c,
//       d = b - c;
result.looksLikeAlignment=!0));spacesDiff%tabsDiff!==0||(result.spacesDiff=spacesDiff/tabsDiff)}function guessIndentation(source,defaultTabSize,defaultInsertSpaces){
// Look at most at the first 10k lines
const linesCount=Math.min(source.getLineCount(),1e4);let linesIndentedWithTabsCount=0,linesIndentedWithSpacesCount=0,previousLineText="",previousLineIndentation=0;// number of lines that contain at least one tab in indentation
// index at which latest line contained the first non-whitespace char
const ALLOWED_TAB_SIZE_GUESSES=[2,4,6,8,3,5,7],MAX_ALLOWED_TAB_SIZE_GUESS=8;// prefer even guesses for `tabSize`, limit to [2, 8].
// max(ALLOWED_TAB_SIZE_GUESSES) = 8
let spacesDiffCount=[0,0,0,0,0,0,0,0,0],tmp=new SpacesDiffResult;// `tabSize` scores
for(let lineNumber=1;lineNumber<=linesCount;lineNumber++){let currentLineLength=source.getLineLength(lineNumber),currentLineText=source.getLineContent(lineNumber);
// if the text buffer is chunk based, so long lines are cons-string, v8 will flattern the string when we check charCode.
// checking charCode on chunks directly is cheaper.
const useCurrentLineText=currentLineLength<=65536;let currentLineHasContent=!1,currentLineIndentation=0,currentLineSpacesCount=0,currentLineTabsCount=0;// does `currentLineText` contain non-whitespace chars
// count of tabs found in `currentLineText` indentation
for(let j=0,lenJ=currentLineLength;j<lenJ;j++){let charCode=useCurrentLineText?currentLineText.charCodeAt(j):source.getLineCharCode(lineNumber,j);if(9/* Tab */===charCode)currentLineTabsCount++;else{if(32/* Space */!==charCode){
// Hit non whitespace character on this line
currentLineHasContent=!0,currentLineIndentation=j;break}currentLineSpacesCount++}}
// Ignore empty or only whitespace lines
if(!currentLineHasContent)continue;if(currentLineTabsCount>0?linesIndentedWithTabsCount++:currentLineSpacesCount>1&&linesIndentedWithSpacesCount++,spacesDiff(previousLineText,previousLineIndentation,currentLineText,currentLineIndentation,tmp),tmp.looksLikeAlignment&&(!defaultInsertSpaces||defaultTabSize!==tmp.spacesDiff))continue;let currentSpacesDiff=tmp.spacesDiff;currentSpacesDiff<=MAX_ALLOWED_TAB_SIZE_GUESS&&spacesDiffCount[currentSpacesDiff]++,previousLineText=currentLineText,previousLineIndentation=currentLineIndentation}let insertSpaces=defaultInsertSpaces;linesIndentedWithTabsCount!==linesIndentedWithSpacesCount&&(insertSpaces=linesIndentedWithTabsCount<linesIndentedWithSpacesCount);let tabSize=defaultTabSize;
// Guess tabSize only if inserting spaces...
if(insertSpaces){let tabSizeScore=insertSpaces?0:.1*linesCount;
// console.log("score threshold: " + tabSizeScore);
ALLOWED_TAB_SIZE_GUESSES.forEach((possibleTabSize=>{let possibleTabSizeScore=spacesDiffCount[possibleTabSize];possibleTabSizeScore>tabSizeScore&&(tabSizeScore=possibleTabSizeScore,tabSize=possibleTabSize)})),
// Let a tabSize of 2 win even if it is not the maximum
// (only in case 4 was guessed)
4===tabSize&&spacesDiffCount[4]>0&&spacesDiffCount[2]>0&&spacesDiffCount[2]>=spacesDiffCount[4]/2&&(tabSize=2)}
// console.log('--------------------------');
// console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);
// console.log('spacesDiffCount: ' + spacesDiffCount);
// console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);
return{insertSpaces:insertSpaces,tabSize:tabSize}}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/intervalTree.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function getNodeColor(node){return(1/* ColorMask */&node.metadata)>>>0/* ColorOffset */}function setNodeColor(node,color){node.metadata=254/* ColorMaskInverse */&node.metadata|color<<0/* ColorOffset */}function getNodeIsVisited(node){return(2/* IsVisitedMask */&node.metadata)>>>1/* IsVisitedOffset */===1}function setNodeIsVisited(node,value){node.metadata=253/* IsVisitedMaskInverse */&node.metadata|(value?1:0)<<1/* IsVisitedOffset */}function getNodeIsForValidation(node){return(4/* IsForValidationMask */&node.metadata)>>>2/* IsForValidationOffset */===1}function setNodeIsForValidation(node,value){node.metadata=251/* IsForValidationMaskInverse */&node.metadata|(value?1:0)<<2/* IsForValidationOffset */}function getNodeStickiness(node){return(24/* StickinessMask */&node.metadata)>>>3/* StickinessOffset */}function _setNodeStickiness(node,stickiness){node.metadata=231/* StickinessMaskInverse */&node.metadata|stickiness<<3/* StickinessOffset */}function getCollapseOnReplaceEdit(node){return(32/* CollapseOnReplaceEditMask */&node.metadata)>>>5/* CollapseOnReplaceEditOffset */===1}function setCollapseOnReplaceEdit(node,value){node.metadata=223/* CollapseOnReplaceEditMaskInverse */&node.metadata|(value?1:0)<<5/* CollapseOnReplaceEditOffset */}class IntervalNode{constructor(id,start,end){this.metadata=0,this.parent=this,this.left=this,this.right=this,setNodeColor(this,1/* Red */),this.start=start,this.end=end,
// FORCE_OVERFLOWING_TEST: this.delta = start;
this.delta=0,this.maxEnd=end,this.id=id,this.ownerId=0,this.options=null,setNodeIsForValidation(this,!1),_setNodeStickiness(this,1/* NeverGrowsWhenTypingAtEdges */),setCollapseOnReplaceEdit(this,!1),this.cachedVersionId=0,this.cachedAbsoluteStart=start,this.cachedAbsoluteEnd=end,this.range=null,setNodeIsVisited(this,!1)}reset(versionId,start,end,range){this.start=start,this.end=end,this.maxEnd=end,this.cachedVersionId=versionId,this.cachedAbsoluteStart=start,this.cachedAbsoluteEnd=end,this.range=range}setOptions(options){this.options=options;let className=this.options.className;setNodeIsForValidation(this,"squiggly-error"/* EditorErrorDecoration */===className||"squiggly-warning"/* EditorWarningDecoration */===className||"squiggly-info"/* EditorInfoDecoration */===className),_setNodeStickiness(this,this.options.stickiness),setCollapseOnReplaceEdit(this,this.options.collapseOnReplaceEdit)}setCachedOffsets(absoluteStart,absoluteEnd,cachedVersionId){this.cachedVersionId!==cachedVersionId&&(this.range=null),this.cachedVersionId=cachedVersionId,this.cachedAbsoluteStart=absoluteStart,this.cachedAbsoluteEnd=absoluteEnd}detach(){this.parent=null,this.left=null,this.right=null}}const SENTINEL=new IntervalNode(null,0,0);SENTINEL.parent=SENTINEL,SENTINEL.left=SENTINEL,SENTINEL.right=SENTINEL,setNodeColor(SENTINEL,0/* Black */);class IntervalTree{constructor(){this.root=SENTINEL,this.requestNormalizeDelta=!1}intervalSearch(start,end,filterOwnerId,filterOutValidation,cachedVersionId){return this.root===SENTINEL?[]:intervalSearch(this,start,end,filterOwnerId,filterOutValidation,cachedVersionId)}search(filterOwnerId,filterOutValidation,cachedVersionId){return this.root===SENTINEL?[]:search(this,filterOwnerId,filterOutValidation,cachedVersionId)}
/**
     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!
     */collectNodesFromOwner(ownerId){return collectNodesFromOwner(this,ownerId)}
/**
     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!
     */collectNodesPostOrder(){return collectNodesPostOrder(this)}insert(node){rbTreeInsert(this,node),this._normalizeDeltaIfNecessary()}delete(node){rbTreeDelete(this,node),this._normalizeDeltaIfNecessary()}resolveNode(node,cachedVersionId){const initialNode=node;let delta=0;while(node!==this.root)node===node.parent.right&&(delta+=node.parent.delta),node=node.parent;const nodeStart=initialNode.start+delta,nodeEnd=initialNode.end+delta;initialNode.setCachedOffsets(nodeStart,nodeEnd,cachedVersionId)}acceptReplace(offset,length,textLength,forceMoveMarkers){
// Our strategy is to remove all directly impacted nodes, and then add them back to the tree.
// (1) collect all nodes that are intersecting this edit as nodes of interest
const nodesOfInterest=searchForEditing(this,offset,offset+length);
// (2) remove all nodes that are intersecting this edit
for(let i=0,len=nodesOfInterest.length;i<len;i++){const node=nodesOfInterest[i];rbTreeDelete(this,node)}this._normalizeDeltaIfNecessary(),
// (3) edit all tree nodes except the nodes of interest
noOverlapReplace(this,offset,offset+length,textLength),this._normalizeDeltaIfNecessary();
// (4) edit the nodes of interest and insert them back in the tree
for(let i=0,len=nodesOfInterest.length;i<len;i++){const node=nodesOfInterest[i];node.start=node.cachedAbsoluteStart,node.end=node.cachedAbsoluteEnd,nodeAcceptEdit(node,offset,offset+length,textLength,forceMoveMarkers),node.maxEnd=node.end,rbTreeInsert(this,node)}this._normalizeDeltaIfNecessary()}_normalizeDeltaIfNecessary(){this.requestNormalizeDelta&&(this.requestNormalizeDelta=!1,normalizeDelta(this))}}
//#region Delta Normalization
function normalizeDelta(T){let node=T.root,delta=0;while(node!==SENTINEL)node.left===SENTINEL||getNodeIsVisited(node.left)?node.right===SENTINEL||getNodeIsVisited(node.right)?(
// handle current node
node.start=delta+node.start,node.end=delta+node.end,node.delta=0,recomputeMaxEnd(node),setNodeIsVisited(node,!0),
// going up from this node
setNodeIsVisited(node.left,!1),setNodeIsVisited(node.right,!1),node===node.parent.right&&(delta-=node.parent.delta),node=node.parent):(
// go right
delta+=node.delta,node=node.right):
// go left
node=node.left;setNodeIsVisited(T.root,!1)}function adjustMarkerBeforeColumn(markerOffset,markerStickToPreviousCharacter,checkOffset,moveSemantics){return markerOffset<checkOffset||!(markerOffset>checkOffset)&&(1/* ForceMove */!==moveSemantics&&(2/* ForceStay */===moveSemantics||markerStickToPreviousCharacter))}
/**
 * This is a lot more complicated than strictly necessary to maintain the same behaviour
 * as when decorations were implemented using two markers.
 */function nodeAcceptEdit(node,start,end,textLength,forceMoveMarkers){const nodeStickiness=getNodeStickiness(node),startStickToPreviousCharacter=0/* AlwaysGrowsWhenTypingAtEdges */===nodeStickiness||2/* GrowsOnlyWhenTypingBefore */===nodeStickiness,endStickToPreviousCharacter=1/* NeverGrowsWhenTypingAtEdges */===nodeStickiness||2/* GrowsOnlyWhenTypingBefore */===nodeStickiness,deletingCnt=end-start,insertingCnt=textLength,commonLength=Math.min(deletingCnt,insertingCnt),nodeStart=node.start;let startDone=!1;const nodeEnd=node.end;let endDone=!1;start<=nodeStart&&nodeEnd<=end&&getCollapseOnReplaceEdit(node)&&(
// This edit encompasses the entire decoration range
// and the decoration has asked to become collapsed
node.start=start,startDone=!0,node.end=start,endDone=!0);{const moveSemantics=forceMoveMarkers?1/* ForceMove */:deletingCnt>0?2/* ForceStay */:0/* MarkerDefined */;!startDone&&adjustMarkerBeforeColumn(nodeStart,startStickToPreviousCharacter,start,moveSemantics)&&(startDone=!0),!endDone&&adjustMarkerBeforeColumn(nodeEnd,endStickToPreviousCharacter,start,moveSemantics)&&(endDone=!0)}if(commonLength>0&&!forceMoveMarkers){const moveSemantics=deletingCnt>insertingCnt?2/* ForceStay */:0/* MarkerDefined */;!startDone&&adjustMarkerBeforeColumn(nodeStart,startStickToPreviousCharacter,start+commonLength,moveSemantics)&&(startDone=!0),!endDone&&adjustMarkerBeforeColumn(nodeEnd,endStickToPreviousCharacter,start+commonLength,moveSemantics)&&(endDone=!0)}{const moveSemantics=forceMoveMarkers?1/* ForceMove */:0/* MarkerDefined */;!startDone&&adjustMarkerBeforeColumn(nodeStart,startStickToPreviousCharacter,end,moveSemantics)&&(node.start=start+insertingCnt,startDone=!0),!endDone&&adjustMarkerBeforeColumn(nodeEnd,endStickToPreviousCharacter,end,moveSemantics)&&(node.end=start+insertingCnt,endDone=!0)}
// Finish
const deltaColumn=insertingCnt-deletingCnt;startDone||(node.start=Math.max(0,nodeStart+deltaColumn)),endDone||(node.end=Math.max(0,nodeEnd+deltaColumn)),node.start>node.end&&(node.end=node.start)}function searchForEditing(T,start,end){
// https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree
// Now, it is known that two intervals A and B overlap only when both
// A.low <= B.high and A.high >= B.low. When searching the trees for
// nodes overlapping with a given interval, you can immediately skip:
//  a) all nodes to the right of nodes whose low value is past the end of the given interval.
//  b) all nodes that have their maximum 'high' value below the start of the given interval.
let node=T.root,delta=0,nodeMaxEnd=0,nodeStart=0,nodeEnd=0,result=[],resultLen=0;while(node!==SENTINEL)if(getNodeIsVisited(node))
// going up from this node
setNodeIsVisited(node.left,!1),setNodeIsVisited(node.right,!1),node===node.parent.right&&(delta-=node.parent.delta),node=node.parent;else{if(!getNodeIsVisited(node.left)){if(
// first time seeing this node
nodeMaxEnd=delta+node.maxEnd,nodeMaxEnd<start){
// cover case b) from above
// there is no need to search this node or its children
setNodeIsVisited(node,!0);continue}if(node.left!==SENTINEL){
// go left
node=node.left;continue}}
// handle current node
nodeStart=delta+node.start,nodeStart>end?
// cover case a) from above
// there is no need to search this node or its right subtree
setNodeIsVisited(node,!0):(nodeEnd=delta+node.end,nodeEnd>=start&&(node.setCachedOffsets(nodeStart,nodeEnd,0),result[resultLen++]=node),setNodeIsVisited(node,!0),node.right===SENTINEL||getNodeIsVisited(node.right)||(
// go right
delta+=node.delta,node=node.right))}return setNodeIsVisited(T.root,!1),result}function noOverlapReplace(T,start,end,textLength){
// https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree
// Now, it is known that two intervals A and B overlap only when both
// A.low <= B.high and A.high >= B.low. When searching the trees for
// nodes overlapping with a given interval, you can immediately skip:
//  a) all nodes to the right of nodes whose low value is past the end of the given interval.
//  b) all nodes that have their maximum 'high' value below the start of the given interval.
let node=T.root,delta=0,nodeMaxEnd=0,nodeStart=0;const editDelta=textLength-(end-start);while(node!==SENTINEL)if(getNodeIsVisited(node))
// going up from this node
setNodeIsVisited(node.left,!1),setNodeIsVisited(node.right,!1),node===node.parent.right&&(delta-=node.parent.delta),recomputeMaxEnd(node),node=node.parent;else{if(!getNodeIsVisited(node.left)){if(
// first time seeing this node
nodeMaxEnd=delta+node.maxEnd,nodeMaxEnd<start){
// cover case b) from above
// there is no need to search this node or its children
setNodeIsVisited(node,!0);continue}if(node.left!==SENTINEL){
// go left
node=node.left;continue}}
// handle current node
nodeStart=delta+node.start,nodeStart>end?(node.start+=editDelta,node.end+=editDelta,node.delta+=editDelta,(node.delta<-1073741824/* MIN_SAFE_DELTA */||node.delta>1073741824/* MAX_SAFE_DELTA */)&&(T.requestNormalizeDelta=!0),
// cover case a) from above
// there is no need to search this node or its right subtree
setNodeIsVisited(node,!0)):(setNodeIsVisited(node,!0),node.right===SENTINEL||getNodeIsVisited(node.right)||(
// go right
delta+=node.delta,node=node.right))}setNodeIsVisited(T.root,!1)}
//#endregion
//#region Searching
function collectNodesFromOwner(T,ownerId){let node=T.root,result=[],resultLen=0;while(node!==SENTINEL)getNodeIsVisited(node)?(
// going up from this node
setNodeIsVisited(node.left,!1),setNodeIsVisited(node.right,!1),node=node.parent):node.left===SENTINEL||getNodeIsVisited(node.left)?(
// handle current node
node.ownerId===ownerId&&(result[resultLen++]=node),setNodeIsVisited(node,!0),node.right===SENTINEL||getNodeIsVisited(node.right)||(
// go right
node=node.right)):
// go left
node=node.left;return setNodeIsVisited(T.root,!1),result}function collectNodesPostOrder(T){let node=T.root,result=[],resultLen=0;while(node!==SENTINEL)getNodeIsVisited(node)?(
// going up from this node
setNodeIsVisited(node.left,!1),setNodeIsVisited(node.right,!1),node=node.parent):node.left===SENTINEL||getNodeIsVisited(node.left)?node.right===SENTINEL||getNodeIsVisited(node.right)?(
// handle current node
result[resultLen++]=node,setNodeIsVisited(node,!0)):
// go right
node=node.right:
// go left
node=node.left;return setNodeIsVisited(T.root,!1),result}function search(T,filterOwnerId,filterOutValidation,cachedVersionId){let node=T.root,delta=0,nodeStart=0,nodeEnd=0,result=[],resultLen=0;while(node!==SENTINEL){if(getNodeIsVisited(node)){
// going up from this node
setNodeIsVisited(node.left,!1),setNodeIsVisited(node.right,!1),node===node.parent.right&&(delta-=node.parent.delta),node=node.parent;continue}if(node.left!==SENTINEL&&!getNodeIsVisited(node.left)){
// go left
node=node.left;continue}
// handle current node
nodeStart=delta+node.start,nodeEnd=delta+node.end,node.setCachedOffsets(nodeStart,nodeEnd,cachedVersionId);let include=!0;filterOwnerId&&node.ownerId&&node.ownerId!==filterOwnerId&&(include=!1),filterOutValidation&&getNodeIsForValidation(node)&&(include=!1),include&&(result[resultLen++]=node),setNodeIsVisited(node,!0),node.right===SENTINEL||getNodeIsVisited(node.right)||(
// go right
delta+=node.delta,node=node.right)}return setNodeIsVisited(T.root,!1),result}function intervalSearch(T,intervalStart,intervalEnd,filterOwnerId,filterOutValidation,cachedVersionId){
// https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree
// Now, it is known that two intervals A and B overlap only when both
// A.low <= B.high and A.high >= B.low. When searching the trees for
// nodes overlapping with a given interval, you can immediately skip:
//  a) all nodes to the right of nodes whose low value is past the end of the given interval.
//  b) all nodes that have their maximum 'high' value below the start of the given interval.
let node=T.root,delta=0,nodeMaxEnd=0,nodeStart=0,nodeEnd=0,result=[],resultLen=0;while(node!==SENTINEL)if(getNodeIsVisited(node))
// going up from this node
setNodeIsVisited(node.left,!1),setNodeIsVisited(node.right,!1),node===node.parent.right&&(delta-=node.parent.delta),node=node.parent;else{if(!getNodeIsVisited(node.left)){if(
// first time seeing this node
nodeMaxEnd=delta+node.maxEnd,nodeMaxEnd<intervalStart){
// cover case b) from above
// there is no need to search this node or its children
setNodeIsVisited(node,!0);continue}if(node.left!==SENTINEL){
// go left
node=node.left;continue}}
// handle current node
if(nodeStart=delta+node.start,nodeStart>intervalEnd)
// cover case a) from above
// there is no need to search this node or its right subtree
setNodeIsVisited(node,!0);else{if(nodeEnd=delta+node.end,nodeEnd>=intervalStart){
// There is overlap
node.setCachedOffsets(nodeStart,nodeEnd,cachedVersionId);let include=!0;filterOwnerId&&node.ownerId&&node.ownerId!==filterOwnerId&&(include=!1),filterOutValidation&&getNodeIsForValidation(node)&&(include=!1),include&&(result[resultLen++]=node)}setNodeIsVisited(node,!0),node.right===SENTINEL||getNodeIsVisited(node.right)||(
// go right
delta+=node.delta,node=node.right)}}return setNodeIsVisited(T.root,!1),result}
//#endregion
//#region Insertion
function rbTreeInsert(T,newNode){if(T.root===SENTINEL)return newNode.parent=SENTINEL,newNode.left=SENTINEL,newNode.right=SENTINEL,setNodeColor(newNode,0/* Black */),T.root=newNode,T.root;treeInsert(T,newNode),recomputeMaxEndWalkToRoot(newNode.parent);
// repair tree
let x=newNode;while(x!==T.root&&1/* Red */===getNodeColor(x.parent))if(x.parent===x.parent.parent.left){const y=x.parent.parent.right;1/* Red */===getNodeColor(y)?(setNodeColor(x.parent,0/* Black */),setNodeColor(y,0/* Black */),setNodeColor(x.parent.parent,1/* Red */),x=x.parent.parent):(x===x.parent.right&&(x=x.parent,leftRotate(T,x)),setNodeColor(x.parent,0/* Black */),setNodeColor(x.parent.parent,1/* Red */),rightRotate(T,x.parent.parent))}else{const y=x.parent.parent.left;1/* Red */===getNodeColor(y)?(setNodeColor(x.parent,0/* Black */),setNodeColor(y,0/* Black */),setNodeColor(x.parent.parent,1/* Red */),x=x.parent.parent):(x===x.parent.left&&(x=x.parent,rightRotate(T,x)),setNodeColor(x.parent,0/* Black */),setNodeColor(x.parent.parent,1/* Red */),leftRotate(T,x.parent.parent))}return setNodeColor(T.root,0/* Black */),newNode}function treeInsert(T,z){let delta=0,x=T.root;const zAbsoluteStart=z.start,zAbsoluteEnd=z.end;while(1){const cmp=intervalCompare(zAbsoluteStart,zAbsoluteEnd,x.start+delta,x.end+delta);if(cmp<0){
// this node should be inserted to the left
// => it is not affected by the node's delta
if(x.left===SENTINEL){z.start-=delta,z.end-=delta,z.maxEnd-=delta,x.left=z;break}x=x.left}else{
// this node should be inserted to the right
// => it is not affected by the node's delta
if(x.right===SENTINEL){z.start-=delta+x.delta,z.end-=delta+x.delta,z.maxEnd-=delta+x.delta,x.right=z;break}delta+=x.delta,x=x.right}}z.parent=x,z.left=SENTINEL,z.right=SENTINEL,setNodeColor(z,1/* Red */)}
//#endregion
//#region Deletion
function rbTreeDelete(T,z){let x,y;if(
// RB-DELETE except we don't swap z and y in case c)
// i.e. we always delete what's pointed at by z.
z.left===SENTINEL?(x=z.right,y=z,
// x's delta is no longer influenced by z's delta
x.delta+=z.delta,(x.delta<-1073741824/* MIN_SAFE_DELTA */||x.delta>1073741824/* MAX_SAFE_DELTA */)&&(T.requestNormalizeDelta=!0),x.start+=z.delta,x.end+=z.delta):z.right===SENTINEL?(x=z.left,y=z):(y=leftest(z.right),x=y.right,
// y's delta is no longer influenced by z's delta,
// but we don't want to walk the entire right-hand-side subtree of x.
// we therefore maintain z's delta in y, and adjust only x
x.start+=y.delta,x.end+=y.delta,x.delta+=y.delta,(x.delta<-1073741824/* MIN_SAFE_DELTA */||x.delta>1073741824/* MAX_SAFE_DELTA */)&&(T.requestNormalizeDelta=!0),y.start+=z.delta,y.end+=z.delta,y.delta=z.delta,(y.delta<-1073741824/* MIN_SAFE_DELTA */||y.delta>1073741824/* MAX_SAFE_DELTA */)&&(T.requestNormalizeDelta=!0)),y===T.root)return T.root=x,setNodeColor(x,0/* Black */),z.detach(),resetSentinel(),recomputeMaxEnd(x),void(T.root.parent=SENTINEL);let w,yWasRed=1/* Red */===getNodeColor(y);if(y===y.parent.left?y.parent.left=x:y.parent.right=x,y===z?x.parent=y.parent:(y.parent===z?x.parent=y:x.parent=y.parent,y.left=z.left,y.right=z.right,y.parent=z.parent,setNodeColor(y,getNodeColor(z)),z===T.root?T.root=y:z===z.parent.left?z.parent.left=y:z.parent.right=y,y.left!==SENTINEL&&(y.left.parent=y),y.right!==SENTINEL&&(y.right.parent=y)),z.detach(),yWasRed)return recomputeMaxEndWalkToRoot(x.parent),y!==z&&(recomputeMaxEndWalkToRoot(y),recomputeMaxEndWalkToRoot(y.parent)),void resetSentinel();recomputeMaxEndWalkToRoot(x),recomputeMaxEndWalkToRoot(x.parent),y!==z&&(recomputeMaxEndWalkToRoot(y),recomputeMaxEndWalkToRoot(y.parent));while(x!==T.root&&0/* Black */===getNodeColor(x))x===x.parent.left?(w=x.parent.right,1/* Red */===getNodeColor(w)&&(setNodeColor(w,0/* Black */),setNodeColor(x.parent,1/* Red */),leftRotate(T,x.parent),w=x.parent.right),0/* Black */===getNodeColor(w.left)&&0/* Black */===getNodeColor(w.right)?(setNodeColor(w,1/* Red */),x=x.parent):(0/* Black */===getNodeColor(w.right)&&(setNodeColor(w.left,0/* Black */),setNodeColor(w,1/* Red */),rightRotate(T,w),w=x.parent.right),setNodeColor(w,getNodeColor(x.parent)),setNodeColor(x.parent,0/* Black */),setNodeColor(w.right,0/* Black */),leftRotate(T,x.parent),x=T.root)):(w=x.parent.left,1/* Red */===getNodeColor(w)&&(setNodeColor(w,0/* Black */),setNodeColor(x.parent,1/* Red */),rightRotate(T,x.parent),w=x.parent.left),0/* Black */===getNodeColor(w.left)&&0/* Black */===getNodeColor(w.right)?(setNodeColor(w,1/* Red */),x=x.parent):(0/* Black */===getNodeColor(w.left)&&(setNodeColor(w.right,0/* Black */),setNodeColor(w,1/* Red */),leftRotate(T,w),w=x.parent.left),setNodeColor(w,getNodeColor(x.parent)),setNodeColor(x.parent,0/* Black */),setNodeColor(w.left,0/* Black */),rightRotate(T,x.parent),x=T.root));setNodeColor(x,0/* Black */),resetSentinel()}function leftest(node){while(node.left!==SENTINEL)node=node.left;return node}function resetSentinel(){SENTINEL.parent=SENTINEL,SENTINEL.delta=0,// optional
SENTINEL.start=0,// optional
SENTINEL.end=0}
//#endregion
//#region Rotations
function leftRotate(T,x){const y=x.right;// set y.
y.delta+=x.delta,// y's delta is no longer influenced by x's delta
(y.delta<-1073741824/* MIN_SAFE_DELTA */||y.delta>1073741824/* MAX_SAFE_DELTA */)&&(T.requestNormalizeDelta=!0),y.start+=x.delta,y.end+=x.delta,x.right=y.left,// turn y's left subtree into x's right subtree.
y.left!==SENTINEL&&(y.left.parent=x),y.parent=x.parent,// link x's parent to y.
x.parent===SENTINEL?T.root=y:x===x.parent.left?x.parent.left=y:x.parent.right=y,y.left=x,// put x on y's left.
x.parent=y,recomputeMaxEnd(x),recomputeMaxEnd(y)}function rightRotate(T,y){const x=y.left;y.delta-=x.delta,(y.delta<-1073741824/* MIN_SAFE_DELTA */||y.delta>1073741824/* MAX_SAFE_DELTA */)&&(T.requestNormalizeDelta=!0),y.start-=x.delta,y.end-=x.delta,y.left=x.right,x.right!==SENTINEL&&(x.right.parent=y),x.parent=y.parent,y.parent===SENTINEL?T.root=x:y===y.parent.right?y.parent.right=x:y.parent.left=x,x.right=y,y.parent=x,recomputeMaxEnd(y),recomputeMaxEnd(x)}
//#endregion
//#region max end computation
function computeMaxEnd(node){let maxEnd=node.end;if(node.left!==SENTINEL){const leftMaxEnd=node.left.maxEnd;leftMaxEnd>maxEnd&&(maxEnd=leftMaxEnd)}if(node.right!==SENTINEL){const rightMaxEnd=node.right.maxEnd+node.delta;rightMaxEnd>maxEnd&&(maxEnd=rightMaxEnd)}return maxEnd}function recomputeMaxEnd(node){node.maxEnd=computeMaxEnd(node)}function recomputeMaxEndWalkToRoot(node){while(node!==SENTINEL){const maxEnd=computeMaxEnd(node);if(node.maxEnd===maxEnd)
// no need to go further
return;node.maxEnd=maxEnd,node=node.parent}}
//#endregion
//#region utils
function intervalCompare(aStart,aEnd,bStart,bEnd){return aStart===bStart?aEnd-bEnd:aStart-bStart}
//#endregion
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class TreeNode{constructor(piece,color){this.piece=piece,this.color=color,this.size_left=0,this.lf_left=0,this.parent=this,this.left=this,this.right=this}next(){if(this.right!==rbTreeBase_SENTINEL)return rbTreeBase_leftest(this.right);let node=this;while(node.parent!==rbTreeBase_SENTINEL){if(node.parent.left===node)break;node=node.parent}return node.parent===rbTreeBase_SENTINEL?rbTreeBase_SENTINEL:node.parent}prev(){if(this.left!==rbTreeBase_SENTINEL)return righttest(this.left);let node=this;while(node.parent!==rbTreeBase_SENTINEL){if(node.parent.right===node)break;node=node.parent}return node.parent===rbTreeBase_SENTINEL?rbTreeBase_SENTINEL:node.parent}detach(){this.parent=null,this.left=null,this.right=null}}const rbTreeBase_SENTINEL=new TreeNode(null,0/* Black */);function rbTreeBase_leftest(node){while(node.left!==rbTreeBase_SENTINEL)node=node.left;return node}function righttest(node){while(node.right!==rbTreeBase_SENTINEL)node=node.right;return node}function calculateSize(node){return node===rbTreeBase_SENTINEL?0:node.size_left+node.piece.length+calculateSize(node.right)}function calculateLF(node){return node===rbTreeBase_SENTINEL?0:node.lf_left+node.piece.lineFeedCnt+calculateLF(node.right)}function rbTreeBase_resetSentinel(){rbTreeBase_SENTINEL.parent=rbTreeBase_SENTINEL}function rbTreeBase_leftRotate(tree,x){let y=x.right;
// fix size_left
y.size_left+=x.size_left+(x.piece?x.piece.length:0),y.lf_left+=x.lf_left+(x.piece?x.piece.lineFeedCnt:0),x.right=y.left,y.left!==rbTreeBase_SENTINEL&&(y.left.parent=x),y.parent=x.parent,x.parent===rbTreeBase_SENTINEL?tree.root=y:x.parent.left===x?x.parent.left=y:x.parent.right=y,y.left=x,x.parent=y}function rbTreeBase_rightRotate(tree,y){let x=y.left;y.left=x.right,x.right!==rbTreeBase_SENTINEL&&(x.right.parent=y),x.parent=y.parent,
// fix size_left
y.size_left-=x.size_left+(x.piece?x.piece.length:0),y.lf_left-=x.lf_left+(x.piece?x.piece.lineFeedCnt:0),y.parent===rbTreeBase_SENTINEL?tree.root=x:y===y.parent.right?y.parent.right=x:y.parent.left=x,x.right=y,y.parent=x}function rbDelete(tree,z){let x,y;if(z.left===rbTreeBase_SENTINEL?(y=z,x=y.right):z.right===rbTreeBase_SENTINEL?(y=z,x=y.left):(y=rbTreeBase_leftest(z.right),x=y.right),y===tree.root)return tree.root=x,
// if x is null, we are removing the only node
x.color=0/* Black */,z.detach(),rbTreeBase_resetSentinel(),void(tree.root.parent=rbTreeBase_SENTINEL);let w,yWasRed=1/* Red */===y.color;if(y===y.parent.left?y.parent.left=x:y.parent.right=x,y===z?(x.parent=y.parent,recomputeTreeMetadata(tree,x)):(y.parent===z?x.parent=y:x.parent=y.parent,
// as we make changes to x's hierarchy, update size_left of subtree first
recomputeTreeMetadata(tree,x),y.left=z.left,y.right=z.right,y.parent=z.parent,y.color=z.color,z===tree.root?tree.root=y:z===z.parent.left?z.parent.left=y:z.parent.right=y,y.left!==rbTreeBase_SENTINEL&&(y.left.parent=y),y.right!==rbTreeBase_SENTINEL&&(y.right.parent=y),
// update metadata
// we replace z with y, so in this sub tree, the length change is z.item.length
y.size_left=z.size_left,y.lf_left=z.lf_left,recomputeTreeMetadata(tree,y)),z.detach(),x.parent.left===x){let newSizeLeft=calculateSize(x),newLFLeft=calculateLF(x);if(newSizeLeft!==x.parent.size_left||newLFLeft!==x.parent.lf_left){let delta=newSizeLeft-x.parent.size_left,lf_delta=newLFLeft-x.parent.lf_left;x.parent.size_left=newSizeLeft,x.parent.lf_left=newLFLeft,updateTreeMetadata(tree,x.parent,delta,lf_delta)}}if(recomputeTreeMetadata(tree,x.parent),yWasRed)rbTreeBase_resetSentinel();else{while(x!==tree.root&&0/* Black */===x.color)x===x.parent.left?(w=x.parent.right,1/* Red */===w.color&&(w.color=0/* Black */,x.parent.color=1/* Red */,rbTreeBase_leftRotate(tree,x.parent),w=x.parent.right),0/* Black */===w.left.color&&0/* Black */===w.right.color?(w.color=1/* Red */,x=x.parent):(0/* Black */===w.right.color&&(w.left.color=0/* Black */,w.color=1/* Red */,rbTreeBase_rightRotate(tree,w),w=x.parent.right),w.color=x.parent.color,x.parent.color=0/* Black */,w.right.color=0/* Black */,rbTreeBase_leftRotate(tree,x.parent),x=tree.root)):(w=x.parent.left,1/* Red */===w.color&&(w.color=0/* Black */,x.parent.color=1/* Red */,rbTreeBase_rightRotate(tree,x.parent),w=x.parent.left),0/* Black */===w.left.color&&0/* Black */===w.right.color?(w.color=1/* Red */,x=x.parent):(0/* Black */===w.left.color&&(w.right.color=0/* Black */,w.color=1/* Red */,rbTreeBase_leftRotate(tree,w),w=x.parent.left),w.color=x.parent.color,x.parent.color=0/* Black */,w.left.color=0/* Black */,rbTreeBase_rightRotate(tree,x.parent),x=tree.root));x.color=0/* Black */,rbTreeBase_resetSentinel()}
// RB-DELETE-FIXUP
}function fixInsert(tree,x){recomputeTreeMetadata(tree,x);while(x!==tree.root&&1/* Red */===x.parent.color)if(x.parent===x.parent.parent.left){const y=x.parent.parent.right;1/* Red */===y.color?(x.parent.color=0/* Black */,y.color=0/* Black */,x.parent.parent.color=1/* Red */,x=x.parent.parent):(x===x.parent.right&&(x=x.parent,rbTreeBase_leftRotate(tree,x)),x.parent.color=0/* Black */,x.parent.parent.color=1/* Red */,rbTreeBase_rightRotate(tree,x.parent.parent))}else{const y=x.parent.parent.left;1/* Red */===y.color?(x.parent.color=0/* Black */,y.color=0/* Black */,x.parent.parent.color=1/* Red */,x=x.parent.parent):(x===x.parent.left&&(x=x.parent,rbTreeBase_rightRotate(tree,x)),x.parent.color=0/* Black */,x.parent.parent.color=1/* Red */,rbTreeBase_leftRotate(tree,x.parent.parent))}tree.root.color=0/* Black */}function updateTreeMetadata(tree,x,delta,lineFeedCntDelta){
// node length change or line feed count change
while(x!==tree.root&&x!==rbTreeBase_SENTINEL)x.parent.left===x&&(x.parent.size_left+=delta,x.parent.lf_left+=lineFeedCntDelta),x=x.parent}function recomputeTreeMetadata(tree,x){let delta=0,lf_delta=0;if(x!==tree.root){
// go upwards till the node whose left subtree is changed.
while(x!==tree.root&&x===x.parent.right)x=x.parent;if(x!==tree.root){
// x is the node whose right subtree is changed.
x=x.parent,delta=calculateSize(x.left)-x.size_left,lf_delta=calculateLF(x.left)-x.lf_left,x.size_left+=delta,x.lf_left+=lf_delta;
// go upwards till root. O(logN)
while(x!==tree.root&&(0!==delta||0!==lf_delta))x.parent.left===x&&(x.parent.size_left+=delta,x.parent.lf_left+=lf_delta),x=x.parent}}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js
rbTreeBase_SENTINEL.parent=rbTreeBase_SENTINEL,rbTreeBase_SENTINEL.left=rbTreeBase_SENTINEL,rbTreeBase_SENTINEL.right=rbTreeBase_SENTINEL,rbTreeBase_SENTINEL.color=0/* Black */;var textModelSearch=__webpack_require__(177277);// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// const lfRegex = new RegExp(/\r\n|\r|\n/g);
const AverageBufferSize=65535;function createUintArray(arr){let r;return r=arr[arr.length-1]<65536?new Uint16Array(arr.length):new Uint32Array(arr.length),r.set(arr,0),r}class LineStarts{constructor(lineStarts,cr,lf,crlf,isBasicASCII){this.lineStarts=lineStarts,this.cr=cr,this.lf=lf,this.crlf=crlf,this.isBasicASCII=isBasicASCII}}function createLineStartsFast(str,readonly=!0){let r=[0],rLength=1;for(let i=0,len=str.length;i<len;i++){const chr=str.charCodeAt(i);13/* CarriageReturn */===chr?i+1<len&&10/* LineFeed */===str.charCodeAt(i+1)?(
// \r\n... case
r[rLength++]=i+2,i++):
// \r... case
r[rLength++]=i+1:10/* LineFeed */===chr&&(r[rLength++]=i+1)}return readonly?createUintArray(r):r}function createLineStarts(r,str){r.length=0,r[0]=0;let rLength=1,cr=0,lf=0,crlf=0,isBasicASCII=!0;for(let i=0,len=str.length;i<len;i++){const chr=str.charCodeAt(i);13/* CarriageReturn */===chr?i+1<len&&10/* LineFeed */===str.charCodeAt(i+1)?(
// \r\n... case
crlf++,r[rLength++]=i+2,i++):(cr++,
// \r... case
r[rLength++]=i+1):10/* LineFeed */===chr?(lf++,r[rLength++]=i+1):isBasicASCII&&9/* Tab */!==chr&&(chr<32||chr>126)&&(isBasicASCII=!1)}const result=new LineStarts(createUintArray(r),cr,lf,crlf,isBasicASCII);return r.length=0,result}class Piece{constructor(bufferIndex,start,end,lineFeedCnt,length){this.bufferIndex=bufferIndex,this.start=start,this.end=end,this.lineFeedCnt=lineFeedCnt,this.length=length}}class StringBuffer{constructor(buffer,lineStarts){this.buffer=buffer,this.lineStarts=lineStarts}}
/**
 * Readonly snapshot for piece tree.
 * In a real multiple thread environment, to make snapshot reading always work correctly, we need to
 * 1. Make TreeNode.piece immutable, then reading and writing can run in parallel.
 * 2. TreeNode/Buffers normalization should not happen during snapshot reading.
 */class PieceTreeSnapshot{constructor(tree,BOM){this._pieces=[],this._tree=tree,this._BOM=BOM,this._index=0,tree.root!==rbTreeBase_SENTINEL&&tree.iterate(tree.root,(node=>(node!==rbTreeBase_SENTINEL&&this._pieces.push(node.piece),!0)))}read(){return 0===this._pieces.length?0===this._index?(this._index++,this._BOM):null:this._index>this._pieces.length-1?null:0===this._index?this._BOM+this._tree.getPieceContent(this._pieces[this._index++]):this._tree.getPieceContent(this._pieces[this._index++])}}class PieceTreeSearchCache{constructor(limit){this._limit=limit,this._cache=[]}get(offset){for(let i=this._cache.length-1;i>=0;i--){let nodePos=this._cache[i];if(nodePos.nodeStartOffset<=offset&&nodePos.nodeStartOffset+nodePos.node.piece.length>=offset)return nodePos}return null}get2(lineNumber){for(let i=this._cache.length-1;i>=0;i--){let nodePos=this._cache[i];if(nodePos.nodeStartLineNumber&&nodePos.nodeStartLineNumber<lineNumber&&nodePos.nodeStartLineNumber+nodePos.node.piece.lineFeedCnt>=lineNumber)return nodePos}return null}set(nodePosition){this._cache.length>=this._limit&&this._cache.shift(),this._cache.push(nodePosition)}validate(offset){let hasInvalidVal=!1,tmp=this._cache;for(let i=0;i<tmp.length;i++){let nodePos=tmp[i];(null===nodePos.node.parent||nodePos.nodeStartOffset>=offset)&&(tmp[i]=null,hasInvalidVal=!0)}if(hasInvalidVal){let newArr=[];for(const entry of tmp)null!==entry&&newArr.push(entry);this._cache=newArr}}}class PieceTreeBase{constructor(chunks,eol,eolNormalized){this.create(chunks,eol,eolNormalized)}create(chunks,eol,eolNormalized){this._buffers=[new StringBuffer("",[0])],this._lastChangeBufferPos={line:0,column:0},this.root=rbTreeBase_SENTINEL,this._lineCnt=1,this._length=0,this._EOL=eol,this._EOLLength=eol.length,this._EOLNormalized=eolNormalized;let lastNode=null;for(let i=0,len=chunks.length;i<len;i++)if(chunks[i].buffer.length>0){chunks[i].lineStarts||(chunks[i].lineStarts=createLineStartsFast(chunks[i].buffer));let piece=new Piece(i+1,{line:0,column:0},{line:chunks[i].lineStarts.length-1,column:chunks[i].buffer.length-chunks[i].lineStarts[chunks[i].lineStarts.length-1]},chunks[i].lineStarts.length-1,chunks[i].buffer.length);this._buffers.push(chunks[i]),lastNode=this.rbInsertRight(lastNode,piece)}this._searchCache=new PieceTreeSearchCache(1),this._lastVisitedLine={lineNumber:0,value:""},this.computeBufferMetadata()}normalizeEOL(eol){let averageBufferSize=AverageBufferSize,min=averageBufferSize-Math.floor(averageBufferSize/3),max=2*min,tempChunk="",tempChunkLen=0,chunks=[];if(this.iterate(this.root,(node=>{let str=this.getNodeContent(node),len=str.length;if(tempChunkLen<=min||tempChunkLen+len<max)return tempChunk+=str,tempChunkLen+=len,!0;
// flush anyways
let text=tempChunk.replace(/\r\n|\r|\n/g,eol);return chunks.push(new StringBuffer(text,createLineStartsFast(text))),tempChunk=str,tempChunkLen=len,!0})),tempChunkLen>0){let text=tempChunk.replace(/\r\n|\r|\n/g,eol);chunks.push(new StringBuffer(text,createLineStartsFast(text)))}this.create(chunks,eol,!0)}
// #region Buffer API
getEOL(){return this._EOL}setEOL(newEOL){this._EOL=newEOL,this._EOLLength=this._EOL.length,this.normalizeEOL(newEOL)}createSnapshot(BOM){return new PieceTreeSnapshot(this,BOM)}getOffsetAt(lineNumber,column){let leftLen=0,x=this.root;// inorder
while(x!==rbTreeBase_SENTINEL)if(x.left!==rbTreeBase_SENTINEL&&x.lf_left+1>=lineNumber)x=x.left;else{if(x.lf_left+x.piece.lineFeedCnt+1>=lineNumber){leftLen+=x.size_left;
// lineNumber >= 2
let accumualtedValInCurrentIndex=this.getAccumulatedValue(x,lineNumber-x.lf_left-2);return leftLen+(accumualtedValInCurrentIndex+column-1)}lineNumber-=x.lf_left+x.piece.lineFeedCnt,leftLen+=x.size_left+x.piece.length,x=x.right}return leftLen}getPositionAt(offset){offset=Math.floor(offset),offset=Math.max(0,offset);let x=this.root,lfCnt=0,originalOffset=offset;while(x!==rbTreeBase_SENTINEL)if(0!==x.size_left&&x.size_left>=offset)x=x.left;else{if(x.size_left+x.piece.length>=offset){let out=this.getIndexOf(x,offset-x.size_left);if(lfCnt+=x.lf_left+out.index,0===out.index){let lineStartOffset=this.getOffsetAt(lfCnt+1,1),column=originalOffset-lineStartOffset;return new core_position/* Position */.L(lfCnt+1,column+1)}return new core_position/* Position */.L(lfCnt+1,out.remainder+1)}if(offset-=x.size_left+x.piece.length,lfCnt+=x.lf_left+x.piece.lineFeedCnt,x.right===rbTreeBase_SENTINEL){
// last node
let lineStartOffset=this.getOffsetAt(lfCnt+1,1),column=originalOffset-offset-lineStartOffset;return new core_position/* Position */.L(lfCnt+1,column+1)}x=x.right}return new core_position/* Position */.L(1,1)}getValueInRange(range,eol){if(range.startLineNumber===range.endLineNumber&&range.startColumn===range.endColumn)return"";let startPosition=this.nodeAt2(range.startLineNumber,range.startColumn),endPosition=this.nodeAt2(range.endLineNumber,range.endColumn),value=this.getValueInRange2(startPosition,endPosition);return eol?eol===this._EOL&&this._EOLNormalized&&eol===this.getEOL()&&this._EOLNormalized?value:value.replace(/\r\n|\r|\n/g,eol):value}getValueInRange2(startPosition,endPosition){if(startPosition.node===endPosition.node){let node=startPosition.node,buffer=this._buffers[node.piece.bufferIndex].buffer,startOffset=this.offsetInBuffer(node.piece.bufferIndex,node.piece.start);return buffer.substring(startOffset+startPosition.remainder,startOffset+endPosition.remainder)}let x=startPosition.node,buffer=this._buffers[x.piece.bufferIndex].buffer,startOffset=this.offsetInBuffer(x.piece.bufferIndex,x.piece.start),ret=buffer.substring(startOffset+startPosition.remainder,startOffset+x.piece.length);x=x.next();while(x!==rbTreeBase_SENTINEL){let buffer=this._buffers[x.piece.bufferIndex].buffer,startOffset=this.offsetInBuffer(x.piece.bufferIndex,x.piece.start);if(x===endPosition.node){ret+=buffer.substring(startOffset,startOffset+endPosition.remainder);break}ret+=buffer.substr(startOffset,x.piece.length),x=x.next()}return ret}getLinesContent(){let lines=[],linesLength=0,currentLine="",danglingCR=!1;return this.iterate(this.root,(node=>{if(node===rbTreeBase_SENTINEL)return!0;const piece=node.piece;let pieceLength=piece.length;if(0===pieceLength)return!0;const buffer=this._buffers[piece.bufferIndex].buffer,lineStarts=this._buffers[piece.bufferIndex].lineStarts,pieceStartLine=piece.start.line,pieceEndLine=piece.end.line;let pieceStartOffset=lineStarts[pieceStartLine]+piece.start.column;if(danglingCR&&(10/* LineFeed */===buffer.charCodeAt(pieceStartOffset)&&(
// pretend the \n was in the previous piece..
pieceStartOffset++,pieceLength--),lines[linesLength++]=currentLine,currentLine="",danglingCR=!1,0===pieceLength))return!0;if(pieceStartLine===pieceEndLine)
// this piece has no new lines
return this._EOLNormalized||13/* CarriageReturn */!==buffer.charCodeAt(pieceStartOffset+pieceLength-1)?currentLine+=buffer.substr(pieceStartOffset,pieceLength):(danglingCR=!0,currentLine+=buffer.substr(pieceStartOffset,pieceLength-1)),!0;
// add the text before the first line start in this piece
currentLine+=this._EOLNormalized?buffer.substring(pieceStartOffset,Math.max(pieceStartOffset,lineStarts[pieceStartLine+1]-this._EOLLength)):buffer.substring(pieceStartOffset,lineStarts[pieceStartLine+1]).replace(/(\r\n|\r|\n)$/,""),lines[linesLength++]=currentLine;for(let line=pieceStartLine+1;line<pieceEndLine;line++)currentLine=this._EOLNormalized?buffer.substring(lineStarts[line],lineStarts[line+1]-this._EOLLength):buffer.substring(lineStarts[line],lineStarts[line+1]).replace(/(\r\n|\r|\n)$/,""),lines[linesLength++]=currentLine;return this._EOLNormalized||13/* CarriageReturn */!==buffer.charCodeAt(lineStarts[pieceEndLine]+piece.end.column-1)?currentLine=buffer.substr(lineStarts[pieceEndLine],piece.end.column):(danglingCR=!0,0===piece.end.column?
// The last line ended with a \r, let's undo the push, it will be pushed by next iteration
linesLength--:currentLine=buffer.substr(lineStarts[pieceEndLine],piece.end.column-1)),!0})),danglingCR&&(lines[linesLength++]=currentLine,currentLine=""),lines[linesLength++]=currentLine,lines}getLength(){return this._length}getLineCount(){return this._lineCnt}getLineContent(lineNumber){return this._lastVisitedLine.lineNumber===lineNumber||(this._lastVisitedLine.lineNumber=lineNumber,lineNumber===this._lineCnt?this._lastVisitedLine.value=this.getLineRawContent(lineNumber):this._EOLNormalized?this._lastVisitedLine.value=this.getLineRawContent(lineNumber,this._EOLLength):this._lastVisitedLine.value=this.getLineRawContent(lineNumber).replace(/(\r\n|\r|\n)$/,"")),this._lastVisitedLine.value}_getCharCode(nodePos){if(nodePos.remainder===nodePos.node.piece.length){
// the char we want to fetch is at the head of next node.
let matchingNode=nodePos.node.next();if(!matchingNode)return 0;let buffer=this._buffers[matchingNode.piece.bufferIndex],startOffset=this.offsetInBuffer(matchingNode.piece.bufferIndex,matchingNode.piece.start);return buffer.buffer.charCodeAt(startOffset)}{let buffer=this._buffers[nodePos.node.piece.bufferIndex],startOffset=this.offsetInBuffer(nodePos.node.piece.bufferIndex,nodePos.node.piece.start),targetOffset=startOffset+nodePos.remainder;return buffer.buffer.charCodeAt(targetOffset)}}getLineCharCode(lineNumber,index){let nodePos=this.nodeAt2(lineNumber,index+1);return this._getCharCode(nodePos)}getLineLength(lineNumber){if(lineNumber===this.getLineCount()){let startOffset=this.getOffsetAt(lineNumber,1);return this.getLength()-startOffset}return this.getOffsetAt(lineNumber+1,1)-this.getOffsetAt(lineNumber,1)-this._EOLLength}findMatchesInNode(node,searcher,startLineNumber,startColumn,startCursor,endCursor,searchData,captureMatches,limitResultCount,resultLen,result){let m,searchText,offsetInBuffer,buffer=this._buffers[node.piece.bufferIndex],startOffsetInBuffer=this.offsetInBuffer(node.piece.bufferIndex,node.piece.start),start=this.offsetInBuffer(node.piece.bufferIndex,startCursor),end=this.offsetInBuffer(node.piece.bufferIndex,endCursor),ret={line:0,column:0};searcher._wordSeparators?(searchText=buffer.buffer.substring(start,end),offsetInBuffer=offset=>offset+start,searcher.reset(0)):(searchText=buffer.buffer,offsetInBuffer=offset=>offset,searcher.reset(start));do{if(m=searcher.next(searchText),m){if(offsetInBuffer(m.index)>=end)return resultLen;this.positionInBuffer(node,offsetInBuffer(m.index)-startOffsetInBuffer,ret);let lineFeedCnt=this.getLineFeedCnt(node.piece.bufferIndex,startCursor,ret),retStartColumn=ret.line===startCursor.line?ret.column-startCursor.column+startColumn:ret.column+1,retEndColumn=retStartColumn+m[0].length;if(result[resultLen++]=(0,textModelSearch/* createFindMatch */.iE)(new core_range/* Range */.e(startLineNumber+lineFeedCnt,retStartColumn,startLineNumber+lineFeedCnt,retEndColumn),m,captureMatches),offsetInBuffer(m.index)+m[0].length>=end)return resultLen;if(resultLen>=limitResultCount)return resultLen}}while(m);return resultLen}findMatchesLineByLine(searchRange,searchData,captureMatches,limitResultCount){const result=[];let resultLen=0;const searcher=new textModelSearch/* Searcher */.sz(searchData.wordSeparators,searchData.regex);let startPosition=this.nodeAt2(searchRange.startLineNumber,searchRange.startColumn);if(null===startPosition)return[];let endPosition=this.nodeAt2(searchRange.endLineNumber,searchRange.endColumn);if(null===endPosition)return[];let start=this.positionInBuffer(startPosition.node,startPosition.remainder),end=this.positionInBuffer(endPosition.node,endPosition.remainder);if(startPosition.node===endPosition.node)return this.findMatchesInNode(startPosition.node,searcher,searchRange.startLineNumber,searchRange.startColumn,start,end,searchData,captureMatches,limitResultCount,resultLen,result),result;let startLineNumber=searchRange.startLineNumber,currentNode=startPosition.node;while(currentNode!==endPosition.node){let lineBreakCnt=this.getLineFeedCnt(currentNode.piece.bufferIndex,start,currentNode.piece.end);if(lineBreakCnt>=1){
// last line break position
let lineStarts=this._buffers[currentNode.piece.bufferIndex].lineStarts,startOffsetInBuffer=this.offsetInBuffer(currentNode.piece.bufferIndex,currentNode.piece.start),nextLineStartOffset=lineStarts[start.line+lineBreakCnt],startColumn=startLineNumber===searchRange.startLineNumber?searchRange.startColumn:1;if(resultLen=this.findMatchesInNode(currentNode,searcher,startLineNumber,startColumn,start,this.positionInBuffer(currentNode,nextLineStartOffset-startOffsetInBuffer),searchData,captureMatches,limitResultCount,resultLen,result),resultLen>=limitResultCount)return result;startLineNumber+=lineBreakCnt}let startColumn=startLineNumber===searchRange.startLineNumber?searchRange.startColumn-1:0;
// search for the remaining content
if(startLineNumber===searchRange.endLineNumber){const text=this.getLineContent(startLineNumber).substring(startColumn,searchRange.endColumn-1);return resultLen=this._findMatchesInLine(searchData,searcher,text,searchRange.endLineNumber,startColumn,resultLen,result,captureMatches,limitResultCount),result}if(resultLen=this._findMatchesInLine(searchData,searcher,this.getLineContent(startLineNumber).substr(startColumn),startLineNumber,startColumn,resultLen,result,captureMatches,limitResultCount),resultLen>=limitResultCount)return result;startLineNumber++,startPosition=this.nodeAt2(startLineNumber,1),currentNode=startPosition.node,start=this.positionInBuffer(startPosition.node,startPosition.remainder)}if(startLineNumber===searchRange.endLineNumber){let startColumn=startLineNumber===searchRange.startLineNumber?searchRange.startColumn-1:0;const text=this.getLineContent(startLineNumber).substring(startColumn,searchRange.endColumn-1);return resultLen=this._findMatchesInLine(searchData,searcher,text,searchRange.endLineNumber,startColumn,resultLen,result,captureMatches,limitResultCount),result}let startColumn=startLineNumber===searchRange.startLineNumber?searchRange.startColumn:1;return resultLen=this.findMatchesInNode(endPosition.node,searcher,startLineNumber,startColumn,start,end,searchData,captureMatches,limitResultCount,resultLen,result),result}_findMatchesInLine(searchData,searcher,text,lineNumber,deltaOffset,resultLen,result,captureMatches,limitResultCount){const wordSeparators=searchData.wordSeparators;if(!captureMatches&&searchData.simpleSearch){const searchString=searchData.simpleSearch,searchStringLen=searchString.length,textLength=text.length;let lastMatchIndex=-searchStringLen;while(-1!==(lastMatchIndex=text.indexOf(searchString,lastMatchIndex+searchStringLen)))if((!wordSeparators||(0,textModelSearch/* isValidMatch */.cM)(wordSeparators,text,textLength,lastMatchIndex,searchStringLen))&&(result[resultLen++]=new model/* FindMatch */.tk(new core_range/* Range */.e(lineNumber,lastMatchIndex+1+deltaOffset,lineNumber,lastMatchIndex+1+searchStringLen+deltaOffset),null),resultLen>=limitResultCount))return resultLen;return resultLen}let m;
// Reset regex to search from the beginning
searcher.reset(0);do{if(m=searcher.next(text),m&&(result[resultLen++]=(0,textModelSearch/* createFindMatch */.iE)(new core_range/* Range */.e(lineNumber,m.index+1+deltaOffset,lineNumber,m.index+1+m[0].length+deltaOffset),m,captureMatches),resultLen>=limitResultCount))return resultLen}while(m);return resultLen}
// #endregion
// #region Piece Table
insert(offset,value,eolNormalized=!1){if(this._EOLNormalized=this._EOLNormalized&&eolNormalized,this._lastVisitedLine.lineNumber=0,this._lastVisitedLine.value="",this.root!==rbTreeBase_SENTINEL){let{node:node,remainder:remainder,nodeStartOffset:nodeStartOffset}=this.nodeAt(offset),piece=node.piece,bufferIndex=piece.bufferIndex,insertPosInBuffer=this.positionInBuffer(node,remainder);if(0===node.piece.bufferIndex&&piece.end.line===this._lastChangeBufferPos.line&&piece.end.column===this._lastChangeBufferPos.column&&nodeStartOffset+piece.length===offset&&value.length<AverageBufferSize)
// changed buffer
return this.appendToNode(node,value),void this.computeBufferMetadata();if(nodeStartOffset===offset)this.insertContentToNodeLeft(value,node),this._searchCache.validate(offset);else if(nodeStartOffset+node.piece.length>offset){
// we are inserting into the middle of a node.
let nodesToDel=[],newRightPiece=new Piece(piece.bufferIndex,insertPosInBuffer,piece.end,this.getLineFeedCnt(piece.bufferIndex,insertPosInBuffer,piece.end),this.offsetInBuffer(bufferIndex,piece.end)-this.offsetInBuffer(bufferIndex,insertPosInBuffer));if(this.shouldCheckCRLF()&&this.endWithCR(value)){let headOfRight=this.nodeCharCodeAt(node,remainder);if(10/** \n */===headOfRight){let newStart={line:newRightPiece.start.line+1,column:0};newRightPiece=new Piece(newRightPiece.bufferIndex,newStart,newRightPiece.end,this.getLineFeedCnt(newRightPiece.bufferIndex,newStart,newRightPiece.end),newRightPiece.length-1),value+="\n"}}
// reuse node for content before insertion point.
if(this.shouldCheckCRLF()&&this.startWithLF(value)){let tailOfLeft=this.nodeCharCodeAt(node,remainder-1);if(13/** \r */===tailOfLeft){let previousPos=this.positionInBuffer(node,remainder-1);this.deleteNodeTail(node,previousPos),value="\r"+value,0===node.piece.length&&nodesToDel.push(node)}else this.deleteNodeTail(node,insertPosInBuffer)}else this.deleteNodeTail(node,insertPosInBuffer);let newPieces=this.createNewPieces(value);newRightPiece.length>0&&this.rbInsertRight(node,newRightPiece);let tmpNode=node;for(let k=0;k<newPieces.length;k++)tmpNode=this.rbInsertRight(tmpNode,newPieces[k]);this.deleteNodes(nodesToDel)}else this.insertContentToNodeRight(value,node)}else{
// insert new node
let pieces=this.createNewPieces(value),node=this.rbInsertLeft(null,pieces[0]);for(let k=1;k<pieces.length;k++)node=this.rbInsertRight(node,pieces[k])}
// todo, this is too brutal. Total line feed count should be updated the same way as lf_left.
this.computeBufferMetadata()}delete(offset,cnt){if(this._lastVisitedLine.lineNumber=0,this._lastVisitedLine.value="",cnt<=0||this.root===rbTreeBase_SENTINEL)return;let startPosition=this.nodeAt(offset),endPosition=this.nodeAt(offset+cnt),startNode=startPosition.node,endNode=endPosition.node;if(startNode===endNode){let startSplitPosInBuffer=this.positionInBuffer(startNode,startPosition.remainder),endSplitPosInBuffer=this.positionInBuffer(startNode,endPosition.remainder);if(startPosition.nodeStartOffset===offset){if(cnt===startNode.piece.length){// delete node
let next=startNode.next();return rbDelete(this,startNode),this.validateCRLFWithPrevNode(next),void this.computeBufferMetadata()}return this.deleteNodeHead(startNode,endSplitPosInBuffer),this._searchCache.validate(offset),this.validateCRLFWithPrevNode(startNode),void this.computeBufferMetadata()}return startPosition.nodeStartOffset+startNode.piece.length===offset+cnt?(this.deleteNodeTail(startNode,startSplitPosInBuffer),this.validateCRLFWithNextNode(startNode),void this.computeBufferMetadata()):(
// delete content in the middle, this node will be splitted to nodes
this.shrinkNode(startNode,startSplitPosInBuffer,endSplitPosInBuffer),void this.computeBufferMetadata())}let nodesToDel=[],startSplitPosInBuffer=this.positionInBuffer(startNode,startPosition.remainder);this.deleteNodeTail(startNode,startSplitPosInBuffer),this._searchCache.validate(offset),0===startNode.piece.length&&nodesToDel.push(startNode);
// update last touched node
let endSplitPosInBuffer=this.positionInBuffer(endNode,endPosition.remainder);this.deleteNodeHead(endNode,endSplitPosInBuffer),0===endNode.piece.length&&nodesToDel.push(endNode);
// delete nodes in between
let secondNode=startNode.next();for(let node=secondNode;node!==rbTreeBase_SENTINEL&&node!==endNode;node=node.next())nodesToDel.push(node);let prev=0===startNode.piece.length?startNode.prev():startNode;this.deleteNodes(nodesToDel),this.validateCRLFWithNextNode(prev),this.computeBufferMetadata()}insertContentToNodeLeft(value,node){
// we are inserting content to the beginning of node
let nodesToDel=[];if(this.shouldCheckCRLF()&&this.endWithCR(value)&&this.startWithLF(node)){
// move `\n` to new node.
let piece=node.piece,newStart={line:piece.start.line+1,column:0},nPiece=new Piece(piece.bufferIndex,newStart,piece.end,this.getLineFeedCnt(piece.bufferIndex,newStart,piece.end),piece.length-1);node.piece=nPiece,value+="\n",updateTreeMetadata(this,node,-1,-1),0===node.piece.length&&nodesToDel.push(node)}let newPieces=this.createNewPieces(value),newNode=this.rbInsertLeft(node,newPieces[newPieces.length-1]);for(let k=newPieces.length-2;k>=0;k--)newNode=this.rbInsertLeft(newNode,newPieces[k]);this.validateCRLFWithPrevNode(newNode),this.deleteNodes(nodesToDel)}insertContentToNodeRight(value,node){
// we are inserting to the right of this node.
this.adjustCarriageReturnFromNext(value,node)&&(
// move \n to the new node.
value+="\n");let newPieces=this.createNewPieces(value),newNode=this.rbInsertRight(node,newPieces[0]),tmpNode=newNode;for(let k=1;k<newPieces.length;k++)tmpNode=this.rbInsertRight(tmpNode,newPieces[k]);this.validateCRLFWithPrevNode(newNode)}positionInBuffer(node,remainder,ret){let piece=node.piece,bufferIndex=node.piece.bufferIndex,lineStarts=this._buffers[bufferIndex].lineStarts,startOffset=lineStarts[piece.start.line]+piece.start.column,offset=startOffset+remainder,low=piece.start.line,high=piece.end.line,mid=0,midStop=0,midStart=0;while(low<=high){if(mid=low+(high-low)/2|0,midStart=lineStarts[mid],mid===high)break;if(midStop=lineStarts[mid+1],offset<midStart)high=mid-1;else{if(!(offset>=midStop))break;low=mid+1}}return ret?(ret.line=mid,ret.column=offset-midStart,null):{line:mid,column:offset-midStart}}getLineFeedCnt(bufferIndex,start,end){
// we don't need to worry about start: abc\r|\n, or abc|\r, or abc|\n, or abc|\r\n doesn't change the fact that, there is one line break after start.
// now let's take care of end: abc\r|\n, if end is in between \r and \n, we need to add line feed count by 1
if(0===end.column)return end.line-start.line;let lineStarts=this._buffers[bufferIndex].lineStarts;if(end.line===lineStarts.length-1)// it means, there is no \n after end, otherwise, there will be one more lineStart.
return end.line-start.line;let nextLineStartOffset=lineStarts[end.line+1],endOffset=lineStarts[end.line]+end.column;if(nextLineStartOffset>endOffset+1)// there are more than 1 character after end, which means it can't be \n
return end.line-start.line;
// endOffset + 1 === nextLineStartOffset
// character at endOffset is \n, so we check the character before first
// if character at endOffset is \r, end.column is 0 and we can't get here.
let previousCharOffset=endOffset-1,buffer=this._buffers[bufferIndex].buffer;// end.column > 0 so it's okay.
return 13===buffer.charCodeAt(previousCharOffset)?end.line-start.line+1:end.line-start.line}offsetInBuffer(bufferIndex,cursor){let lineStarts=this._buffers[bufferIndex].lineStarts;return lineStarts[cursor.line]+cursor.column}deleteNodes(nodes){for(let i=0;i<nodes.length;i++)rbDelete(this,nodes[i])}createNewPieces(text){if(text.length>AverageBufferSize){
// the content is large, operations like substring, charCode becomes slow
// so here we split it into smaller chunks, just like what we did for CR/LF normalization
let newPieces=[];while(text.length>AverageBufferSize){const lastChar=text.charCodeAt(AverageBufferSize-1);let splitText;13/* CarriageReturn */===lastChar||lastChar>=55296&&lastChar<=56319?(
// last character is \r or a high surrogate => keep it back
splitText=text.substring(0,AverageBufferSize-1),text=text.substring(AverageBufferSize-1)):(splitText=text.substring(0,AverageBufferSize),text=text.substring(AverageBufferSize));let lineStarts=createLineStartsFast(splitText);newPieces.push(new Piece(this._buffers.length,/* buffer index */{line:0,column:0},{line:lineStarts.length-1,column:splitText.length-lineStarts[lineStarts.length-1]},lineStarts.length-1,splitText.length)),this._buffers.push(new StringBuffer(splitText,lineStarts))}let lineStarts=createLineStartsFast(text);return newPieces.push(new Piece(this._buffers.length,/* buffer index */{line:0,column:0},{line:lineStarts.length-1,column:text.length-lineStarts[lineStarts.length-1]},lineStarts.length-1,text.length)),this._buffers.push(new StringBuffer(text,lineStarts)),newPieces}let startOffset=this._buffers[0].buffer.length;const lineStarts=createLineStartsFast(text,!1);let start=this._lastChangeBufferPos;if(this._buffers[0].lineStarts[this._buffers[0].lineStarts.length-1]===startOffset&&0!==startOffset&&this.startWithLF(text)&&this.endWithCR(this._buffers[0].buffer)){this._lastChangeBufferPos={line:this._lastChangeBufferPos.line,column:this._lastChangeBufferPos.column+1},start=this._lastChangeBufferPos;for(let i=0;i<lineStarts.length;i++)lineStarts[i]+=startOffset+1;this._buffers[0].lineStarts=this._buffers[0].lineStarts.concat(lineStarts.slice(1)),this._buffers[0].buffer+="_"+text,startOffset+=1}else{if(0!==startOffset)for(let i=0;i<lineStarts.length;i++)lineStarts[i]+=startOffset;this._buffers[0].lineStarts=this._buffers[0].lineStarts.concat(lineStarts.slice(1)),this._buffers[0].buffer+=text}const endOffset=this._buffers[0].buffer.length;let endIndex=this._buffers[0].lineStarts.length-1,endColumn=endOffset-this._buffers[0].lineStarts[endIndex],endPos={line:endIndex,column:endColumn},newPiece=new Piece(0,/** todo@peng */start,endPos,this.getLineFeedCnt(0,start,endPos),endOffset-startOffset);return this._lastChangeBufferPos=endPos,[newPiece]}getLineRawContent(lineNumber,endOffset=0){let x=this.root,ret="",cache=this._searchCache.get2(lineNumber);if(cache){x=cache.node;let prevAccumulatedValue=this.getAccumulatedValue(x,lineNumber-cache.nodeStartLineNumber-1),buffer=this._buffers[x.piece.bufferIndex].buffer,startOffset=this.offsetInBuffer(x.piece.bufferIndex,x.piece.start);if(cache.nodeStartLineNumber+x.piece.lineFeedCnt!==lineNumber){let accumulatedValue=this.getAccumulatedValue(x,lineNumber-cache.nodeStartLineNumber);return buffer.substring(startOffset+prevAccumulatedValue,startOffset+accumulatedValue-endOffset)}ret=buffer.substring(startOffset+prevAccumulatedValue,startOffset+x.piece.length)}else{let nodeStartOffset=0;const originalLineNumber=lineNumber;while(x!==rbTreeBase_SENTINEL)if(x.left!==rbTreeBase_SENTINEL&&x.lf_left>=lineNumber-1)x=x.left;else{if(x.lf_left+x.piece.lineFeedCnt>lineNumber-1){let prevAccumulatedValue=this.getAccumulatedValue(x,lineNumber-x.lf_left-2),accumulatedValue=this.getAccumulatedValue(x,lineNumber-x.lf_left-1),buffer=this._buffers[x.piece.bufferIndex].buffer,startOffset=this.offsetInBuffer(x.piece.bufferIndex,x.piece.start);return nodeStartOffset+=x.size_left,this._searchCache.set({node:x,nodeStartOffset:nodeStartOffset,nodeStartLineNumber:originalLineNumber-(lineNumber-1-x.lf_left)}),buffer.substring(startOffset+prevAccumulatedValue,startOffset+accumulatedValue-endOffset)}if(x.lf_left+x.piece.lineFeedCnt===lineNumber-1){let prevAccumulatedValue=this.getAccumulatedValue(x,lineNumber-x.lf_left-2),buffer=this._buffers[x.piece.bufferIndex].buffer,startOffset=this.offsetInBuffer(x.piece.bufferIndex,x.piece.start);ret=buffer.substring(startOffset+prevAccumulatedValue,startOffset+x.piece.length);break}lineNumber-=x.lf_left+x.piece.lineFeedCnt,nodeStartOffset+=x.size_left+x.piece.length,x=x.right}}
// search in order, to find the node contains end column
x=x.next();while(x!==rbTreeBase_SENTINEL){let buffer=this._buffers[x.piece.bufferIndex].buffer;if(x.piece.lineFeedCnt>0){let accumulatedValue=this.getAccumulatedValue(x,0),startOffset=this.offsetInBuffer(x.piece.bufferIndex,x.piece.start);return ret+=buffer.substring(startOffset,startOffset+accumulatedValue-endOffset),ret}{let startOffset=this.offsetInBuffer(x.piece.bufferIndex,x.piece.start);ret+=buffer.substr(startOffset,x.piece.length)}x=x.next()}return ret}computeBufferMetadata(){let x=this.root,lfCnt=1,len=0;while(x!==rbTreeBase_SENTINEL)lfCnt+=x.lf_left+x.piece.lineFeedCnt,len+=x.size_left+x.piece.length,x=x.right;this._lineCnt=lfCnt,this._length=len,this._searchCache.validate(this._length)}
// #region node operations
getIndexOf(node,accumulatedValue){let piece=node.piece,pos=this.positionInBuffer(node,accumulatedValue),lineCnt=pos.line-piece.start.line;if(this.offsetInBuffer(piece.bufferIndex,piece.end)-this.offsetInBuffer(piece.bufferIndex,piece.start)===accumulatedValue){
// we are checking the end of this node, so a CRLF check is necessary.
let realLineCnt=this.getLineFeedCnt(node.piece.bufferIndex,piece.start,pos);if(realLineCnt!==lineCnt)
// aha yes, CRLF
return{index:realLineCnt,remainder:0}}return{index:lineCnt,remainder:pos.column}}getAccumulatedValue(node,index){if(index<0)return 0;let piece=node.piece,lineStarts=this._buffers[piece.bufferIndex].lineStarts,expectedLineStartIndex=piece.start.line+index+1;return expectedLineStartIndex>piece.end.line?lineStarts[piece.end.line]+piece.end.column-lineStarts[piece.start.line]-piece.start.column:lineStarts[expectedLineStartIndex]-lineStarts[piece.start.line]-piece.start.column}deleteNodeTail(node,pos){const piece=node.piece,originalLFCnt=piece.lineFeedCnt,originalEndOffset=this.offsetInBuffer(piece.bufferIndex,piece.end),newEnd=pos,newEndOffset=this.offsetInBuffer(piece.bufferIndex,newEnd),newLineFeedCnt=this.getLineFeedCnt(piece.bufferIndex,piece.start,newEnd),lf_delta=newLineFeedCnt-originalLFCnt,size_delta=newEndOffset-originalEndOffset,newLength=piece.length+size_delta;node.piece=new Piece(piece.bufferIndex,piece.start,newEnd,newLineFeedCnt,newLength),updateTreeMetadata(this,node,size_delta,lf_delta)}deleteNodeHead(node,pos){const piece=node.piece,originalLFCnt=piece.lineFeedCnt,originalStartOffset=this.offsetInBuffer(piece.bufferIndex,piece.start),newStart=pos,newLineFeedCnt=this.getLineFeedCnt(piece.bufferIndex,newStart,piece.end),newStartOffset=this.offsetInBuffer(piece.bufferIndex,newStart),lf_delta=newLineFeedCnt-originalLFCnt,size_delta=originalStartOffset-newStartOffset,newLength=piece.length+size_delta;node.piece=new Piece(piece.bufferIndex,newStart,piece.end,newLineFeedCnt,newLength),updateTreeMetadata(this,node,size_delta,lf_delta)}shrinkNode(node,start,end){const piece=node.piece,originalStartPos=piece.start,originalEndPos=piece.end,oldLength=piece.length,oldLFCnt=piece.lineFeedCnt,newEnd=start,newLineFeedCnt=this.getLineFeedCnt(piece.bufferIndex,piece.start,newEnd),newLength=this.offsetInBuffer(piece.bufferIndex,start)-this.offsetInBuffer(piece.bufferIndex,originalStartPos);node.piece=new Piece(piece.bufferIndex,piece.start,newEnd,newLineFeedCnt,newLength),updateTreeMetadata(this,node,newLength-oldLength,newLineFeedCnt-oldLFCnt);
// new right piece, end, originalEndPos
let newPiece=new Piece(piece.bufferIndex,end,originalEndPos,this.getLineFeedCnt(piece.bufferIndex,end,originalEndPos),this.offsetInBuffer(piece.bufferIndex,originalEndPos)-this.offsetInBuffer(piece.bufferIndex,end)),newNode=this.rbInsertRight(node,newPiece);this.validateCRLFWithPrevNode(newNode)}appendToNode(node,value){this.adjustCarriageReturnFromNext(value,node)&&(value+="\n");const hitCRLF=this.shouldCheckCRLF()&&this.startWithLF(value)&&this.endWithCR(node),startOffset=this._buffers[0].buffer.length;this._buffers[0].buffer+=value;const lineStarts=createLineStartsFast(value,!1);for(let i=0;i<lineStarts.length;i++)lineStarts[i]+=startOffset;if(hitCRLF){let prevStartOffset=this._buffers[0].lineStarts[this._buffers[0].lineStarts.length-2];this._buffers[0].lineStarts.pop(),
// _lastChangeBufferPos is already wrong
this._lastChangeBufferPos={line:this._lastChangeBufferPos.line-1,column:startOffset-prevStartOffset}}this._buffers[0].lineStarts=this._buffers[0].lineStarts.concat(lineStarts.slice(1));const endIndex=this._buffers[0].lineStarts.length-1,endColumn=this._buffers[0].buffer.length-this._buffers[0].lineStarts[endIndex],newEnd={line:endIndex,column:endColumn},newLength=node.piece.length+value.length,oldLineFeedCnt=node.piece.lineFeedCnt,newLineFeedCnt=this.getLineFeedCnt(0,node.piece.start,newEnd),lf_delta=newLineFeedCnt-oldLineFeedCnt;node.piece=new Piece(node.piece.bufferIndex,node.piece.start,newEnd,newLineFeedCnt,newLength),this._lastChangeBufferPos=newEnd,updateTreeMetadata(this,node,value.length,lf_delta)}nodeAt(offset){let x=this.root,cache=this._searchCache.get(offset);if(cache)return{node:cache.node,nodeStartOffset:cache.nodeStartOffset,remainder:offset-cache.nodeStartOffset};let nodeStartOffset=0;while(x!==rbTreeBase_SENTINEL)if(x.size_left>offset)x=x.left;else{if(x.size_left+x.piece.length>=offset){nodeStartOffset+=x.size_left;let ret={node:x,remainder:offset-x.size_left,nodeStartOffset:nodeStartOffset};return this._searchCache.set(ret),ret}offset-=x.size_left+x.piece.length,nodeStartOffset+=x.size_left+x.piece.length,x=x.right}return null}nodeAt2(lineNumber,column){let x=this.root,nodeStartOffset=0;while(x!==rbTreeBase_SENTINEL)if(x.left!==rbTreeBase_SENTINEL&&x.lf_left>=lineNumber-1)x=x.left;else{if(x.lf_left+x.piece.lineFeedCnt>lineNumber-1){let prevAccumualtedValue=this.getAccumulatedValue(x,lineNumber-x.lf_left-2),accumulatedValue=this.getAccumulatedValue(x,lineNumber-x.lf_left-1);return nodeStartOffset+=x.size_left,{node:x,remainder:Math.min(prevAccumualtedValue+column-1,accumulatedValue),nodeStartOffset:nodeStartOffset}}if(x.lf_left+x.piece.lineFeedCnt===lineNumber-1){let prevAccumualtedValue=this.getAccumulatedValue(x,lineNumber-x.lf_left-2);if(prevAccumualtedValue+column-1<=x.piece.length)return{node:x,remainder:prevAccumualtedValue+column-1,nodeStartOffset:nodeStartOffset};column-=x.piece.length-prevAccumualtedValue;break}lineNumber-=x.lf_left+x.piece.lineFeedCnt,nodeStartOffset+=x.size_left+x.piece.length,x=x.right}
// search in order, to find the node contains position.column
x=x.next();while(x!==rbTreeBase_SENTINEL){if(x.piece.lineFeedCnt>0){let accumulatedValue=this.getAccumulatedValue(x,0),nodeStartOffset=this.offsetOfNode(x);return{node:x,remainder:Math.min(column-1,accumulatedValue),nodeStartOffset:nodeStartOffset}}if(x.piece.length>=column-1){let nodeStartOffset=this.offsetOfNode(x);return{node:x,remainder:column-1,nodeStartOffset:nodeStartOffset}}column-=x.piece.length,x=x.next()}return null}nodeCharCodeAt(node,offset){if(node.piece.lineFeedCnt<1)return-1;let buffer=this._buffers[node.piece.bufferIndex],newOffset=this.offsetInBuffer(node.piece.bufferIndex,node.piece.start)+offset;return buffer.buffer.charCodeAt(newOffset)}offsetOfNode(node){if(!node)return 0;let pos=node.size_left;while(node!==this.root)node.parent.right===node&&(pos+=node.parent.size_left+node.parent.piece.length),node=node.parent;return pos}
// #endregion
// #region CRLF
shouldCheckCRLF(){return!(this._EOLNormalized&&"\n"===this._EOL)}startWithLF(val){if("string"===typeof val)return 10===val.charCodeAt(0);if(val===rbTreeBase_SENTINEL||0===val.piece.lineFeedCnt)return!1;let piece=val.piece,lineStarts=this._buffers[piece.bufferIndex].lineStarts,line=piece.start.line,startOffset=lineStarts[line]+piece.start.column;if(line===lineStarts.length-1)
// last line, so there is no line feed at the end of this line
return!1;let nextLineOffset=lineStarts[line+1];return!(nextLineOffset>startOffset+1)&&10===this._buffers[piece.bufferIndex].buffer.charCodeAt(startOffset)}endWithCR(val){return"string"===typeof val?13===val.charCodeAt(val.length-1):val!==rbTreeBase_SENTINEL&&0!==val.piece.lineFeedCnt&&13===this.nodeCharCodeAt(val,val.piece.length-1)}validateCRLFWithPrevNode(nextNode){if(this.shouldCheckCRLF()&&this.startWithLF(nextNode)){let node=nextNode.prev();this.endWithCR(node)&&this.fixCRLF(node,nextNode)}}validateCRLFWithNextNode(node){if(this.shouldCheckCRLF()&&this.endWithCR(node)){let nextNode=node.next();this.startWithLF(nextNode)&&this.fixCRLF(node,nextNode)}}fixCRLF(prev,next){let newEnd,nodesToDel=[],lineStarts=this._buffers[prev.piece.bufferIndex].lineStarts;
// update node
// it means, last line ends with \r, not \r\n
newEnd=0===prev.piece.end.column?{line:prev.piece.end.line-1,column:lineStarts[prev.piece.end.line]-lineStarts[prev.piece.end.line-1]-1}:{line:prev.piece.end.line,column:prev.piece.end.column-1};const prevNewLength=prev.piece.length-1,prevNewLFCnt=prev.piece.lineFeedCnt-1;prev.piece=new Piece(prev.piece.bufferIndex,prev.piece.start,newEnd,prevNewLFCnt,prevNewLength),updateTreeMetadata(this,prev,-1,-1),0===prev.piece.length&&nodesToDel.push(prev);
// update nextNode
let newStart={line:next.piece.start.line+1,column:0};const newLength=next.piece.length-1,newLineFeedCnt=this.getLineFeedCnt(next.piece.bufferIndex,newStart,next.piece.end);next.piece=new Piece(next.piece.bufferIndex,newStart,next.piece.end,newLineFeedCnt,newLength),updateTreeMetadata(this,next,-1,-1),0===next.piece.length&&nodesToDel.push(next);
// create new piece which contains \r\n
let pieces=this.createNewPieces("\r\n");this.rbInsertRight(prev,pieces[0]);
// delete empty nodes
for(let i=0;i<nodesToDel.length;i++)rbDelete(this,nodesToDel[i])}adjustCarriageReturnFromNext(value,node){if(this.shouldCheckCRLF()&&this.endWithCR(value)){let nextNode=node.next();if(this.startWithLF(nextNode)){if(
// move `\n` forward
value+="\n",1===nextNode.piece.length)rbDelete(this,nextNode);else{const piece=nextNode.piece,newStart={line:piece.start.line+1,column:0},newLength=piece.length-1,newLineFeedCnt=this.getLineFeedCnt(piece.bufferIndex,newStart,piece.end);nextNode.piece=new Piece(piece.bufferIndex,newStart,piece.end,newLineFeedCnt,newLength),updateTreeMetadata(this,nextNode,-1,-1)}return!0}}return!1}
// #endregion
// #endregion
// #region Tree operations
iterate(node,callback){if(node===rbTreeBase_SENTINEL)return callback(rbTreeBase_SENTINEL);let leftRet=this.iterate(node.left,callback);return leftRet?callback(node)&&this.iterate(node.right,callback):leftRet}getNodeContent(node){if(node===rbTreeBase_SENTINEL)return"";let currentContent,buffer=this._buffers[node.piece.bufferIndex],piece=node.piece,startOffset=this.offsetInBuffer(piece.bufferIndex,piece.start),endOffset=this.offsetInBuffer(piece.bufferIndex,piece.end);return currentContent=buffer.buffer.substring(startOffset,endOffset),currentContent}getPieceContent(piece){let buffer=this._buffers[piece.bufferIndex],startOffset=this.offsetInBuffer(piece.bufferIndex,piece.start),endOffset=this.offsetInBuffer(piece.bufferIndex,piece.end),currentContent=buffer.buffer.substring(startOffset,endOffset);return currentContent}
/**
     *      node              node
     *     /  \              /  \
     *    a   b    <----   a    b
     *                         /
     *                        z
     */rbInsertRight(node,p){let z=new TreeNode(p,1/* Red */);z.left=rbTreeBase_SENTINEL,z.right=rbTreeBase_SENTINEL,z.parent=rbTreeBase_SENTINEL,z.size_left=0,z.lf_left=0;let x=this.root;if(x===rbTreeBase_SENTINEL)this.root=z,z.color=0/* Black */;else if(node.right===rbTreeBase_SENTINEL)node.right=z,z.parent=node;else{let nextNode=rbTreeBase_leftest(node.right);nextNode.left=z,z.parent=nextNode}return fixInsert(this,z),z}
/**
     *      node              node
     *     /  \              /  \
     *    a   b     ---->   a    b
     *                       \
     *                        z
     */rbInsertLeft(node,p){let z=new TreeNode(p,1/* Red */);if(z.left=rbTreeBase_SENTINEL,z.right=rbTreeBase_SENTINEL,z.parent=rbTreeBase_SENTINEL,z.size_left=0,z.lf_left=0,this.root===rbTreeBase_SENTINEL)this.root=z,z.color=0/* Black */;else if(node.left===rbTreeBase_SENTINEL)node.left=z,z.parent=node;else{let prevNode=righttest(node.left);// a
prevNode.right=z,z.parent=prevNode}return fixInsert(this,z),z}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/tokensStore.js
var tokensStore=__webpack_require__(858409),textChange=__webpack_require__(260962);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/textChange.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class PieceTreeTextBuffer extends lifecycle/* Disposable */.JT{constructor(chunks,BOM,eol,containsRTL,containsUnusualLineTerminators,isBasicASCII,eolNormalized){super(),this._onDidChangeContent=this._register(new common_event/* Emitter */.Q5),this._BOM=BOM,this._mightContainNonBasicASCII=!isBasicASCII,this._mightContainRTL=containsRTL,this._mightContainUnusualLineTerminators=containsUnusualLineTerminators,this._pieceTree=new PieceTreeBase(chunks,eol,eolNormalized)}mightContainRTL(){return this._mightContainRTL}mightContainUnusualLineTerminators(){return this._mightContainUnusualLineTerminators}resetMightContainUnusualLineTerminators(){this._mightContainUnusualLineTerminators=!1}mightContainNonBasicASCII(){return this._mightContainNonBasicASCII}getBOM(){return this._BOM}getEOL(){return this._pieceTree.getEOL()}createSnapshot(preserveBOM){return this._pieceTree.createSnapshot(preserveBOM?this._BOM:"")}getOffsetAt(lineNumber,column){return this._pieceTree.getOffsetAt(lineNumber,column)}getPositionAt(offset){return this._pieceTree.getPositionAt(offset)}getRangeAt(start,length){let end=start+length;const startPosition=this.getPositionAt(start),endPosition=this.getPositionAt(end);return new core_range/* Range */.e(startPosition.lineNumber,startPosition.column,endPosition.lineNumber,endPosition.column)}getValueInRange(range,eol=0/* TextDefined */){if(range.isEmpty())return"";const lineEnding=this._getEndOfLine(eol);return this._pieceTree.getValueInRange(range,lineEnding)}getValueLengthInRange(range,eol=0/* TextDefined */){if(range.isEmpty())return 0;if(range.startLineNumber===range.endLineNumber)return range.endColumn-range.startColumn;let startOffset=this.getOffsetAt(range.startLineNumber,range.startColumn),endOffset=this.getOffsetAt(range.endLineNumber,range.endColumn);return endOffset-startOffset}getCharacterCountInRange(range,eol=0/* TextDefined */){if(this._mightContainNonBasicASCII){
// we must count by iterating
let result=0;const fromLineNumber=range.startLineNumber,toLineNumber=range.endLineNumber;for(let lineNumber=fromLineNumber;lineNumber<=toLineNumber;lineNumber++){const lineContent=this.getLineContent(lineNumber),fromOffset=lineNumber===fromLineNumber?range.startColumn-1:0,toOffset=lineNumber===toLineNumber?range.endColumn-1:lineContent.length;for(let offset=fromOffset;offset<toOffset;offset++)strings/* isHighSurrogate */.ZG(lineContent.charCodeAt(offset))?(result+=1,offset+=1):result+=1}return result+=this._getEndOfLine(eol).length*(toLineNumber-fromLineNumber),result}return this.getValueLengthInRange(range,eol)}getLength(){return this._pieceTree.getLength()}getLineCount(){return this._pieceTree.getLineCount()}getLinesContent(){return this._pieceTree.getLinesContent()}getLineContent(lineNumber){return this._pieceTree.getLineContent(lineNumber)}getLineCharCode(lineNumber,index){return this._pieceTree.getLineCharCode(lineNumber,index)}getLineLength(lineNumber){return this._pieceTree.getLineLength(lineNumber)}getLineFirstNonWhitespaceColumn(lineNumber){const result=strings/* firstNonWhitespaceIndex */.LC(this.getLineContent(lineNumber));return-1===result?0:result+1}getLineLastNonWhitespaceColumn(lineNumber){const result=strings/* lastNonWhitespaceIndex */.ow(this.getLineContent(lineNumber));return-1===result?0:result+2}_getEndOfLine(eol){switch(eol){case 1/* LF */:return"\n";case 2/* CRLF */:return"\r\n";case 0/* TextDefined */:return this.getEOL();default:throw new Error("Unknown EOL preference")}}setEOL(newEOL){this._pieceTree.setEOL(newEOL)}applyEdits(rawOperations,recordTrimAutoWhitespace,computeUndoEdits){let mightContainRTL=this._mightContainRTL,mightContainUnusualLineTerminators=this._mightContainUnusualLineTerminators,mightContainNonBasicASCII=this._mightContainNonBasicASCII,canReduceOperations=!0,operations=[];for(let i=0;i<rawOperations.length;i++){let op=rawOperations[i];canReduceOperations&&op._isTracked&&(canReduceOperations=!1);let validatedRange=op.range;if(op.text){let textMightContainNonBasicASCII=!0;mightContainNonBasicASCII||(textMightContainNonBasicASCII=!strings/* isBasicASCII */.$i(op.text),mightContainNonBasicASCII=textMightContainNonBasicASCII),!mightContainRTL&&textMightContainNonBasicASCII&&(
// check if the new inserted text contains RTL
mightContainRTL=strings/* containsRTL */.Ut(op.text)),!mightContainUnusualLineTerminators&&textMightContainNonBasicASCII&&(
// check if the new inserted text contains unusual line terminators
mightContainUnusualLineTerminators=strings/* containsUnusualLineTerminators */.ab(op.text))}let validText="",eolCount=0,firstLineLength=0,lastLineLength=0;if(op.text){let strEOL;[eolCount,firstLineLength,lastLineLength,strEOL]=(0,tokensStore/* countEOL */.QZ)(op.text);const bufferEOL=this.getEOL(),expectedStrEOL="\r\n"===bufferEOL?2/* CRLF */:1/* LF */;validText=0/* Unknown */===strEOL||strEOL===expectedStrEOL?op.text:op.text.replace(/\r\n|\r|\n/g,bufferEOL)}operations[i]={sortIndex:i,identifier:op.identifier||null,range:validatedRange,rangeOffset:this.getOffsetAt(validatedRange.startLineNumber,validatedRange.startColumn),rangeLength:this.getValueLengthInRange(validatedRange),text:validText,eolCount:eolCount,firstLineLength:firstLineLength,lastLineLength:lastLineLength,forceMoveMarkers:Boolean(op.forceMoveMarkers),isAutoWhitespaceEdit:op.isAutoWhitespaceEdit||!1}}
// Sort operations ascending
operations.sort(PieceTreeTextBuffer._sortOpsAscending);let hasTouchingRanges=!1;for(let i=0,count=operations.length-1;i<count;i++){let rangeEnd=operations[i].range.getEndPosition(),nextRangeStart=operations[i+1].range.getStartPosition();if(nextRangeStart.isBeforeOrEqual(rangeEnd)){if(nextRangeStart.isBefore(rangeEnd))
// overlapping ranges
throw new Error("Overlapping ranges are not allowed!");hasTouchingRanges=!0}}canReduceOperations&&(operations=this._reduceOperations(operations));
// Delta encode operations
let reverseRanges=computeUndoEdits||recordTrimAutoWhitespace?PieceTreeTextBuffer._getInverseEditRanges(operations):[],newTrimAutoWhitespaceCandidates=[];if(recordTrimAutoWhitespace)for(let i=0;i<operations.length;i++){let op=operations[i],reverseRange=reverseRanges[i];if(op.isAutoWhitespaceEdit&&op.range.isEmpty())
// Record already the future line numbers that might be auto whitespace removal candidates on next edit
for(let lineNumber=reverseRange.startLineNumber;lineNumber<=reverseRange.endLineNumber;lineNumber++){let currentLineContent="";lineNumber===reverseRange.startLineNumber&&(currentLineContent=this.getLineContent(op.range.startLineNumber),-1!==strings/* firstNonWhitespaceIndex */.LC(currentLineContent))||newTrimAutoWhitespaceCandidates.push({lineNumber:lineNumber,oldContent:currentLineContent})}}let reverseOperations=null;if(computeUndoEdits){let reverseRangeDeltaOffset=0;reverseOperations=[];for(let i=0;i<operations.length;i++){const op=operations[i],reverseRange=reverseRanges[i],bufferText=this.getValueInRange(op.range),reverseRangeOffset=op.rangeOffset+reverseRangeDeltaOffset;reverseRangeDeltaOffset+=op.text.length-bufferText.length,reverseOperations[i]={sortIndex:op.sortIndex,identifier:op.identifier,range:reverseRange,text:bufferText,textChange:new textChange/* TextChange */.q(op.rangeOffset,bufferText,reverseRangeOffset,op.text)}}
// Can only sort reverse operations when the order is not significant
hasTouchingRanges||reverseOperations.sort(((a,b)=>a.sortIndex-b.sortIndex))}this._mightContainRTL=mightContainRTL,this._mightContainUnusualLineTerminators=mightContainUnusualLineTerminators,this._mightContainNonBasicASCII=mightContainNonBasicASCII;const contentChanges=this._doApplyEdits(operations);let trimAutoWhitespaceLineNumbers=null;if(recordTrimAutoWhitespace&&newTrimAutoWhitespaceCandidates.length>0){
// sort line numbers auto whitespace removal candidates for next edit descending
newTrimAutoWhitespaceCandidates.sort(((a,b)=>b.lineNumber-a.lineNumber)),trimAutoWhitespaceLineNumbers=[];for(let i=0,len=newTrimAutoWhitespaceCandidates.length;i<len;i++){let lineNumber=newTrimAutoWhitespaceCandidates[i].lineNumber;if(i>0&&newTrimAutoWhitespaceCandidates[i-1].lineNumber===lineNumber)
// Do not have the same line number twice
continue;let prevContent=newTrimAutoWhitespaceCandidates[i].oldContent,lineContent=this.getLineContent(lineNumber);0!==lineContent.length&&lineContent!==prevContent&&-1===strings/* firstNonWhitespaceIndex */.LC(lineContent)&&trimAutoWhitespaceLineNumbers.push(lineNumber)}}return this._onDidChangeContent.fire(),new model/* ApplyEditsResult */.je(reverseOperations,contentChanges,trimAutoWhitespaceLineNumbers)}
/**
     * Transform operations such that they represent the same logic edit,
     * but that they also do not cause OOM crashes.
     */_reduceOperations(operations){return operations.length<1e3?operations:[this._toSingleEditOperation(operations)];
// At one point, due to how events are emitted and how each operation is handled,
// some operations can trigger a high amount of temporary string allocations,
// that will immediately get edited again.
// e.g. a formatter inserting ridiculous ammounts of \n on a model with a single line
// Therefore, the strategy is to collapse all the operations into a huge single edit operation
}_toSingleEditOperation(operations){let forceMoveMarkers=!1;const firstEditRange=operations[0].range,lastEditRange=operations[operations.length-1].range,entireEditRange=new core_range/* Range */.e(firstEditRange.startLineNumber,firstEditRange.startColumn,lastEditRange.endLineNumber,lastEditRange.endColumn);let lastEndLineNumber=firstEditRange.startLineNumber,lastEndColumn=firstEditRange.startColumn;const result=[];for(let i=0,len=operations.length;i<len;i++){const operation=operations[i],range=operation.range;forceMoveMarkers=forceMoveMarkers||operation.forceMoveMarkers,
// (1) -- Push old text
result.push(this.getValueInRange(new core_range/* Range */.e(lastEndLineNumber,lastEndColumn,range.startLineNumber,range.startColumn))),
// (2) -- Push new text
operation.text.length>0&&result.push(operation.text),lastEndLineNumber=range.endLineNumber,lastEndColumn=range.endColumn}const text=result.join(""),[eolCount,firstLineLength,lastLineLength]=(0,tokensStore/* countEOL */.QZ)(text);return{sortIndex:0,identifier:operations[0].identifier,range:entireEditRange,rangeOffset:this.getOffsetAt(entireEditRange.startLineNumber,entireEditRange.startColumn),rangeLength:this.getValueLengthInRange(entireEditRange,0/* TextDefined */),text:text,eolCount:eolCount,firstLineLength:firstLineLength,lastLineLength:lastLineLength,forceMoveMarkers:forceMoveMarkers,isAutoWhitespaceEdit:!1}}_doApplyEdits(operations){operations.sort(PieceTreeTextBuffer._sortOpsDescending);let contentChanges=[];
// operations are from bottom to top
for(let i=0;i<operations.length;i++){let op=operations[i];const startLineNumber=op.range.startLineNumber,startColumn=op.range.startColumn,endLineNumber=op.range.endLineNumber,endColumn=op.range.endColumn;if(startLineNumber===endLineNumber&&startColumn===endColumn&&0===op.text.length)
// no-op
continue;op.text?(
// replacement
this._pieceTree.delete(op.rangeOffset,op.rangeLength),this._pieceTree.insert(op.rangeOffset,op.text,!0)):
// deletion
this._pieceTree.delete(op.rangeOffset,op.rangeLength);const contentChangeRange=new core_range/* Range */.e(startLineNumber,startColumn,endLineNumber,endColumn);contentChanges.push({range:contentChangeRange,rangeLength:op.rangeLength,text:op.text,rangeOffset:op.rangeOffset,forceMoveMarkers:op.forceMoveMarkers})}return contentChanges}findMatchesLineByLine(searchRange,searchData,captureMatches,limitResultCount){return this._pieceTree.findMatchesLineByLine(searchRange,searchData,captureMatches,limitResultCount)}
/**
     * Assumes `operations` are validated and sorted ascending
     */static _getInverseEditRanges(operations){let result=[],prevOpEndLineNumber=0,prevOpEndColumn=0,prevOp=null;for(let i=0,len=operations.length;i<len;i++){let startLineNumber,startColumn,resultRange,op=operations[i];if(prevOp?prevOp.range.endLineNumber===op.range.startLineNumber?(startLineNumber=prevOpEndLineNumber,startColumn=prevOpEndColumn+(op.range.startColumn-prevOp.range.endColumn)):(startLineNumber=prevOpEndLineNumber+(op.range.startLineNumber-prevOp.range.endLineNumber),startColumn=op.range.startColumn):(startLineNumber=op.range.startLineNumber,startColumn=op.range.startColumn),op.text.length>0){
// the operation inserts something
const lineCount=op.eolCount+1;
// single line insert
resultRange=1===lineCount?new core_range/* Range */.e(startLineNumber,startColumn,startLineNumber,startColumn+op.firstLineLength):new core_range/* Range */.e(startLineNumber,startColumn,startLineNumber+lineCount-1,op.lastLineLength+1)}else
// There is nothing to insert
resultRange=new core_range/* Range */.e(startLineNumber,startColumn,startLineNumber,startColumn);prevOpEndLineNumber=resultRange.endLineNumber,prevOpEndColumn=resultRange.endColumn,result.push(resultRange),prevOp=op}return result}static _sortOpsAscending(a,b){let r=core_range/* Range */.e.compareRangesUsingEnds(a.range,b.range);return 0===r?a.sortIndex-b.sortIndex:r}static _sortOpsDescending(a,b){let r=core_range/* Range */.e.compareRangesUsingEnds(a.range,b.range);return 0===r?b.sortIndex-a.sortIndex:-r}}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class PieceTreeTextBufferFactory{constructor(_chunks,_bom,_cr,_lf,_crlf,_containsRTL,_containsUnusualLineTerminators,_isBasicASCII,_normalizeEOL){this._chunks=_chunks,this._bom=_bom,this._cr=_cr,this._lf=_lf,this._crlf=_crlf,this._containsRTL=_containsRTL,this._containsUnusualLineTerminators=_containsUnusualLineTerminators,this._isBasicASCII=_isBasicASCII,this._normalizeEOL=_normalizeEOL}_getEOL(defaultEOL){const totalEOLCount=this._cr+this._lf+this._crlf,totalCRCount=this._cr+this._crlf;return 0===totalEOLCount?1/* LF */===defaultEOL?"\n":"\r\n":totalCRCount>totalEOLCount/2?"\r\n":"\n"}create(defaultEOL){const eol=this._getEOL(defaultEOL);let chunks=this._chunks;if(this._normalizeEOL&&("\r\n"===eol&&(this._cr>0||this._lf>0)||"\n"===eol&&(this._cr>0||this._crlf>0)))
// Normalize pieces
for(let i=0,len=chunks.length;i<len;i++){let str=chunks[i].buffer.replace(/\r\n|\r|\n/g,eol),newLineStart=createLineStartsFast(str);chunks[i]=new StringBuffer(str,newLineStart)}const textBuffer=new PieceTreeTextBuffer(chunks,this._bom,eol,this._containsRTL,this._containsUnusualLineTerminators,this._isBasicASCII,this._normalizeEOL);return{textBuffer:textBuffer,disposable:textBuffer}}}class PieceTreeTextBufferBuilder{constructor(){this.chunks=[],this.BOM="",this._hasPreviousChar=!1,this._previousChar=0,this._tmpLineStarts=[],this.cr=0,this.lf=0,this.crlf=0,this.containsRTL=!1,this.containsUnusualLineTerminators=!1,this.isBasicASCII=!0}acceptChunk(chunk){if(0===chunk.length)return;0===this.chunks.length&&strings/* startsWithUTF8BOM */.uS(chunk)&&(this.BOM=strings/* UTF8_BOM_CHARACTER */.c1,chunk=chunk.substr(1));const lastChar=chunk.charCodeAt(chunk.length-1);13/* CarriageReturn */===lastChar||lastChar>=55296&&lastChar<=56319?(
// last character is \r or a high surrogate => keep it back
this._acceptChunk1(chunk.substr(0,chunk.length-1),!1),this._hasPreviousChar=!0,this._previousChar=lastChar):(this._acceptChunk1(chunk,!1),this._hasPreviousChar=!1,this._previousChar=lastChar)}_acceptChunk1(chunk,allowEmptyStrings){(allowEmptyStrings||0!==chunk.length)&&(this._hasPreviousChar?this._acceptChunk2(String.fromCharCode(this._previousChar)+chunk):this._acceptChunk2(chunk))}_acceptChunk2(chunk){const lineStarts=createLineStarts(this._tmpLineStarts,chunk);this.chunks.push(new StringBuffer(chunk,lineStarts.lineStarts)),this.cr+=lineStarts.cr,this.lf+=lineStarts.lf,this.crlf+=lineStarts.crlf,this.isBasicASCII&&(this.isBasicASCII=lineStarts.isBasicASCII),this.isBasicASCII||this.containsRTL||(
// No need to check if it is basic ASCII
this.containsRTL=strings/* containsRTL */.Ut(chunk)),this.isBasicASCII||this.containsUnusualLineTerminators||(
// No need to check if it is basic ASCII
this.containsUnusualLineTerminators=strings/* containsUnusualLineTerminators */.ab(chunk))}finish(normalizeEOL=!0){return this._finish(),new PieceTreeTextBufferFactory(this.chunks,this.BOM,this.cr,this.lf,this.crlf,this.containsRTL,this.containsUnusualLineTerminators,this.isBasicASCII,normalizeEOL)}_finish(){if(0===this.chunks.length&&this._acceptChunk1("",!0),this._hasPreviousChar){this._hasPreviousChar=!1;
// recreate last chunk
let lastChunk=this.chunks[this.chunks.length-1];lastChunk.buffer+=String.fromCharCode(this._previousChar);let newLineStarts=createLineStartsFast(lastChunk.buffer);lastChunk.lineStarts=newLineStarts,13/* CarriageReturn */===this._previousChar&&this.cr++}}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/textModelEvents.js
var textModelEvents=__webpack_require__(983256),arrays=__webpack_require__(609488),lineTokens=__webpack_require__(878411),modes=__webpack_require__(860303),nullMode=__webpack_require__(428111),stopwatch=__webpack_require__(84013),platform=__webpack_require__(901432);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/arrays.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/textModelTokens.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class TokenizationStateStore{constructor(){this._beginState=[],this._valid=[],this._len=0,this._invalidLineStartIndex=0}_reset(initialState){this._beginState=[],this._valid=[],this._len=0,this._invalidLineStartIndex=0,initialState&&this._setBeginState(0,initialState)}flush(initialState){this._reset(initialState)}get invalidLineStartIndex(){return this._invalidLineStartIndex}_invalidateLine(lineIndex){lineIndex<this._len&&(this._valid[lineIndex]=!1),lineIndex<this._invalidLineStartIndex&&(this._invalidLineStartIndex=lineIndex)}_isValid(lineIndex){return lineIndex<this._len&&this._valid[lineIndex]}getBeginState(lineIndex){return lineIndex<this._len?this._beginState[lineIndex]:null}_ensureLine(lineIndex){while(lineIndex>=this._len)this._beginState[this._len]=null,this._valid[this._len]=!1,this._len++}_deleteLines(start,deleteCount){0!==deleteCount&&(start+deleteCount>this._len&&(deleteCount=this._len-start),this._beginState.splice(start,deleteCount),this._valid.splice(start,deleteCount),this._len-=deleteCount)}_insertLines(insertIndex,insertCount){if(0===insertCount)return;const beginState=[],valid=[];for(let i=0;i<insertCount;i++)beginState[i]=null,valid[i]=!1;this._beginState=arrays/* arrayInsert */.Zv(this._beginState,insertIndex,beginState),this._valid=arrays/* arrayInsert */.Zv(this._valid,insertIndex,valid),this._len+=insertCount}_setValid(lineIndex,valid){this._ensureLine(lineIndex),this._valid[lineIndex]=valid}_setBeginState(lineIndex,beginState){this._ensureLine(lineIndex),this._beginState[lineIndex]=beginState}setEndState(linesLength,lineIndex,endState){
// Check if this was the last line
if(this._setValid(lineIndex,!0),this._invalidLineStartIndex=lineIndex+1,lineIndex===linesLength-1)return;
// Check if the end state has changed
const previousEndState=this.getBeginState(lineIndex+1);if(null===previousEndState||!endState.equals(previousEndState))return this._setBeginState(lineIndex+1,endState),void this._invalidateLine(lineIndex+1);
// Perhaps we can skip tokenizing some lines...
let i=lineIndex+1;while(i<linesLength){if(!this._isValid(i))break;i++}this._invalidLineStartIndex=i}setFakeTokens(lineIndex){this._setValid(lineIndex,!1)}
//#region Editing
applyEdits(range,eolCount){const deletingLinesCnt=range.endLineNumber-range.startLineNumber,insertingLinesCnt=eolCount,editingLinesCnt=Math.min(deletingLinesCnt,insertingLinesCnt);for(let j=editingLinesCnt;j>=0;j--)this._invalidateLine(range.startLineNumber+j-1);this._acceptDeleteRange(range),this._acceptInsertText(new core_position/* Position */.L(range.startLineNumber,range.startColumn),eolCount)}_acceptDeleteRange(range){const firstLineIndex=range.startLineNumber-1;firstLineIndex>=this._len||this._deleteLines(range.startLineNumber,range.endLineNumber-range.startLineNumber)}_acceptInsertText(position,eolCount){const lineIndex=position.lineNumber-1;lineIndex>=this._len||this._insertLines(position.lineNumber,eolCount)}}class TextModelTokenization extends lifecycle/* Disposable */.JT{constructor(_textModel,_languageIdCodec){super(),this._textModel=_textModel,this._languageIdCodec=_languageIdCodec,this._isDisposed=!1,this._tokenizationStateStore=new TokenizationStateStore,this._tokenizationSupport=null,this._register(modes/* TokenizationRegistry */.RW.onDidChange((e=>{const languageId=this._textModel.getLanguageId();-1!==e.changedLanguages.indexOf(languageId)&&(this._resetTokenizationState(),this._textModel.clearTokens())}))),this._register(this._textModel.onDidChangeContentFast((e=>{if(e.isFlush)this._resetTokenizationState();else{for(let i=0,len=e.changes.length;i<len;i++){const change=e.changes[i],[eolCount]=(0,tokensStore/* countEOL */.QZ)(change.text);this._tokenizationStateStore.applyEdits(change.range,eolCount)}this._beginBackgroundTokenization()}}))),this._register(this._textModel.onDidChangeAttached((()=>{this._beginBackgroundTokenization()}))),this._register(this._textModel.onDidChangeLanguage((()=>{this._resetTokenizationState(),this._textModel.clearTokens()}))),this._resetTokenizationState()}dispose(){this._isDisposed=!0,super.dispose()}_resetTokenizationState(){const[tokenizationSupport,initialState]=initializeTokenization(this._textModel);this._tokenizationSupport=tokenizationSupport,this._tokenizationStateStore.flush(initialState),this._beginBackgroundTokenization()}_beginBackgroundTokenization(){this._textModel.isAttachedToEditor()&&this._hasLinesToTokenize()&&platform/* setImmediate */.xS((()=>{this._isDisposed||this._revalidateTokensNow()}))}_revalidateTokensNow(){const textModelLastLineNumber=this._textModel.getLineCount(),MAX_ALLOWED_TIME=1,builder=new tokensStore/* MultilineTokensBuilder */.DA,sw=stopwatch/* StopWatch */.G.create(!1);let tokenizedLineNumber=-1;while(this._hasLinesToTokenize()){if(sw.elapsed()>MAX_ALLOWED_TIME)
// Stop if MAX_ALLOWED_TIME is reached
break;if(tokenizedLineNumber=this._tokenizeOneInvalidLine(builder),tokenizedLineNumber>=textModelLastLineNumber)break}this._beginBackgroundTokenization(),this._textModel.setTokens(builder.tokens,!this._hasLinesToTokenize())}tokenizeViewport(startLineNumber,endLineNumber){const builder=new tokensStore/* MultilineTokensBuilder */.DA;this._tokenizeViewport(builder,startLineNumber,endLineNumber),this._textModel.setTokens(builder.tokens,!this._hasLinesToTokenize())}reset(){this._resetTokenizationState(),this._textModel.clearTokens()}forceTokenization(lineNumber){const builder=new tokensStore/* MultilineTokensBuilder */.DA;this._updateTokensUntilLine(builder,lineNumber),this._textModel.setTokens(builder.tokens,!this._hasLinesToTokenize())}isCheapToTokenize(lineNumber){if(!this._tokenizationSupport)return!0;const firstInvalidLineNumber=this._tokenizationStateStore.invalidLineStartIndex+1;return!(lineNumber>firstInvalidLineNumber)&&(lineNumber<firstInvalidLineNumber||this._textModel.getLineLength(lineNumber)<2048/* CHEAP_TOKENIZATION_LENGTH_LIMIT */)}_hasLinesToTokenize(){return!!this._tokenizationSupport&&this._tokenizationStateStore.invalidLineStartIndex<this._textModel.getLineCount()}_tokenizeOneInvalidLine(builder){if(!this._hasLinesToTokenize())return this._textModel.getLineCount()+1;const lineNumber=this._tokenizationStateStore.invalidLineStartIndex+1;return this._updateTokensUntilLine(builder,lineNumber),lineNumber}_updateTokensUntilLine(builder,lineNumber){if(!this._tokenizationSupport)return;const languageId=this._textModel.getLanguageId(),linesLength=this._textModel.getLineCount(),endLineIndex=lineNumber-1;
// Validate all states up to and including endLineIndex
for(let lineIndex=this._tokenizationStateStore.invalidLineStartIndex;lineIndex<=endLineIndex;lineIndex++){const text=this._textModel.getLineContent(lineIndex+1),lineStartState=this._tokenizationStateStore.getBeginState(lineIndex),r=safeTokenize(this._languageIdCodec,languageId,this._tokenizationSupport,text,!0,lineStartState);builder.add(lineIndex+1,r.tokens),this._tokenizationStateStore.setEndState(linesLength,lineIndex,r.endState),lineIndex=this._tokenizationStateStore.invalidLineStartIndex-1}}_tokenizeViewport(builder,startLineNumber,endLineNumber){if(!this._tokenizationSupport)
// nothing to do
return;if(endLineNumber<=this._tokenizationStateStore.invalidLineStartIndex)
// nothing to do
return;if(startLineNumber<=this._tokenizationStateStore.invalidLineStartIndex)
// tokenization has reached the viewport start...
return void this._updateTokensUntilLine(builder,endLineNumber);let nonWhitespaceColumn=this._textModel.getLineFirstNonWhitespaceColumn(startLineNumber);const fakeLines=[];let initialState=null;for(let i=startLineNumber-1;nonWhitespaceColumn>1&&i>=1;i--){const newNonWhitespaceIndex=this._textModel.getLineFirstNonWhitespaceColumn(i);if(0!==newNonWhitespaceIndex&&newNonWhitespaceIndex<nonWhitespaceColumn){if(initialState=this._tokenizationStateStore.getBeginState(i-1),initialState)break;fakeLines.push(this._textModel.getLineContent(i)),nonWhitespaceColumn=newNonWhitespaceIndex}}initialState||(initialState=this._tokenizationSupport.getInitialState());const languageId=this._textModel.getLanguageId();let state=initialState;for(let i=fakeLines.length-1;i>=0;i--){const r=safeTokenize(this._languageIdCodec,languageId,this._tokenizationSupport,fakeLines[i],!1,state);state=r.endState}for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){const text=this._textModel.getLineContent(lineNumber),r=safeTokenize(this._languageIdCodec,languageId,this._tokenizationSupport,text,!0,state);builder.add(lineNumber,r.tokens),this._tokenizationStateStore.setFakeTokens(lineNumber-1),state=r.endState}}}function initializeTokenization(textModel){const languageId=textModel.getLanguageId();let tokenizationSupport=textModel.isTooLargeForTokenization()?null:modes/* TokenizationRegistry */.RW.get(languageId),initialState=null;if(tokenizationSupport)try{initialState=tokenizationSupport.getInitialState()}catch(e){(0,errors/* onUnexpectedError */.dL)(e),tokenizationSupport=null}return[tokenizationSupport,initialState]}function safeTokenize(languageIdCodec,languageId,tokenizationSupport,text,hasEOL,state){let r=null;if(tokenizationSupport)try{r=tokenizationSupport.tokenize2(text,hasEOL,state.clone(),0)}catch(e){(0,errors/* onUnexpectedError */.dL)(e)}return r||(r=(0,nullMode/* nullTokenize2 */.mh)(languageIdCodec.encodeLanguageId(languageId),text,state,0)),lineTokens/* LineTokens */.A.convertToEndOffset(r.tokens,text.length),r}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js
var wordHelper=__webpack_require__(997461),languageConfigurationRegistry=__webpack_require__(594660),supports=__webpack_require__(640764),richEditBrackets=__webpack_require__(134227),common_color=__webpack_require__(41264),undoRedo=__webpack_require__(364862);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfigurationRegistry.js + 4 modules
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/bracketPairs.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class BracketInfo{constructor(range,
/** 0-based level */
nestingLevel,isInvalid){this.range=range,this.nestingLevel=nestingLevel,this.isInvalid=isInvalid}}class BracketPairInfo{constructor(range,openingBracketRange,closingBracketRange,
/**
     * 0-based
    */
nestingLevel){this.range=range,this.openingBracketRange=openingBracketRange,this.closingBracketRange=closingBracketRange,this.nestingLevel=nestingLevel}}class BracketPairWithMinIndentationInfo extends BracketPairInfo{constructor(range,openingBracketRange,closingBracketRange,
/**
     * 0-based
    */
nestingLevel,
/**
     * -1 if not requested, otherwise the size of the minimum indentation in the bracket pair in terms of visible columns.
    */
minVisibleColumnIndentation){super(range,openingBracketRange,closingBracketRange,nestingLevel),this.minVisibleColumnIndentation=minVisibleColumnIndentation}}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/impl/length.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Represents a non-negative length in terms of line and column count.
 * Prefer using {@link Length} for performance reasons.
*/
class LengthObj{constructor(lineCount,columnCount){this.lineCount=lineCount,this.columnCount=columnCount}toString(){return`${this.lineCount},${this.columnCount}`}}
/**
 * The end must be greater than or equal to the start.
*/function lengthDiff(startLineCount,startColumnCount,endLineCount,endColumnCount){return startLineCount!==endLineCount?toLength(endLineCount-startLineCount,endColumnCount):toLength(0,endColumnCount-startColumnCount)}const lengthZero=0;function lengthIsZero(length){return 0===length}
/*
 * We have 52 bits available in a JS number.
 * We use the upper 26 bits to store the line and the lower 26 bits to store the column.
 *
 * Set boolean to `true` when debugging, so that debugging is easier.
 */const factor=Math.pow(2,26);function toLength(lineCount,columnCount){
// llllllllllllllllllllllllllcccccccccccccccccccccccccc (52 bits)
//       line count (26 bits)    column count (26 bits)
// If there is no overflow (all values/sums below 2^26 = 67108864),
// we have `toLength(lns1, cols1) + toLength(lns2, cols2) = toLength(lns1 + lns2, cols1 + cols2)`.
return lineCount*factor+columnCount}function lengthToObj(length){const l=length,lineCount=Math.floor(l/factor),columnCount=l-lineCount*factor;return new LengthObj(lineCount,columnCount)}function lengthGetLineCount(length){return Math.floor(length/factor)}
/**
 * Returns the amount of columns of the given length, assuming that it does not span any line.
*/function lengthGetColumnCountIfZeroLineCount(length){return length}function lengthAdd(l1,l2){return l2<factor?l1+l2:l1-l1%factor+l2;// l1 - (l1 % factor) equals toLength(l1.lineCount, 0)
}
/**
 * Returns a non negative length `result` such that `lengthAdd(length1, result) = length2`, or zero if such length does not exist.
 */function lengthDiffNonNegative(length1,length2){const l1=length1,l2=length2,diff=l2-l1;if(diff<=0)
// line-count of length1 is higher than line-count of length2
// or they are equal and column-count of length1 is higher than column-count of length2
return lengthZero;const lineCount1=Math.floor(l1/factor),lineCount2=Math.floor(l2/factor),colCount2=l2-lineCount2*factor;if(lineCount1===lineCount2){const colCount1=l1-lineCount1*factor;return toLength(0,colCount2-colCount1)}return toLength(lineCount2-lineCount1,colCount2)}function lengthLessThan(length1,length2){
// First, compare line counts, then column counts.
return length1<length2}function lengthLessThanEqual(length1,length2){return length1<=length2}function lengthGreaterThanEqual(length1,length2){return length1>=length2}function positionToLength(position){return toLength(position.lineNumber-1,position.column-1)}function lengthsToRange(lengthStart,lengthEnd){const l=lengthStart,lineCount=Math.floor(l/factor),colCount=l-lineCount*factor,l2=lengthEnd,lineCount2=Math.floor(l2/factor),colCount2=l2-lineCount2*factor;return new core_range/* Range */.e(lineCount+1,colCount+1,lineCount2+1,colCount2+1)}function lengthOfString(str){const lines=(0,strings/* splitLines */.uq)(str);return toLength(lines.length-1,lines[lines.length-1].length)}
/**
 * Computes a numeric hash of the given length.
*/function lengthHash(length){return length}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/impl/beforeEditPositionMapper.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class TextEditInfo{constructor(startOffset,endOffset,newLength){this.startOffset=startOffset,this.endOffset=endOffset,this.newLength=newLength}}class BeforeEditPositionMapper{
/**
     * @param edits Must be sorted by offset in ascending order.
    */
constructor(edits,documentLength){this.documentLength=documentLength,this.nextEditIdx=0,this.deltaOldToNewLineCount=0,this.deltaOldToNewColumnCount=0,this.deltaLineIdxInOld=-1,this.edits=edits.map((edit=>TextEditInfoCache.from(edit)))}
/**
     * @param offset Must be equal to or greater than the last offset this method has been called with.
    */getOffsetBeforeChange(offset){return this.adjustNextEdit(offset),this.translateCurToOld(offset)}
/**
     * @param offset Must be equal to or greater than the last offset this method has been called with.
    */getDistanceToNextChange(offset){this.adjustNextEdit(offset);const nextEdit=this.edits[this.nextEditIdx],nextChangeOffset=nextEdit?this.translateOldToCur(nextEdit.offsetObj):this.documentLength;return lengthDiffNonNegative(offset,nextChangeOffset)}translateOldToCur(oldOffsetObj){return oldOffsetObj.lineCount===this.deltaLineIdxInOld?toLength(oldOffsetObj.lineCount+this.deltaOldToNewLineCount,oldOffsetObj.columnCount+this.deltaOldToNewColumnCount):toLength(oldOffsetObj.lineCount+this.deltaOldToNewLineCount,oldOffsetObj.columnCount)}translateCurToOld(newOffset){const offsetObj=lengthToObj(newOffset);return offsetObj.lineCount-this.deltaOldToNewLineCount===this.deltaLineIdxInOld?toLength(offsetObj.lineCount-this.deltaOldToNewLineCount,offsetObj.columnCount-this.deltaOldToNewColumnCount):toLength(offsetObj.lineCount-this.deltaOldToNewLineCount,offsetObj.columnCount)}adjustNextEdit(offset){while(this.nextEditIdx<this.edits.length){const nextEdit=this.edits[this.nextEditIdx],nextEditEndOffsetInCur=this.translateOldToCur(nextEdit.endOffsetAfterObj);
// After applying the edit, what is its end offset (considering all previous edits)?
if(!lengthLessThanEqual(nextEditEndOffsetInCur,offset))
// We are in or before the edit.
break;{
// We are after the edit, skip it
this.nextEditIdx++;const nextEditEndOffsetInCurObj=lengthToObj(nextEditEndOffsetInCur),nextEditEndOffsetBeforeInCurObj=lengthToObj(this.translateOldToCur(nextEdit.endOffsetBeforeObj)),lineDelta=nextEditEndOffsetInCurObj.lineCount-nextEditEndOffsetBeforeInCurObj.lineCount;
// Before applying the edit, what is its end offset (considering all previous edits)?
this.deltaOldToNewLineCount+=lineDelta;const previousColumnDelta=this.deltaLineIdxInOld===nextEdit.endOffsetBeforeObj.lineCount?this.deltaOldToNewColumnCount:0,columnDelta=nextEditEndOffsetInCurObj.columnCount-nextEditEndOffsetBeforeInCurObj.columnCount;this.deltaOldToNewColumnCount=previousColumnDelta+columnDelta,this.deltaLineIdxInOld=nextEdit.endOffsetBeforeObj.lineCount}}}}class TextEditInfoCache{constructor(startOffset,endOffset,textLength){this.endOffsetBeforeObj=lengthToObj(endOffset),this.endOffsetAfterObj=lengthToObj(lengthAdd(startOffset,textLength)),this.offsetObj=lengthToObj(startOffset)}static from(edit){return new TextEditInfoCache(edit.startOffset,edit.endOffset,edit.newLength)}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorColumns.js
var cursorColumns=__webpack_require__(547707);// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/impl/smallImmutableSet.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const emptyArr=new Array;
/**
 * Represents an immutable set that works best for a small number of elements (less than 32).
 * It uses bits to encode element membership efficiently.
*/class SmallImmutableSet{constructor(items,additionalItems){this.items=items,this.additionalItems=additionalItems}static create(items,additionalItems){if(items<=128&&0===additionalItems.length){
// We create a cache of 128=2^7 elements to cover all sets with up to 7 (dense) elements.
let cached=SmallImmutableSet.cache[items];return cached||(cached=new SmallImmutableSet(items,additionalItems),SmallImmutableSet.cache[items]=cached),cached}return new SmallImmutableSet(items,additionalItems)}static getEmpty(){return this.empty}add(value,keyProvider){const key=keyProvider.getKey(value);let idx=key>>5;// divided by 32
if(0===idx){
// fast path
const newItem=1<<key|this.items;return newItem===this.items?this:SmallImmutableSet.create(newItem,this.additionalItems)}idx--;const newItems=this.additionalItems.slice(0);while(newItems.length<idx)newItems.push(0);return newItems[idx]|=1<<(31&key),SmallImmutableSet.create(this.items,newItems)}merge(other){const merged=this.items|other.items;if(this.additionalItems===emptyArr&&other.additionalItems===emptyArr)
// fast path
return merged===this.items?this:merged===other.items?other:SmallImmutableSet.create(merged,emptyArr);
// This can be optimized, but it's not a common case
const newItems=new Array;for(let i=0;i<Math.max(this.additionalItems.length,other.additionalItems.length);i++){const item1=this.additionalItems[i]||0,item2=other.additionalItems[i]||0;newItems.push(item1|item2)}return SmallImmutableSet.create(merged,newItems)}intersects(other){if(0!==(this.items&other.items))return!0;for(let i=0;i<Math.min(this.additionalItems.length,other.additionalItems.length);i++)if(0!==(this.additionalItems[i]&other.additionalItems[i]))return!0;return!1}}SmallImmutableSet.cache=new Array(129),SmallImmutableSet.empty=SmallImmutableSet.create(0,emptyArr);const identityKeyProvider={getKey(value){return value}};
/**
 * Assigns values a unique incrementing key.
*/class DenseKeyProvider{constructor(){this.items=new Map}getKey(value){let existing=this.items.get(value);return void 0===existing&&(existing=this.items.size,this.items.set(value,existing)),existing}}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/impl/ast.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * The base implementation for all AST nodes.
*/
class BaseAstNode{constructor(length){this._length=length}
/**
     * The length of the entire node, which should equal the sum of lengths of all children.
    */get length(){return this._length}}
/**
 * Represents a bracket pair including its child (e.g. `{ ... }`).
 * Might be unclosed.
 * Immutable, if all children are immutable.
*/class PairAstNode extends BaseAstNode{constructor(length,openingBracket,child,closingBracket,missingOpeningBracketIds){super(length),this.openingBracket=openingBracket,this.child=child,this.closingBracket=closingBracket,this.missingOpeningBracketIds=missingOpeningBracketIds}static create(openingBracket,child,closingBracket){let length=openingBracket.length;return child&&(length=lengthAdd(length,child.length)),closingBracket&&(length=lengthAdd(length,closingBracket.length)),new PairAstNode(length,openingBracket,child,closingBracket,child?child.missingOpeningBracketIds:SmallImmutableSet.getEmpty())}get kind(){return 2/* Pair */}get listHeight(){return 0}get childrenLength(){return 3}getChild(idx){switch(idx){case 0:return this.openingBracket;case 1:return this.child;case 2:return this.closingBracket}throw new Error("Invalid child index")}
/**
     * Avoid using this property, it allocates an array!
    */get children(){const result=new Array;return result.push(this.openingBracket),this.child&&result.push(this.child),this.closingBracket&&result.push(this.closingBracket),result}canBeReused(openBracketIds){return null!==this.closingBracket&&!openBracketIds.intersects(this.missingOpeningBracketIds)}deepClone(){return new PairAstNode(this.length,this.openingBracket.deepClone(),this.child&&this.child.deepClone(),this.closingBracket&&this.closingBracket.deepClone(),this.missingOpeningBracketIds)}computeMinIndentation(offset,textModel){return this.child?this.child.computeMinIndentation(lengthAdd(offset,this.openingBracket.length),textModel):Number.MAX_SAFE_INTEGER}}class ListAstNode extends BaseAstNode{
/**
     * Use ListAstNode.create.
    */
constructor(length,listHeight,_missingOpeningBracketIds){super(length),this.listHeight=listHeight,this._missingOpeningBracketIds=_missingOpeningBracketIds,this.cachedMinIndentation=-1}
/**
     * This method uses more memory-efficient list nodes that can only store 2 or 3 children.
    */static create23(item1,item2,item3,immutable=!1){let length=item1.length,missingBracketIds=item1.missingOpeningBracketIds;if(item1.listHeight!==item2.listHeight)throw new Error("Invalid list heights");if(length=lengthAdd(length,item2.length),missingBracketIds=missingBracketIds.merge(item2.missingOpeningBracketIds),item3){if(item1.listHeight!==item3.listHeight)throw new Error("Invalid list heights");length=lengthAdd(length,item3.length),missingBracketIds=missingBracketIds.merge(item3.missingOpeningBracketIds)}return immutable?new Immutable23ListAstNode(length,item1.listHeight+1,item1,item2,item3,missingBracketIds):new TwoThreeListAstNode(length,item1.listHeight+1,item1,item2,item3,missingBracketIds)}static getEmpty(){return new ImmutableArrayListAstNode(lengthZero,0,[],SmallImmutableSet.getEmpty())}get kind(){return 4/* List */}get missingOpeningBracketIds(){return this._missingOpeningBracketIds}throwIfImmutable(){
// NOOP
}makeLastElementMutable(){this.throwIfImmutable();const childCount=this.childrenLength;if(0===childCount)return;const lastChild=this.getChild(childCount-1),mutable=4/* List */===lastChild.kind?lastChild.toMutable():lastChild;return lastChild!==mutable&&this.setChild(childCount-1,mutable),mutable}makeFirstElementMutable(){this.throwIfImmutable();const childCount=this.childrenLength;if(0===childCount)return;const firstChild=this.getChild(0),mutable=4/* List */===firstChild.kind?firstChild.toMutable():firstChild;return firstChild!==mutable&&this.setChild(0,mutable),mutable}canBeReused(openBracketIds){if(openBracketIds.intersects(this.missingOpeningBracketIds))return!1;let lastLength,lastChild=this;while(4/* List */===lastChild.kind&&(lastLength=lastChild.childrenLength)>0)lastChild=lastChild.getChild(lastLength-1);return lastChild.canBeReused(openBracketIds)}handleChildrenChanged(){this.throwIfImmutable();const count=this.childrenLength;let length=this.getChild(0).length,unopenedBrackets=this.getChild(0).missingOpeningBracketIds;for(let i=1;i<count;i++){const child=this.getChild(i);length=lengthAdd(length,child.length),unopenedBrackets=unopenedBrackets.merge(child.missingOpeningBracketIds)}this._length=length,this._missingOpeningBracketIds=unopenedBrackets,this.cachedMinIndentation=-1}computeMinIndentation(offset,textModel){if(-1!==this.cachedMinIndentation)return this.cachedMinIndentation;let minIndentation=Number.MAX_SAFE_INTEGER,childOffset=offset;for(let i=0;i<this.childrenLength;i++){const child=this.getChild(i);child&&(minIndentation=Math.min(minIndentation,child.computeMinIndentation(childOffset,textModel)),childOffset=lengthAdd(childOffset,child.length))}return this.cachedMinIndentation=minIndentation,minIndentation}}class TwoThreeListAstNode extends ListAstNode{constructor(length,listHeight,_item1,_item2,_item3,missingOpeningBracketIds){super(length,listHeight,missingOpeningBracketIds),this._item1=_item1,this._item2=_item2,this._item3=_item3}get childrenLength(){return null!==this._item3?3:2}getChild(idx){switch(idx){case 0:return this._item1;case 1:return this._item2;case 2:return this._item3}throw new Error("Invalid child index")}setChild(idx,node){switch(idx){case 0:return void(this._item1=node);case 1:return void(this._item2=node);case 2:return void(this._item3=node)}throw new Error("Invalid child index")}get children(){return this._item3?[this._item1,this._item2,this._item3]:[this._item1,this._item2]}get item1(){return this._item1}get item2(){return this._item2}get item3(){return this._item3}deepClone(){return new TwoThreeListAstNode(this.length,this.listHeight,this._item1.deepClone(),this._item2.deepClone(),this._item3?this._item3.deepClone():null,this.missingOpeningBracketIds)}appendChildOfSameHeight(node){if(this._item3)throw new Error("Cannot append to a full (2,3) tree node");this.throwIfImmutable(),this._item3=node,this.handleChildrenChanged()}unappendChild(){if(!this._item3)throw new Error("Cannot remove from a non-full (2,3) tree node");this.throwIfImmutable();const result=this._item3;return this._item3=null,this.handleChildrenChanged(),result}prependChildOfSameHeight(node){if(this._item3)throw new Error("Cannot prepend to a full (2,3) tree node");this.throwIfImmutable(),this._item3=this._item2,this._item2=this._item1,this._item1=node,this.handleChildrenChanged()}unprependChild(){if(!this._item3)throw new Error("Cannot remove from a non-full (2,3) tree node");this.throwIfImmutable();const result=this._item1;return this._item1=this._item2,this._item2=this._item3,this._item3=null,this.handleChildrenChanged(),result}toMutable(){return this}}
/**
 * Immutable, if all children are immutable.
*/class Immutable23ListAstNode extends TwoThreeListAstNode{toMutable(){return new TwoThreeListAstNode(this.length,this.listHeight,this.item1,this.item2,this.item3,this.missingOpeningBracketIds)}throwIfImmutable(){throw new Error("this instance is immutable")}}
/**
 * For debugging.
*/class ArrayListAstNode extends ListAstNode{constructor(length,listHeight,_children,missingOpeningBracketIds){super(length,listHeight,missingOpeningBracketIds),this._children=_children}get childrenLength(){return this._children.length}getChild(idx){return this._children[idx]}setChild(idx,child){this._children[idx]=child}get children(){return this._children}deepClone(){const children=new Array(this._children.length);for(let i=0;i<this._children.length;i++)children[i]=this._children[i].deepClone();return new ArrayListAstNode(this.length,this.listHeight,children,this.missingOpeningBracketIds)}appendChildOfSameHeight(node){this.throwIfImmutable(),this._children.push(node),this.handleChildrenChanged()}unappendChild(){this.throwIfImmutable();const item=this._children.pop();return this.handleChildrenChanged(),item}prependChildOfSameHeight(node){this.throwIfImmutable(),this._children.unshift(node),this.handleChildrenChanged()}unprependChild(){this.throwIfImmutable();const item=this._children.shift();return this.handleChildrenChanged(),item}toMutable(){return this}}
/**
 * Immutable, if all children are immutable.
*/class ImmutableArrayListAstNode extends ArrayListAstNode{toMutable(){return new ArrayListAstNode(this.length,this.listHeight,[...this.children],this.missingOpeningBracketIds)}throwIfImmutable(){throw new Error("this instance is immutable")}}const emptyArray=[];class ImmutableLeafAstNode extends BaseAstNode{get listHeight(){return 0}get childrenLength(){return 0}getChild(idx){return null}get children(){return emptyArray}deepClone(){return this}}class TextAstNode extends ImmutableLeafAstNode{get kind(){return 0/* Text */}get missingOpeningBracketIds(){return SmallImmutableSet.getEmpty()}canBeReused(_openedBracketIds){return!0}computeMinIndentation(offset,textModel){const start=lengthToObj(offset),startLineNumber=(0===start.columnCount?start.lineCount:start.lineCount+1)+1,endLineNumber=lengthGetLineCount(lengthAdd(offset,this.length))+1;
// Text ast nodes don't have partial indentation (ensured by the tokenizer).
// Thus, if this text node does not start at column 0, the first line cannot have any indentation at all.
let result=Number.MAX_SAFE_INTEGER;for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){const firstNonWsColumn=textModel.getLineFirstNonWhitespaceColumn(lineNumber),lineContent=textModel.getLineContent(lineNumber);if(0===firstNonWsColumn)continue;const visibleColumn=cursorColumns/* CursorColumns */.i.visibleColumnFromColumn(lineContent,firstNonWsColumn,textModel.getOptions().tabSize);result=Math.min(result,visibleColumn)}return result}}class BracketAstNode extends ImmutableLeafAstNode{constructor(length){super(length)}static create(length){const lengthKey=lengthHash(length),cached=BracketAstNode.cacheByLength.get(lengthKey);if(cached)return cached;const node=new BracketAstNode(length);return BracketAstNode.cacheByLength.set(lengthKey,node),node}get kind(){return 1/* Bracket */}get missingOpeningBracketIds(){return SmallImmutableSet.getEmpty()}canBeReused(_openedBracketIds){
// These nodes could be reused,
// but not in a general way.
// Their parent may be reused.
return!1}computeMinIndentation(offset,textModel){return Number.MAX_SAFE_INTEGER}}BracketAstNode.cacheByLength=new Map;class InvalidBracketAstNode extends ImmutableLeafAstNode{constructor(closingBrackets,length){super(length),this.missingOpeningBracketIds=closingBrackets}get kind(){return 3/* UnexpectedClosingBracket */}canBeReused(openedBracketIds){return!openedBracketIds.intersects(this.missingOpeningBracketIds)}computeMinIndentation(offset,textModel){return Number.MAX_SAFE_INTEGER}}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/impl/tokenizer.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class Token{constructor(length,kind,
/**
     * If this token is an opening bracket, this is the id of the opening bracket.
     * If this token is a closing bracket, this is the id of the first opening bracket that is closed by this bracket.
     * Otherwise, it is -1.
     */
bracketId,
/**
     * If this token is an opening bracket, this just contains `bracketId`.
     * If this token is a closing bracket, this lists all opening bracket ids, that it closes.
     * Otherwise, it is empty.
     */
bracketIds,astNode){this.length=length,this.kind=kind,this.bracketId=bracketId,this.bracketIds=bracketIds,this.astNode=astNode}}class TextBufferTokenizer{constructor(textModel,bracketTokens){this.textModel=textModel,this.bracketTokens=bracketTokens,this.reader=new NonPeekableTextBufferTokenizer(this.textModel,this.bracketTokens),this._offset=lengthZero,this.didPeek=!1,this.peeked=null,this.textBufferLineCount=textModel.getLineCount(),this.textBufferLastLineLength=textModel.getLineLength(this.textBufferLineCount)}get offset(){return this._offset}get length(){return toLength(this.textBufferLineCount,this.textBufferLastLineLength)}skip(length){this.didPeek=!1,this._offset=lengthAdd(this._offset,length);const obj=lengthToObj(this._offset);this.reader.setPosition(obj.lineCount,obj.columnCount)}read(){let token;return this.peeked?(this.didPeek=!1,token=this.peeked):token=this.reader.read(),token&&(this._offset=lengthAdd(this._offset,token.length)),token}peek(){return this.didPeek||(this.peeked=this.reader.read(),this.didPeek=!0),this.peeked}}
/**
 * Does not support peek.
*/class NonPeekableTextBufferTokenizer{constructor(textModel,bracketTokens){this.textModel=textModel,this.bracketTokens=bracketTokens,this.lineIdx=0,this.line=null,this.lineCharOffset=0,this.lineTokens=null,this.lineTokenOffset=0,
/** Must be a zero line token. The end of the document cannot be peeked. */
this.peekedToken=null,this.textBufferLineCount=textModel.getLineCount(),this.textBufferLastLineLength=textModel.getLineLength(this.textBufferLineCount)}setPosition(lineIdx,column){
// We must not jump into a token!
lineIdx===this.lineIdx?(this.lineCharOffset=column,this.lineTokenOffset=0===this.lineCharOffset?0:this.lineTokens.findTokenIndexAtOffset(this.lineCharOffset)):(this.lineIdx=lineIdx,this.lineCharOffset=column,this.line=null),this.peekedToken=null}read(){if(this.peekedToken){const token=this.peekedToken;return this.peekedToken=null,this.lineCharOffset+=lengthGetColumnCountIfZeroLineCount(token.length),token}if(this.lineIdx>this.textBufferLineCount-1||this.lineIdx===this.textBufferLineCount-1&&this.lineCharOffset>=this.textBufferLastLineLength)
// We are after the end
return null;null===this.line&&(this.lineTokens=this.textModel.getLineTokens(this.lineIdx+1),this.line=this.lineTokens.getLineContent(),this.lineTokenOffset=0===this.lineCharOffset?0:this.lineTokens.findTokenIndexAtOffset(this.lineCharOffset));const startLineIdx=this.lineIdx,startLineCharOffset=this.lineCharOffset;
// limits the length of text tokens.
// If text tokens get too long, incremental updates will be slow
let lengthHeuristic=0;while(1){const lineTokens=this.lineTokens,tokenCount=lineTokens.getCount();let peekedBracketToken=null;if(this.lineTokenOffset<tokenCount){const tokenMetadata=lineTokens.getMetadata(this.lineTokenOffset);while(this.lineTokenOffset+1<tokenCount&&tokenMetadata===lineTokens.getMetadata(this.lineTokenOffset+1))
// Skip tokens that are identical.
// Sometimes, (bracket) identifiers are split up into multiple tokens.
this.lineTokenOffset++;const isOther=0/* Other */===modes/* TokenMetadata */.NX.getTokenType(tokenMetadata),endOffset=lineTokens.getEndOffset(this.lineTokenOffset);
// Is there a bracket token next? Only consume text.
if(isOther&&endOffset!==this.lineCharOffset){const languageId=lineTokens.getLanguageId(this.lineTokenOffset),text=this.line.substring(this.lineCharOffset,endOffset),brackets=this.bracketTokens.getSingleLanguageBracketTokens(languageId),regexp=brackets.regExpGlobal;if(regexp){regexp.lastIndex=0;const match=regexp.exec(text);match&&(peekedBracketToken=brackets.getToken(match[0]),peekedBracketToken&&(
// Consume leading text of the token
this.lineCharOffset+=match.index))}}if(lengthHeuristic+=endOffset-this.lineCharOffset,peekedBracketToken){
// Don't skip the entire token, as a single token could contain multiple brackets.
if(startLineIdx!==this.lineIdx||startLineCharOffset!==this.lineCharOffset){
// There is text before the bracket
this.peekedToken=peekedBracketToken;break}
// Consume the peeked token
return this.lineCharOffset+=lengthGetColumnCountIfZeroLineCount(peekedBracketToken.length),peekedBracketToken}
// Skip the entire token, as the token contains no brackets at all.
this.lineTokenOffset++,this.lineCharOffset=endOffset}else{if(this.lineIdx===this.textBufferLineCount-1)break;// max 1000/33 = 30 lines
// This limits the amount of work to recompute min-indentation
if(this.lineIdx++,this.lineTokens=this.textModel.getLineTokens(this.lineIdx+1),this.lineTokenOffset=0,this.line=this.lineTokens.getLineContent(),this.lineCharOffset=0,lengthHeuristic+=33,lengthHeuristic>1e3)
// only break (automatically) at the end of line.
break}if(lengthHeuristic>1500)
// Eventually break regardless of the line length so that
// very long lines do not cause bad performance.
// This effective limits max indentation to 500, as
// indentation is not computed across multiple text nodes.
break}
// If a token contains some proper indentation, it also contains \n{INDENTATION+}(?!{INDENTATION}),
// unless the line is too long.
// Thus, the min indentation of the document is the minimum min indentation of every text node.
const length=lengthDiff(startLineIdx,startLineCharOffset,this.lineIdx,this.lineCharOffset);return new Token(length,0/* Text */,-1,SmallImmutableSet.getEmpty(),new TextAstNode(length))}}class FastTokenizer{constructor(text,brackets){this.text=text,this._offset=lengthZero,this.idx=0;const regExpStr=brackets.getRegExpStr(),regexp=regExpStr?new RegExp(brackets.getRegExpStr()+"|\n","g"):null,tokens=[];let match,curLineCount=0,lastLineBreakOffset=0,lastTokenEndOffset=0,lastTokenEndLine=0;const smallTextTokens0Line=new Array;for(let i=0;i<60;i++)smallTextTokens0Line.push(new Token(toLength(0,i),0/* Text */,-1,SmallImmutableSet.getEmpty(),new TextAstNode(toLength(0,i))));const smallTextTokens1Line=new Array;for(let i=0;i<60;i++)smallTextTokens1Line.push(new Token(toLength(1,i),0/* Text */,-1,SmallImmutableSet.getEmpty(),new TextAstNode(toLength(1,i))));if(regexp){regexp.lastIndex=0;
// If a token contains indentation, it also contains \n{INDENTATION+}(?!{INDENTATION})
while(null!==(match=regexp.exec(text))){const curOffset=match.index,value=match[0];if("\n"===value)curLineCount++,lastLineBreakOffset=curOffset+1;else{if(lastTokenEndOffset!==curOffset){let token;if(lastTokenEndLine===curLineCount){const colCount=curOffset-lastTokenEndOffset;if(colCount<smallTextTokens0Line.length)token=smallTextTokens0Line[colCount];else{const length=toLength(0,colCount);token=new Token(length,0/* Text */,-1,SmallImmutableSet.getEmpty(),new TextAstNode(length))}}else{const lineCount=curLineCount-lastTokenEndLine,colCount=curOffset-lastLineBreakOffset;if(1===lineCount&&colCount<smallTextTokens1Line.length)token=smallTextTokens1Line[colCount];else{const length=toLength(lineCount,colCount);token=new Token(length,0/* Text */,-1,SmallImmutableSet.getEmpty(),new TextAstNode(length))}}tokens.push(token)}
// value is matched by regexp, so the token must exist
tokens.push(brackets.getToken(value)),lastTokenEndOffset=curOffset+value.length,lastTokenEndLine=curLineCount}}}const offset=text.length;if(lastTokenEndOffset!==offset){const length=lastTokenEndLine===curLineCount?toLength(0,offset-lastTokenEndOffset):toLength(curLineCount-lastTokenEndLine,offset-lastLineBreakOffset);tokens.push(new Token(length,0/* Text */,-1,SmallImmutableSet.getEmpty(),new TextAstNode(length)))}this.length=toLength(curLineCount,offset-lastLineBreakOffset),this.tokens=tokens}get offset(){return this._offset}read(){return this.tokens[this.idx++]||null}peek(){return this.tokens[this.idx]||null}skip(length){throw new errors/* NotSupportedError */.B8}}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/impl/brackets.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class BracketTokens{constructor(map){this.map=map,this.hasRegExp=!1,this._regExpGlobal=null}static createFromLanguage(configuration,denseKeyProvider){function getId(languageId,openingText){return denseKeyProvider.getKey(`${languageId}:::${openingText}`)}const brackets=configuration.characterPair.getColorizedBrackets(),closingBrackets=new Map,openingBrackets=new Set;for(const[openingText,closingText]of brackets){openingBrackets.add(openingText);let info=closingBrackets.get(closingText);const openingTextId=getId(configuration.languageId,openingText);info||(info={openingBrackets:SmallImmutableSet.getEmpty(),first:openingTextId},closingBrackets.set(closingText,info)),info.openingBrackets=info.openingBrackets.add(openingTextId,identityKeyProvider)}const map=new Map;for(const[closingText,info]of closingBrackets){const length=toLength(0,closingText.length);map.set(closingText,new Token(length,2/* ClosingBracket */,info.first,info.openingBrackets,BracketAstNode.create(length)))}for(const openingText of openingBrackets){const length=toLength(0,openingText.length),openingTextId=getId(configuration.languageId,openingText);map.set(openingText,new Token(length,1/* OpeningBracket */,openingTextId,SmallImmutableSet.getEmpty().add(openingTextId,identityKeyProvider),BracketAstNode.create(length)))}return new BracketTokens(map)}getRegExpStr(){if(this.isEmpty)return null;{const keys=[...this.map.keys()];return keys.sort(),keys.reverse(),keys.map((k=>prepareBracketForRegExp(k))).join("|")}}
/**
     * Returns null if there is no such regexp (because there are no brackets).
    */get regExpGlobal(){if(!this.hasRegExp){const regExpStr=this.getRegExpStr();this._regExpGlobal=regExpStr?new RegExp(regExpStr,"g"):null,this.hasRegExp=!0}return this._regExpGlobal}getToken(value){return this.map.get(value)}get isEmpty(){return 0===this.map.size}}function prepareBracketForRegExp(str){const escaped=(0,strings/* escapeRegExpCharacters */.ec)(str),needsWordBoundaries=/^[\w ]+$/.test(str);
// This bracket pair uses letters like e.g. "begin" - "end" (see https://github.com/microsoft/vscode/issues/132162)
return needsWordBoundaries?`\\b${escaped}\\b`:escaped}class LanguageAgnosticBracketTokens{constructor(denseKeyProvider,getLanguageConfiguration){this.denseKeyProvider=denseKeyProvider,this.getLanguageConfiguration=getLanguageConfiguration,this.languageIdToBracketTokens=new Map}didLanguageChange(languageId){const existing=this.languageIdToBracketTokens.get(languageId);if(!existing)return!1;const newRegExpStr=BracketTokens.createFromLanguage(this.getLanguageConfiguration(languageId),this.denseKeyProvider).getRegExpStr();return existing.getRegExpStr()!==newRegExpStr}getSingleLanguageBracketTokens(languageId){let singleLanguageBracketTokens=this.languageIdToBracketTokens.get(languageId);return singleLanguageBracketTokens||(singleLanguageBracketTokens=BracketTokens.createFromLanguage(this.getLanguageConfiguration(languageId),this.denseKeyProvider),this.languageIdToBracketTokens.set(languageId,singleLanguageBracketTokens)),singleLanguageBracketTokens}}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/impl/concat23Trees.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Concatenates a list of (2,3) AstNode's into a single (2,3) AstNode.
 * This mutates the items of the input array!
 * If all items have the same height, this method has runtime O(items.length).
 * Otherwise, it has runtime O(items.length * max(log(items.length), items.max(i => i.height))).
*/
function concat23Trees(items){if(0===items.length)return null;if(1===items.length)return items[0];let i=0;
/**
     * Reads nodes of same height and concatenates them to a single node.
    */function readNode(){if(i>=items.length)return null;const start=i,height=items[start].listHeight;i++;while(i<items.length&&items[i].listHeight===height)i++;return i-start>=2?concat23TreesOfSameHeight(0===start&&i===items.length?items:items.slice(start,i),!1):items[start]}
// The items might not have the same height.
// We merge all items by using a binary concat operator.
let first=readNode(),second=readNode();// There must be a first item
if(!second)return first;for(let item=readNode();item;item=readNode())
// Prefer concatenating smaller trees, as the runtime of concat depends on the tree height.
heightDiff(first,second)<=heightDiff(second,item)?(first=concat(first,second),second=item):second=concat(second,item);const result=concat(first,second);return result}function concat23TreesOfSameHeight(items,createImmutableLists=!1){if(0===items.length)return null;if(1===items.length)return items[0];let length=items.length;
// All trees have same height, just create parent nodes.
while(length>3){const newLength=length>>1;for(let i=0;i<newLength;i++){const j=i<<1;items[i]=ListAstNode.create23(items[j],items[j+1],j+3===length?items[j+2]:null,createImmutableLists)}length=newLength}return ListAstNode.create23(items[0],items[1],length>=3?items[2]:null,createImmutableLists)}function heightDiff(node1,node2){return Math.abs(node1.listHeight-node2.listHeight)}function concat(node1,node2){return node1.listHeight===node2.listHeight?ListAstNode.create23(node1,node2,null,!1):node1.listHeight>node2.listHeight?append(node1,node2):prepend(node2,node1)}
/**
 * Appends the given node to the end of this (2,3) tree.
 * Returns the new root.
*/function append(list,nodeToAppend){list=list.toMutable();let curNode=list;const parents=new Array;let nodeToAppendOfCorrectHeight;while(1){
// assert nodeToInsert.listHeight <= curNode.listHeight
if(nodeToAppend.listHeight===curNode.listHeight){nodeToAppendOfCorrectHeight=nodeToAppend;break}
// assert 0 <= nodeToInsert.listHeight < curNode.listHeight
if(4/* List */!==curNode.kind)throw new Error("unexpected");parents.push(curNode),
// assert 2 <= curNode.childrenLength <= 3
curNode=curNode.makeLastElementMutable()}
// assert nodeToAppendOfCorrectHeight!.listHeight === curNode.listHeight
for(let i=parents.length-1;i>=0;i--){const parent=parents[i];nodeToAppendOfCorrectHeight?
// Can we take the element?
parent.childrenLength>=3?
// assert parent.childrenLength === 3 && parent.listHeight === nodeToAppendOfCorrectHeight.listHeight + 1
// we need to split to maintain (2,3)-tree property.
// Send the third element + the new element to the parent.
nodeToAppendOfCorrectHeight=ListAstNode.create23(parent.unappendChild(),nodeToAppendOfCorrectHeight,null,!1):(parent.appendChildOfSameHeight(nodeToAppendOfCorrectHeight),nodeToAppendOfCorrectHeight=void 0):parent.handleChildrenChanged()}return nodeToAppendOfCorrectHeight?ListAstNode.create23(list,nodeToAppendOfCorrectHeight,null,!1):list}
/**
 * Prepends the given node to the end of this (2,3) tree.
 * Returns the new root.
*/function prepend(list,nodeToAppend){list=list.toMutable();let curNode=list;const parents=new Array;
// assert nodeToInsert.listHeight <= curNode.listHeight
while(nodeToAppend.listHeight!==curNode.listHeight){
// assert 0 <= nodeToInsert.listHeight < curNode.listHeight
if(4/* List */!==curNode.kind)throw new Error("unexpected");parents.push(curNode),
// assert 2 <= curNode.childrenFast.length <= 3
curNode=curNode.makeFirstElementMutable()}let nodeToPrependOfCorrectHeight=nodeToAppend;
// assert nodeToAppendOfCorrectHeight!.listHeight === curNode.listHeight
for(let i=parents.length-1;i>=0;i--){const parent=parents[i];nodeToPrependOfCorrectHeight?
// Can we take the element?
parent.childrenLength>=3?
// assert parent.childrenLength === 3 && parent.listHeight === nodeToAppendOfCorrectHeight.listHeight + 1
// we need to split to maintain (2,3)-tree property.
// Send the third element + the new element to the parent.
nodeToPrependOfCorrectHeight=ListAstNode.create23(nodeToPrependOfCorrectHeight,parent.unprependChild(),null,!1):(parent.prependChildOfSameHeight(nodeToPrependOfCorrectHeight),nodeToPrependOfCorrectHeight=void 0):parent.handleChildrenChanged()}return nodeToPrependOfCorrectHeight?ListAstNode.create23(nodeToPrependOfCorrectHeight,list,null,!1):list}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/impl/nodeReader.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Allows to efficiently find a longest child at a given offset in a fixed node.
 * The requested offsets must increase monotonously.
*/
class NodeReader{constructor(node){this.lastOffset=lengthZero,this.nextNodes=[node],this.offsets=[lengthZero],this.idxs=[]}
/**
     * Returns the longest node at `offset` that satisfies the predicate.
     * @param offset must be greater than or equal to the last offset this method has been called with!
    */readLongestNodeAt(offset,predicate){if(lengthLessThan(offset,this.lastOffset))throw new Error("Invalid offset");this.lastOffset=offset;
// Find the longest node of all those that are closest to the current offset.
while(1){const curNode=lastOrUndefined(this.nextNodes);if(!curNode)return;const curNodeOffset=lastOrUndefined(this.offsets);if(lengthLessThan(offset,curNodeOffset))
// The next best node is not here yet.
// The reader must advance before a cached node is hit.
return;if(lengthLessThan(curNodeOffset,offset))
// The reader is ahead of the current node.
if(lengthAdd(curNodeOffset,curNode.length)<=offset)
// The reader is after the end of the current node.
this.nextNodeAfterCurrent();else{
// The reader is somewhere in the current node.
const nextChildIdx=getNextChildIdx(curNode);-1!==nextChildIdx?(
// Go to the first child and repeat.
this.nextNodes.push(curNode.getChild(nextChildIdx)),this.offsets.push(curNodeOffset),this.idxs.push(nextChildIdx)):
// We don't have children
this.nextNodeAfterCurrent()}else{
// readerOffsetBeforeChange === curNodeOffset
if(predicate(curNode))return this.nextNodeAfterCurrent(),curNode;{const nextChildIdx=getNextChildIdx(curNode);
// look for shorter node
if(-1===nextChildIdx)
// There is no shorter node.
return void this.nextNodeAfterCurrent();
// Descend into first child & repeat.
this.nextNodes.push(curNode.getChild(nextChildIdx)),this.offsets.push(curNodeOffset),this.idxs.push(nextChildIdx)}}}}
// Navigates to the longest node that continues after the current node.
nextNodeAfterCurrent(){while(1){const currentOffset=lastOrUndefined(this.offsets),currentNode=lastOrUndefined(this.nextNodes);if(this.nextNodes.pop(),this.offsets.pop(),0===this.idxs.length)
// We just popped the root node, there is no next node.
break;
// Parent is not undefined, because idxs is not empty
const parent=lastOrUndefined(this.nextNodes),nextChildIdx=getNextChildIdx(parent,this.idxs[this.idxs.length-1]);if(-1!==nextChildIdx){this.nextNodes.push(parent.getChild(nextChildIdx)),this.offsets.push(lengthAdd(currentOffset,currentNode.length)),this.idxs[this.idxs.length-1]=nextChildIdx;break}
// We fully consumed the parent.
// Current node is now parent, so call nextNodeAfterCurrent again
this.idxs.pop()}}}function getNextChildIdx(node,curIdx=-1){while(1){if(curIdx++,curIdx>=node.childrenLength)return-1;if(node.getChild(curIdx))return curIdx}}function lastOrUndefined(arr){return arr.length>0?arr[arr.length-1]:void 0}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/impl/parser.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Non incrementally built ASTs are immutable.
*/
function parseDocument(tokenizer,edits,oldNode,createImmutableLists){const parser=new Parser(tokenizer,edits,oldNode,createImmutableLists);return parser.parseDocument()}
/**
 * Non incrementally built ASTs are immutable.
*/class Parser{constructor(tokenizer,edits,oldNode,createImmutableLists){if(this.tokenizer=tokenizer,this.createImmutableLists=createImmutableLists,this._itemsConstructed=0,this._itemsFromCache=0,oldNode&&createImmutableLists)throw new Error("Not supported");this.oldNodeReader=oldNode?new NodeReader(oldNode):void 0,this.positionMapper=new BeforeEditPositionMapper(edits,tokenizer.length)}parseDocument(){this._itemsConstructed=0,this._itemsFromCache=0;let result=this.parseList(SmallImmutableSet.getEmpty());return result||(result=ListAstNode.getEmpty()),result}parseList(openedBracketIds){const items=new Array;while(1){const token=this.tokenizer.peek();if(!token||2/* ClosingBracket */===token.kind&&token.bracketIds.intersects(openedBracketIds))break;const child=this.parseChild(openedBracketIds);4/* List */===child.kind&&0===child.childrenLength||items.push(child)}
// When there is no oldNodeReader, all items are created from scratch and must have the same height.
const result=this.oldNodeReader?concat23Trees(items):concat23TreesOfSameHeight(items,this.createImmutableLists);return result}parseChild(openedBracketIds){if(this.oldNodeReader){const maxCacheableLength=this.positionMapper.getDistanceToNextChange(this.tokenizer.offset);if(!lengthIsZero(maxCacheableLength)){const cachedNode=this.oldNodeReader.readLongestNodeAt(this.positionMapper.getOffsetBeforeChange(this.tokenizer.offset),(curNode=>{if(!lengthLessThan(curNode.length,maxCacheableLength))
// Either the node contains edited text or touches edited text.
// In the latter case, brackets might have been extended (`end` -> `ending`), so even touching nodes cannot be reused.
return!1;const canBeReused=curNode.canBeReused(openedBracketIds);return canBeReused}));if(cachedNode)return this._itemsFromCache++,this.tokenizer.skip(cachedNode.length),cachedNode}}this._itemsConstructed++;const token=this.tokenizer.read();switch(token.kind){case 2/* ClosingBracket */:return new InvalidBracketAstNode(token.bracketIds,token.length);case 0/* Text */:return token.astNode;case 1/* OpeningBracket */:const set=openedBracketIds.merge(token.bracketIds),child=this.parseList(set),nextToken=this.tokenizer.peek();return nextToken&&2/* ClosingBracket */===nextToken.kind&&(nextToken.bracketId===token.bracketId||nextToken.bracketIds.intersects(token.bracketIds))?(this.tokenizer.read(),PairAstNode.create(token.astNode,child,nextToken.astNode)):PairAstNode.create(token.astNode,child,null);default:throw new Error("unexpected")}}}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/bracketPairsImpl.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class BracketPairs extends lifecycle/* Disposable */.JT{constructor(textModel,languageConfigurationService){super(),this.textModel=textModel,this.languageConfigurationService=languageConfigurationService,this.cache=this._register(new lifecycle/* MutableDisposable */.XK),this.onDidChangeEmitter=new common_event/* Emitter */.Q5,this.onDidChange=this.onDidChangeEmitter.event,this.bracketsRequested=!1,this._register(textModel.onDidChangeOptions((e=>{this.cache.clear(),this.updateCache()}))),this._register(textModel.onDidChangeLanguage((e=>{this.cache.clear(),this.updateCache()}))),this._register(this.languageConfigurationService.onDidChange((e=>{var _a;e.languageId&&!(null===(_a=this.cache.value)||void 0===_a?void 0:_a.object.didLanguageChange(e.languageId))||(this.cache.clear(),this.updateCache())})))}get isDocumentSupported(){const maxSupportedDocumentLength=/* max lines */5e6;return this.textModel.getValueLength()<=maxSupportedDocumentLength}updateCache(){if(this.bracketsRequested&&this.isDocumentSupported){if(!this.cache.value){const store=new lifecycle/* DisposableStore */.SL;this.cache.value=createDisposableRef(store.add(new ActiveBracketPairsImpl(this.textModel,(languageId=>this.languageConfigurationService.getLanguageConfiguration(languageId)))),store),store.add(this.cache.value.object.onDidChange((e=>this.onDidChangeEmitter.fire(e)))),this.onDidChangeEmitter.fire()}}else this.cache.clear(),this.onDidChangeEmitter.fire()}handleContentChanged(change){var _a;null===(_a=this.cache.value)||void 0===_a||_a.object.handleContentChanged(change)}
/**
     * Returns all bracket pairs that intersect the given range.
     * The result is sorted by the start position.
    */getBracketPairsInRange(range){var _a;return this.bracketsRequested=!0,this.updateCache(),(null===(_a=this.cache.value)||void 0===_a?void 0:_a.object.getBracketPairsInRange(range,!1))||[]}getBracketPairsInRangeWithMinIndentation(range){var _a;return this.bracketsRequested=!0,this.updateCache(),(null===(_a=this.cache.value)||void 0===_a?void 0:_a.object.getBracketPairsInRange(range,!0))||[]}getBracketsInRange(range){var _a;return this.bracketsRequested=!0,this.updateCache(),(null===(_a=this.cache.value)||void 0===_a?void 0:_a.object.getBracketsInRange(range))||[]}}function createDisposableRef(object,disposable){return{object:object,dispose:()=>null===disposable||void 0===disposable?void 0:disposable.dispose()}}class ActiveBracketPairsImpl extends lifecycle/* Disposable */.JT{constructor(textModel,getLanguageConfiguration){if(super(),this.textModel=textModel,this.getLanguageConfiguration=getLanguageConfiguration,this.didChangeEmitter=new common_event/* Emitter */.Q5,this.denseKeyProvider=new DenseKeyProvider,this.brackets=new LanguageAgnosticBracketTokens(this.denseKeyProvider,this.getLanguageConfiguration),this.onDidChange=this.didChangeEmitter.event,this._register(textModel.onBackgroundTokenizationStateChanged((()=>{if(2/* Completed */===textModel.backgroundTokenizationState){const wasUndefined=void 0===this.initialAstWithoutTokens;
// Clear the initial tree as we can use the tree with token information now.
this.initialAstWithoutTokens=void 0,wasUndefined||this.didChangeEmitter.fire()}}))),this._register(textModel.onDidChangeTokens((({ranges:ranges})=>{const edits=ranges.map((r=>new TextEditInfo(toLength(r.fromLineNumber-1,0),toLength(r.toLineNumber,0),toLength(r.toLineNumber-r.fromLineNumber+1,0))));this.astWithTokens=this.parseDocumentFromTextBuffer(edits,this.astWithTokens,!1),this.initialAstWithoutTokens||this.didChangeEmitter.fire()}))),0/* Uninitialized */===textModel.backgroundTokenizationState){
// There are no token information yet
const brackets=this.brackets.getSingleLanguageBracketTokens(this.textModel.getLanguageId()),tokenizer=new FastTokenizer(this.textModel.getValue(),brackets);this.initialAstWithoutTokens=parseDocument(tokenizer,[],void 0,!0),this.astWithTokens=this.initialAstWithoutTokens}else 2/* Completed */===textModel.backgroundTokenizationState?(
// Skip the initial ast, as there is no flickering.
// Directly create the tree with token information.
this.initialAstWithoutTokens=void 0,this.astWithTokens=this.parseDocumentFromTextBuffer([],void 0,!1)):1/* InProgress */===textModel.backgroundTokenizationState&&(this.initialAstWithoutTokens=this.parseDocumentFromTextBuffer([],void 0,!0),this.astWithTokens=this.initialAstWithoutTokens)}didLanguageChange(languageId){return this.brackets.didLanguageChange(languageId)}handleContentChanged(change){const edits=change.changes.map((c=>{const range=core_range/* Range */.e.lift(c.range);return new TextEditInfo(positionToLength(range.getStartPosition()),positionToLength(range.getEndPosition()),lengthOfString(c.text))})).reverse();this.astWithTokens=this.parseDocumentFromTextBuffer(edits,this.astWithTokens,!1),this.initialAstWithoutTokens&&(this.initialAstWithoutTokens=this.parseDocumentFromTextBuffer(edits,this.initialAstWithoutTokens,!1))}
/**
     * @pure (only if isPure = true)
    */parseDocumentFromTextBuffer(edits,previousAst,immutable){
// Is much faster if `isPure = false`.
const isPure=!1,previousAstClone=isPure?null===previousAst||void 0===previousAst?void 0:previousAst.deepClone():previousAst,tokenizer=new TextBufferTokenizer(this.textModel,this.brackets),result=parseDocument(tokenizer,edits,previousAstClone,immutable);return result}getBracketsInRange(range){const startOffset=toLength(range.startLineNumber-1,range.startColumn-1),endOffset=toLength(range.endLineNumber-1,range.endColumn-1),result=new Array,node=this.initialAstWithoutTokens||this.astWithTokens;return collectBrackets(node,lengthZero,node.length,startOffset,endOffset,result),result}getBracketPairsInRange(range,includeMinIndentation){const result=new Array,startLength=positionToLength(range.getStartPosition()),endLength=positionToLength(range.getEndPosition()),node=this.initialAstWithoutTokens||this.astWithTokens,context=new CollectBracketPairsContext(result,includeMinIndentation,this.textModel);return collectBracketPairs(node,lengthZero,node.length,startLength,endLength,context),result}}function collectBrackets(node,nodeOffsetStart,nodeOffsetEnd,startOffset,endOffset,result,level=0){if(1/* Bracket */===node.kind){const range=lengthsToRange(nodeOffsetStart,nodeOffsetEnd);result.push(new BracketInfo(range,level-1,!1))}else if(3/* UnexpectedClosingBracket */===node.kind){const range=lengthsToRange(nodeOffsetStart,nodeOffsetEnd);result.push(new BracketInfo(range,level-1,!0))}else if(4/* List */===node.kind)for(const child of node.children)nodeOffsetEnd=lengthAdd(nodeOffsetStart,child.length),lengthLessThanEqual(nodeOffsetStart,endOffset)&&lengthGreaterThanEqual(nodeOffsetEnd,startOffset)&&collectBrackets(child,nodeOffsetStart,nodeOffsetEnd,startOffset,endOffset,result,level),nodeOffsetStart=nodeOffsetEnd;else if(2/* Pair */===node.kind){
// Don't use node.children here to improve performance
level++;{const child=node.openingBracket;nodeOffsetEnd=lengthAdd(nodeOffsetStart,child.length),lengthLessThanEqual(nodeOffsetStart,endOffset)&&lengthGreaterThanEqual(nodeOffsetEnd,startOffset)&&collectBrackets(child,nodeOffsetStart,nodeOffsetEnd,startOffset,endOffset,result,level),nodeOffsetStart=nodeOffsetEnd}if(node.child){const child=node.child;nodeOffsetEnd=lengthAdd(nodeOffsetStart,child.length),lengthLessThanEqual(nodeOffsetStart,endOffset)&&lengthGreaterThanEqual(nodeOffsetEnd,startOffset)&&collectBrackets(child,nodeOffsetStart,nodeOffsetEnd,startOffset,endOffset,result,level),nodeOffsetStart=nodeOffsetEnd}if(node.closingBracket){const child=node.closingBracket;nodeOffsetEnd=lengthAdd(nodeOffsetStart,child.length),lengthLessThanEqual(nodeOffsetStart,endOffset)&&lengthGreaterThanEqual(nodeOffsetEnd,startOffset)&&collectBrackets(child,nodeOffsetStart,nodeOffsetEnd,startOffset,endOffset,result,level),nodeOffsetStart=nodeOffsetEnd}}}class CollectBracketPairsContext{constructor(result,includeMinIndentation,textModel){this.result=result,this.includeMinIndentation=includeMinIndentation,this.textModel=textModel}}function collectBracketPairs(node,nodeOffset,nodeOffsetEnd,startOffset,endOffset,context,level=0){var _a;if(2/* Pair */===node.kind){const openingBracketEnd=lengthAdd(nodeOffset,node.openingBracket.length);let minIndentation=-1;context.includeMinIndentation&&(minIndentation=node.computeMinIndentation(nodeOffset,context.textModel)),context.result.push(new BracketPairWithMinIndentationInfo(lengthsToRange(nodeOffset,nodeOffsetEnd),lengthsToRange(nodeOffset,openingBracketEnd),node.closingBracket?lengthsToRange(lengthAdd(openingBracketEnd,(null===(_a=node.child)||void 0===_a?void 0:_a.length)||lengthZero),nodeOffsetEnd):void 0,level,minIndentation)),level++}let curOffset=nodeOffset;for(const child of node.children){const childOffset=curOffset;curOffset=lengthAdd(curOffset,child.length),lengthLessThanEqual(childOffset,endOffset)&&lengthLessThanEqual(startOffset,curOffset)&&collectBracketPairs(child,childOffset,curOffset,startOffset,endOffset,context,level)}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/view/editorColorRegistry.js
var editorColorRegistry=__webpack_require__(627869),themeService=__webpack_require__(897781);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairs/colorizedBracketPairsDecorationProvider.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class ColorizedBracketPairsDecorationProvider extends lifecycle/* Disposable */.JT{constructor(textModel){super(),this.textModel=textModel,this.colorProvider=new ColorProvider,this.onDidChangeEmitter=new common_event/* Emitter */.Q5,this.onDidChange=this.onDidChangeEmitter.event,this.colorizationOptions=textModel.getOptions().bracketPairColorizationOptions,this._register(textModel.onDidChangeOptions((e=>{this.colorizationOptions=textModel.getOptions().bracketPairColorizationOptions}))),this._register(textModel.bracketPairs.onDidChange((e=>{this.onDidChangeEmitter.fire()})))}getDecorationsInRange(range,ownerId,filterOutValidation){if(void 0===ownerId)return[];if(!this.colorizationOptions.enabled)return[];const result=new Array,bracketsInRange=this.textModel.bracketPairs.getBracketsInRange(range);for(const bracket of bracketsInRange)result.push({id:`bracket${bracket.range.toString()}-${bracket.nestingLevel}`,options:{description:"BracketPairColorization",inlineClassName:this.colorProvider.getInlineClassName(bracket)},ownerId:0,range:bracket.range});return result}getAllDecorations(ownerId,filterOutValidation){return void 0===ownerId?[]:this.colorizationOptions.enabled?this.getDecorationsInRange(new core_range/* Range */.e(1,1,this.textModel.getLineCount(),1),ownerId,filterOutValidation):[]}}class ColorProvider{constructor(){this.unexpectedClosingBracketClassName="unexpected-closing-bracket"}getInlineClassName(bracket){return bracket.isInvalid?this.unexpectedClosingBracketClassName:this.getInlineClassNameOfLevel(bracket.nestingLevel)}getInlineClassNameOfLevel(level){
// To support a dynamic amount of colors up to 6 colors,
// we use a number that is a lcm of all numbers from 1 to 6.
return"bracket-highlighting-"+level%30}}(0,themeService/* registerThemingParticipant */.Ic)(((theme,collector)=>{const colors=[editorColorRegistry/* editorBracketHighlightingForeground1 */.zJ,editorColorRegistry/* editorBracketHighlightingForeground2 */.Vs,editorColorRegistry/* editorBracketHighlightingForeground3 */.CE,editorColorRegistry/* editorBracketHighlightingForeground4 */.UP,editorColorRegistry/* editorBracketHighlightingForeground5 */.r0,editorColorRegistry/* editorBracketHighlightingForeground6 */.m1],colorProvider=new ColorProvider;collector.addRule(`.monaco-editor .${colorProvider.unexpectedClosingBracketClassName} { color: ${theme.getColor(editorColorRegistry/* editorBracketHighlightingUnexpectedBracketForeground */.ts)}; }`);let colorValues=colors.map((c=>theme.getColor(c))).filter((c=>!!c)).filter((c=>!c.isTransparent()));for(let level=0;level<30;level++){const color=colorValues[level%colorValues.length];collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level)} { color: ${color}; }`)}}));
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/services/modeService.js
var modeService=__webpack_require__(771531),__decorate=function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"===typeof Reflect&&"function"===typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}};function createTextBufferBuilder(){return new PieceTreeTextBufferBuilder}function createTextBufferFactory(text){const builder=createTextBufferBuilder();return builder.acceptChunk(text),builder.finish()}function createTextBuffer(value,defaultEOL){const factory="string"===typeof value?createTextBufferFactory(value):value;return factory.create(defaultEOL)}let MODEL_ID=0;const LIMIT_FIND_COUNT=999,LONG_LINE_BOUNDARY=1e4;class TextModelSnapshot{constructor(source){this._source=source,this._eos=!1}read(){if(this._eos)return null;let result=[],resultCnt=0,resultLength=0;do{let tmp=this._source.read();if(null===tmp)
// end-of-stream
return this._eos=!0,0===resultCnt?null:result.join("");if(tmp.length>0&&(result[resultCnt++]=tmp,resultLength+=tmp.length),resultLength>=65536)return result.join("")}while(1)}}const invalidFunc=()=>{throw new Error("Invalid change accessor")};class BracketSearchCanceled{constructor(){this._searchCanceledBrand=void 0}}function stripBracketSearchCanceled(result){return result instanceof BracketSearchCanceled?null:result}BracketSearchCanceled.INSTANCE=new BracketSearchCanceled;let TextModel=class TextModel extends lifecycle/* Disposable */.JT{constructor(source,creationOptions,languageId,associatedResource=null,_undoRedoService,_modeService,_languageConfigurationService){super(),this._undoRedoService=_undoRedoService,this._modeService=_modeService,this._languageConfigurationService=_languageConfigurationService,
//#region Events
this._onWillDispose=this._register(new common_event/* Emitter */.Q5),this.onWillDispose=this._onWillDispose.event,this._onDidChangeDecorations=this._register(new DidChangeDecorationsEmitter((affectedInjectedTextLines=>this.handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines)))),this.onDidChangeDecorations=this._onDidChangeDecorations.event,this._onDidChangeLanguage=this._register(new common_event/* Emitter */.Q5),this.onDidChangeLanguage=this._onDidChangeLanguage.event,this._onDidChangeLanguageConfiguration=this._register(new common_event/* Emitter */.Q5),this.onDidChangeLanguageConfiguration=this._onDidChangeLanguageConfiguration.event,this._onDidChangeTokens=this._register(new common_event/* Emitter */.Q5),this.onDidChangeTokens=this._onDidChangeTokens.event,this._onDidChangeOptions=this._register(new common_event/* Emitter */.Q5),this.onDidChangeOptions=this._onDidChangeOptions.event,this._onDidChangeAttached=this._register(new common_event/* Emitter */.Q5),this.onDidChangeAttached=this._onDidChangeAttached.event,this._onDidChangeContentOrInjectedText=this._register(new common_event/* Emitter */.Q5),this.onDidChangeContentOrInjectedText=this._onDidChangeContentOrInjectedText.event,this._eventEmitter=this._register(new DidChangeContentEmitter),this._backgroundTokenizationState=0/* Uninitialized */,this._onBackgroundTokenizationStateChanged=this._register(new common_event/* Emitter */.Q5),this.onBackgroundTokenizationStateChanged=this._onBackgroundTokenizationStateChanged.event,this._register(this._eventEmitter.fastEvent((e=>{this._onDidChangeContentOrInjectedText.fire(e.rawContentChangedEvent)}))),
// Generate a new unique model id
MODEL_ID++,this.id="$model"+MODEL_ID,this.isForSimpleWidget=creationOptions.isForSimpleWidget,this._associatedResource="undefined"===typeof associatedResource||null===associatedResource?uri/* URI */.o.parse("inmemory://model/"+MODEL_ID):associatedResource,this._attachedEditorCount=0;const{textBuffer:textBuffer,disposable:disposable}=createTextBuffer(source,creationOptions.defaultEOL);this._buffer=textBuffer,this._bufferDisposable=disposable,this._options=TextModel.resolveOptions(this._buffer,creationOptions);const bufferLineCount=this._buffer.getLineCount(),bufferTextLength=this._buffer.getValueLengthInRange(new core_range/* Range */.e(1,1,bufferLineCount,this._buffer.getLineLength(bufferLineCount)+1),0/* TextDefined */);
// !!! Make a decision in the ctor and permanently respect this decision !!!
// If a model is too large at construction time, it will never get tokenized,
// under no circumstances.
creationOptions.largeFileOptimizations?this._isTooLargeForTokenization=bufferTextLength>TextModel.LARGE_FILE_SIZE_THRESHOLD||bufferLineCount>TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD:this._isTooLargeForTokenization=!1,this._isTooLargeForSyncing=bufferTextLength>TextModel.MODEL_SYNC_LIMIT,this._versionId=1,this._alternativeVersionId=1,this._initialUndoRedoSnapshot=null,this._isDisposed=!1,this._isDisposing=!1,this._languageId=languageId||nullMode/* NULL_MODE_ID */.TG,this._languageRegistryListener=this._languageConfigurationService.onDidChange((e=>{e.affects(this._languageId)&&this._onDidChangeLanguageConfiguration.fire({})})),this._instanceId=strings/* singleLetterHash */.PJ(MODEL_ID),this._lastDecorationId=0,this._decorations=Object.create(null),this._decorationsTree=new DecorationsTrees,this._commandManager=new editStack/* EditStack */.NL(this,this._undoRedoService),this._isUndoing=!1,this._isRedoing=!1,this._trimAutoWhitespaceLines=null,this._tokens=new tokensStore/* TokensStore */.Rl(this._modeService.languageIdCodec),this._tokens2=new tokensStore/* TokensStore2 */.cx(this._modeService.languageIdCodec),this._tokenization=new TextModelTokenization(this,this._modeService.languageIdCodec),this._bracketPairColorizer=this._register(new BracketPairs(this,this._languageConfigurationService)),this._decorationProvider=this._register(new ColorizedBracketPairsDecorationProvider(this)),this._register(this._decorationProvider.onDidChange((()=>{this._onDidChangeDecorations.beginDeferredEmit(),this._onDidChangeDecorations.fire(),this._onDidChangeDecorations.endDeferredEmit()})))}static resolveOptions(textBuffer,options){if(options.detectIndentation){const guessedIndentation=guessIndentation(textBuffer,options.tabSize,options.insertSpaces);return new model/* TextModelResolvedOptions */.dJ({tabSize:guessedIndentation.tabSize,indentSize:guessedIndentation.tabSize,insertSpaces:guessedIndentation.insertSpaces,trimAutoWhitespace:options.trimAutoWhitespace,defaultEOL:options.defaultEOL,bracketPairColorizationOptions:options.bracketPairColorizationOptions})}return new model/* TextModelResolvedOptions */.dJ({tabSize:options.tabSize,indentSize:options.indentSize,insertSpaces:options.insertSpaces,trimAutoWhitespace:options.trimAutoWhitespace,defaultEOL:options.defaultEOL,bracketPairColorizationOptions:options.bracketPairColorizationOptions})}onDidChangeContentFast(listener){return this._eventEmitter.fastEvent((e=>listener(e.contentChangedEvent)))}onDidChangeContent(listener){return this._eventEmitter.slowEvent((e=>listener(e.contentChangedEvent)))}get bracketPairs(){return this._bracketPairColorizer}get backgroundTokenizationState(){return this._backgroundTokenizationState}handleTokenizationProgress(completed){if(2/* Completed */===this._backgroundTokenizationState)
// We already did a full tokenization and don't go back to progressing.
return;const newState=completed?2/* Completed */:1/* InProgress */;this._backgroundTokenizationState!==newState&&(this._backgroundTokenizationState=newState,this._onBackgroundTokenizationStateChanged.fire())}dispose(){this._isDisposing=!0,this._onWillDispose.fire(),this._languageRegistryListener.dispose(),this._tokenization.dispose(),this._isDisposed=!0,super.dispose(),this._bufferDisposable.dispose(),this._isDisposing=!1;
// Manually release reference to previous text buffer to avoid large leaks
// in case someone leaks a TextModel reference
const emptyDisposedTextBuffer=new PieceTreeTextBuffer([],"","\n",!1,!1,!0,!0);emptyDisposedTextBuffer.dispose(),this._buffer=emptyDisposedTextBuffer}_assertNotDisposed(){if(this._isDisposed)throw new Error("Model is disposed!")}_emitContentChangedEvent(rawChange,change){this._bracketPairColorizer.handleContentChanged(change),this._isDisposing||this._eventEmitter.fire(new textModelEvents/* InternalModelContentChangeEvent */.fV(rawChange,change))}setValue(value){if(this._assertNotDisposed(),null===value)
// There's nothing to do
return;const{textBuffer:textBuffer,disposable:disposable}=createTextBuffer(value,this._options.defaultEOL);this._setValueFromTextBuffer(textBuffer,disposable)}_createContentChanged2(range,rangeOffset,rangeLength,text,isUndoing,isRedoing,isFlush){return{changes:[{range:range,rangeOffset:rangeOffset,rangeLength:rangeLength,text:text}],eol:this._buffer.getEOL(),versionId:this.getVersionId(),isUndoing:isUndoing,isRedoing:isRedoing,isFlush:isFlush}}_setValueFromTextBuffer(textBuffer,textBufferDisposable){this._assertNotDisposed();const oldFullModelRange=this.getFullModelRange(),oldModelValueLength=this.getValueLengthInRange(oldFullModelRange),endLineNumber=this.getLineCount(),endColumn=this.getLineMaxColumn(endLineNumber);this._buffer=textBuffer,this._bufferDisposable.dispose(),this._bufferDisposable=textBufferDisposable,this._increaseVersionId(),
// Flush all tokens
this._tokens.flush(),this._tokens2.flush(),
// Destroy all my decorations
this._decorations=Object.create(null),this._decorationsTree=new DecorationsTrees,
// Destroy my edit history and settings
this._commandManager.clear(),this._trimAutoWhitespaceLines=null,this._emitContentChangedEvent(new textModelEvents/* ModelRawContentChangedEvent */.dQ([new textModelEvents/* ModelRawFlush */.Jx],this._versionId,!1,!1),this._createContentChanged2(new core_range/* Range */.e(1,1,endLineNumber,endColumn),0,oldModelValueLength,this.getValue(),!1,!1,!0))}setEOL(eol){this._assertNotDisposed();const newEOL=1/* CRLF */===eol?"\r\n":"\n";if(this._buffer.getEOL()===newEOL)
// Nothing to do
return;const oldFullModelRange=this.getFullModelRange(),oldModelValueLength=this.getValueLengthInRange(oldFullModelRange),endLineNumber=this.getLineCount(),endColumn=this.getLineMaxColumn(endLineNumber);this._onBeforeEOLChange(),this._buffer.setEOL(newEOL),this._increaseVersionId(),this._onAfterEOLChange(),this._emitContentChangedEvent(new textModelEvents/* ModelRawContentChangedEvent */.dQ([new textModelEvents/* ModelRawEOLChanged */.CZ],this._versionId,!1,!1),this._createContentChanged2(new core_range/* Range */.e(1,1,endLineNumber,endColumn),0,oldModelValueLength,this.getValue(),!1,!1,!1))}_onBeforeEOLChange(){
// Ensure all decorations get their `range` set.
this._decorationsTree.ensureAllNodesHaveRanges(this)}_onAfterEOLChange(){
// Transform back `range` to offsets
const versionId=this.getVersionId(),allDecorations=this._decorationsTree.collectNodesPostOrder();for(let i=0,len=allDecorations.length;i<len;i++){const node=allDecorations[i],range=node.range,delta=node.cachedAbsoluteStart-node.start,startOffset=this._buffer.getOffsetAt(range.startLineNumber,range.startColumn),endOffset=this._buffer.getOffsetAt(range.endLineNumber,range.endColumn);node.cachedAbsoluteStart=startOffset,node.cachedAbsoluteEnd=endOffset,node.cachedVersionId=versionId,node.start=startOffset-delta,node.end=endOffset-delta,recomputeMaxEnd(node)}}onBeforeAttached(){this._attachedEditorCount++,1===this._attachedEditorCount&&this._onDidChangeAttached.fire(void 0)}onBeforeDetached(){this._attachedEditorCount--,0===this._attachedEditorCount&&this._onDidChangeAttached.fire(void 0)}isAttachedToEditor(){return this._attachedEditorCount>0}getAttachedEditorCount(){return this._attachedEditorCount}isTooLargeForSyncing(){return this._isTooLargeForSyncing}isTooLargeForTokenization(){return this._isTooLargeForTokenization}isDisposed(){return this._isDisposed}isDominatedByLongLines(){if(this._assertNotDisposed(),this.isTooLargeForTokenization())
// Cannot word wrap huge files anyways, so it doesn't really matter
return!1;let smallLineCharCount=0,longLineCharCount=0;const lineCount=this._buffer.getLineCount();for(let lineNumber=1;lineNumber<=lineCount;lineNumber++){const lineLength=this._buffer.getLineLength(lineNumber);lineLength>=LONG_LINE_BOUNDARY?longLineCharCount+=lineLength:smallLineCharCount+=lineLength}return longLineCharCount>smallLineCharCount}get uri(){return this._associatedResource}
//#region Options
getOptions(){return this._assertNotDisposed(),this._options}getFormattingOptions(){return{tabSize:this._options.indentSize,insertSpaces:this._options.insertSpaces}}updateOptions(_newOpts){this._assertNotDisposed();let tabSize="undefined"!==typeof _newOpts.tabSize?_newOpts.tabSize:this._options.tabSize,indentSize="undefined"!==typeof _newOpts.indentSize?_newOpts.indentSize:this._options.indentSize,insertSpaces="undefined"!==typeof _newOpts.insertSpaces?_newOpts.insertSpaces:this._options.insertSpaces,trimAutoWhitespace="undefined"!==typeof _newOpts.trimAutoWhitespace?_newOpts.trimAutoWhitespace:this._options.trimAutoWhitespace,bracketPairColorizationOptions="undefined"!==typeof _newOpts.bracketColorizationOptions?_newOpts.bracketColorizationOptions:this._options.bracketPairColorizationOptions,newOpts=new model/* TextModelResolvedOptions */.dJ({tabSize:tabSize,indentSize:indentSize,insertSpaces:insertSpaces,defaultEOL:this._options.defaultEOL,trimAutoWhitespace:trimAutoWhitespace,bracketPairColorizationOptions:bracketPairColorizationOptions});if(this._options.equals(newOpts))return;let e=this._options.createChangeEvent(newOpts);this._options=newOpts,this._onDidChangeOptions.fire(e)}detectIndentation(defaultInsertSpaces,defaultTabSize){this._assertNotDisposed();let guessedIndentation=guessIndentation(this._buffer,defaultTabSize,defaultInsertSpaces);this.updateOptions({insertSpaces:guessedIndentation.insertSpaces,tabSize:guessedIndentation.tabSize,indentSize:guessedIndentation.tabSize})}static _normalizeIndentationFromWhitespace(str,indentSize,insertSpaces){let spacesCnt=0;for(let i=0;i<str.length;i++)"\t"===str.charAt(i)?spacesCnt+=indentSize:spacesCnt++;let result="";if(!insertSpaces){let tabsCnt=Math.floor(spacesCnt/indentSize);spacesCnt%=indentSize;for(let i=0;i<tabsCnt;i++)result+="\t"}for(let i=0;i<spacesCnt;i++)result+=" ";return result}static normalizeIndentation(str,indentSize,insertSpaces){let firstNonWhitespaceIndex=strings/* firstNonWhitespaceIndex */.LC(str);return-1===firstNonWhitespaceIndex&&(firstNonWhitespaceIndex=str.length),TextModel._normalizeIndentationFromWhitespace(str.substring(0,firstNonWhitespaceIndex),indentSize,insertSpaces)+str.substring(firstNonWhitespaceIndex)}normalizeIndentation(str){return this._assertNotDisposed(),TextModel.normalizeIndentation(str,this._options.indentSize,this._options.insertSpaces)}
//#endregion
//#region Reading
getVersionId(){return this._assertNotDisposed(),this._versionId}mightContainRTL(){return this._buffer.mightContainRTL()}mightContainUnusualLineTerminators(){return this._buffer.mightContainUnusualLineTerminators()}removeUnusualLineTerminators(selections=null){const matches=this.findMatches(strings/* UNUSUAL_LINE_TERMINATORS */.Qe.source,!1,!0,!1,null,!1,1073741824/* MAX_SAFE_SMALL_INTEGER */);this._buffer.resetMightContainUnusualLineTerminators(),this.pushEditOperations(selections,matches.map((m=>({range:m.range,text:null}))),(()=>null))}mightContainNonBasicASCII(){return this._buffer.mightContainNonBasicASCII()}getAlternativeVersionId(){return this._assertNotDisposed(),this._alternativeVersionId}getInitialUndoRedoSnapshot(){return this._assertNotDisposed(),this._initialUndoRedoSnapshot}getOffsetAt(rawPosition){this._assertNotDisposed();let position=this._validatePosition(rawPosition.lineNumber,rawPosition.column,0/* Relaxed */);return this._buffer.getOffsetAt(position.lineNumber,position.column)}getPositionAt(rawOffset){this._assertNotDisposed();let offset=Math.min(this._buffer.getLength(),Math.max(0,rawOffset));return this._buffer.getPositionAt(offset)}_increaseVersionId(){this._versionId=this._versionId+1,this._alternativeVersionId=this._versionId}_overwriteVersionId(versionId){this._versionId=versionId}_overwriteAlternativeVersionId(newAlternativeVersionId){this._alternativeVersionId=newAlternativeVersionId}_overwriteInitialUndoRedoSnapshot(newInitialUndoRedoSnapshot){this._initialUndoRedoSnapshot=newInitialUndoRedoSnapshot}getValue(eol,preserveBOM=!1){this._assertNotDisposed();const fullModelRange=this.getFullModelRange(),fullModelValue=this.getValueInRange(fullModelRange,eol);return preserveBOM?this._buffer.getBOM()+fullModelValue:fullModelValue}createSnapshot(preserveBOM=!1){return new TextModelSnapshot(this._buffer.createSnapshot(preserveBOM))}getValueLength(eol,preserveBOM=!1){this._assertNotDisposed();const fullModelRange=this.getFullModelRange(),fullModelValue=this.getValueLengthInRange(fullModelRange,eol);return preserveBOM?this._buffer.getBOM().length+fullModelValue:fullModelValue}getValueInRange(rawRange,eol=0/* TextDefined */){return this._assertNotDisposed(),this._buffer.getValueInRange(this.validateRange(rawRange),eol)}getValueLengthInRange(rawRange,eol=0/* TextDefined */){return this._assertNotDisposed(),this._buffer.getValueLengthInRange(this.validateRange(rawRange),eol)}getCharacterCountInRange(rawRange,eol=0/* TextDefined */){return this._assertNotDisposed(),this._buffer.getCharacterCountInRange(this.validateRange(rawRange),eol)}getLineCount(){return this._assertNotDisposed(),this._buffer.getLineCount()}getLineContent(lineNumber){if(this._assertNotDisposed(),lineNumber<1||lineNumber>this.getLineCount())throw new Error("Illegal value for lineNumber");return this._buffer.getLineContent(lineNumber)}getLineLength(lineNumber){if(this._assertNotDisposed(),lineNumber<1||lineNumber>this.getLineCount())throw new Error("Illegal value for lineNumber");return this._buffer.getLineLength(lineNumber)}getLinesContent(){return this._assertNotDisposed(),this._buffer.getLinesContent()}getEOL(){return this._assertNotDisposed(),this._buffer.getEOL()}getEndOfLineSequence(){return this._assertNotDisposed(),"\n"===this._buffer.getEOL()?0/* LF */:1/* CRLF */}getLineMinColumn(lineNumber){return this._assertNotDisposed(),1}getLineMaxColumn(lineNumber){if(this._assertNotDisposed(),lineNumber<1||lineNumber>this.getLineCount())throw new Error("Illegal value for lineNumber");return this._buffer.getLineLength(lineNumber)+1}getLineFirstNonWhitespaceColumn(lineNumber){if(this._assertNotDisposed(),lineNumber<1||lineNumber>this.getLineCount())throw new Error("Illegal value for lineNumber");return this._buffer.getLineFirstNonWhitespaceColumn(lineNumber)}getLineLastNonWhitespaceColumn(lineNumber){if(this._assertNotDisposed(),lineNumber<1||lineNumber>this.getLineCount())throw new Error("Illegal value for lineNumber");return this._buffer.getLineLastNonWhitespaceColumn(lineNumber)}
/**
     * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.
     * Will try to not allocate if possible.
     */_validateRangeRelaxedNoAllocations(range){const linesCount=this._buffer.getLineCount(),initialStartLineNumber=range.startLineNumber,initialStartColumn=range.startColumn;let startLineNumber=Math.floor("number"!==typeof initialStartLineNumber||isNaN(initialStartLineNumber)?1:initialStartLineNumber),startColumn=Math.floor("number"!==typeof initialStartColumn||isNaN(initialStartColumn)?1:initialStartColumn);if(startLineNumber<1)startLineNumber=1,startColumn=1;else if(startLineNumber>linesCount)startLineNumber=linesCount,startColumn=this.getLineMaxColumn(startLineNumber);else if(startColumn<=1)startColumn=1;else{const maxColumn=this.getLineMaxColumn(startLineNumber);startColumn>=maxColumn&&(startColumn=maxColumn)}const initialEndLineNumber=range.endLineNumber,initialEndColumn=range.endColumn;let endLineNumber=Math.floor("number"!==typeof initialEndLineNumber||isNaN(initialEndLineNumber)?1:initialEndLineNumber),endColumn=Math.floor("number"!==typeof initialEndColumn||isNaN(initialEndColumn)?1:initialEndColumn);if(endLineNumber<1)endLineNumber=1,endColumn=1;else if(endLineNumber>linesCount)endLineNumber=linesCount,endColumn=this.getLineMaxColumn(endLineNumber);else if(endColumn<=1)endColumn=1;else{const maxColumn=this.getLineMaxColumn(endLineNumber);endColumn>=maxColumn&&(endColumn=maxColumn)}return initialStartLineNumber===startLineNumber&&initialStartColumn===startColumn&&initialEndLineNumber===endLineNumber&&initialEndColumn===endColumn&&range instanceof core_range/* Range */.e&&!(range instanceof selection/* Selection */.Y)?range:new core_range/* Range */.e(startLineNumber,startColumn,endLineNumber,endColumn)}_isValidPosition(lineNumber,column,validationType){if("number"!==typeof lineNumber||"number"!==typeof column)return!1;if(isNaN(lineNumber)||isNaN(column))return!1;if(lineNumber<1||column<1)return!1;if((0|lineNumber)!==lineNumber||(0|column)!==column)return!1;const lineCount=this._buffer.getLineCount();if(lineNumber>lineCount)return!1;if(1===column)return!0;const maxColumn=this.getLineMaxColumn(lineNumber);if(column>maxColumn)return!1;if(1/* SurrogatePairs */===validationType){
// !!At this point, column > 1
const charCodeBefore=this._buffer.getLineCharCode(lineNumber,column-2);if(strings/* isHighSurrogate */.ZG(charCodeBefore))return!1}return!0}_validatePosition(_lineNumber,_column,validationType){const lineNumber=Math.floor("number"!==typeof _lineNumber||isNaN(_lineNumber)?1:_lineNumber),column=Math.floor("number"!==typeof _column||isNaN(_column)?1:_column),lineCount=this._buffer.getLineCount();if(lineNumber<1)return new core_position/* Position */.L(1,1);if(lineNumber>lineCount)return new core_position/* Position */.L(lineCount,this.getLineMaxColumn(lineCount));if(column<=1)return new core_position/* Position */.L(lineNumber,1);const maxColumn=this.getLineMaxColumn(lineNumber);if(column>=maxColumn)return new core_position/* Position */.L(lineNumber,maxColumn);if(1/* SurrogatePairs */===validationType){
// If the position would end up in the middle of a high-low surrogate pair,
// we move it to before the pair
// !!At this point, column > 1
const charCodeBefore=this._buffer.getLineCharCode(lineNumber,column-2);if(strings/* isHighSurrogate */.ZG(charCodeBefore))return new core_position/* Position */.L(lineNumber,column-1)}return new core_position/* Position */.L(lineNumber,column)}validatePosition(position){const validationType=1/* SurrogatePairs */;
// Avoid object allocation and cover most likely case
return this._assertNotDisposed(),position instanceof core_position/* Position */.L&&this._isValidPosition(position.lineNumber,position.column,validationType)?position:this._validatePosition(position.lineNumber,position.column,validationType)}_isValidRange(range,validationType){const startLineNumber=range.startLineNumber,startColumn=range.startColumn,endLineNumber=range.endLineNumber,endColumn=range.endColumn;if(!this._isValidPosition(startLineNumber,startColumn,0/* Relaxed */))return!1;if(!this._isValidPosition(endLineNumber,endColumn,0/* Relaxed */))return!1;if(1/* SurrogatePairs */===validationType){const charCodeBeforeStart=startColumn>1?this._buffer.getLineCharCode(startLineNumber,startColumn-2):0,charCodeBeforeEnd=endColumn>1&&endColumn<=this._buffer.getLineLength(endLineNumber)?this._buffer.getLineCharCode(endLineNumber,endColumn-2):0,startInsideSurrogatePair=strings/* isHighSurrogate */.ZG(charCodeBeforeStart),endInsideSurrogatePair=strings/* isHighSurrogate */.ZG(charCodeBeforeEnd);return!startInsideSurrogatePair&&!endInsideSurrogatePair}return!0}validateRange(_range){const validationType=1/* SurrogatePairs */;
// Avoid object allocation and cover most likely case
if(this._assertNotDisposed(),_range instanceof core_range/* Range */.e&&!(_range instanceof selection/* Selection */.Y)&&this._isValidRange(_range,validationType))return _range;const start=this._validatePosition(_range.startLineNumber,_range.startColumn,0/* Relaxed */),end=this._validatePosition(_range.endLineNumber,_range.endColumn,0/* Relaxed */),startLineNumber=start.lineNumber,startColumn=start.column,endLineNumber=end.lineNumber,endColumn=end.column;if(1/* SurrogatePairs */===validationType){const charCodeBeforeStart=startColumn>1?this._buffer.getLineCharCode(startLineNumber,startColumn-2):0,charCodeBeforeEnd=endColumn>1&&endColumn<=this._buffer.getLineLength(endLineNumber)?this._buffer.getLineCharCode(endLineNumber,endColumn-2):0,startInsideSurrogatePair=strings/* isHighSurrogate */.ZG(charCodeBeforeStart),endInsideSurrogatePair=strings/* isHighSurrogate */.ZG(charCodeBeforeEnd);return startInsideSurrogatePair||endInsideSurrogatePair?startLineNumber===endLineNumber&&startColumn===endColumn?new core_range/* Range */.e(startLineNumber,startColumn-1,endLineNumber,endColumn-1):startInsideSurrogatePair&&endInsideSurrogatePair?new core_range/* Range */.e(startLineNumber,startColumn-1,endLineNumber,endColumn+1):startInsideSurrogatePair?new core_range/* Range */.e(startLineNumber,startColumn-1,endLineNumber,endColumn):new core_range/* Range */.e(startLineNumber,startColumn,endLineNumber,endColumn+1):new core_range/* Range */.e(startLineNumber,startColumn,endLineNumber,endColumn)}return new core_range/* Range */.e(startLineNumber,startColumn,endLineNumber,endColumn)}modifyPosition(rawPosition,offset){this._assertNotDisposed();let candidate=this.getOffsetAt(rawPosition)+offset;return this.getPositionAt(Math.min(this._buffer.getLength(),Math.max(0,candidate)))}getFullModelRange(){this._assertNotDisposed();const lineCount=this.getLineCount();return new core_range/* Range */.e(1,1,lineCount,this.getLineMaxColumn(lineCount))}findMatchesLineByLine(searchRange,searchData,captureMatches,limitResultCount){return this._buffer.findMatchesLineByLine(searchRange,searchData,captureMatches,limitResultCount)}findMatches(searchString,rawSearchScope,isRegex,matchCase,wordSeparators,captureMatches,limitResultCount=LIMIT_FIND_COUNT){this._assertNotDisposed();let searchRanges=null;null!==rawSearchScope&&(Array.isArray(rawSearchScope)||(rawSearchScope=[rawSearchScope]),rawSearchScope.every((searchScope=>core_range/* Range */.e.isIRange(searchScope)))&&(searchRanges=rawSearchScope.map((searchScope=>this.validateRange(searchScope))))),null===searchRanges&&(searchRanges=[this.getFullModelRange()]),searchRanges=searchRanges.sort(((d1,d2)=>d1.startLineNumber-d2.startLineNumber||d1.startColumn-d2.startColumn));const uniqueSearchRanges=[];let matchMapper;if(uniqueSearchRanges.push(searchRanges.reduce(((prev,curr)=>core_range/* Range */.e.areIntersecting(prev,curr)?prev.plusRange(curr):(uniqueSearchRanges.push(prev),curr)))),!isRegex&&searchString.indexOf("\n")<0){
// not regex, not multi line
const searchParams=new textModelSearch/* SearchParams */.bc(searchString,isRegex,matchCase,wordSeparators),searchData=searchParams.parseSearchRequest();if(!searchData)return[];matchMapper=searchRange=>this.findMatchesLineByLine(searchRange,searchData,captureMatches,limitResultCount)}else matchMapper=searchRange=>textModelSearch/* TextModelSearch */.pM.findMatches(this,new textModelSearch/* SearchParams */.bc(searchString,isRegex,matchCase,wordSeparators),searchRange,captureMatches,limitResultCount);return uniqueSearchRanges.map(matchMapper).reduce(((arr,matches)=>arr.concat(matches)),[])}findNextMatch(searchString,rawSearchStart,isRegex,matchCase,wordSeparators,captureMatches){this._assertNotDisposed();const searchStart=this.validatePosition(rawSearchStart);if(!isRegex&&searchString.indexOf("\n")<0){const searchParams=new textModelSearch/* SearchParams */.bc(searchString,isRegex,matchCase,wordSeparators),searchData=searchParams.parseSearchRequest();if(!searchData)return null;const lineCount=this.getLineCount();let searchRange=new core_range/* Range */.e(searchStart.lineNumber,searchStart.column,lineCount,this.getLineMaxColumn(lineCount)),ret=this.findMatchesLineByLine(searchRange,searchData,captureMatches,1);return textModelSearch/* TextModelSearch */.pM.findNextMatch(this,new textModelSearch/* SearchParams */.bc(searchString,isRegex,matchCase,wordSeparators),searchStart,captureMatches),ret.length>0?ret[0]:(searchRange=new core_range/* Range */.e(1,1,searchStart.lineNumber,this.getLineMaxColumn(searchStart.lineNumber)),ret=this.findMatchesLineByLine(searchRange,searchData,captureMatches,1),ret.length>0?ret[0]:null)}return textModelSearch/* TextModelSearch */.pM.findNextMatch(this,new textModelSearch/* SearchParams */.bc(searchString,isRegex,matchCase,wordSeparators),searchStart,captureMatches)}findPreviousMatch(searchString,rawSearchStart,isRegex,matchCase,wordSeparators,captureMatches){this._assertNotDisposed();const searchStart=this.validatePosition(rawSearchStart);return textModelSearch/* TextModelSearch */.pM.findPreviousMatch(this,new textModelSearch/* SearchParams */.bc(searchString,isRegex,matchCase,wordSeparators),searchStart,captureMatches)}
//#endregion
//#region Editing
pushStackElement(){this._commandManager.pushStackElement()}popStackElement(){this._commandManager.popStackElement()}pushEOL(eol){const currentEOL="\n"===this.getEOL()?0/* LF */:1/* CRLF */;if(currentEOL!==eol)try{this._onDidChangeDecorations.beginDeferredEmit(),this._eventEmitter.beginDeferredEmit(),null===this._initialUndoRedoSnapshot&&(this._initialUndoRedoSnapshot=this._undoRedoService.createSnapshot(this.uri)),this._commandManager.pushEOL(eol)}finally{this._eventEmitter.endDeferredEmit(),this._onDidChangeDecorations.endDeferredEmit()}}_validateEditOperation(rawOperation){return rawOperation instanceof model/* ValidAnnotatedEditOperation */.Qi?rawOperation:new model/* ValidAnnotatedEditOperation */.Qi(rawOperation.identifier||null,this.validateRange(rawOperation.range),rawOperation.text,rawOperation.forceMoveMarkers||!1,rawOperation.isAutoWhitespaceEdit||!1,rawOperation._isTracked||!1)}_validateEditOperations(rawOperations){const result=[];for(let i=0,len=rawOperations.length;i<len;i++)result[i]=this._validateEditOperation(rawOperations[i]);return result}pushEditOperations(beforeCursorState,editOperations,cursorStateComputer){try{return this._onDidChangeDecorations.beginDeferredEmit(),this._eventEmitter.beginDeferredEmit(),this._pushEditOperations(beforeCursorState,this._validateEditOperations(editOperations),cursorStateComputer)}finally{this._eventEmitter.endDeferredEmit(),this._onDidChangeDecorations.endDeferredEmit()}}_pushEditOperations(beforeCursorState,editOperations,cursorStateComputer){if(this._options.trimAutoWhitespace&&this._trimAutoWhitespaceLines){
// Go through each saved line number and insert a trim whitespace edit
// if it is safe to do so (no conflicts with other edits).
let incomingEdits=editOperations.map((op=>({range:this.validateRange(op.range),text:op.text}))),editsAreNearCursors=!0;
// Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor
// We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace
if(beforeCursorState)for(let i=0,len=beforeCursorState.length;i<len;i++){let sel=beforeCursorState[i],foundEditNearSel=!1;for(let j=0,lenJ=incomingEdits.length;j<lenJ;j++){let editRange=incomingEdits[j].range,selIsAbove=editRange.startLineNumber>sel.endLineNumber,selIsBelow=sel.startLineNumber>editRange.endLineNumber;if(!selIsAbove&&!selIsBelow){foundEditNearSel=!0;break}}if(!foundEditNearSel){editsAreNearCursors=!1;break}}if(editsAreNearCursors)for(let i=0,len=this._trimAutoWhitespaceLines.length;i<len;i++){let trimLineNumber=this._trimAutoWhitespaceLines[i],maxLineColumn=this.getLineMaxColumn(trimLineNumber),allowTrimLine=!0;for(let j=0,lenJ=incomingEdits.length;j<lenJ;j++){let editRange=incomingEdits[j].range,editText=incomingEdits[j].text;if(!(trimLineNumber<editRange.startLineNumber||trimLineNumber>editRange.endLineNumber)&&(!(trimLineNumber===editRange.startLineNumber&&editRange.startColumn===maxLineColumn&&editRange.isEmpty()&&editText&&editText.length>0&&"\n"===editText.charAt(0))&&!(trimLineNumber===editRange.startLineNumber&&1===editRange.startColumn&&editRange.isEmpty()&&editText&&editText.length>0&&"\n"===editText.charAt(editText.length-1)))){
// Looks like we can't trim this line as it would interfere with an incoming edit
allowTrimLine=!1;break}
// At this point:
//   editRange.startLineNumber <= trimLine <= editRange.endLineNumber
}if(allowTrimLine){const trimRange=new core_range/* Range */.e(trimLineNumber,1,trimLineNumber,maxLineColumn);editOperations.push(new model/* ValidAnnotatedEditOperation */.Qi(null,trimRange,null,!1,!1,!1))}}this._trimAutoWhitespaceLines=null}return null===this._initialUndoRedoSnapshot&&(this._initialUndoRedoSnapshot=this._undoRedoService.createSnapshot(this.uri)),this._commandManager.pushEditOperation(beforeCursorState,editOperations,cursorStateComputer)}_applyUndo(changes,eol,resultingAlternativeVersionId,resultingSelection){const edits=changes.map((change=>{const rangeStart=this.getPositionAt(change.newPosition),rangeEnd=this.getPositionAt(change.newEnd);return{range:new core_range/* Range */.e(rangeStart.lineNumber,rangeStart.column,rangeEnd.lineNumber,rangeEnd.column),text:change.oldText}}));this._applyUndoRedoEdits(edits,eol,!0,!1,resultingAlternativeVersionId,resultingSelection)}_applyRedo(changes,eol,resultingAlternativeVersionId,resultingSelection){const edits=changes.map((change=>{const rangeStart=this.getPositionAt(change.oldPosition),rangeEnd=this.getPositionAt(change.oldEnd);return{range:new core_range/* Range */.e(rangeStart.lineNumber,rangeStart.column,rangeEnd.lineNumber,rangeEnd.column),text:change.newText}}));this._applyUndoRedoEdits(edits,eol,!1,!0,resultingAlternativeVersionId,resultingSelection)}_applyUndoRedoEdits(edits,eol,isUndoing,isRedoing,resultingAlternativeVersionId,resultingSelection){try{this._onDidChangeDecorations.beginDeferredEmit(),this._eventEmitter.beginDeferredEmit(),this._isUndoing=isUndoing,this._isRedoing=isRedoing,this.applyEdits(edits,!1),this.setEOL(eol),this._overwriteAlternativeVersionId(resultingAlternativeVersionId)}finally{this._isUndoing=!1,this._isRedoing=!1,this._eventEmitter.endDeferredEmit(resultingSelection),this._onDidChangeDecorations.endDeferredEmit()}}applyEdits(rawOperations,computeUndoEdits=!1){try{this._onDidChangeDecorations.beginDeferredEmit(),this._eventEmitter.beginDeferredEmit();const operations=this._validateEditOperations(rawOperations);return this._doApplyEdits(operations,computeUndoEdits)}finally{this._eventEmitter.endDeferredEmit(),this._onDidChangeDecorations.endDeferredEmit()}}_doApplyEdits(rawOperations,computeUndoEdits){const oldLineCount=this._buffer.getLineCount(),result=this._buffer.applyEdits(rawOperations,this._options.trimAutoWhitespace,computeUndoEdits),newLineCount=this._buffer.getLineCount(),contentChanges=result.changes;if(this._trimAutoWhitespaceLines=result.trimAutoWhitespaceLineNumbers,0!==contentChanges.length){
// We do a first pass to update tokens and decorations
// because we want to read decorations in the second pass
// where we will emit content change events
// and we want to read the final decorations
for(let i=0,len=contentChanges.length;i<len;i++){const change=contentChanges[i],[eolCount,firstLineLength,lastLineLength]=(0,tokensStore/* countEOL */.QZ)(change.text);this._tokens.acceptEdit(change.range,eolCount,firstLineLength),this._tokens2.acceptEdit(change.range,eolCount,firstLineLength,lastLineLength,change.text.length>0?change.text.charCodeAt(0):0/* Null */),this._decorationsTree.acceptReplace(change.rangeOffset,change.rangeLength,change.text.length,change.forceMoveMarkers)}let rawContentChanges=[];this._increaseVersionId();let lineCount=oldLineCount;for(let i=0,len=contentChanges.length;i<len;i++){const change=contentChanges[i],[eolCount]=(0,tokensStore/* countEOL */.QZ)(change.text);this._onDidChangeDecorations.fire();const startLineNumber=change.range.startLineNumber,endLineNumber=change.range.endLineNumber,deletingLinesCnt=endLineNumber-startLineNumber,insertingLinesCnt=eolCount,editingLinesCnt=Math.min(deletingLinesCnt,insertingLinesCnt),changeLineCountDelta=insertingLinesCnt-deletingLinesCnt,currentEditStartLineNumber=newLineCount-lineCount-changeLineCountDelta+startLineNumber,firstEditLineNumber=currentEditStartLineNumber,lastInsertedLineNumber=currentEditStartLineNumber+insertingLinesCnt,decorationsWithInjectedTextInEditedRange=this._decorationsTree.getInjectedTextInInterval(this,this.getOffsetAt(new core_position/* Position */.L(firstEditLineNumber,1)),this.getOffsetAt(new core_position/* Position */.L(lastInsertedLineNumber,this.getLineMaxColumn(lastInsertedLineNumber))),0),injectedTextInEditedRange=textModelEvents/* LineInjectedText */.gk.fromDecorations(decorationsWithInjectedTextInEditedRange),injectedTextInEditedRangeQueue=new arrays/* ArrayQueue */.H9(injectedTextInEditedRange);for(let j=editingLinesCnt;j>=0;j--){const editLineNumber=startLineNumber+j,currentEditLineNumber=currentEditStartLineNumber+j;injectedTextInEditedRangeQueue.takeFromEndWhile((r=>r.lineNumber>currentEditLineNumber));const decorationsInCurrentLine=injectedTextInEditedRangeQueue.takeFromEndWhile((r=>r.lineNumber===currentEditLineNumber));rawContentChanges.push(new textModelEvents/* ModelRawLineChanged */.rU(editLineNumber,this.getLineContent(currentEditLineNumber),decorationsInCurrentLine))}if(editingLinesCnt<deletingLinesCnt){
// Must delete some lines
const spliceStartLineNumber=startLineNumber+editingLinesCnt;rawContentChanges.push(new textModelEvents/* ModelRawLinesDeleted */.lN(spliceStartLineNumber+1,endLineNumber))}if(editingLinesCnt<insertingLinesCnt){const injectedTextInEditedRangeQueue=new arrays/* ArrayQueue */.H9(injectedTextInEditedRange),spliceLineNumber=startLineNumber+editingLinesCnt,cnt=insertingLinesCnt-editingLinesCnt,fromLineNumber=newLineCount-lineCount-cnt+spliceLineNumber+1;
// Must insert some lines
let injectedTexts=[],newLines=[];for(let i=0;i<cnt;i++){let lineNumber=fromLineNumber+i;newLines[i]=this.getLineContent(lineNumber),injectedTextInEditedRangeQueue.takeWhile((r=>r.lineNumber<lineNumber)),injectedTexts[i]=injectedTextInEditedRangeQueue.takeWhile((r=>r.lineNumber===lineNumber))}rawContentChanges.push(new textModelEvents/* ModelRawLinesInserted */.Tx(spliceLineNumber+1,startLineNumber+insertingLinesCnt,newLines,injectedTexts))}lineCount+=changeLineCountDelta}this._emitContentChangedEvent(new textModelEvents/* ModelRawContentChangedEvent */.dQ(rawContentChanges,this.getVersionId(),this._isUndoing,this._isRedoing),{changes:contentChanges,eol:this._buffer.getEOL(),versionId:this.getVersionId(),isUndoing:this._isUndoing,isRedoing:this._isRedoing,isFlush:!1})}return null===result.reverseEdits?void 0:result.reverseEdits}undo(){return this._undoRedoService.undo(this.uri)}canUndo(){return this._undoRedoService.canUndo(this.uri)}redo(){return this._undoRedoService.redo(this.uri)}canRedo(){return this._undoRedoService.canRedo(this.uri)}
//#endregion
//#region Decorations
handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines){
// This is called before the decoration changed event is fired.
if(null===affectedInjectedTextLines||0===affectedInjectedTextLines.size)return;const affectedLines=[...affectedInjectedTextLines],lineChangeEvents=affectedLines.map((lineNumber=>new textModelEvents/* ModelRawLineChanged */.rU(lineNumber,this.getLineContent(lineNumber),this._getInjectedTextInLine(lineNumber))));this._onDidChangeContentOrInjectedText.fire(new textModelEvents/* ModelInjectedTextChangedEvent */.D8(lineChangeEvents))}changeDecorations(callback,ownerId=0){this._assertNotDisposed();try{return this._onDidChangeDecorations.beginDeferredEmit(),this._changeDecorations(ownerId,callback)}finally{this._onDidChangeDecorations.endDeferredEmit()}}_changeDecorations(ownerId,callback){let changeAccessor={addDecoration:(range,options)=>this._deltaDecorationsImpl(ownerId,[],[{range:range,options:options}])[0],changeDecoration:(id,newRange)=>{this._changeDecorationImpl(id,newRange)},changeDecorationOptions:(id,options)=>{this._changeDecorationOptionsImpl(id,_normalizeOptions(options))},removeDecoration:id=>{this._deltaDecorationsImpl(ownerId,[id],[])},deltaDecorations:(oldDecorations,newDecorations)=>0===oldDecorations.length&&0===newDecorations.length?[]:this._deltaDecorationsImpl(ownerId,oldDecorations,newDecorations)},result=null;try{result=callback(changeAccessor)}catch(e){(0,errors/* onUnexpectedError */.dL)(e)}
// Invalidate change accessor
return changeAccessor.addDecoration=invalidFunc,changeAccessor.changeDecoration=invalidFunc,changeAccessor.changeDecorationOptions=invalidFunc,changeAccessor.removeDecoration=invalidFunc,changeAccessor.deltaDecorations=invalidFunc,result}deltaDecorations(oldDecorations,newDecorations,ownerId=0){if(this._assertNotDisposed(),oldDecorations||(oldDecorations=[]),0===oldDecorations.length&&0===newDecorations.length)
// nothing to do
return[];try{return this._onDidChangeDecorations.beginDeferredEmit(),this._deltaDecorationsImpl(ownerId,oldDecorations,newDecorations)}finally{this._onDidChangeDecorations.endDeferredEmit()}}_getTrackedRange(id){return this.getDecorationRange(id)}_setTrackedRange(id,newRange,newStickiness){const node=id?this._decorations[id]:null;if(!node)return newRange?this._deltaDecorationsImpl(0,[],[{range:newRange,options:TRACKED_RANGE_OPTIONS[newStickiness]}])[0]:null;
// node doesn't exist, the request is to set => add the tracked range
if(!newRange)
// node exists, the request is to delete => delete node
return this._decorationsTree.delete(node),delete this._decorations[node.id],null;
// node exists, the request is to set => change the tracked range and its options
const range=this._validateRangeRelaxedNoAllocations(newRange),startOffset=this._buffer.getOffsetAt(range.startLineNumber,range.startColumn),endOffset=this._buffer.getOffsetAt(range.endLineNumber,range.endColumn);return this._decorationsTree.delete(node),node.reset(this.getVersionId(),startOffset,endOffset,range),node.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]),this._decorationsTree.insert(node),node.id}removeAllDecorationsWithOwnerId(ownerId){if(this._isDisposed)return;const nodes=this._decorationsTree.collectNodesFromOwner(ownerId);for(let i=0,len=nodes.length;i<len;i++){const node=nodes[i];this._decorationsTree.delete(node),delete this._decorations[node.id]}}getDecorationOptions(decorationId){const node=this._decorations[decorationId];return node?node.options:null}getDecorationRange(decorationId){const node=this._decorations[decorationId];return node?this._decorationsTree.getNodeRange(this,node):null}getLineDecorations(lineNumber,ownerId=0,filterOutValidation=!1){return lineNumber<1||lineNumber>this.getLineCount()?[]:this.getLinesDecorations(lineNumber,lineNumber,ownerId,filterOutValidation)}getLinesDecorations(_startLineNumber,_endLineNumber,ownerId=0,filterOutValidation=!1){let lineCount=this.getLineCount(),startLineNumber=Math.min(lineCount,Math.max(1,_startLineNumber)),endLineNumber=Math.min(lineCount,Math.max(1,_endLineNumber)),endColumn=this.getLineMaxColumn(endLineNumber);const range=new core_range/* Range */.e(startLineNumber,1,endLineNumber,endColumn),decorations=this._getDecorationsInRange(range,ownerId,filterOutValidation);return decorations.push(...this._decorationProvider.getDecorationsInRange(range,ownerId,filterOutValidation)),decorations}getDecorationsInRange(range,ownerId=0,filterOutValidation=!1){let validatedRange=this.validateRange(range);const decorations=this._getDecorationsInRange(validatedRange,ownerId,filterOutValidation);return decorations.push(...this._decorationProvider.getDecorationsInRange(validatedRange,ownerId,filterOutValidation)),decorations}getOverviewRulerDecorations(ownerId=0,filterOutValidation=!1){return this._decorationsTree.getAll(this,ownerId,filterOutValidation,!0)}getInjectedTextDecorations(ownerId=0){return this._decorationsTree.getAllInjectedText(this,ownerId)}_getInjectedTextInLine(lineNumber){const startOffset=this._buffer.getOffsetAt(lineNumber,1),endOffset=startOffset+this._buffer.getLineLength(lineNumber),result=this._decorationsTree.getInjectedTextInInterval(this,startOffset,endOffset,0);return textModelEvents/* LineInjectedText */.gk.fromDecorations(result).filter((t=>t.lineNumber===lineNumber))}getAllDecorations(ownerId=0,filterOutValidation=!1){let result=this._decorationsTree.getAll(this,ownerId,filterOutValidation,!1);return result=result.concat(this._decorationProvider.getAllDecorations(ownerId,filterOutValidation)),result}_getDecorationsInRange(filterRange,filterOwnerId,filterOutValidation){const startOffset=this._buffer.getOffsetAt(filterRange.startLineNumber,filterRange.startColumn),endOffset=this._buffer.getOffsetAt(filterRange.endLineNumber,filterRange.endColumn);return this._decorationsTree.getAllInInterval(this,startOffset,endOffset,filterOwnerId,filterOutValidation)}getRangeAt(start,end){return this._buffer.getRangeAt(start,end-start)}_changeDecorationImpl(decorationId,_range){const node=this._decorations[decorationId];if(!node)return;if(node.options.after){const oldRange=this.getDecorationRange(decorationId);this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.endLineNumber)}if(node.options.before){const oldRange=this.getDecorationRange(decorationId);this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.startLineNumber)}const range=this._validateRangeRelaxedNoAllocations(_range),startOffset=this._buffer.getOffsetAt(range.startLineNumber,range.startColumn),endOffset=this._buffer.getOffsetAt(range.endLineNumber,range.endColumn);this._decorationsTree.delete(node),node.reset(this.getVersionId(),startOffset,endOffset,range),this._decorationsTree.insert(node),this._onDidChangeDecorations.checkAffectedAndFire(node.options),node.options.after&&this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber),node.options.before&&this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber)}_changeDecorationOptionsImpl(decorationId,options){const node=this._decorations[decorationId];if(!node)return;const nodeWasInOverviewRuler=!(!node.options.overviewRuler||!node.options.overviewRuler.color),nodeIsInOverviewRuler=!(!options.overviewRuler||!options.overviewRuler.color);if(this._onDidChangeDecorations.checkAffectedAndFire(node.options),this._onDidChangeDecorations.checkAffectedAndFire(options),node.options.after||options.after){const nodeRange=this._decorationsTree.getNodeRange(this,node);this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber)}if(node.options.before||options.before){const nodeRange=this._decorationsTree.getNodeRange(this,node);this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber)}nodeWasInOverviewRuler!==nodeIsInOverviewRuler?(
// Delete + Insert due to an overview ruler status change
this._decorationsTree.delete(node),node.setOptions(options),this._decorationsTree.insert(node)):node.setOptions(options)}_deltaDecorationsImpl(ownerId,oldDecorationsIds,newDecorations){const versionId=this.getVersionId(),oldDecorationsLen=oldDecorationsIds.length;let oldDecorationIndex=0;const newDecorationsLen=newDecorations.length;let newDecorationIndex=0,result=new Array(newDecorationsLen);while(oldDecorationIndex<oldDecorationsLen||newDecorationIndex<newDecorationsLen){let node=null;if(oldDecorationIndex<oldDecorationsLen){
// (1) get ourselves an old node
do{node=this._decorations[oldDecorationsIds[oldDecorationIndex++]]}while(!node&&oldDecorationIndex<oldDecorationsLen);
// (2) remove the node from the tree (if it exists)
if(node){if(node.options.after){const nodeRange=this._decorationsTree.getNodeRange(this,node);this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber)}if(node.options.before){const nodeRange=this._decorationsTree.getNodeRange(this,node);this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber)}this._decorationsTree.delete(node),this._onDidChangeDecorations.checkAffectedAndFire(node.options)}}if(newDecorationIndex<newDecorationsLen){
// (3) create a new node if necessary
if(!node){const internalDecorationId=++this._lastDecorationId,decorationId=`${this._instanceId};${internalDecorationId}`;node=new IntervalNode(decorationId,0,0),this._decorations[decorationId]=node}
// (4) initialize node
const newDecoration=newDecorations[newDecorationIndex],range=this._validateRangeRelaxedNoAllocations(newDecoration.range),options=_normalizeOptions(newDecoration.options),startOffset=this._buffer.getOffsetAt(range.startLineNumber,range.startColumn),endOffset=this._buffer.getOffsetAt(range.endLineNumber,range.endColumn);node.ownerId=ownerId,node.reset(versionId,startOffset,endOffset,range),node.setOptions(options),node.options.after&&this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber),node.options.before&&this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber),this._onDidChangeDecorations.checkAffectedAndFire(options),this._decorationsTree.insert(node),result[newDecorationIndex]=node.id,newDecorationIndex++}else node&&delete this._decorations[node.id]}return result}setTokens(tokens,backgroundTokenizationCompleted=!1){if(0!==tokens.length){let ranges=[];for(let i=0,len=tokens.length;i<len;i++){const element=tokens[i];let minChangedLineNumber=0,maxChangedLineNumber=0,hasChange=!1;for(let j=0,lenJ=element.tokens.length;j<lenJ;j++){const lineNumber=element.startLineNumber+j;if(hasChange)this._tokens.setTokens(this._languageId,lineNumber-1,this._buffer.getLineLength(lineNumber),element.tokens[j],!1),maxChangedLineNumber=lineNumber;else{const lineHasChange=this._tokens.setTokens(this._languageId,lineNumber-1,this._buffer.getLineLength(lineNumber),element.tokens[j],!0);lineHasChange&&(hasChange=!0,minChangedLineNumber=lineNumber,maxChangedLineNumber=lineNumber)}}hasChange&&ranges.push({fromLineNumber:minChangedLineNumber,toLineNumber:maxChangedLineNumber})}ranges.length>0&&this._emitModelTokensChangedEvent({tokenizationSupportChanged:!1,semanticTokensApplied:!1,ranges:ranges})}this.handleTokenizationProgress(backgroundTokenizationCompleted)}setSemanticTokens(tokens,isComplete){this._tokens2.set(tokens,isComplete),this._emitModelTokensChangedEvent({tokenizationSupportChanged:!1,semanticTokensApplied:null!==tokens,ranges:[{fromLineNumber:1,toLineNumber:this.getLineCount()}]})}hasCompleteSemanticTokens(){return this._tokens2.isComplete()}hasSomeSemanticTokens(){return!this._tokens2.isEmpty()}setPartialSemanticTokens(range,tokens){if(this.hasCompleteSemanticTokens())return;const changedRange=this._tokens2.setPartial(range,tokens);this._emitModelTokensChangedEvent({tokenizationSupportChanged:!1,semanticTokensApplied:!0,ranges:[{fromLineNumber:changedRange.startLineNumber,toLineNumber:changedRange.endLineNumber}]})}tokenizeViewport(startLineNumber,endLineNumber){startLineNumber=Math.max(1,startLineNumber),endLineNumber=Math.min(this._buffer.getLineCount(),endLineNumber),this._tokenization.tokenizeViewport(startLineNumber,endLineNumber)}clearTokens(){this._tokens.flush(),this._emitModelTokensChangedEvent({tokenizationSupportChanged:!0,semanticTokensApplied:!1,ranges:[{fromLineNumber:1,toLineNumber:this._buffer.getLineCount()}]})}_emitModelTokensChangedEvent(e){this._isDisposing||this._onDidChangeTokens.fire(e)}resetTokenization(){this._tokenization.reset()}forceTokenization(lineNumber){if(lineNumber<1||lineNumber>this.getLineCount())throw new Error("Illegal value for lineNumber");this._tokenization.forceTokenization(lineNumber)}isCheapToTokenize(lineNumber){return this._tokenization.isCheapToTokenize(lineNumber)}tokenizeIfCheap(lineNumber){this.isCheapToTokenize(lineNumber)&&this.forceTokenization(lineNumber)}getLineTokens(lineNumber){if(lineNumber<1||lineNumber>this.getLineCount())throw new Error("Illegal value for lineNumber");return this._getLineTokens(lineNumber)}_getLineTokens(lineNumber){const lineText=this.getLineContent(lineNumber),syntacticTokens=this._tokens.getTokens(this._languageId,lineNumber-1,lineText);return this._tokens2.addSemanticTokens(lineNumber,syntacticTokens)}getLanguageId(){return this._languageId}setMode(languageId){if(this._languageId===languageId)
// There's nothing to do
return;let e={oldLanguage:this._languageId,newLanguage:languageId};this._languageId=languageId,this._onDidChangeLanguage.fire(e),this._onDidChangeLanguageConfiguration.fire({})}getLanguageIdAtPosition(lineNumber,column){const position=this.validatePosition(new core_position/* Position */.L(lineNumber,column)),lineTokens=this.getLineTokens(position.lineNumber);return lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column-1))}getLanguageConfiguration(languageId){return this._languageConfigurationService.getLanguageConfiguration(languageId)}
// Having tokens allows implementing additional helper methods
getWordAtPosition(_position){this._assertNotDisposed();const position=this.validatePosition(_position),lineContent=this.getLineContent(position.lineNumber),lineTokens=this._getLineTokens(position.lineNumber),tokenIndex=lineTokens.findTokenIndexAtOffset(position.column-1),[rbStartOffset,rbEndOffset]=TextModel._findLanguageBoundaries(lineTokens,tokenIndex),rightBiasedWord=(0,wordHelper/* getWordAtText */.t2)(position.column,this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).getWordDefinition(),lineContent.substring(rbStartOffset,rbEndOffset),rbStartOffset);
// Make sure the result touches the original passed in position
if(rightBiasedWord&&rightBiasedWord.startColumn<=_position.column&&_position.column<=rightBiasedWord.endColumn)return rightBiasedWord;
// (2). Else, if we were at a language boundary, check the left biased word
if(tokenIndex>0&&rbStartOffset===position.column-1){
// edge case, where `position` sits between two tokens belonging to two different languages
const[lbStartOffset,lbEndOffset]=TextModel._findLanguageBoundaries(lineTokens,tokenIndex-1),leftBiasedWord=(0,wordHelper/* getWordAtText */.t2)(position.column,this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex-1)).getWordDefinition(),lineContent.substring(lbStartOffset,lbEndOffset),lbStartOffset);
// Make sure the result touches the original passed in position
if(leftBiasedWord&&leftBiasedWord.startColumn<=_position.column&&_position.column<=leftBiasedWord.endColumn)return leftBiasedWord}return null}static _findLanguageBoundaries(lineTokens,tokenIndex){const languageId=lineTokens.getLanguageId(tokenIndex);
// go left until a different language is hit
let startOffset=0;for(let i=tokenIndex;i>=0&&lineTokens.getLanguageId(i)===languageId;i--)startOffset=lineTokens.getStartOffset(i);
// go right until a different language is hit
let endOffset=lineTokens.getLineContent().length;for(let i=tokenIndex,tokenCount=lineTokens.getCount();i<tokenCount&&lineTokens.getLanguageId(i)===languageId;i++)endOffset=lineTokens.getEndOffset(i);return[startOffset,endOffset]}getWordUntilPosition(position){const wordAtPosition=this.getWordAtPosition(position);return wordAtPosition?{word:wordAtPosition.word.substr(0,position.column-wordAtPosition.startColumn),startColumn:wordAtPosition.startColumn,endColumn:position.column}:{word:"",startColumn:position.column,endColumn:position.column}}findMatchingBracketUp(_bracket,_position){let bracket=_bracket.toLowerCase(),position=this.validatePosition(_position),lineTokens=this._getLineTokens(position.lineNumber),languageId=lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column-1)),bracketsSupport=this.getLanguageConfiguration(languageId).brackets;if(!bracketsSupport)return null;let data=bracketsSupport.textIsBracket[bracket];return data?stripBracketSearchCanceled(this._findMatchingBracketUp(data,position,null)):null}matchBracket(position){return this._matchBracket(this.validatePosition(position))}_establishBracketSearchOffsets(position,lineTokens,modeBrackets,tokenIndex){const tokenCount=lineTokens.getCount(),currentLanguageId=lineTokens.getLanguageId(tokenIndex);
// limit search to not go before `maxBracketLength`
let searchStartOffset=Math.max(0,position.column-1-modeBrackets.maxBracketLength);for(let i=tokenIndex-1;i>=0;i--){const tokenEndOffset=lineTokens.getEndOffset(i);if(tokenEndOffset<=searchStartOffset)break;if((0,supports/* ignoreBracketsInToken */.Bu)(lineTokens.getStandardTokenType(i))||lineTokens.getLanguageId(i)!==currentLanguageId){searchStartOffset=tokenEndOffset;break}}
// limit search to not go after `maxBracketLength`
let searchEndOffset=Math.min(lineTokens.getLineContent().length,position.column-1+modeBrackets.maxBracketLength);for(let i=tokenIndex+1;i<tokenCount;i++){const tokenStartOffset=lineTokens.getStartOffset(i);if(tokenStartOffset>=searchEndOffset)break;if((0,supports/* ignoreBracketsInToken */.Bu)(lineTokens.getStandardTokenType(i))||lineTokens.getLanguageId(i)!==currentLanguageId){searchEndOffset=tokenStartOffset;break}}return{searchStartOffset:searchStartOffset,searchEndOffset:searchEndOffset}}_matchBracket(position){const lineNumber=position.lineNumber,lineTokens=this._getLineTokens(lineNumber),lineText=this._buffer.getLineContent(lineNumber),tokenIndex=lineTokens.findTokenIndexAtOffset(position.column-1);if(tokenIndex<0)return null;const currentModeBrackets=this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).brackets;
// check that the token is not to be ignored
if(currentModeBrackets&&!(0,supports/* ignoreBracketsInToken */.Bu)(lineTokens.getStandardTokenType(tokenIndex))){let{searchStartOffset:searchStartOffset,searchEndOffset:searchEndOffset}=this._establishBracketSearchOffsets(position,lineTokens,currentModeBrackets,tokenIndex),bestResult=null;
// it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets
// `bestResult` will contain the most right-side result
while(1){const foundBracket=richEditBrackets/* BracketsUtils */.Vr.findNextBracketInRange(currentModeBrackets.forwardRegex,lineNumber,lineText,searchStartOffset,searchEndOffset);if(!foundBracket)
// there are no more brackets in this text
break;
// check that we didn't hit a bracket too far away from position
if(foundBracket.startColumn<=position.column&&position.column<=foundBracket.endColumn){const foundBracketText=lineText.substring(foundBracket.startColumn-1,foundBracket.endColumn-1).toLowerCase(),r=this._matchFoundBracket(foundBracket,currentModeBrackets.textIsBracket[foundBracketText],currentModeBrackets.textIsOpenBracket[foundBracketText],null);if(r){if(r instanceof BracketSearchCanceled)return null;bestResult=r}}searchStartOffset=foundBracket.endColumn-1}if(bestResult)return bestResult}
// If position is in between two tokens, try also looking in the previous token
if(tokenIndex>0&&lineTokens.getStartOffset(tokenIndex)===position.column-1){const prevTokenIndex=tokenIndex-1,prevModeBrackets=this.getLanguageConfiguration(lineTokens.getLanguageId(prevTokenIndex)).brackets;
// check that previous token is not to be ignored
if(prevModeBrackets&&!(0,supports/* ignoreBracketsInToken */.Bu)(lineTokens.getStandardTokenType(prevTokenIndex))){let{searchStartOffset:searchStartOffset,searchEndOffset:searchEndOffset}=this._establishBracketSearchOffsets(position,lineTokens,prevModeBrackets,prevTokenIndex);const foundBracket=richEditBrackets/* BracketsUtils */.Vr.findPrevBracketInRange(prevModeBrackets.reversedRegex,lineNumber,lineText,searchStartOffset,searchEndOffset);
// check that we didn't hit a bracket too far away from position
if(foundBracket&&foundBracket.startColumn<=position.column&&position.column<=foundBracket.endColumn){const foundBracketText=lineText.substring(foundBracket.startColumn-1,foundBracket.endColumn-1).toLowerCase(),r=this._matchFoundBracket(foundBracket,prevModeBrackets.textIsBracket[foundBracketText],prevModeBrackets.textIsOpenBracket[foundBracketText],null);if(r)return r instanceof BracketSearchCanceled?null:r}}}return null}_matchFoundBracket(foundBracket,data,isOpen,continueSearchPredicate){if(!data)return null;const matched=isOpen?this._findMatchingBracketDown(data,foundBracket.getEndPosition(),continueSearchPredicate):this._findMatchingBracketUp(data,foundBracket.getStartPosition(),continueSearchPredicate);return matched?matched instanceof BracketSearchCanceled?matched:[foundBracket,matched]:null}_findMatchingBracketUp(bracket,position,continueSearchPredicate){
// console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));
const languageId=bracket.languageId,reversedBracketRegex=bracket.reversedRegex;let count=-1,totalCallCount=0;const searchPrevMatchingBracketInRange=(lineNumber,lineText,searchStartOffset,searchEndOffset)=>{while(1){if(continueSearchPredicate&&++totalCallCount%100===0&&!continueSearchPredicate())return BracketSearchCanceled.INSTANCE;const r=richEditBrackets/* BracketsUtils */.Vr.findPrevBracketInRange(reversedBracketRegex,lineNumber,lineText,searchStartOffset,searchEndOffset);if(!r)break;const hitText=lineText.substring(r.startColumn-1,r.endColumn-1).toLowerCase();if(bracket.isOpen(hitText)?count++:bracket.isClose(hitText)&&count--,0===count)return r;searchEndOffset=r.startColumn-1}return null};for(let lineNumber=position.lineNumber;lineNumber>=1;lineNumber--){const lineTokens=this._getLineTokens(lineNumber),tokenCount=lineTokens.getCount(),lineText=this._buffer.getLineContent(lineNumber);let tokenIndex=tokenCount-1,searchStartOffset=lineText.length,searchEndOffset=lineText.length;lineNumber===position.lineNumber&&(tokenIndex=lineTokens.findTokenIndexAtOffset(position.column-1),searchStartOffset=position.column-1,searchEndOffset=position.column-1);let prevSearchInToken=!0;for(;tokenIndex>=0;tokenIndex--){const searchInToken=lineTokens.getLanguageId(tokenIndex)===languageId&&!(0,supports/* ignoreBracketsInToken */.Bu)(lineTokens.getStandardTokenType(tokenIndex));if(searchInToken)
// this token should be searched
prevSearchInToken?
// the previous token should be searched, simply extend searchStartOffset
searchStartOffset=lineTokens.getStartOffset(tokenIndex):(
// the previous token should not be searched
searchStartOffset=lineTokens.getStartOffset(tokenIndex),searchEndOffset=lineTokens.getEndOffset(tokenIndex));else
// this token should not be searched
if(prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=searchPrevMatchingBracketInRange(lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return r}prevSearchInToken=searchInToken}if(prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=searchPrevMatchingBracketInRange(lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return r}}return null}_findMatchingBracketDown(bracket,position,continueSearchPredicate){
// console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));
const languageId=bracket.languageId,bracketRegex=bracket.forwardRegex;let count=1,totalCallCount=0;const searchNextMatchingBracketInRange=(lineNumber,lineText,searchStartOffset,searchEndOffset)=>{while(1){if(continueSearchPredicate&&++totalCallCount%100===0&&!continueSearchPredicate())return BracketSearchCanceled.INSTANCE;const r=richEditBrackets/* BracketsUtils */.Vr.findNextBracketInRange(bracketRegex,lineNumber,lineText,searchStartOffset,searchEndOffset);if(!r)break;const hitText=lineText.substring(r.startColumn-1,r.endColumn-1).toLowerCase();if(bracket.isOpen(hitText)?count++:bracket.isClose(hitText)&&count--,0===count)return r;searchStartOffset=r.endColumn-1}return null},lineCount=this.getLineCount();for(let lineNumber=position.lineNumber;lineNumber<=lineCount;lineNumber++){const lineTokens=this._getLineTokens(lineNumber),tokenCount=lineTokens.getCount(),lineText=this._buffer.getLineContent(lineNumber);let tokenIndex=0,searchStartOffset=0,searchEndOffset=0;lineNumber===position.lineNumber&&(tokenIndex=lineTokens.findTokenIndexAtOffset(position.column-1),searchStartOffset=position.column-1,searchEndOffset=position.column-1);let prevSearchInToken=!0;for(;tokenIndex<tokenCount;tokenIndex++){const searchInToken=lineTokens.getLanguageId(tokenIndex)===languageId&&!(0,supports/* ignoreBracketsInToken */.Bu)(lineTokens.getStandardTokenType(tokenIndex));if(searchInToken)
// this token should be searched
prevSearchInToken||(
// the previous token should not be searched
searchStartOffset=lineTokens.getStartOffset(tokenIndex)),
// the previous token should be searched, simply extend searchEndOffset
searchEndOffset=lineTokens.getEndOffset(tokenIndex);else
// this token should not be searched
if(prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=searchNextMatchingBracketInRange(lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return r}prevSearchInToken=searchInToken}if(prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=searchNextMatchingBracketInRange(lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return r}}return null}findPrevBracket(_position){const position=this.validatePosition(_position);let languageId=null,modeBrackets=null;for(let lineNumber=position.lineNumber;lineNumber>=1;lineNumber--){const lineTokens=this._getLineTokens(lineNumber),tokenCount=lineTokens.getCount(),lineText=this._buffer.getLineContent(lineNumber);let tokenIndex=tokenCount-1,searchStartOffset=lineText.length,searchEndOffset=lineText.length;if(lineNumber===position.lineNumber){tokenIndex=lineTokens.findTokenIndexAtOffset(position.column-1),searchStartOffset=position.column-1,searchEndOffset=position.column-1;const tokenLanguageId=lineTokens.getLanguageId(tokenIndex);languageId!==tokenLanguageId&&(languageId=tokenLanguageId,modeBrackets=this.getLanguageConfiguration(languageId).brackets)}let prevSearchInToken=!0;for(;tokenIndex>=0;tokenIndex--){const tokenLanguageId=lineTokens.getLanguageId(tokenIndex);if(languageId!==tokenLanguageId){
// language id change!
if(modeBrackets&&prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=richEditBrackets/* BracketsUtils */.Vr.findPrevBracketInRange(modeBrackets.reversedRegex,lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return this._toFoundBracket(modeBrackets,r);prevSearchInToken=!1}languageId=tokenLanguageId,modeBrackets=this.getLanguageConfiguration(languageId).brackets}const searchInToken=!!modeBrackets&&!(0,supports/* ignoreBracketsInToken */.Bu)(lineTokens.getStandardTokenType(tokenIndex));if(searchInToken)
// this token should be searched
prevSearchInToken?
// the previous token should be searched, simply extend searchStartOffset
searchStartOffset=lineTokens.getStartOffset(tokenIndex):(
// the previous token should not be searched
searchStartOffset=lineTokens.getStartOffset(tokenIndex),searchEndOffset=lineTokens.getEndOffset(tokenIndex));else
// this token should not be searched
if(modeBrackets&&prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=richEditBrackets/* BracketsUtils */.Vr.findPrevBracketInRange(modeBrackets.reversedRegex,lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return this._toFoundBracket(modeBrackets,r)}prevSearchInToken=searchInToken}if(modeBrackets&&prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=richEditBrackets/* BracketsUtils */.Vr.findPrevBracketInRange(modeBrackets.reversedRegex,lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return this._toFoundBracket(modeBrackets,r)}}return null}findNextBracket(_position){const position=this.validatePosition(_position),lineCount=this.getLineCount();let languageId=null,modeBrackets=null;for(let lineNumber=position.lineNumber;lineNumber<=lineCount;lineNumber++){const lineTokens=this._getLineTokens(lineNumber),tokenCount=lineTokens.getCount(),lineText=this._buffer.getLineContent(lineNumber);let tokenIndex=0,searchStartOffset=0,searchEndOffset=0;if(lineNumber===position.lineNumber){tokenIndex=lineTokens.findTokenIndexAtOffset(position.column-1),searchStartOffset=position.column-1,searchEndOffset=position.column-1;const tokenLanguageId=lineTokens.getLanguageId(tokenIndex);languageId!==tokenLanguageId&&(languageId=tokenLanguageId,modeBrackets=this.getLanguageConfiguration(languageId).brackets)}let prevSearchInToken=!0;for(;tokenIndex<tokenCount;tokenIndex++){const tokenLanguageId=lineTokens.getLanguageId(tokenIndex);if(languageId!==tokenLanguageId){
// language id change!
if(modeBrackets&&prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=richEditBrackets/* BracketsUtils */.Vr.findNextBracketInRange(modeBrackets.forwardRegex,lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return this._toFoundBracket(modeBrackets,r);prevSearchInToken=!1}languageId=tokenLanguageId,modeBrackets=this.getLanguageConfiguration(languageId).brackets}const searchInToken=!!modeBrackets&&!(0,supports/* ignoreBracketsInToken */.Bu)(lineTokens.getStandardTokenType(tokenIndex));if(searchInToken)
// this token should be searched
prevSearchInToken||(
// the previous token should not be searched
searchStartOffset=lineTokens.getStartOffset(tokenIndex)),
// the previous token should be searched, simply extend searchEndOffset
searchEndOffset=lineTokens.getEndOffset(tokenIndex);else
// this token should not be searched
if(modeBrackets&&prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=richEditBrackets/* BracketsUtils */.Vr.findNextBracketInRange(modeBrackets.forwardRegex,lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return this._toFoundBracket(modeBrackets,r)}prevSearchInToken=searchInToken}if(modeBrackets&&prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=richEditBrackets/* BracketsUtils */.Vr.findNextBracketInRange(modeBrackets.forwardRegex,lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return this._toFoundBracket(modeBrackets,r)}}return null}findEnclosingBrackets(_position,maxDuration){let continueSearchPredicate;if("undefined"===typeof maxDuration)continueSearchPredicate=null;else{const startTime=Date.now();continueSearchPredicate=()=>Date.now()-startTime<=maxDuration}const position=this.validatePosition(_position),lineCount=this.getLineCount(),savedCounts=new Map;let counts=[];const resetCounts=(languageId,modeBrackets)=>{if(!savedCounts.has(languageId)){let tmp=[];for(let i=0,len=modeBrackets?modeBrackets.brackets.length:0;i<len;i++)tmp[i]=0;savedCounts.set(languageId,tmp)}counts=savedCounts.get(languageId)};let totalCallCount=0;const searchInRange=(modeBrackets,lineNumber,lineText,searchStartOffset,searchEndOffset)=>{while(1){if(continueSearchPredicate&&++totalCallCount%100===0&&!continueSearchPredicate())return BracketSearchCanceled.INSTANCE;const r=richEditBrackets/* BracketsUtils */.Vr.findNextBracketInRange(modeBrackets.forwardRegex,lineNumber,lineText,searchStartOffset,searchEndOffset);if(!r)break;const hitText=lineText.substring(r.startColumn-1,r.endColumn-1).toLowerCase(),bracket=modeBrackets.textIsBracket[hitText];if(bracket&&(bracket.isOpen(hitText)?counts[bracket.index]++:bracket.isClose(hitText)&&counts[bracket.index]--,-1===counts[bracket.index]))return this._matchFoundBracket(r,bracket,!1,continueSearchPredicate);searchStartOffset=r.endColumn-1}return null};let languageId=null,modeBrackets=null;for(let lineNumber=position.lineNumber;lineNumber<=lineCount;lineNumber++){const lineTokens=this._getLineTokens(lineNumber),tokenCount=lineTokens.getCount(),lineText=this._buffer.getLineContent(lineNumber);let tokenIndex=0,searchStartOffset=0,searchEndOffset=0;if(lineNumber===position.lineNumber){tokenIndex=lineTokens.findTokenIndexAtOffset(position.column-1),searchStartOffset=position.column-1,searchEndOffset=position.column-1;const tokenLanguageId=lineTokens.getLanguageId(tokenIndex);languageId!==tokenLanguageId&&(languageId=tokenLanguageId,modeBrackets=this.getLanguageConfiguration(languageId).brackets,resetCounts(languageId,modeBrackets))}let prevSearchInToken=!0;for(;tokenIndex<tokenCount;tokenIndex++){const tokenLanguageId=lineTokens.getLanguageId(tokenIndex);if(languageId!==tokenLanguageId){
// language id change!
if(modeBrackets&&prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=searchInRange(modeBrackets,lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return stripBracketSearchCanceled(r);prevSearchInToken=!1}languageId=tokenLanguageId,modeBrackets=this.getLanguageConfiguration(languageId).brackets,resetCounts(languageId,modeBrackets)}const searchInToken=!!modeBrackets&&!(0,supports/* ignoreBracketsInToken */.Bu)(lineTokens.getStandardTokenType(tokenIndex));if(searchInToken)
// this token should be searched
prevSearchInToken||(
// the previous token should not be searched
searchStartOffset=lineTokens.getStartOffset(tokenIndex)),
// the previous token should be searched, simply extend searchEndOffset
searchEndOffset=lineTokens.getEndOffset(tokenIndex);else
// this token should not be searched
if(modeBrackets&&prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=searchInRange(modeBrackets,lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return stripBracketSearchCanceled(r)}prevSearchInToken=searchInToken}if(modeBrackets&&prevSearchInToken&&searchStartOffset!==searchEndOffset){const r=searchInRange(modeBrackets,lineNumber,lineText,searchStartOffset,searchEndOffset);if(r)return stripBracketSearchCanceled(r)}}return null}_toFoundBracket(modeBrackets,r){if(!r)return null;let text=this.getValueInRange(r);text=text.toLowerCase();let data=modeBrackets.textIsBracket[text];return data?{range:r,open:data.open,close:data.close,isOpen:modeBrackets.textIsOpenBracket[text]}:null}
/**
     * Returns:
     *  - -1 => the line consists of whitespace
     *  - otherwise => the indent level is returned value
     */static computeIndentLevel(line,tabSize){let indent=0,i=0,len=line.length;while(i<len){let chCode=line.charCodeAt(i);if(32/* Space */===chCode)indent++;else{if(9/* Tab */!==chCode)break;indent=indent-indent%tabSize+tabSize}i++}return i===len?-1:indent}_computeIndentLevel(lineIndex){return TextModel.computeIndentLevel(this._buffer.getLineContent(lineIndex+1),this._options.tabSize)}getActiveIndentGuide(lineNumber,minLineNumber,maxLineNumber){this._assertNotDisposed();const lineCount=this.getLineCount();if(lineNumber<1||lineNumber>lineCount)throw new Error("Illegal value for lineNumber");const foldingRules=this.getLanguageConfiguration(this._languageId).foldingRules,offSide=Boolean(foldingRules&&foldingRules.offSide);let up_aboveContentLineIndex=-2,up_aboveContentLineIndent=-1,up_belowContentLineIndex=-2,up_belowContentLineIndent=-1;/* -2 is a marker for not having computed it */const up_resolveIndents=lineNumber=>{if(-1!==up_aboveContentLineIndex&&(-2===up_aboveContentLineIndex||up_aboveContentLineIndex>lineNumber-1)){up_aboveContentLineIndex=-1,up_aboveContentLineIndent=-1;
// must find previous line with content
for(let lineIndex=lineNumber-2;lineIndex>=0;lineIndex--){let indent=this._computeIndentLevel(lineIndex);if(indent>=0){up_aboveContentLineIndex=lineIndex,up_aboveContentLineIndent=indent;break}}}if(-2===up_belowContentLineIndex){up_belowContentLineIndex=-1,up_belowContentLineIndent=-1;
// must find next line with content
for(let lineIndex=lineNumber;lineIndex<lineCount;lineIndex++){let indent=this._computeIndentLevel(lineIndex);if(indent>=0){up_belowContentLineIndex=lineIndex,up_belowContentLineIndent=indent;break}}}};let down_aboveContentLineIndex=-2,down_aboveContentLineIndent=-1,down_belowContentLineIndex=-2,down_belowContentLineIndent=-1;/* -2 is a marker for not having computed it */const down_resolveIndents=lineNumber=>{if(-2===down_aboveContentLineIndex){down_aboveContentLineIndex=-1,down_aboveContentLineIndent=-1;
// must find previous line with content
for(let lineIndex=lineNumber-2;lineIndex>=0;lineIndex--){let indent=this._computeIndentLevel(lineIndex);if(indent>=0){down_aboveContentLineIndex=lineIndex,down_aboveContentLineIndent=indent;break}}}if(-1!==down_belowContentLineIndex&&(-2===down_belowContentLineIndex||down_belowContentLineIndex<lineNumber-1)){down_belowContentLineIndex=-1,down_belowContentLineIndent=-1;
// must find next line with content
for(let lineIndex=lineNumber;lineIndex<lineCount;lineIndex++){let indent=this._computeIndentLevel(lineIndex);if(indent>=0){down_belowContentLineIndex=lineIndex,down_belowContentLineIndent=indent;break}}}};let startLineNumber=0,goUp=!0,endLineNumber=0,goDown=!0,indent=0,initialIndent=0;for(let distance=0;goUp||goDown;distance++){const upLineNumber=lineNumber-distance,downLineNumber=lineNumber+distance;distance>1&&(upLineNumber<1||upLineNumber<minLineNumber)&&(goUp=!1),distance>1&&(downLineNumber>lineCount||downLineNumber>maxLineNumber)&&(goDown=!1),distance>5e4&&(
// stop processing
goUp=!1,goDown=!1);let upLineIndentLevel=-1;if(goUp){
// compute indent level going up
const currentIndent=this._computeIndentLevel(upLineNumber-1);currentIndent>=0?(
// This line has content (besides whitespace)
// Use the line's indent
up_belowContentLineIndex=upLineNumber-1,up_belowContentLineIndent=currentIndent,upLineIndentLevel=Math.ceil(currentIndent/this._options.indentSize)):(up_resolveIndents(upLineNumber),upLineIndentLevel=this._getIndentLevelForWhitespaceLine(offSide,up_aboveContentLineIndent,up_belowContentLineIndent))}let downLineIndentLevel=-1;if(goDown){
// compute indent level going down
const currentIndent=this._computeIndentLevel(downLineNumber-1);currentIndent>=0?(
// This line has content (besides whitespace)
// Use the line's indent
down_aboveContentLineIndex=downLineNumber-1,down_aboveContentLineIndent=currentIndent,downLineIndentLevel=Math.ceil(currentIndent/this._options.indentSize)):(down_resolveIndents(downLineNumber),downLineIndentLevel=this._getIndentLevelForWhitespaceLine(offSide,down_aboveContentLineIndent,down_belowContentLineIndent))}if(0!==distance){if(1===distance){if(downLineNumber<=lineCount&&downLineIndentLevel>=0&&initialIndent+1===downLineIndentLevel){
// This is the beginning of a scope, we have special handling here, since we want the
// child scope indent to be active, not the parent scope
goUp=!1,startLineNumber=downLineNumber,endLineNumber=downLineNumber,indent=downLineIndentLevel;continue}if(upLineNumber>=1&&upLineIndentLevel>=0&&upLineIndentLevel-1===initialIndent){
// This is the end of a scope, just like above
goDown=!1,startLineNumber=upLineNumber,endLineNumber=upLineNumber,indent=upLineIndentLevel;continue}if(startLineNumber=lineNumber,endLineNumber=lineNumber,indent=initialIndent,0===indent)
// No need to continue
return{startLineNumber:startLineNumber,endLineNumber:endLineNumber,indent:indent}}goUp&&(upLineIndentLevel>=indent?startLineNumber=upLineNumber:goUp=!1),goDown&&(downLineIndentLevel>=indent?endLineNumber=downLineNumber:goDown=!1)}else initialIndent=upLineIndentLevel}return{startLineNumber:startLineNumber,endLineNumber:endLineNumber,indent:indent}}getLinesBracketGuides(startLineNumber,endLineNumber,activePosition,options){var _a,_b,_c,_d,_e;const result=[],bracketPairs=this._bracketPairColorizer.getBracketPairsInRangeWithMinIndentation(new core_range/* Range */.e(startLineNumber,1,endLineNumber,this.getLineMaxColumn(endLineNumber)));let activeBracketPairRange;if(activePosition&&bracketPairs.length>0){const bracketsContainingActivePosition=startLineNumber<=activePosition.lineNumber&&activePosition.lineNumber<=endLineNumber?bracketPairs.filter((bp=>bp.range.containsPosition(activePosition))):this._bracketPairColorizer.getBracketPairsInRange(core_range/* Range */.e.fromPositions(activePosition));activeBracketPairRange=null===(_a=(0,arrays/* findLast */.dF)(bracketsContainingActivePosition,(
/* Exclude single line bracket pairs for cases such as
             * ```
             * function test() {
             * 		if (true) { | }
             * }
             * ```
             */
i=>i.range.startLineNumber!==i.range.endLineNumber)))||void 0===_a?void 0:_a.range}const queue=new arrays/* ArrayQueue */.H9(bracketPairs),activeGuides=new Array,nextGuides=new Array,colorProvider=new BracketPairGuidesClassNames;
/** Indexed by nesting level */for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){let guides=new Array;nextGuides.length>0&&(guides=guides.concat(nextGuides),nextGuides.length=0),result.push(guides);
// Update activeGuides
for(const pair of queue.takeWhile((b=>b.openingBracketRange.startLineNumber<=lineNumber))||[]){if(pair.range.startLineNumber===pair.range.endLineNumber)
// ignore single line brackets
continue;const guideVisibleColumn=Math.min(this.getVisibleColumnFromPosition(pair.openingBracketRange.getStartPosition()),this.getVisibleColumnFromPosition(null!==(_c=null===(_b=pair.closingBracketRange)||void 0===_b?void 0:_b.getStartPosition())&&void 0!==_c?_c:pair.range.getEndPosition()),pair.minVisibleColumnIndentation+1);let renderHorizontalEndLineAtTheBottom=!1;if(pair.closingBracketRange){const firstNonWsIndex=strings/* firstNonWhitespaceIndex */.LC(this.getLineContent(pair.closingBracketRange.startLineNumber));firstNonWsIndex<pair.closingBracketRange.startColumn-1&&(renderHorizontalEndLineAtTheBottom=!0)}
// TODO: Consider indentation when computing guideVisibleColumn
const start=pair.openingBracketRange.getStartPosition(),end=null!==(_e=null===(_d=pair.closingBracketRange)||void 0===_d?void 0:_d.getStartPosition())&&void 0!==_e?_e:pair.range.getEndPosition();void 0===pair.closingBracketRange?
// Don't show guides for bracket pairs that are not balanced.
// See #135125.
activeGuides[pair.nestingLevel]=null:activeGuides[pair.nestingLevel]={nestingLevel:pair.nestingLevel,guideVisibleColumn:guideVisibleColumn,start:start,visibleStartColumn:this.getVisibleColumnFromPosition(start),end:end,visibleEndColumn:this.getVisibleColumnFromPosition(end),bracketPair:pair,renderHorizontalEndLineAtTheBottom:renderHorizontalEndLineAtTheBottom}}for(const line of activeGuides){if(!line)continue;const isActive=activeBracketPairRange&&line.bracketPair.range.equalsRange(activeBracketPairRange),className=colorProvider.getInlineClassNameOfLevel(line.nestingLevel)+(options.highlightActive&&isActive?" "+colorProvider.activeClassName:"");(isActive&&options.horizontalGuides!==model/* HorizontalGuidesState */.s6.Disabled||options.includeInactive&&options.horizontalGuides===model/* HorizontalGuidesState */.s6.Enabled)&&(line.start.lineNumber===lineNumber&&line.guideVisibleColumn<line.visibleStartColumn&&guides.push(new model/* IndentGuide */.UO(line.guideVisibleColumn,className,new model/* IndentGuideHorizontalLine */.vW(!1,line.start.column))),line.end.lineNumber===lineNumber+1&&line.guideVisibleColumn<line.visibleEndColumn&&nextGuides.push(new model/* IndentGuide */.UO(line.guideVisibleColumn,className,new model/* IndentGuideHorizontalLine */.vW(!line.renderHorizontalEndLineAtTheBottom,line.end.column))))}let lastVisibleColumnCount=Number.MAX_SAFE_INTEGER;
// Going backwards, so the last guide potentially replaces others
for(let i=activeGuides.length-1;i>=0;i--){const line=activeGuides[i];if(!line)continue;const isActive=options.highlightActive&&activeBracketPairRange&&line.bracketPair.range.equalsRange(activeBracketPairRange),className=colorProvider.getInlineClassNameOfLevel(line.nestingLevel)+(isActive?" "+colorProvider.activeClassName:"");(isActive||options.includeInactive)&&line.renderHorizontalEndLineAtTheBottom&&line.end.lineNumber===lineNumber+1&&nextGuides.push(new model/* IndentGuide */.UO(line.guideVisibleColumn,className,null)),line.end.lineNumber<=lineNumber||line.start.lineNumber>=lineNumber||(line.guideVisibleColumn>=lastVisibleColumnCount&&!isActive||(lastVisibleColumnCount=line.guideVisibleColumn,(isActive||options.includeInactive)&&guides.push(new model/* IndentGuide */.UO(line.guideVisibleColumn,className,null))))}guides.sort(((a,b)=>a.visibleColumn-b.visibleColumn))}return result}getVisibleColumnFromPosition(position){return cursorColumns/* CursorColumns */.i.visibleColumnFromColumn(this.getLineContent(position.lineNumber),position.column,this._options.tabSize)+1}getLinesIndentGuides(startLineNumber,endLineNumber){this._assertNotDisposed();const lineCount=this.getLineCount();if(startLineNumber<1||startLineNumber>lineCount)throw new Error("Illegal value for startLineNumber");if(endLineNumber<1||endLineNumber>lineCount)throw new Error("Illegal value for endLineNumber");const foldingRules=this.getLanguageConfiguration(this._languageId).foldingRules,offSide=Boolean(foldingRules&&foldingRules.offSide);let result=new Array(endLineNumber-startLineNumber+1),aboveContentLineIndex=-2,aboveContentLineIndent=-1,belowContentLineIndex=-2,belowContentLineIndent=-1;for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){let resultIndex=lineNumber-startLineNumber;const currentIndent=this._computeIndentLevel(lineNumber-1);if(currentIndent>=0)
// This line has content (besides whitespace)
// Use the line's indent
aboveContentLineIndex=lineNumber-1,aboveContentLineIndent=currentIndent,result[resultIndex]=Math.ceil(currentIndent/this._options.indentSize);else{if(-2===aboveContentLineIndex){aboveContentLineIndex=-1,aboveContentLineIndent=-1;
// must find previous line with content
for(let lineIndex=lineNumber-2;lineIndex>=0;lineIndex--){let indent=this._computeIndentLevel(lineIndex);if(indent>=0){aboveContentLineIndex=lineIndex,aboveContentLineIndent=indent;break}}}if(-1!==belowContentLineIndex&&(-2===belowContentLineIndex||belowContentLineIndex<lineNumber-1)){belowContentLineIndex=-1,belowContentLineIndent=-1;
// must find next line with content
for(let lineIndex=lineNumber;lineIndex<lineCount;lineIndex++){let indent=this._computeIndentLevel(lineIndex);if(indent>=0){belowContentLineIndex=lineIndex,belowContentLineIndent=indent;break}}}result[resultIndex]=this._getIndentLevelForWhitespaceLine(offSide,aboveContentLineIndent,belowContentLineIndent)}}return result}_getIndentLevelForWhitespaceLine(offSide,aboveContentLineIndent,belowContentLineIndent){return-1===aboveContentLineIndent||-1===belowContentLineIndent?0:aboveContentLineIndent<belowContentLineIndent?1+Math.floor(aboveContentLineIndent/this._options.indentSize):aboveContentLineIndent===belowContentLineIndent||offSide?Math.ceil(belowContentLineIndent/this._options.indentSize):1+Math.floor(belowContentLineIndent/this._options.indentSize)}
//#endregion
normalizePosition(position,affinity){return position}
/**
     * Gets the column at which indentation stops at a given line.
     * @internal
    */getLineIndentColumn(lineNumber){
// Columns start with 1.
return indentOfLine(this.getLineContent(lineNumber))+1}};function indentOfLine(line){let indent=0;for(const c of line){if(" "!==c&&"\t"!==c)break;indent++}return indent}TextModel.MODEL_SYNC_LIMIT=52428800,// 50 MB
TextModel.LARGE_FILE_SIZE_THRESHOLD=20971520,// 20 MB;
TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD=3e5,// 300K lines
TextModel.DEFAULT_CREATION_OPTIONS={isForSimpleWidget:!1,tabSize:editorOptions/* EDITOR_MODEL_DEFAULTS */.DB.tabSize,indentSize:editorOptions/* EDITOR_MODEL_DEFAULTS */.DB.indentSize,insertSpaces:editorOptions/* EDITOR_MODEL_DEFAULTS */.DB.insertSpaces,detectIndentation:!1,defaultEOL:1/* LF */,trimAutoWhitespace:editorOptions/* EDITOR_MODEL_DEFAULTS */.DB.trimAutoWhitespace,largeFileOptimizations:editorOptions/* EDITOR_MODEL_DEFAULTS */.DB.largeFileOptimizations,bracketPairColorizationOptions:editorOptions/* EDITOR_MODEL_DEFAULTS */.DB.bracketPairColorizationOptions},TextModel=__decorate([__param(4,undoRedo/* IUndoRedoService */.tJ),__param(5,modeService/* IModeService */.h),__param(6,languageConfigurationRegistry/* ILanguageConfigurationService */.c_)],TextModel);class BracketPairGuidesClassNames{constructor(){this.activeClassName="indent-active"}getInlineClassNameOfLevel(level){
// To support a dynamic amount of colors up to 6 colors,
// we use a number that is a lcm of all numbers from 1 to 6.
return"bracket-indent-guide lvl-"+level%30}}
//#region Decorations
function isNodeInOverviewRuler(node){return!(!node.options.overviewRuler||!node.options.overviewRuler.color)}function isNodeInjectedText(node){return!!node.options.after||!!node.options.before}class DecorationsTrees{constructor(){this._decorationsTree0=new IntervalTree,this._decorationsTree1=new IntervalTree,this._injectedTextDecorationsTree=new IntervalTree}ensureAllNodesHaveRanges(host){this.getAll(host,0,!1,!1)}_ensureNodesHaveRanges(host,nodes){for(const node of nodes)null===node.range&&(node.range=host.getRangeAt(node.cachedAbsoluteStart,node.cachedAbsoluteEnd));return nodes}getAllInInterval(host,start,end,filterOwnerId,filterOutValidation){const versionId=host.getVersionId(),result=this._intervalSearch(start,end,filterOwnerId,filterOutValidation,versionId);return this._ensureNodesHaveRanges(host,result)}_intervalSearch(start,end,filterOwnerId,filterOutValidation,cachedVersionId){const r0=this._decorationsTree0.intervalSearch(start,end,filterOwnerId,filterOutValidation,cachedVersionId),r1=this._decorationsTree1.intervalSearch(start,end,filterOwnerId,filterOutValidation,cachedVersionId),r2=this._injectedTextDecorationsTree.intervalSearch(start,end,filterOwnerId,filterOutValidation,cachedVersionId);return r0.concat(r1).concat(r2)}getInjectedTextInInterval(host,start,end,filterOwnerId){const versionId=host.getVersionId(),result=this._injectedTextDecorationsTree.intervalSearch(start,end,filterOwnerId,!1,versionId);return this._ensureNodesHaveRanges(host,result).filter((i=>i.options.showIfCollapsed||!i.range.isEmpty()))}getAllInjectedText(host,filterOwnerId){const versionId=host.getVersionId(),result=this._injectedTextDecorationsTree.search(filterOwnerId,!1,versionId);return this._ensureNodesHaveRanges(host,result).filter((i=>i.options.showIfCollapsed||!i.range.isEmpty()))}getAll(host,filterOwnerId,filterOutValidation,overviewRulerOnly){const versionId=host.getVersionId(),result=this._search(filterOwnerId,filterOutValidation,overviewRulerOnly,versionId);return this._ensureNodesHaveRanges(host,result)}_search(filterOwnerId,filterOutValidation,overviewRulerOnly,cachedVersionId){if(overviewRulerOnly)return this._decorationsTree1.search(filterOwnerId,filterOutValidation,cachedVersionId);{const r0=this._decorationsTree0.search(filterOwnerId,filterOutValidation,cachedVersionId),r1=this._decorationsTree1.search(filterOwnerId,filterOutValidation,cachedVersionId),r2=this._injectedTextDecorationsTree.search(filterOwnerId,filterOutValidation,cachedVersionId);return r0.concat(r1).concat(r2)}}collectNodesFromOwner(ownerId){const r0=this._decorationsTree0.collectNodesFromOwner(ownerId),r1=this._decorationsTree1.collectNodesFromOwner(ownerId),r2=this._injectedTextDecorationsTree.collectNodesFromOwner(ownerId);return r0.concat(r1).concat(r2)}collectNodesPostOrder(){const r0=this._decorationsTree0.collectNodesPostOrder(),r1=this._decorationsTree1.collectNodesPostOrder(),r2=this._injectedTextDecorationsTree.collectNodesPostOrder();return r0.concat(r1).concat(r2)}insert(node){isNodeInjectedText(node)?this._injectedTextDecorationsTree.insert(node):isNodeInOverviewRuler(node)?this._decorationsTree1.insert(node):this._decorationsTree0.insert(node)}delete(node){isNodeInjectedText(node)?this._injectedTextDecorationsTree.delete(node):isNodeInOverviewRuler(node)?this._decorationsTree1.delete(node):this._decorationsTree0.delete(node)}getNodeRange(host,node){const versionId=host.getVersionId();return node.cachedVersionId!==versionId&&this._resolveNode(node,versionId),null===node.range&&(node.range=host.getRangeAt(node.cachedAbsoluteStart,node.cachedAbsoluteEnd)),node.range}_resolveNode(node,cachedVersionId){isNodeInjectedText(node)?this._injectedTextDecorationsTree.resolveNode(node,cachedVersionId):isNodeInOverviewRuler(node)?this._decorationsTree1.resolveNode(node,cachedVersionId):this._decorationsTree0.resolveNode(node,cachedVersionId)}acceptReplace(offset,length,textLength,forceMoveMarkers){this._decorationsTree0.acceptReplace(offset,length,textLength,forceMoveMarkers),this._decorationsTree1.acceptReplace(offset,length,textLength,forceMoveMarkers),this._injectedTextDecorationsTree.acceptReplace(offset,length,textLength,forceMoveMarkers)}}function cleanClassName(className){return className.replace(/[^a-z0-9\-_]/gi," ")}class DecorationOptions{constructor(options){this.color=options.color||"",this.darkColor=options.darkColor||""}}class ModelDecorationOverviewRulerOptions extends DecorationOptions{constructor(options){super(options),this._resolvedColor=null,this.position="number"===typeof options.position?options.position:model/* OverviewRulerLane */.sh.Center}getColor(theme){return this._resolvedColor||("light"!==theme.type&&this.darkColor?this._resolvedColor=this._resolveColor(this.darkColor,theme):this._resolvedColor=this._resolveColor(this.color,theme)),this._resolvedColor}invalidateCachedColor(){this._resolvedColor=null}_resolveColor(color,theme){if("string"===typeof color)return color;let c=color?theme.getColor(color.id):null;return c?c.toString():""}}class ModelDecorationMinimapOptions extends DecorationOptions{constructor(options){super(options),this.position=options.position}getColor(theme){return this._resolvedColor||("light"!==theme.type&&this.darkColor?this._resolvedColor=this._resolveColor(this.darkColor,theme):this._resolvedColor=this._resolveColor(this.color,theme)),this._resolvedColor}invalidateCachedColor(){this._resolvedColor=void 0}_resolveColor(color,theme){return"string"===typeof color?common_color/* Color */.Il.fromHex(color):theme.getColor(color.id)}}class ModelDecorationInjectedTextOptions{constructor(options){this.content=options.content||"",this.inlineClassName=options.inlineClassName||null,this.inlineClassNameAffectsLetterSpacing=options.inlineClassNameAffectsLetterSpacing||!1}static from(options){return options instanceof ModelDecorationInjectedTextOptions?options:new ModelDecorationInjectedTextOptions(options)}}class ModelDecorationOptions{constructor(options){this.description=options.description,this.stickiness=options.stickiness||0/* AlwaysGrowsWhenTypingAtEdges */,this.zIndex=options.zIndex||0,this.className=options.className?cleanClassName(options.className):null,this.hoverMessage=options.hoverMessage||null,this.glyphMarginHoverMessage=options.glyphMarginHoverMessage||null,this.isWholeLine=options.isWholeLine||!1,this.showIfCollapsed=options.showIfCollapsed||!1,this.collapseOnReplaceEdit=options.collapseOnReplaceEdit||!1,this.overviewRuler=options.overviewRuler?new ModelDecorationOverviewRulerOptions(options.overviewRuler):null,this.minimap=options.minimap?new ModelDecorationMinimapOptions(options.minimap):null,this.glyphMarginClassName=options.glyphMarginClassName?cleanClassName(options.glyphMarginClassName):null,this.linesDecorationsClassName=options.linesDecorationsClassName?cleanClassName(options.linesDecorationsClassName):null,this.firstLineDecorationClassName=options.firstLineDecorationClassName?cleanClassName(options.firstLineDecorationClassName):null,this.marginClassName=options.marginClassName?cleanClassName(options.marginClassName):null,this.inlineClassName=options.inlineClassName?cleanClassName(options.inlineClassName):null,this.inlineClassNameAffectsLetterSpacing=options.inlineClassNameAffectsLetterSpacing||!1,this.beforeContentClassName=options.beforeContentClassName?cleanClassName(options.beforeContentClassName):null,this.afterContentClassName=options.afterContentClassName?cleanClassName(options.afterContentClassName):null,this.after=options.after?ModelDecorationInjectedTextOptions.from(options.after):null,this.before=options.before?ModelDecorationInjectedTextOptions.from(options.before):null}static register(options){return new ModelDecorationOptions(options)}static createDynamic(options){return new ModelDecorationOptions(options)}}ModelDecorationOptions.EMPTY=ModelDecorationOptions.register({description:"empty"});
/**
 * The order carefully matches the values of the enum.
 */
const TRACKED_RANGE_OPTIONS=[ModelDecorationOptions.register({description:"tracked-range-always-grows-when-typing-at-edges",stickiness:0/* AlwaysGrowsWhenTypingAtEdges */}),ModelDecorationOptions.register({description:"tracked-range-never-grows-when-typing-at-edges",stickiness:1/* NeverGrowsWhenTypingAtEdges */}),ModelDecorationOptions.register({description:"tracked-range-grows-only-when-typing-before",stickiness:2/* GrowsOnlyWhenTypingBefore */}),ModelDecorationOptions.register({description:"tracked-range-grows-only-when-typing-after",stickiness:3/* GrowsOnlyWhenTypingAfter */})];function _normalizeOptions(options){return options instanceof ModelDecorationOptions?options:ModelDecorationOptions.createDynamic(options)}class DidChangeDecorationsEmitter extends lifecycle/* Disposable */.JT{constructor(handleBeforeFire){super(),this.handleBeforeFire=handleBeforeFire,this._actual=this._register(new common_event/* Emitter */.Q5),this.event=this._actual.event,this._affectedInjectedTextLines=null,this._deferredCnt=0,this._shouldFire=!1,this._affectsMinimap=!1,this._affectsOverviewRuler=!1}beginDeferredEmit(){this._deferredCnt++}endDeferredEmit(){var _a;if(this._deferredCnt--,0===this._deferredCnt){if(this._shouldFire){this.handleBeforeFire(this._affectedInjectedTextLines);const event={affectsMinimap:this._affectsMinimap,affectsOverviewRuler:this._affectsOverviewRuler};this._shouldFire=!1,this._affectsMinimap=!1,this._affectsOverviewRuler=!1,this._actual.fire(event)}null===(_a=this._affectedInjectedTextLines)||void 0===_a||_a.clear(),this._affectedInjectedTextLines=null}}recordLineAffectedByInjectedText(lineNumber){this._affectedInjectedTextLines||(this._affectedInjectedTextLines=new Set),this._affectedInjectedTextLines.add(lineNumber)}checkAffectedAndFire(options){this._affectsMinimap||(this._affectsMinimap=!(!options.minimap||!options.minimap.position)),this._affectsOverviewRuler||(this._affectsOverviewRuler=!(!options.overviewRuler||!options.overviewRuler.color)),this._shouldFire=!0}fire(){this._affectsMinimap=!0,this._affectsOverviewRuler=!0,this._shouldFire=!0}}
//#endregion
class DidChangeContentEmitter extends lifecycle/* Disposable */.JT{constructor(){super(),
/**
         * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.
         */
this._fastEmitter=this._register(new common_event/* Emitter */.Q5),this.fastEvent=this._fastEmitter.event,this._slowEmitter=this._register(new common_event/* Emitter */.Q5),this.slowEvent=this._slowEmitter.event,this._deferredCnt=0,this._deferredEvent=null}beginDeferredEmit(){this._deferredCnt++}endDeferredEmit(resultingSelection=null){if(this._deferredCnt--,0===this._deferredCnt&&null!==this._deferredEvent){this._deferredEvent.rawContentChangedEvent.resultingSelection=resultingSelection;const e=this._deferredEvent;this._deferredEvent=null,this._fastEmitter.fire(e),this._slowEmitter.fire(e)}}fire(e){this._deferredCnt>0?this._deferredEvent?this._deferredEvent=this._deferredEvent.merge(e):this._deferredEvent=e:(this._fastEmitter.fire(e),this._slowEmitter.fire(e))}}
/***/},
/***/983256:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */CZ:function(){/* binding */return ModelRawEOLChanged},
/* harmony export */D8:function(){/* binding */return ModelInjectedTextChangedEvent},
/* harmony export */Jx:function(){/* binding */return ModelRawFlush},
/* harmony export */Tx:function(){/* binding */return ModelRawLinesInserted},
/* harmony export */dQ:function(){/* binding */return ModelRawContentChangedEvent},
/* harmony export */fV:function(){/* binding */return InternalModelContentChangeEvent},
/* harmony export */gk:function(){/* binding */return LineInjectedText},
/* harmony export */lN:function(){/* binding */return ModelRawLinesDeleted},
/* harmony export */rU:function(){/* binding */return ModelRawLineChanged}
/* harmony export */});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * An event describing that a model has been reset to a new value.
 * @internal
 */
class ModelRawFlush{constructor(){this.changeType=1/* Flush */}}
/**
 * Represents text injected on a line
 * @internal
 */class LineInjectedText{constructor(ownerId,lineNumber,column,options,order){this.ownerId=ownerId,this.lineNumber=lineNumber,this.column=column,this.options=options,this.order=order}static applyInjectedText(lineText,injectedTexts){if(!injectedTexts||0===injectedTexts.length)return lineText;let result="",lastOriginalOffset=0;for(const injectedText of injectedTexts)result+=lineText.substring(lastOriginalOffset,injectedText.column-1),lastOriginalOffset=injectedText.column-1,result+=injectedText.options.content;return result+=lineText.substring(lastOriginalOffset),result}static fromDecorations(decorations){const result=[];for(const decoration of decorations)decoration.options.before&&decoration.options.before.content.length>0&&result.push(new LineInjectedText(decoration.ownerId,decoration.range.startLineNumber,decoration.range.startColumn,decoration.options.before,0)),decoration.options.after&&decoration.options.after.content.length>0&&result.push(new LineInjectedText(decoration.ownerId,decoration.range.endLineNumber,decoration.range.endColumn,decoration.options.after,1));return result.sort(((a,b)=>a.lineNumber===b.lineNumber?a.column===b.column?a.order-b.order:a.column-b.column:a.lineNumber-b.lineNumber)),result}}
/**
 * An event describing that a line has changed in a model.
 * @internal
 */class ModelRawLineChanged{constructor(lineNumber,detail,injectedText){this.changeType=2/* LineChanged */,this.lineNumber=lineNumber,this.detail=detail,this.injectedText=injectedText}}
/**
 * An event describing that line(s) have been deleted in a model.
 * @internal
 */class ModelRawLinesDeleted{constructor(fromLineNumber,toLineNumber){this.changeType=3/* LinesDeleted */,this.fromLineNumber=fromLineNumber,this.toLineNumber=toLineNumber}}
/**
 * An event describing that line(s) have been inserted in a model.
 * @internal
 */class ModelRawLinesInserted{constructor(fromLineNumber,toLineNumber,detail,injectedTexts){this.changeType=4/* LinesInserted */,this.injectedTexts=injectedTexts,this.fromLineNumber=fromLineNumber,this.toLineNumber=toLineNumber,this.detail=detail}}
/**
 * An event describing that a model has had its EOL changed.
 * @internal
 */class ModelRawEOLChanged{constructor(){this.changeType=5/* EOLChanged */}}
/**
 * An event describing a change in the text of a model.
 * @internal
 */class ModelRawContentChangedEvent{constructor(changes,versionId,isUndoing,isRedoing){this.changes=changes,this.versionId=versionId,this.isUndoing=isUndoing,this.isRedoing=isRedoing,this.resultingSelection=null}containsEvent(type){for(let i=0,len=this.changes.length;i<len;i++){const change=this.changes[i];if(change.changeType===type)return!0}return!1}static merge(a,b){const changes=[].concat(a.changes).concat(b.changes),versionId=b.versionId,isUndoing=a.isUndoing||b.isUndoing,isRedoing=a.isRedoing||b.isRedoing;return new ModelRawContentChangedEvent(changes,versionId,isUndoing,isRedoing)}}
/**
 * An event describing a change in injected text.
 * @internal
 */class ModelInjectedTextChangedEvent{constructor(changes){this.changes=changes}}
/**
 * @internal
 */class InternalModelContentChangeEvent{constructor(rawContentChangedEvent,contentChangedEvent){this.rawContentChangedEvent=rawContentChangedEvent,this.contentChangedEvent=contentChangedEvent}merge(other){const rawContentChangedEvent=ModelRawContentChangedEvent.merge(this.rawContentChangedEvent,other.rawContentChangedEvent),contentChangedEvent=InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent,other.contentChangedEvent);return new InternalModelContentChangeEvent(rawContentChangedEvent,contentChangedEvent)}static _mergeChangeEvents(a,b){const changes=[].concat(a.changes).concat(b.changes),eol=b.eol,versionId=b.versionId,isUndoing=a.isUndoing||b.isUndoing,isRedoing=a.isRedoing||b.isRedoing,isFlush=a.isFlush||b.isFlush;return{changes:changes,eol:eol,versionId:versionId,isUndoing:isUndoing,isRedoing:isRedoing,isFlush:isFlush}}}
/***/},
/***/177277:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */bc:function(){/* binding */return SearchParams},
/* harmony export */cM:function(){/* binding */return isValidMatch},
/* harmony export */iE:function(){/* binding */return createFindMatch},
/* harmony export */pM:function(){/* binding */return TextModelSearch},
/* harmony export */sz:function(){/* binding */return Searcher}
/* harmony export */});
/* unused harmony exports isMultilineRegexSource, SearchData */
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295),_controller_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(759410),_core_position_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(50187),_core_range_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(624314),_model_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(984973);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const LIMIT_FIND_COUNT=999;class SearchParams{constructor(searchString,isRegex,matchCase,wordSeparators){this.searchString=searchString,this.isRegex=isRegex,this.matchCase=matchCase,this.wordSeparators=wordSeparators}parseSearchRequest(){if(""===this.searchString)return null;
// Try to create a RegExp out of the params
let multiline;multiline=this.isRegex?isMultilineRegexSource(this.searchString):this.searchString.indexOf("\n")>=0;let regex=null;try{regex=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .createRegExp */.GF(this.searchString,this.isRegex,{matchCase:this.matchCase,wholeWord:!1,multiline:multiline,global:!0,unicode:!0})}catch(err){return null}if(!regex)return null;let canUseSimpleSearch=!this.isRegex&&!multiline;return canUseSimpleSearch&&this.searchString.toLowerCase()!==this.searchString.toUpperCase()&&(
// casing might make a difference
canUseSimpleSearch=this.matchCase),new SearchData(regex,this.wordSeparators?(0,_controller_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_1__/* .getMapForWordSeparators */.u)(this.wordSeparators):null,canUseSimpleSearch?this.searchString:null)}}function isMultilineRegexSource(searchString){if(!searchString||0===searchString.length)return!1;for(let i=0,len=searchString.length;i<len;i++){const chCode=searchString.charCodeAt(i);if(92/* Backslash */===chCode){if(
// move to next char
i++,i>=len)
// string ends with a \
break;const nextChCode=searchString.charCodeAt(i);if(110/* n */===nextChCode||114/* r */===nextChCode||87/* W */===nextChCode)return!0}}return!1}class SearchData{constructor(regex,wordSeparators,simpleSearch){this.regex=regex,this.wordSeparators=wordSeparators,this.simpleSearch=simpleSearch}}function createFindMatch(range,rawMatches,captureMatches){if(!captureMatches)return new _model_js__WEBPACK_IMPORTED_MODULE_2__/* .FindMatch */.tk(range,null);let matches=[];for(let i=0,len=rawMatches.length;i<len;i++)matches[i]=rawMatches[i];return new _model_js__WEBPACK_IMPORTED_MODULE_2__/* .FindMatch */.tk(range,matches)}class LineFeedCounter{constructor(text){let lineFeedsOffsets=[],lineFeedsOffsetsLen=0;for(let i=0,textLen=text.length;i<textLen;i++)10/* LineFeed */===text.charCodeAt(i)&&(lineFeedsOffsets[lineFeedsOffsetsLen++]=i);this._lineFeedsOffsets=lineFeedsOffsets}findLineFeedCountBeforeOffset(offset){const lineFeedsOffsets=this._lineFeedsOffsets;let min=0,max=lineFeedsOffsets.length-1;if(-1===max)
// no line feeds
return 0;if(offset<=lineFeedsOffsets[0])
// before first line feed
return 0;while(min<max){const mid=min+((max-min)/2>>0);lineFeedsOffsets[mid]>=offset?max=mid-1:lineFeedsOffsets[mid+1]>=offset?(
// bingo!
min=mid,max=mid):min=mid+1}return min+1}}class TextModelSearch{static findMatches(model,searchParams,searchRange,captureMatches,limitResultCount){const searchData=searchParams.parseSearchRequest();return searchData?searchData.regex.multiline?this._doFindMatchesMultiline(model,searchRange,new Searcher(searchData.wordSeparators,searchData.regex),captureMatches,limitResultCount):this._doFindMatchesLineByLine(model,searchRange,searchData,captureMatches,limitResultCount):[]}
/**
     * Multiline search always executes on the lines concatenated with \n.
     * We must therefore compensate for the count of \n in case the model is CRLF
     */static _getMultilineMatchRange(model,deltaOffset,text,lfCounter,matchIndex,match0){let startOffset,endOffset,lineFeedCountBeforeMatch=0;if(lfCounter?(lineFeedCountBeforeMatch=lfCounter.findLineFeedCountBeforeOffset(matchIndex),startOffset=deltaOffset+matchIndex+lineFeedCountBeforeMatch/* add as many \r as there were \n */):startOffset=deltaOffset+matchIndex,lfCounter){let lineFeedCountBeforeEndOfMatch=lfCounter.findLineFeedCountBeforeOffset(matchIndex+match0.length),lineFeedCountInMatch=lineFeedCountBeforeEndOfMatch-lineFeedCountBeforeMatch;endOffset=startOffset+match0.length+lineFeedCountInMatch/* add as many \r as there were \n */}else endOffset=startOffset+match0.length;const startPosition=model.getPositionAt(startOffset),endPosition=model.getPositionAt(endOffset);return new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(startPosition.lineNumber,startPosition.column,endPosition.lineNumber,endPosition.column)}static _doFindMatchesMultiline(model,searchRange,searcher,captureMatches,limitResultCount){const deltaOffset=model.getOffsetAt(searchRange.getStartPosition()),text=model.getValueInRange(searchRange,1/* LF */),lfCounter="\r\n"===model.getEOL()?new LineFeedCounter(text):null,result=[];
// We always execute multiline search over the lines joined with \n
// This makes it that \n will match the EOL for both CRLF and LF models
// We compensate for offset errors in `_getMultilineMatchRange`
let m,counter=0;searcher.reset(0);while(m=searcher.next(text))if(result[counter++]=createFindMatch(this._getMultilineMatchRange(model,deltaOffset,text,lfCounter,m.index,m[0]),m,captureMatches),counter>=limitResultCount)return result;return result}static _doFindMatchesLineByLine(model,searchRange,searchData,captureMatches,limitResultCount){const result=[];let resultLen=0;
// Early case for a search range that starts & stops on the same line number
if(searchRange.startLineNumber===searchRange.endLineNumber){const text=model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn-1,searchRange.endColumn-1);return resultLen=this._findMatchesInLine(searchData,text,searchRange.startLineNumber,searchRange.startColumn-1,resultLen,result,captureMatches,limitResultCount),result}
// Collect results from first line
const text=model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn-1);resultLen=this._findMatchesInLine(searchData,text,searchRange.startLineNumber,searchRange.startColumn-1,resultLen,result,captureMatches,limitResultCount);
// Collect results from middle lines
for(let lineNumber=searchRange.startLineNumber+1;lineNumber<searchRange.endLineNumber&&resultLen<limitResultCount;lineNumber++)resultLen=this._findMatchesInLine(searchData,model.getLineContent(lineNumber),lineNumber,0,resultLen,result,captureMatches,limitResultCount);
// Collect results from last line
if(resultLen<limitResultCount){const text=model.getLineContent(searchRange.endLineNumber).substring(0,searchRange.endColumn-1);resultLen=this._findMatchesInLine(searchData,text,searchRange.endLineNumber,0,resultLen,result,captureMatches,limitResultCount)}return result}static _findMatchesInLine(searchData,text,lineNumber,deltaOffset,resultLen,result,captureMatches,limitResultCount){const wordSeparators=searchData.wordSeparators;if(!captureMatches&&searchData.simpleSearch){const searchString=searchData.simpleSearch,searchStringLen=searchString.length,textLength=text.length;let lastMatchIndex=-searchStringLen;while(-1!==(lastMatchIndex=text.indexOf(searchString,lastMatchIndex+searchStringLen)))if((!wordSeparators||isValidMatch(wordSeparators,text,textLength,lastMatchIndex,searchStringLen))&&(result[resultLen++]=new _model_js__WEBPACK_IMPORTED_MODULE_2__/* .FindMatch */.tk(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(lineNumber,lastMatchIndex+1+deltaOffset,lineNumber,lastMatchIndex+1+searchStringLen+deltaOffset),null),resultLen>=limitResultCount))return resultLen;return resultLen}const searcher=new Searcher(searchData.wordSeparators,searchData.regex);let m;
// Reset regex to search from the beginning
searcher.reset(0);do{if(m=searcher.next(text),m&&(result[resultLen++]=createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(lineNumber,m.index+1+deltaOffset,lineNumber,m.index+1+m[0].length+deltaOffset),m,captureMatches),resultLen>=limitResultCount))return resultLen}while(m);return resultLen}static findNextMatch(model,searchParams,searchStart,captureMatches){const searchData=searchParams.parseSearchRequest();if(!searchData)return null;const searcher=new Searcher(searchData.wordSeparators,searchData.regex);return searchData.regex.multiline?this._doFindNextMatchMultiline(model,searchStart,searcher,captureMatches):this._doFindNextMatchLineByLine(model,searchStart,searcher,captureMatches)}static _doFindNextMatchMultiline(model,searchStart,searcher,captureMatches){const searchTextStart=new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(searchStart.lineNumber,1),deltaOffset=model.getOffsetAt(searchTextStart),lineCount=model.getLineCount(),text=model.getValueInRange(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(searchTextStart.lineNumber,searchTextStart.column,lineCount,model.getLineMaxColumn(lineCount)),1/* LF */),lfCounter="\r\n"===model.getEOL()?new LineFeedCounter(text):null;searcher.reset(searchStart.column-1);let m=searcher.next(text);return m?createFindMatch(this._getMultilineMatchRange(model,deltaOffset,text,lfCounter,m.index,m[0]),m,captureMatches):1!==searchStart.lineNumber||1!==searchStart.column?this._doFindNextMatchMultiline(model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(1,1),searcher,captureMatches):null}static _doFindNextMatchLineByLine(model,searchStart,searcher,captureMatches){const lineCount=model.getLineCount(),startLineNumber=searchStart.lineNumber,text=model.getLineContent(startLineNumber),r=this._findFirstMatchInLine(searcher,text,startLineNumber,searchStart.column,captureMatches);if(r)return r;for(let i=1;i<=lineCount;i++){const lineIndex=(startLineNumber+i-1)%lineCount,text=model.getLineContent(lineIndex+1),r=this._findFirstMatchInLine(searcher,text,lineIndex+1,1,captureMatches);if(r)return r}return null}static _findFirstMatchInLine(searcher,text,lineNumber,fromColumn,captureMatches){
// Set regex to search from column
searcher.reset(fromColumn-1);const m=searcher.next(text);return m?createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(lineNumber,m.index+1,lineNumber,m.index+1+m[0].length),m,captureMatches):null}static findPreviousMatch(model,searchParams,searchStart,captureMatches){const searchData=searchParams.parseSearchRequest();if(!searchData)return null;const searcher=new Searcher(searchData.wordSeparators,searchData.regex);return searchData.regex.multiline?this._doFindPreviousMatchMultiline(model,searchStart,searcher,captureMatches):this._doFindPreviousMatchLineByLine(model,searchStart,searcher,captureMatches)}static _doFindPreviousMatchMultiline(model,searchStart,searcher,captureMatches){const matches=this._doFindMatchesMultiline(model,new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(1,1,searchStart.lineNumber,searchStart.column),searcher,captureMatches,10*LIMIT_FIND_COUNT);if(matches.length>0)return matches[matches.length-1];const lineCount=model.getLineCount();return searchStart.lineNumber!==lineCount||searchStart.column!==model.getLineMaxColumn(lineCount)?this._doFindPreviousMatchMultiline(model,new _core_position_js__WEBPACK_IMPORTED_MODULE_4__/* .Position */.L(lineCount,model.getLineMaxColumn(lineCount)),searcher,captureMatches):null}static _doFindPreviousMatchLineByLine(model,searchStart,searcher,captureMatches){const lineCount=model.getLineCount(),startLineNumber=searchStart.lineNumber,text=model.getLineContent(startLineNumber).substring(0,searchStart.column-1),r=this._findLastMatchInLine(searcher,text,startLineNumber,captureMatches);if(r)return r;for(let i=1;i<=lineCount;i++){const lineIndex=(lineCount+startLineNumber-i-1)%lineCount,text=model.getLineContent(lineIndex+1),r=this._findLastMatchInLine(searcher,text,lineIndex+1,captureMatches);if(r)return r}return null}static _findLastMatchInLine(searcher,text,lineNumber,captureMatches){let m,bestResult=null;searcher.reset(0);while(m=searcher.next(text))bestResult=createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__/* .Range */.e(lineNumber,m.index+1,lineNumber,m.index+1+m[0].length),m,captureMatches);return bestResult}}function leftIsWordBounday(wordSeparators,text,textLength,matchStartIndex,matchLength){if(0===matchStartIndex)
// Match starts at start of string
return!0;const charBefore=text.charCodeAt(matchStartIndex-1);if(0/* Regular */!==wordSeparators.get(charBefore))
// The character before the match is a word separator
return!0;if(13/* CarriageReturn */===charBefore||10/* LineFeed */===charBefore)
// The character before the match is line break or carriage return.
return!0;if(matchLength>0){const firstCharInMatch=text.charCodeAt(matchStartIndex);if(0/* Regular */!==wordSeparators.get(firstCharInMatch))
// The first character inside the match is a word separator
return!0}return!1}function rightIsWordBounday(wordSeparators,text,textLength,matchStartIndex,matchLength){if(matchStartIndex+matchLength===textLength)
// Match ends at end of string
return!0;const charAfter=text.charCodeAt(matchStartIndex+matchLength);if(0/* Regular */!==wordSeparators.get(charAfter))
// The character after the match is a word separator
return!0;if(13/* CarriageReturn */===charAfter||10/* LineFeed */===charAfter)
// The character after the match is line break or carriage return.
return!0;if(matchLength>0){const lastCharInMatch=text.charCodeAt(matchStartIndex+matchLength-1);if(0/* Regular */!==wordSeparators.get(lastCharInMatch))
// The last character in the match is a word separator
return!0}return!1}function isValidMatch(wordSeparators,text,textLength,matchStartIndex,matchLength){return leftIsWordBounday(wordSeparators,text,textLength,matchStartIndex,matchLength)&&rightIsWordBounday(wordSeparators,text,textLength,matchStartIndex,matchLength)}class Searcher{constructor(wordSeparators,searchRegex){this._wordSeparators=wordSeparators,this._searchRegex=searchRegex,this._prevMatchStartIndex=-1,this._prevMatchLength=0}reset(lastIndex){this._searchRegex.lastIndex=lastIndex,this._prevMatchStartIndex=-1,this._prevMatchLength=0}next(text){const textLength=text.length;let m;do{if(this._prevMatchStartIndex+this._prevMatchLength===textLength)
// Reached the end of the line
return null;if(m=this._searchRegex.exec(text),!m)return null;const matchStartIndex=m.index,matchLength=m[0].length;if(matchStartIndex===this._prevMatchStartIndex&&matchLength===this._prevMatchLength){if(0===matchLength){
// the search result is an empty string and won't advance `regex.lastIndex`, so `regex.exec` will stuck here
// we attempt to recover from that by advancing by two if surrogate pair found and by one otherwise
_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .getNextCodePoint */.ZH(text,textLength,this._searchRegex.lastIndex)>65535?this._searchRegex.lastIndex+=2:this._searchRegex.lastIndex+=1;continue}
// Exit early if the regex matches the same range twice
return null}if(this._prevMatchStartIndex=matchStartIndex,this._prevMatchLength=matchLength,!this._wordSeparators||isValidMatch(this._wordSeparators,text,textLength,matchStartIndex,matchLength))return m}while(m);return null}}
/***/},
/***/858409:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */DA:function(){/* binding */return MultilineTokensBuilder},
/* harmony export */OU:function(){/* binding */return SparseEncodedTokens},
/* harmony export */QZ:function(){/* binding */return countEOL},
/* harmony export */Rl:function(){/* binding */return TokensStore},
/* harmony export */Wz:function(){/* binding */return MultilineTokens2},
/* harmony export */cx:function(){/* binding */return TokensStore2}
/* harmony export */});
/* unused harmony exports LineTokens2, MultilineTokens */
/* harmony import */var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(609488),_core_lineTokens_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(878411),_core_position_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(50187),_core_range_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(624314),_modes_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(860303);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function countEOL(text){let eolCount=0,firstLineLength=0,lastLineStart=0,eol=0/* Unknown */;for(let i=0,len=text.length;i<len;i++){const chr=text.charCodeAt(i);13/* CarriageReturn */===chr?(0===eolCount&&(firstLineLength=i),eolCount++,i+1<len&&10/* LineFeed */===text.charCodeAt(i+1)?(
// \r\n... case
eol|=2/* CRLF */,i++):
// \r... case
eol|=3/* Invalid */,lastLineStart=i+1):10/* LineFeed */===chr&&(
// \n... case
eol|=1/* LF */,0===eolCount&&(firstLineLength=i),eolCount++,lastLineStart=i+1)}return 0===eolCount&&(firstLineLength=text.length),[eolCount,firstLineLength,text.length-lastLineStart,eol]}function getDefaultMetadata(topLevelLanguageId){return(16384/* FOREGROUND_OFFSET */|topLevelLanguageId<<0/* LANGUAGEID_OFFSET */|2/* DefaultBackground */<<23/* BACKGROUND_OFFSET */)>>>0}const EMPTY_LINE_TOKENS=new Uint32Array(0).buffer;class MultilineTokensBuilder{constructor(){this.tokens=[]}add(lineNumber,lineTokens){if(this.tokens.length>0){const last=this.tokens[this.tokens.length-1],lastLineNumber=last.startLineNumber+last.tokens.length-1;if(lastLineNumber+1===lineNumber)
// append
return void last.tokens.push(lineTokens)}this.tokens.push(new MultilineTokens(lineNumber,[lineTokens]))}}class SparseEncodedTokens{constructor(tokens){this._tokens=tokens,this._tokenCount=tokens.length/4}toString(startLineNumber){let pieces=[];for(let i=0;i<this._tokenCount;i++)pieces.push(`(${this._getDeltaLine(i)+startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);return`[${pieces.join(",")}]`}getMaxDeltaLine(){const tokenCount=this._getTokenCount();return 0===tokenCount?-1:this._getDeltaLine(tokenCount-1)}getRange(){const tokenCount=this._getTokenCount();if(0===tokenCount)return null;const startChar=this._getStartCharacter(0),maxDeltaLine=this._getDeltaLine(tokenCount-1),endChar=this._getEndCharacter(tokenCount-1);return new _core_range_js__WEBPACK_IMPORTED_MODULE_2__/* .Range */.e(0,startChar+1,maxDeltaLine,endChar+1)}_getTokenCount(){return this._tokenCount}_getDeltaLine(tokenIndex){return this._tokens[4*tokenIndex]}_getStartCharacter(tokenIndex){return this._tokens[4*tokenIndex+1]}_getEndCharacter(tokenIndex){return this._tokens[4*tokenIndex+2]}isEmpty(){return 0===this._getTokenCount()}getLineTokens(deltaLine){let low=0,high=this._getTokenCount()-1;while(low<high){const mid=low+Math.floor((high-low)/2),midDeltaLine=this._getDeltaLine(mid);if(midDeltaLine<deltaLine)low=mid+1;else{if(!(midDeltaLine>deltaLine)){let min=mid;while(min>low&&this._getDeltaLine(min-1)===deltaLine)min--;let max=mid;while(max<high&&this._getDeltaLine(max+1)===deltaLine)max++;return new LineTokens2(this._tokens.subarray(4*min,4*max+4))}high=mid-1}}return this._getDeltaLine(low)===deltaLine?new LineTokens2(this._tokens.subarray(4*low,4*low+4)):null}clear(){this._tokenCount=0}removeTokens(startDeltaLine,startChar,endDeltaLine,endChar){const tokens=this._tokens,tokenCount=this._tokenCount;let newTokenCount=0,hasDeletedTokens=!1,firstDeltaLine=0;for(let i=0;i<tokenCount;i++){const srcOffset=4*i,tokenDeltaLine=tokens[srcOffset],tokenStartCharacter=tokens[srcOffset+1],tokenEndCharacter=tokens[srcOffset+2],tokenMetadata=tokens[srcOffset+3];if((tokenDeltaLine>startDeltaLine||tokenDeltaLine===startDeltaLine&&tokenEndCharacter>=startChar)&&(tokenDeltaLine<endDeltaLine||tokenDeltaLine===endDeltaLine&&tokenStartCharacter<=endChar))hasDeletedTokens=!0;else{if(0===newTokenCount&&(firstDeltaLine=tokenDeltaLine),hasDeletedTokens){
// must move the token to the left
const destOffset=4*newTokenCount;tokens[destOffset]=tokenDeltaLine-firstDeltaLine,tokens[destOffset+1]=tokenStartCharacter,tokens[destOffset+2]=tokenEndCharacter,tokens[destOffset+3]=tokenMetadata}newTokenCount++}}return this._tokenCount=newTokenCount,firstDeltaLine}split(startDeltaLine,startChar,endDeltaLine,endChar){const tokens=this._tokens,tokenCount=this._tokenCount;let aTokens=[],bTokens=[],destTokens=aTokens,destOffset=0,destFirstDeltaLine=0;for(let i=0;i<tokenCount;i++){const srcOffset=4*i,tokenDeltaLine=tokens[srcOffset],tokenStartCharacter=tokens[srcOffset+1],tokenEndCharacter=tokens[srcOffset+2],tokenMetadata=tokens[srcOffset+3];if(tokenDeltaLine>startDeltaLine||tokenDeltaLine===startDeltaLine&&tokenEndCharacter>=startChar){if(tokenDeltaLine<endDeltaLine||tokenDeltaLine===endDeltaLine&&tokenStartCharacter<=endChar)
// this token is touching the range
continue;
// this token is after the range
destTokens!==bTokens&&(
// this token is the first token after the range
destTokens=bTokens,destOffset=0,destFirstDeltaLine=tokenDeltaLine)}destTokens[destOffset++]=tokenDeltaLine-destFirstDeltaLine,destTokens[destOffset++]=tokenStartCharacter,destTokens[destOffset++]=tokenEndCharacter,destTokens[destOffset++]=tokenMetadata}return[new SparseEncodedTokens(new Uint32Array(aTokens)),new SparseEncodedTokens(new Uint32Array(bTokens)),destFirstDeltaLine]}acceptDeleteRange(horizontalShiftForFirstLineTokens,startDeltaLine,startCharacter,endDeltaLine,endCharacter){
// This is a bit complex, here are the cases I used to think about this:
// 1. The token starts before the deletion range
// 1a. The token is completely before the deletion range
//               -----------
//                          xxxxxxxxxxx
// 1b. The token starts before, the deletion range ends after the token
//               -----------
//                      xxxxxxxxxxx
// 1c. The token starts before, the deletion range ends precisely with the token
//               ---------------
//                      xxxxxxxx
// 1d. The token starts before, the deletion range is inside the token
//               ---------------
//                    xxxxx
// 2. The token starts at the same position with the deletion range
// 2a. The token starts at the same position, and ends inside the deletion range
//               -------
//               xxxxxxxxxxx
// 2b. The token starts at the same position, and ends at the same position as the deletion range
//               ----------
//               xxxxxxxxxx
// 2c. The token starts at the same position, and ends after the deletion range
//               -------------
//               xxxxxxx
// 3. The token starts inside the deletion range
// 3a. The token is inside the deletion range
//                -------
//             xxxxxxxxxxxxx
// 3b. The token starts inside the deletion range, and ends at the same position as the deletion range
//                ----------
//             xxxxxxxxxxxxx
// 3c. The token starts inside the deletion range, and ends after the deletion range
//                ------------
//             xxxxxxxxxxx
// 4. The token starts after the deletion range
//                  -----------
//          xxxxxxxx
const tokens=this._tokens,tokenCount=this._tokenCount,deletedLineCount=endDeltaLine-startDeltaLine;let newTokenCount=0,hasDeletedTokens=!1;for(let i=0;i<tokenCount;i++){const srcOffset=4*i;let tokenDeltaLine=tokens[srcOffset],tokenStartCharacter=tokens[srcOffset+1],tokenEndCharacter=tokens[srcOffset+2];const tokenMetadata=tokens[srcOffset+3];if(tokenDeltaLine<startDeltaLine||tokenDeltaLine===startDeltaLine&&tokenEndCharacter<=startCharacter){
// 1a. The token is completely before the deletion range
// => nothing to do
newTokenCount++;continue}if(tokenDeltaLine===startDeltaLine&&tokenStartCharacter<startCharacter)
// 1b, 1c, 1d
// => the token survives, but it needs to shrink
tokenDeltaLine===endDeltaLine&&tokenEndCharacter>endCharacter?
// 1d. The token starts before, the deletion range is inside the token
// => the token shrinks by the deletion character count
tokenEndCharacter-=endCharacter-startCharacter:
// 1b. The token starts before, the deletion range ends after the token
// 1c. The token starts before, the deletion range ends precisely with the token
// => the token shrinks its ending to the deletion start
tokenEndCharacter=startCharacter;else if(tokenDeltaLine===startDeltaLine&&tokenStartCharacter===startCharacter){
// 2a, 2b, 2c
if(!(tokenDeltaLine===endDeltaLine&&tokenEndCharacter>endCharacter)){
// 2a. The token starts at the same position, and ends inside the deletion range
// 2b. The token starts at the same position, and ends at the same position as the deletion range
// => the token is deleted
hasDeletedTokens=!0;continue}
// 2c. The token starts at the same position, and ends after the deletion range
// => the token shrinks by the deletion character count
tokenEndCharacter-=endCharacter-startCharacter}else if(tokenDeltaLine<endDeltaLine||tokenDeltaLine===endDeltaLine&&tokenStartCharacter<endCharacter){
// 3a, 3b, 3c
if(!(tokenDeltaLine===endDeltaLine&&tokenEndCharacter>endCharacter)){
// 3a. The token is inside the deletion range
// 3b. The token starts inside the deletion range, and ends at the same position as the deletion range
// => the token is deleted
hasDeletedTokens=!0;continue}
// 3c. The token starts inside the deletion range, and ends after the deletion range
// => the token moves left and shrinks
tokenDeltaLine===startDeltaLine?(
// the deletion started on the same line as the token
// => the token moves left and shrinks
tokenStartCharacter=startCharacter,tokenEndCharacter=tokenStartCharacter+(tokenEndCharacter-endCharacter)):(
// the deletion started on a line above the token
// => the token moves to the beginning of the line
tokenStartCharacter=0,tokenEndCharacter=tokenStartCharacter+(tokenEndCharacter-endCharacter))}else if(tokenDeltaLine>endDeltaLine){
// 4. (partial) The token starts after the deletion range, on a line below...
if(0===deletedLineCount&&!hasDeletedTokens){
// early stop, there is no need to walk all the tokens and do nothing...
newTokenCount=tokenCount;break}tokenDeltaLine-=deletedLineCount}else{if(!(tokenDeltaLine===endDeltaLine&&tokenStartCharacter>=endCharacter))throw new Error("Not possible!");
// 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs
horizontalShiftForFirstLineTokens&&0===tokenDeltaLine&&(tokenStartCharacter+=horizontalShiftForFirstLineTokens,tokenEndCharacter+=horizontalShiftForFirstLineTokens),tokenDeltaLine-=deletedLineCount,tokenStartCharacter-=endCharacter-startCharacter,tokenEndCharacter-=endCharacter-startCharacter}const destOffset=4*newTokenCount;tokens[destOffset]=tokenDeltaLine,tokens[destOffset+1]=tokenStartCharacter,tokens[destOffset+2]=tokenEndCharacter,tokens[destOffset+3]=tokenMetadata,newTokenCount++}this._tokenCount=newTokenCount}acceptInsertText(deltaLine,character,eolCount,firstLineLength,lastLineLength,firstCharCode){
// Here are the cases I used to think about this:
// 1. The token is completely before the insertion point
//            -----------   |
// 2. The token ends precisely at the insertion point
//            -----------|
// 3. The token contains the insertion point
//            -----|------
// 4. The token starts precisely at the insertion point
//            |-----------
// 5. The token is completely after the insertion point
//            |   -----------
const isInsertingPreciselyOneWordCharacter=0===eolCount&&1===firstLineLength&&(firstCharCode>=48/* Digit0 */&&firstCharCode<=57/* Digit9 */||firstCharCode>=65/* A */&&firstCharCode<=90/* Z */||firstCharCode>=97/* a */&&firstCharCode<=122/* z */),tokens=this._tokens,tokenCount=this._tokenCount;for(let i=0;i<tokenCount;i++){const offset=4*i;let tokenDeltaLine=tokens[offset],tokenStartCharacter=tokens[offset+1],tokenEndCharacter=tokens[offset+2];if(!(tokenDeltaLine<deltaLine||tokenDeltaLine===deltaLine&&tokenEndCharacter<character)){if(tokenDeltaLine===deltaLine&&tokenEndCharacter===character){
// 2. The token ends precisely at the insertion point
// => expand the end character only if inserting precisely one character that is a word character
if(!isInsertingPreciselyOneWordCharacter)continue;tokenEndCharacter+=1}else if(tokenDeltaLine===deltaLine&&tokenStartCharacter<character&&character<tokenEndCharacter)
// 3. The token contains the insertion point
0===eolCount?
// => just expand the end character
tokenEndCharacter+=firstLineLength:
// => cut off the token
tokenEndCharacter=character;else{
// 4. or 5.
if(tokenDeltaLine===deltaLine&&tokenStartCharacter===character&&isInsertingPreciselyOneWordCharacter)continue;
// => the token must move and keep its size constant
if(tokenDeltaLine===deltaLine)
// this token is on the line where the insertion is taking place
if(tokenDeltaLine+=eolCount,0===eolCount)tokenStartCharacter+=firstLineLength,tokenEndCharacter+=firstLineLength;else{const tokenLength=tokenEndCharacter-tokenStartCharacter;tokenStartCharacter=lastLineLength+(tokenStartCharacter-character),tokenEndCharacter=tokenStartCharacter+tokenLength}else tokenDeltaLine+=eolCount}tokens[offset]=tokenDeltaLine,tokens[offset+1]=tokenStartCharacter,tokens[offset+2]=tokenEndCharacter}}}}class LineTokens2{constructor(tokens){this._tokens=tokens}getCount(){return this._tokens.length/4}getStartCharacter(tokenIndex){return this._tokens[4*tokenIndex+1]}getEndCharacter(tokenIndex){return this._tokens[4*tokenIndex+2]}getMetadata(tokenIndex){return this._tokens[4*tokenIndex+3]}}class MultilineTokens2{constructor(startLineNumber,tokens){this.startLineNumber=startLineNumber,this.tokens=tokens,this.endLineNumber=this.startLineNumber+this.tokens.getMaxDeltaLine()}toString(){return this.tokens.toString(this.startLineNumber)}_updateEndLineNumber(){this.endLineNumber=this.startLineNumber+this.tokens.getMaxDeltaLine()}isEmpty(){return this.tokens.isEmpty()}getLineTokens(lineNumber){return this.startLineNumber<=lineNumber&&lineNumber<=this.endLineNumber?this.tokens.getLineTokens(lineNumber-this.startLineNumber):null}getRange(){const deltaRange=this.tokens.getRange();return deltaRange?new _core_range_js__WEBPACK_IMPORTED_MODULE_2__/* .Range */.e(this.startLineNumber+deltaRange.startLineNumber,deltaRange.startColumn,this.startLineNumber+deltaRange.endLineNumber,deltaRange.endColumn):deltaRange}removeTokens(range){const startLineIndex=range.startLineNumber-this.startLineNumber,endLineIndex=range.endLineNumber-this.startLineNumber;this.startLineNumber+=this.tokens.removeTokens(startLineIndex,range.startColumn-1,endLineIndex,range.endColumn-1),this._updateEndLineNumber()}split(range){
// split tokens to two:
// a) all the tokens before `range`
// b) all the tokens after `range`
const startLineIndex=range.startLineNumber-this.startLineNumber,endLineIndex=range.endLineNumber-this.startLineNumber,[a,b,bDeltaLine]=this.tokens.split(startLineIndex,range.startColumn-1,endLineIndex,range.endColumn-1);return[new MultilineTokens2(this.startLineNumber,a),new MultilineTokens2(this.startLineNumber+bDeltaLine,b)]}applyEdit(range,text){const[eolCount,firstLineLength,lastLineLength]=countEOL(text);this.acceptEdit(range,eolCount,firstLineLength,lastLineLength,text.length>0?text.charCodeAt(0):0/* Null */)}acceptEdit(range,eolCount,firstLineLength,lastLineLength,firstCharCode){this._acceptDeleteRange(range),this._acceptInsertText(new _core_position_js__WEBPACK_IMPORTED_MODULE_3__/* .Position */.L(range.startLineNumber,range.startColumn),eolCount,firstLineLength,lastLineLength,firstCharCode),this._updateEndLineNumber()}_acceptDeleteRange(range){if(range.startLineNumber===range.endLineNumber&&range.startColumn===range.endColumn)
// Nothing to delete
return;const firstLineIndex=range.startLineNumber-this.startLineNumber,lastLineIndex=range.endLineNumber-this.startLineNumber;if(lastLineIndex<0){
// this deletion occurs entirely before this block, so we only need to adjust line numbers
const deletedLinesCount=lastLineIndex-firstLineIndex;return void(this.startLineNumber-=deletedLinesCount)}const tokenMaxDeltaLine=this.tokens.getMaxDeltaLine();if(!(firstLineIndex>=tokenMaxDeltaLine+1)){if(firstLineIndex<0&&lastLineIndex>=tokenMaxDeltaLine+1)
// this deletion completely encompasses this block
return this.startLineNumber=0,void this.tokens.clear();if(firstLineIndex<0){const deletedBefore=-firstLineIndex;this.startLineNumber-=deletedBefore,this.tokens.acceptDeleteRange(range.startColumn-1,0,0,lastLineIndex,range.endColumn-1)}else this.tokens.acceptDeleteRange(0,firstLineIndex,range.startColumn-1,lastLineIndex,range.endColumn-1)}}_acceptInsertText(position,eolCount,firstLineLength,lastLineLength,firstCharCode){if(0===eolCount&&0===firstLineLength)
// Nothing to insert
return;const lineIndex=position.lineNumber-this.startLineNumber;if(lineIndex<0)
// this insertion occurs before this block, so we only need to adjust line numbers
return void(this.startLineNumber+=eolCount);const tokenMaxDeltaLine=this.tokens.getMaxDeltaLine();lineIndex>=tokenMaxDeltaLine+1||this.tokens.acceptInsertText(lineIndex,position.column-1,eolCount,firstLineLength,lastLineLength,firstCharCode)}}class MultilineTokens{constructor(startLineNumber,tokens){this.startLineNumber=startLineNumber,this.tokens=tokens}}function toUint32Array(arr){return arr instanceof Uint32Array?arr:new Uint32Array(arr)}class TokensStore2{constructor(languageIdCodec){this._pieces=[],this._isComplete=!1,this._languageIdCodec=languageIdCodec}flush(){this._pieces=[],this._isComplete=!1}isEmpty(){return 0===this._pieces.length}set(pieces,isComplete){this._pieces=pieces||[],this._isComplete=isComplete}setPartial(_range,pieces){
// console.log(`setPartial ${_range} ${pieces.map(p => p.toString()).join(', ')}`);
let range=_range;if(pieces.length>0){const _firstRange=pieces[0].getRange(),_lastRange=pieces[pieces.length-1].getRange();if(!_firstRange||!_lastRange)return _range;range=_range.plusRange(_firstRange).plusRange(_lastRange)}let insertPosition=null;for(let i=0,len=this._pieces.length;i<len;i++){const piece=this._pieces[i];if(piece.endLineNumber<range.startLineNumber)
// this piece is before the range
continue;if(piece.startLineNumber>range.endLineNumber){
// this piece is after the range, so mark the spot before this piece
// as a good insertion position and stop looping
insertPosition=insertPosition||{index:i};break}
// this piece might intersect with the range
if(piece.removeTokens(range),piece.isEmpty()){
// remove the piece if it became empty
this._pieces.splice(i,1),i--,len--;continue}if(piece.endLineNumber<range.startLineNumber)
// after removal, this piece is before the range
continue;if(piece.startLineNumber>range.endLineNumber){
// after removal, this piece is after the range
insertPosition=insertPosition||{index:i};continue}
// after removal, this piece contains the range
const[a,b]=piece.split(range);a.isEmpty()?
// this piece is actually after the range
insertPosition=insertPosition||{index:i}:b.isEmpty()||(this._pieces.splice(i,1,a,b),i++,len++,insertPosition=insertPosition||{index:i})}
// console.log(`I HAVE ${this._pieces.length} pieces`);
// console.log(`${this._pieces.map(p => p.toString()).join('\n')}`);
return insertPosition=insertPosition||{index:this._pieces.length},pieces.length>0&&(this._pieces=_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__/* .arrayInsert */.Zv(this._pieces,insertPosition.index,pieces)),range}isComplete(){return this._isComplete}addSemanticTokens(lineNumber,aTokens){const pieces=this._pieces;if(0===pieces.length)return aTokens;const pieceIndex=TokensStore2._findFirstPieceWithLine(pieces,lineNumber),bTokens=pieces[pieceIndex].getLineTokens(lineNumber);if(!bTokens)return aTokens;const aLen=aTokens.getCount(),bLen=bTokens.getCount();let aIndex=0,result=[],resultLen=0,lastEndOffset=0;const emitToken=(endOffset,metadata)=>{endOffset!==lastEndOffset&&(lastEndOffset=endOffset,result[resultLen++]=endOffset,result[resultLen++]=metadata)};for(let bIndex=0;bIndex<bLen;bIndex++){const bStartCharacter=bTokens.getStartCharacter(bIndex),bEndCharacter=bTokens.getEndCharacter(bIndex),bMetadata=bTokens.getMetadata(bIndex),bMask=((1/* SEMANTIC_USE_ITALIC */&bMetadata?2048/* ITALIC_MASK */:0)|(2/* SEMANTIC_USE_BOLD */&bMetadata?4096/* BOLD_MASK */:0)|(4/* SEMANTIC_USE_UNDERLINE */&bMetadata?8192/* UNDERLINE_MASK */:0)|(8/* SEMANTIC_USE_FOREGROUND */&bMetadata?8372224/* FOREGROUND_MASK */:0)|(16/* SEMANTIC_USE_BACKGROUND */&bMetadata?4286578688/* BACKGROUND_MASK */:0))>>>0,aMask=~bMask>>>0;
// push any token from `a` that is before `b`
while(aIndex<aLen&&aTokens.getEndOffset(aIndex)<=bStartCharacter)emitToken(aTokens.getEndOffset(aIndex),aTokens.getMetadata(aIndex)),aIndex++;
// push the token from `a` if it intersects the token from `b`
aIndex<aLen&&aTokens.getStartOffset(aIndex)<bStartCharacter&&emitToken(bStartCharacter,aTokens.getMetadata(aIndex));
// skip any tokens from `a` that are contained inside `b`
while(aIndex<aLen&&aTokens.getEndOffset(aIndex)<bEndCharacter)emitToken(aTokens.getEndOffset(aIndex),aTokens.getMetadata(aIndex)&aMask|bMetadata&bMask),aIndex++;if(aIndex<aLen)emitToken(bEndCharacter,aTokens.getMetadata(aIndex)&aMask|bMetadata&bMask),aTokens.getEndOffset(aIndex)===bEndCharacter&&
// `a` ends exactly at the same spot as `b`!
aIndex++;else{const aMergeIndex=Math.min(Math.max(0,aIndex-1),aLen-1);
// push the token from `b`
emitToken(bEndCharacter,aTokens.getMetadata(aMergeIndex)&aMask|bMetadata&bMask)}}
// push the remaining tokens from `a`
while(aIndex<aLen)emitToken(aTokens.getEndOffset(aIndex),aTokens.getMetadata(aIndex)),aIndex++;return new _core_lineTokens_js__WEBPACK_IMPORTED_MODULE_0__/* .LineTokens */.A(new Uint32Array(result),aTokens.getLineContent(),this._languageIdCodec)}static _findFirstPieceWithLine(pieces,lineNumber){let low=0,high=pieces.length-1;while(low<high){let mid=low+Math.floor((high-low)/2);if(pieces[mid].endLineNumber<lineNumber)low=mid+1;else{if(!(pieces[mid].startLineNumber>lineNumber)){while(mid>low&&pieces[mid-1].startLineNumber<=lineNumber&&lineNumber<=pieces[mid-1].endLineNumber)mid--;return mid}high=mid-1}}return low}
//#region Editing
acceptEdit(range,eolCount,firstLineLength,lastLineLength,firstCharCode){for(const piece of this._pieces)piece.acceptEdit(range,eolCount,firstLineLength,lastLineLength,firstCharCode)}}class TokensStore{constructor(languageIdCodec){this._lineTokens=[],this._len=0,this._languageIdCodec=languageIdCodec}flush(){this._lineTokens=[],this._len=0}getTokens(topLevelLanguageId,lineIndex,lineText){let rawLineTokens=null;if(lineIndex<this._len&&(rawLineTokens=this._lineTokens[lineIndex]),null!==rawLineTokens&&rawLineTokens!==EMPTY_LINE_TOKENS)return new _core_lineTokens_js__WEBPACK_IMPORTED_MODULE_0__/* .LineTokens */.A(toUint32Array(rawLineTokens),lineText,this._languageIdCodec);const lineTokens=new Uint32Array(2);return lineTokens[0]=lineText.length,lineTokens[1]=getDefaultMetadata(this._languageIdCodec.encodeLanguageId(topLevelLanguageId)),new _core_lineTokens_js__WEBPACK_IMPORTED_MODULE_0__/* .LineTokens */.A(lineTokens,lineText,this._languageIdCodec)}static _massageTokens(topLevelLanguageId,lineTextLength,_tokens){const tokens=_tokens?toUint32Array(_tokens):null;if(0===lineTextLength){let hasDifferentLanguageId=!1;if(tokens&&tokens.length>1&&(hasDifferentLanguageId=_modes_js__WEBPACK_IMPORTED_MODULE_1__/* .TokenMetadata */.NX.getLanguageId(tokens[1])!==topLevelLanguageId),!hasDifferentLanguageId)return EMPTY_LINE_TOKENS}if(!tokens||0===tokens.length){const tokens=new Uint32Array(2);return tokens[0]=lineTextLength,tokens[1]=getDefaultMetadata(topLevelLanguageId),tokens.buffer}
// Ensure the last token covers the end of the text
return tokens[tokens.length-2]=lineTextLength,0===tokens.byteOffset&&tokens.byteLength===tokens.buffer.byteLength?tokens.buffer:tokens}_ensureLine(lineIndex){while(lineIndex>=this._len)this._lineTokens[this._len]=null,this._len++}_deleteLines(start,deleteCount){0!==deleteCount&&(start+deleteCount>this._len&&(deleteCount=this._len-start),this._lineTokens.splice(start,deleteCount),this._len-=deleteCount)}_insertLines(insertIndex,insertCount){if(0===insertCount)return;let lineTokens=[];for(let i=0;i<insertCount;i++)lineTokens[i]=null;this._lineTokens=_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__/* .arrayInsert */.Zv(this._lineTokens,insertIndex,lineTokens),this._len+=insertCount}setTokens(topLevelLanguageId,lineIndex,lineTextLength,_tokens,checkEquality){const tokens=TokensStore._massageTokens(this._languageIdCodec.encodeLanguageId(topLevelLanguageId),lineTextLength,_tokens);this._ensureLine(lineIndex);const oldTokens=this._lineTokens[lineIndex];return this._lineTokens[lineIndex]=tokens,!!checkEquality&&!TokensStore._equals(oldTokens,tokens)}static _equals(_a,_b){if(!_a||!_b)return!_a&&!_b;const a=toUint32Array(_a),b=toUint32Array(_b);if(a.length!==b.length)return!1;for(let i=0,len=a.length;i<len;i++)if(a[i]!==b[i])return!1;return!0}
//#region Editing
acceptEdit(range,eolCount,firstLineLength){this._acceptDeleteRange(range),this._acceptInsertText(new _core_position_js__WEBPACK_IMPORTED_MODULE_3__/* .Position */.L(range.startLineNumber,range.startColumn),eolCount,firstLineLength)}_acceptDeleteRange(range){const firstLineIndex=range.startLineNumber-1;if(firstLineIndex>=this._len)return;if(range.startLineNumber===range.endLineNumber){if(range.startColumn===range.endColumn)
// Nothing to delete
return;return void(this._lineTokens[firstLineIndex]=TokensStore._delete(this._lineTokens[firstLineIndex],range.startColumn-1,range.endColumn-1))}this._lineTokens[firstLineIndex]=TokensStore._deleteEnding(this._lineTokens[firstLineIndex],range.startColumn-1);const lastLineIndex=range.endLineNumber-1;let lastLineTokens=null;lastLineIndex<this._len&&(lastLineTokens=TokensStore._deleteBeginning(this._lineTokens[lastLineIndex],range.endColumn-1)),
// Take remaining text on last line and append it to remaining text on first line
this._lineTokens[firstLineIndex]=TokensStore._append(this._lineTokens[firstLineIndex],lastLineTokens),
// Delete middle lines
this._deleteLines(range.startLineNumber,range.endLineNumber-range.startLineNumber)}_acceptInsertText(position,eolCount,firstLineLength){if(0===eolCount&&0===firstLineLength)
// Nothing to insert
return;const lineIndex=position.lineNumber-1;lineIndex>=this._len||(0!==eolCount?(this._lineTokens[lineIndex]=TokensStore._deleteEnding(this._lineTokens[lineIndex],position.column-1),this._lineTokens[lineIndex]=TokensStore._insert(this._lineTokens[lineIndex],position.column-1,firstLineLength),this._insertLines(position.lineNumber,eolCount)):
// Inserting text on one line
this._lineTokens[lineIndex]=TokensStore._insert(this._lineTokens[lineIndex],position.column-1,firstLineLength))}static _deleteBeginning(lineTokens,toChIndex){return null===lineTokens||lineTokens===EMPTY_LINE_TOKENS?lineTokens:TokensStore._delete(lineTokens,0,toChIndex)}static _deleteEnding(lineTokens,fromChIndex){if(null===lineTokens||lineTokens===EMPTY_LINE_TOKENS)return lineTokens;const tokens=toUint32Array(lineTokens),lineTextLength=tokens[tokens.length-2];return TokensStore._delete(lineTokens,fromChIndex,lineTextLength)}static _delete(lineTokens,fromChIndex,toChIndex){if(null===lineTokens||lineTokens===EMPTY_LINE_TOKENS||fromChIndex===toChIndex)return lineTokens;const tokens=toUint32Array(lineTokens),tokensCount=tokens.length>>>1;
// special case: deleting everything
if(0===fromChIndex&&tokens[tokens.length-2]===toChIndex)return EMPTY_LINE_TOKENS;const fromTokenIndex=_core_lineTokens_js__WEBPACK_IMPORTED_MODULE_0__/* .LineTokens */.A.findIndexInTokensArray(tokens,fromChIndex),fromTokenStartOffset=fromTokenIndex>0?tokens[fromTokenIndex-1<<1]:0,fromTokenEndOffset=tokens[fromTokenIndex<<1];if(toChIndex<fromTokenEndOffset){
// the delete range is inside a single token
const delta=toChIndex-fromChIndex;for(let i=fromTokenIndex;i<tokensCount;i++)tokens[i<<1]-=delta;return lineTokens}let dest,lastEnd;fromTokenStartOffset!==fromChIndex?(tokens[fromTokenIndex<<1]=fromChIndex,dest=fromTokenIndex+1<<1,lastEnd=fromChIndex):(dest=fromTokenIndex<<1,lastEnd=fromTokenStartOffset);const delta=toChIndex-fromChIndex;for(let tokenIndex=fromTokenIndex+1;tokenIndex<tokensCount;tokenIndex++){const tokenEndOffset=tokens[tokenIndex<<1]-delta;tokenEndOffset>lastEnd&&(tokens[dest++]=tokenEndOffset,tokens[dest++]=tokens[1+(tokenIndex<<1)],lastEnd=tokenEndOffset)}if(dest===tokens.length)
// nothing to trim
return lineTokens;let tmp=new Uint32Array(dest);return tmp.set(tokens.subarray(0,dest),0),tmp.buffer}static _append(lineTokens,_otherTokens){if(_otherTokens===EMPTY_LINE_TOKENS)return lineTokens;if(lineTokens===EMPTY_LINE_TOKENS)return _otherTokens;if(null===lineTokens)return lineTokens;if(null===_otherTokens)
// cannot determine combined line length...
return null;const myTokens=toUint32Array(lineTokens),otherTokens=toUint32Array(_otherTokens),otherTokensCount=otherTokens.length>>>1;let result=new Uint32Array(myTokens.length+otherTokens.length);result.set(myTokens,0);let dest=myTokens.length;const delta=myTokens[myTokens.length-2];for(let i=0;i<otherTokensCount;i++)result[dest++]=otherTokens[i<<1]+delta,result[dest++]=otherTokens[1+(i<<1)];return result.buffer}static _insert(lineTokens,chIndex,textLength){if(null===lineTokens||lineTokens===EMPTY_LINE_TOKENS)
// nothing to do
return lineTokens;const tokens=toUint32Array(lineTokens),tokensCount=tokens.length>>>1;let fromTokenIndex=_core_lineTokens_js__WEBPACK_IMPORTED_MODULE_0__/* .LineTokens */.A.findIndexInTokensArray(tokens,chIndex);if(fromTokenIndex>0){const fromTokenStartOffset=tokens[fromTokenIndex-1<<1];fromTokenStartOffset===chIndex&&fromTokenIndex--}for(let tokenIndex=fromTokenIndex;tokenIndex<tokensCount;tokenIndex++)tokens[tokenIndex<<1]+=textLength;return lineTokens}}
/***/},
/***/997461:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */Af:function(){/* binding */return DEFAULT_WORD_REGEXP},
/* harmony export */eq:function(){/* binding */return ensureValidWordDefinition},
/* harmony export */t2:function(){/* binding */return getWordAtText},
/* harmony export */vu:function(){/* binding */return USUAL_WORD_SEPARATORS}
/* harmony export */});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const USUAL_WORD_SEPARATORS="`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?";
/**
 * Create a word definition regular expression based on default word separators.
 * Optionally provide allowed separators that should be included in words.
 *
 * The default would look like this:
 * /(-?\d*\.\d\w*)|([^\`\~\!\@\#\$\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g
 */function createWordRegExp(allowInWords=""){let source="(-?\\d*\\.\\d\\w*)|([^";for(const sep of USUAL_WORD_SEPARATORS)allowInWords.indexOf(sep)>=0||(source+="\\"+sep);return source+="\\s]+)",new RegExp(source,"g")}
// catches numbers (including floating numbers) in the first group, and alphanum in the second
const DEFAULT_WORD_REGEXP=createWordRegExp();function ensureValidWordDefinition(wordDefinition){let result=DEFAULT_WORD_REGEXP;if(wordDefinition&&wordDefinition instanceof RegExp)if(wordDefinition.global)result=wordDefinition;else{let flags="g";wordDefinition.ignoreCase&&(flags+="i"),wordDefinition.multiline&&(flags+="m"),wordDefinition.unicode&&(flags+="u"),result=new RegExp(wordDefinition.source,flags)}return result.lastIndex=0,result}const _defaultConfig={maxLen:1e3,windowSize:15,timeBudget:150};function getWordAtText(column,wordDefinition,text,textOffset,config=_defaultConfig){if(text.length>config.maxLen){
// don't throw strings that long at the regexp
// but use a sub-string in which a word must occur
let start=column-config.maxLen/2;return start<0?start=0:textOffset+=start,text=text.substring(start,column+config.maxLen/2),getWordAtText(column,wordDefinition,text,textOffset,config)}const t1=Date.now(),pos=column-1-textOffset;let prevRegexIndex=-1,match=null;for(let i=1;;i++){
// check time budget
if(Date.now()-t1>=config.timeBudget)break;
// reset the index at which the regexp should start matching, also know where it
// should stop so that subsequent search don't repeat previous searches
const regexIndex=pos-config.windowSize*i;wordDefinition.lastIndex=Math.max(0,regexIndex);const thisMatch=_findRegexMatchEnclosingPosition(wordDefinition,text,pos,prevRegexIndex);if(!thisMatch&&match)
// stop: we have something
break;
// stop: searched at start
if(match=thisMatch,regexIndex<=0)break;prevRegexIndex=regexIndex}if(match){let result={word:match[0],startColumn:textOffset+1+match.index,endColumn:textOffset+1+match.index+match[0].length};return wordDefinition.lastIndex=0,result}return null}function _findRegexMatchEnclosingPosition(wordDefinition,text,pos,stopPos){let match;while(match=wordDefinition.exec(text)){const matchIndex=match.index||0;if(matchIndex<=pos&&wordDefinition.lastIndex>=pos)return match;if(stopPos>0&&matchIndex>stopPos)return null}return null}
/***/},
/***/860303:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
// EXPORTS
__webpack_require__.d(__webpack_exports__,{H9:function(){/* binding */return CodeActionProviderRegistry},He:function(){/* binding */return CodeLensProviderRegistry},OH:function(){/* binding */return ColorProviderRegistry},KZ:function(){/* binding */return CompletionProviderRegistry},RN:function(){/* binding */return DeclarationProviderRegistry},Ct:function(){/* binding */return DefinitionProviderRegistry},Az:function(){/* binding */return DocumentFormattingEditProviderRegistry},MY:function(){/* binding */return DocumentHighlightKind},vH:function(){/* binding */return DocumentHighlightProviderRegistry},vN:function(){/* binding */return DocumentRangeFormattingEditProviderRegistry},K7:function(){/* binding */return DocumentRangeSemanticTokensProviderRegistry},wT:function(){/* binding */return DocumentSemanticTokensProviderRegistry},vJ:function(){/* binding */return DocumentSymbolProviderRegistry},AD:function(){/* binding */return FoldingRangeKind},aC:function(){/* binding */return FoldingRangeProviderRegistry},xp:function(){/* binding */return HoverProviderRegistry},vI:function(){/* binding */return ImplementationProviderRegistry},gl:function(){/* binding */return InlayHintKind},mX:function(){/* binding */return InlayHintsProviderRegistry},bw:function(){/* binding */return InlineCompletionTriggerKind},zu:function(){/* binding */return InlineCompletionsProviderRegistry},pM:function(){/* binding */return LinkProviderRegistry},id:function(){/* binding */return LinkedEditingRangeProviderRegistry},ln:function(){/* binding */return OnTypeFormattingEditProviderRegistry},FL:function(){/* binding */return ReferenceProviderRegistry},G0:function(){/* binding */return RenameProviderRegistry},AC:function(){/* binding */return SelectionRangeRegistry},nD:function(){/* binding */return SignatureHelpProviderRegistry},WW:function(){/* binding */return SignatureHelpTriggerKind},uZ:function(){/* binding */return SymbolKinds},NX:function(){/* binding */return TokenMetadata},RW:function(){/* binding */return TokenizationRegistry},tA:function(){/* binding */return TypeDefinitionProviderRegistry},jr:function(){/* binding */return completionKindFromString},Sy:function(){/* binding */return completionKindToCssClass},vx:function(){/* binding */return isLocationLink}});
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/uri.js
var uri=__webpack_require__(70666),range=__webpack_require__(624314),languageFeatureRegistry=__webpack_require__(305405),common_event=__webpack_require__(104669),lifecycle=__webpack_require__(905976);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/core/range.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/tokenizationRegistry.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class TokenizationRegistryImpl{constructor(){this._map=new Map,this._promises=new Map,this._onDidChange=new common_event/* Emitter */.Q5,this.onDidChange=this._onDidChange.event,this._colorMap=null}fire(languages){this._onDidChange.fire({changedLanguages:languages,changedColorMap:!1})}register(language,support){return this._map.set(language,support),this.fire([language]),(0,lifecycle/* toDisposable */.OF)((()=>{this._map.get(language)===support&&(this._map.delete(language),this.fire([language]))}))}registerPromise(language,supportPromise){let registration=null,isDisposed=!1;return this._promises.set(language,supportPromise.then((support=>{this._promises.delete(language),!isDisposed&&support&&(registration=this.register(language,support))}))),(0,lifecycle/* toDisposable */.OF)((()=>{isDisposed=!0,registration&&registration.dispose()}))}getPromise(language){const support=this.get(language);if(support)return Promise.resolve(support);const promise=this._promises.get(language);return promise?promise.then((_=>this.get(language))):null}get(language){return this._map.get(language)||null}setColorMap(colorMap){this._colorMap=colorMap,this._onDidChange.fire({changedLanguages:Array.from(this._map.keys()),changedColorMap:!0})}getColorMap(){return this._colorMap}getDefaultBackground(){return this._colorMap&&this._colorMap.length>2/* DefaultBackground */?this._colorMap[2/* DefaultBackground */]:null}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/codicons.js
var codicons=__webpack_require__(773046);// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * @internal
 */
class TokenMetadata{static getLanguageId(metadata){return(255/* LANGUAGEID_MASK */&metadata)>>>0/* LANGUAGEID_OFFSET */}static getTokenType(metadata){return(1792/* TOKEN_TYPE_MASK */&metadata)>>>8/* TOKEN_TYPE_OFFSET */}static getFontStyle(metadata){return(14336/* FONT_STYLE_MASK */&metadata)>>>11/* FONT_STYLE_OFFSET */}static getForeground(metadata){return(8372224/* FOREGROUND_MASK */&metadata)>>>14/* FOREGROUND_OFFSET */}static getBackground(metadata){return(4286578688/* BACKGROUND_MASK */&metadata)>>>23/* BACKGROUND_OFFSET */}static getClassNameFromMetadata(metadata){let foreground=this.getForeground(metadata),className="mtk"+foreground,fontStyle=this.getFontStyle(metadata);return 1/* Italic */&fontStyle&&(className+=" mtki"),2/* Bold */&fontStyle&&(className+=" mtkb"),4/* Underline */&fontStyle&&(className+=" mtku"),className}static getInlineStyleFromMetadata(metadata,colorMap){const foreground=this.getForeground(metadata),fontStyle=this.getFontStyle(metadata);let result=`color: ${colorMap[foreground]};`;return 1/* Italic */&fontStyle&&(result+="font-style: italic;"),2/* Bold */&fontStyle&&(result+="font-weight: bold;"),4/* Underline */&fontStyle&&(result+="text-decoration: underline;"),result}}
/**
 * @internal
 */const completionKindToCssClass=function(){let data=Object.create(null);return data[0/* Method */]="symbol-method",data[1/* Function */]="symbol-function",data[2/* Constructor */]="symbol-constructor",data[3/* Field */]="symbol-field",data[4/* Variable */]="symbol-variable",data[5/* Class */]="symbol-class",data[6/* Struct */]="symbol-struct",data[7/* Interface */]="symbol-interface",data[8/* Module */]="symbol-module",data[9/* Property */]="symbol-property",data[10/* Event */]="symbol-event",data[11/* Operator */]="symbol-operator",data[12/* Unit */]="symbol-unit",data[13/* Value */]="symbol-value",data[14/* Constant */]="symbol-constant",data[15/* Enum */]="symbol-enum",data[16/* EnumMember */]="symbol-enum-member",data[17/* Keyword */]="symbol-keyword",data[27/* Snippet */]="symbol-snippet",data[18/* Text */]="symbol-text",data[19/* Color */]="symbol-color",data[20/* File */]="symbol-file",data[21/* Reference */]="symbol-reference",data[22/* Customcolor */]="symbol-customcolor",data[23/* Folder */]="symbol-folder",data[24/* TypeParameter */]="symbol-type-parameter",data[25/* User */]="account",data[26/* Issue */]="issues",function(kind){const name=data[kind];let codicon=name&&codicons/* iconRegistry */.fK.get(name);return codicon||(codicon=codicons/* Codicon */.lA.symbolProperty),codicon.classNames}}();
/**
 * @internal
 */let completionKindFromString=function(){let data=Object.create(null);return data["method"]=0/* Method */,data["function"]=1/* Function */,data["constructor"]=2/* Constructor */,data["field"]=3/* Field */,data["variable"]=4/* Variable */,data["class"]=5/* Class */,data["struct"]=6/* Struct */,data["interface"]=7/* Interface */,data["module"]=8/* Module */,data["property"]=9/* Property */,data["event"]=10/* Event */,data["operator"]=11/* Operator */,data["unit"]=12/* Unit */,data["value"]=13/* Value */,data["constant"]=14/* Constant */,data["enum"]=15/* Enum */,data["enum-member"]=16/* EnumMember */,data["enumMember"]=16/* EnumMember */,data["keyword"]=17/* Keyword */,data["snippet"]=27/* Snippet */,data["text"]=18/* Text */,data["color"]=19/* Color */,data["file"]=20/* File */,data["reference"]=21/* Reference */,data["customcolor"]=22/* Customcolor */,data["folder"]=23/* Folder */,data["type-parameter"]=24/* TypeParameter */,data["typeParameter"]=24/* TypeParameter */,data["account"]=25/* User */,data["issue"]=26/* Issue */,function(value,strict){let res=data[value];return"undefined"!==typeof res||strict||(res=9/* Property */),res}}();
/**
 * How an {@link InlineCompletionsProvider inline completion provider} was triggered.
 */var InlineCompletionTriggerKind,SignatureHelpTriggerKind,DocumentHighlightKind,SymbolKinds,InlayHintKind;
/**
 * @internal
 */
function isLocationLink(thing){return thing&&uri/* URI */.o.isUri(thing.uri)&&range/* Range */.e.isIRange(thing.range)&&(range/* Range */.e.isIRange(thing.originSelectionRange)||range/* Range */.e.isIRange(thing.targetSelectionRange))}
/**
 * @internal
 */(function(InlineCompletionTriggerKind){
/**
     * Completion was triggered automatically while editing.
     * It is sufficient to return a single completion item in this case.
     */
InlineCompletionTriggerKind[InlineCompletionTriggerKind["Automatic"]=0]="Automatic",
/**
     * Completion was triggered explicitly by a user gesture.
     * Return multiple completion items to enable cycling through them.
     */
InlineCompletionTriggerKind[InlineCompletionTriggerKind["Explicit"]=1]="Explicit"})(InlineCompletionTriggerKind||(InlineCompletionTriggerKind={})),function(SignatureHelpTriggerKind){SignatureHelpTriggerKind[SignatureHelpTriggerKind["Invoke"]=1]="Invoke",SignatureHelpTriggerKind[SignatureHelpTriggerKind["TriggerCharacter"]=2]="TriggerCharacter",SignatureHelpTriggerKind[SignatureHelpTriggerKind["ContentChange"]=3]="ContentChange"}(SignatureHelpTriggerKind||(SignatureHelpTriggerKind={})),function(DocumentHighlightKind){
/**
     * A textual occurrence.
     */
DocumentHighlightKind[DocumentHighlightKind["Text"]=0]="Text",
/**
     * Read-access of a symbol, like reading a variable.
     */
DocumentHighlightKind[DocumentHighlightKind["Read"]=1]="Read",
/**
     * Write-access of a symbol, like writing to a variable.
     */
DocumentHighlightKind[DocumentHighlightKind["Write"]=2]="Write"}(DocumentHighlightKind||(DocumentHighlightKind={})),function(SymbolKinds){const byName=new Map;byName.set("file",0/* File */),byName.set("module",1/* Module */),byName.set("namespace",2/* Namespace */),byName.set("package",3/* Package */),byName.set("class",4/* Class */),byName.set("method",5/* Method */),byName.set("property",6/* Property */),byName.set("field",7/* Field */),byName.set("constructor",8/* Constructor */),byName.set("enum",9/* Enum */),byName.set("interface",10/* Interface */),byName.set("function",11/* Function */),byName.set("variable",12/* Variable */),byName.set("constant",13/* Constant */),byName.set("string",14/* String */),byName.set("number",15/* Number */),byName.set("boolean",16/* Boolean */),byName.set("array",17/* Array */),byName.set("object",18/* Object */),byName.set("key",19/* Key */),byName.set("null",20/* Null */),byName.set("enum-member",21/* EnumMember */),byName.set("struct",22/* Struct */),byName.set("event",23/* Event */),byName.set("operator",24/* Operator */),byName.set("type-parameter",25/* TypeParameter */);const byKind=new Map;
/**
     * @internal
     */
function fromString(value){return byName.get(value)}
/**
     * @internal
     */
function toString(kind){return byKind.get(kind)}
/**
     * @internal
     */
function toCssClassName(kind,inline){const symbolName=byKind.get(kind);let codicon=symbolName&&codicons/* iconRegistry */.fK.get("symbol-"+symbolName);return codicon||(codicon=codicons/* Codicon */.lA.symbolProperty),`${inline?"inline":"block"} ${codicon.classNames}`}byKind.set(0/* File */,"file"),byKind.set(1/* Module */,"module"),byKind.set(2/* Namespace */,"namespace"),byKind.set(3/* Package */,"package"),byKind.set(4/* Class */,"class"),byKind.set(5/* Method */,"method"),byKind.set(6/* Property */,"property"),byKind.set(7/* Field */,"field"),byKind.set(8/* Constructor */,"constructor"),byKind.set(9/* Enum */,"enum"),byKind.set(10/* Interface */,"interface"),byKind.set(11/* Function */,"function"),byKind.set(12/* Variable */,"variable"),byKind.set(13/* Constant */,"constant"),byKind.set(14/* String */,"string"),byKind.set(15/* Number */,"number"),byKind.set(16/* Boolean */,"boolean"),byKind.set(17/* Array */,"array"),byKind.set(18/* Object */,"object"),byKind.set(19/* Key */,"key"),byKind.set(20/* Null */,"null"),byKind.set(21/* EnumMember */,"enum-member"),byKind.set(22/* Struct */,"struct"),byKind.set(23/* Event */,"event"),byKind.set(24/* Operator */,"operator"),byKind.set(25/* TypeParameter */,"type-parameter"),SymbolKinds.fromString=fromString,SymbolKinds.toString=toString,SymbolKinds.toCssClassName=toCssClassName}(SymbolKinds||(SymbolKinds={}));class FoldingRangeKind{
/**
     * Creates a new {@link FoldingRangeKind}.
     *
     * @param value of the kind.
     */
constructor(value){this.value=value}}
/**
 * Kind for folding range representing a comment. The value of the kind is 'comment'.
 */FoldingRangeKind.Comment=new FoldingRangeKind("comment"),
/**
 * Kind for folding range representing a import. The value of the kind is 'imports'.
 */
FoldingRangeKind.Imports=new FoldingRangeKind("imports"),
/**
 * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).
 * The value of the kind is 'region'.
 */
FoldingRangeKind.Region=new FoldingRangeKind("region"),function(InlayHintKind){InlayHintKind[InlayHintKind["Other"]=0]="Other",InlayHintKind[InlayHintKind["Type"]=1]="Type",InlayHintKind[InlayHintKind["Parameter"]=2]="Parameter"}(InlayHintKind||(InlayHintKind={}));
// --- feature registries ------
/**
 * @internal
 */
const ReferenceProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,RenameProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,CompletionProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,InlineCompletionsProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,SignatureHelpProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,HoverProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,DocumentSymbolProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,DocumentHighlightProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,LinkedEditingRangeProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,DefinitionProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,DeclarationProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,ImplementationProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,TypeDefinitionProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,CodeLensProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,InlayHintsProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,CodeActionProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,DocumentFormattingEditProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,DocumentRangeFormattingEditProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,OnTypeFormattingEditProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,LinkProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,ColorProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,SelectionRangeRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,FoldingRangeProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,DocumentSemanticTokensProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,DocumentRangeSemanticTokensProviderRegistry=new languageFeatureRegistry/* LanguageFeatureRegistry */.c,TokenizationRegistry=new TokenizationRegistryImpl;
/**
 * @internal
 */},
/***/397354:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Describes what to do with the indentation when pressing Enter.
 */
var IndentAction;
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */V6:function(){/* binding */return StandardAutoClosingPairConditional},
/* harmony export */c$:function(){/* binding */return AutoClosingPairs},
/* harmony export */wU:function(){/* binding */return IndentAction}
/* harmony export */}),function(IndentAction){
/**
     * Insert new line and copy the previous line's indentation.
     */
IndentAction[IndentAction["None"]=0]="None",
/**
     * Insert new line and indent once (relative to the previous line's indentation).
     */
IndentAction[IndentAction["Indent"]=1]="Indent",
/**
     * Insert two new lines:
     *  - the first one indented which will hold the cursor
     *  - the second one at the same indentation level
     */
IndentAction[IndentAction["IndentOutdent"]=2]="IndentOutdent",
/**
     * Insert new line and outdent once (relative to the previous line's indentation).
     */
IndentAction[IndentAction["Outdent"]=3]="Outdent"}(IndentAction||(IndentAction={}));
/**
 * @internal
 */
class StandardAutoClosingPairConditional{constructor(source){if(this._standardAutoClosingPairConditionalBrand=void 0,this.open=source.open,this.close=source.close,
// initially allowed in all tokens
this._standardTokenMask=0,Array.isArray(source.notIn))for(let i=0,len=source.notIn.length;i<len;i++){const notIn=source.notIn[i];switch(notIn){case"string":this._standardTokenMask|=2/* String */;break;case"comment":this._standardTokenMask|=1/* Comment */;break;case"regex":this._standardTokenMask|=4/* RegEx */;break}}}isOK(standardToken){return 0===(this._standardTokenMask&standardToken)}}
/**
 * @internal
 */class AutoClosingPairs{constructor(autoClosingPairs){this.autoClosingPairsOpenByStart=new Map,this.autoClosingPairsOpenByEnd=new Map,this.autoClosingPairsCloseByStart=new Map,this.autoClosingPairsCloseByEnd=new Map,this.autoClosingPairsCloseSingleChar=new Map;for(const pair of autoClosingPairs)appendEntry(this.autoClosingPairsOpenByStart,pair.open.charAt(0),pair),appendEntry(this.autoClosingPairsOpenByEnd,pair.open.charAt(pair.open.length-1),pair),appendEntry(this.autoClosingPairsCloseByStart,pair.close.charAt(0),pair),appendEntry(this.autoClosingPairsCloseByEnd,pair.close.charAt(pair.close.length-1),pair),1===pair.close.length&&1===pair.open.length&&appendEntry(this.autoClosingPairsCloseSingleChar,pair.close,pair)}}function appendEntry(target,key,value){target.has(key)?target.get(key).push(value):target.set(key,[value])}
/***/},
/***/594660:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
// EXPORTS
__webpack_require__.d(__webpack_exports__,{c_:function(){/* binding */return ILanguageConfigurationService},zu:function(){/* binding */return LanguageConfigurationRegistry},UU:function(){/* binding */return LanguageConfigurationService}});
// UNUSED EXPORTS: LanguageConfigurationChangeEvent, LanguageConfigurationRegistryImpl, LanguageConfigurationServiceChangeEvent, ResolvedLanguageConfiguration
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/event.js
var common_event=__webpack_require__(104669),lifecycle=__webpack_require__(905976),strings=__webpack_require__(697295),wordHelper=__webpack_require__(997461),languageConfiguration=__webpack_require__(397354),supports=__webpack_require__(640764);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/characterPair.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class CharacterPairSupport{constructor(config){if(config.autoClosingPairs?this._autoClosingPairs=config.autoClosingPairs.map((el=>new languageConfiguration/* StandardAutoClosingPairConditional */.V6(el))):config.brackets?this._autoClosingPairs=config.brackets.map((b=>new languageConfiguration/* StandardAutoClosingPairConditional */.V6({open:b[0],close:b[1]}))):this._autoClosingPairs=[],config.colorizedBracketPairs?this._colorizedBracketPairs=filterValidBrackets(config.colorizedBracketPairs.map((b=>[b[0],b[1]]))):config.brackets?this._colorizedBracketPairs=filterValidBrackets(config.brackets.map((b=>[b[0],b[1]]
// Many languages set < ... > as bracket pair, even though they also use it as comparison operator.
// This leads to problems when colorizing this bracket, so we exclude it by default.
// Languages can still override this by configuring `colorizedBracketPairs`
// https://github.com/microsoft/vscode/issues/132476
)).filter((p=>!("<"===p[0]&&">"===p[1])))):this._colorizedBracketPairs=[],config.__electricCharacterSupport&&config.__electricCharacterSupport.docComment){const docComment=config.__electricCharacterSupport.docComment;
// IDocComment is legacy, only partially supported
this._autoClosingPairs.push(new languageConfiguration/* StandardAutoClosingPairConditional */.V6({open:docComment.open,close:docComment.close||""}))}this._autoCloseBefore="string"===typeof config.autoCloseBefore?config.autoCloseBefore:CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED,this._surroundingPairs=config.surroundingPairs||this._autoClosingPairs}getAutoClosingPairs(){return this._autoClosingPairs}getAutoCloseBeforeSet(){return this._autoCloseBefore}static shouldAutoClosePair(autoClosingPair,context,column){
// Always complete on empty line
if(0===context.getTokenCount())return!0;const tokenIndex=context.findTokenIndexAtOffset(column-2),standardTokenType=context.getStandardTokenType(tokenIndex);return autoClosingPair.isOK(standardTokenType)}getSurroundingPairs(){return this._surroundingPairs}getColorizedBrackets(){return this._colorizedBracketPairs}}function filterValidBrackets(bracketPairs){return bracketPairs.filter((([open,close])=>""!==open&&""!==close))}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/richEditBrackets.js
CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED=";:.,=}])> \n\t";var richEditBrackets=__webpack_require__(134227);// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/electricCharacter.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class BracketElectricCharacterSupport{constructor(richEditBrackets){this._richEditBrackets=richEditBrackets}getElectricCharacters(){let result=[];if(this._richEditBrackets)for(const bracket of this._richEditBrackets.brackets)for(const close of bracket.close){const lastChar=close.charAt(close.length-1);result.push(lastChar)}
// Filter duplicate entries
return result=result.filter(((item,pos,array)=>array.indexOf(item)===pos)),result}onElectricCharacter(character,context,column){if(!this._richEditBrackets||0===this._richEditBrackets.brackets.length)return null;const tokenIndex=context.findTokenIndexAtOffset(column-1);if((0,supports/* ignoreBracketsInToken */.Bu)(context.getStandardTokenType(tokenIndex)))return null;const reversedBracketRegex=this._richEditBrackets.reversedRegex,text=context.getLineContent().substring(0,column-1)+character,r=richEditBrackets/* BracketsUtils */.Vr.findPrevBracketInRange(reversedBracketRegex,1,text,0,text.length);if(!r)return null;const bracketText=text.substring(r.startColumn-1,r.endColumn-1).toLowerCase(),isOpen=this._richEditBrackets.textIsOpenBracket[bracketText];if(isOpen)return null;const textBeforeBracket=context.getActualLineContentBefore(r.startColumn-1);return/^\s*$/.test(textBeforeBracket)?{matchOpenBracket:bracketText}:null}}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/indentRules.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function resetGlobalRegex(reg){return reg.global&&(reg.lastIndex=0),!0}class IndentRulesSupport{constructor(indentationRules){this._indentationRules=indentationRules}shouldIncrease(text){return!!(this._indentationRules&&this._indentationRules.increaseIndentPattern&&resetGlobalRegex(this._indentationRules.increaseIndentPattern)&&this._indentationRules.increaseIndentPattern.test(text))}shouldDecrease(text){return!!(this._indentationRules&&this._indentationRules.decreaseIndentPattern&&resetGlobalRegex(this._indentationRules.decreaseIndentPattern)&&this._indentationRules.decreaseIndentPattern.test(text))}shouldIndentNextLine(text){return!!(this._indentationRules&&this._indentationRules.indentNextLinePattern&&resetGlobalRegex(this._indentationRules.indentNextLinePattern)&&this._indentationRules.indentNextLinePattern.test(text))}shouldIgnore(text){
// the text matches `unIndentedLinePattern`
return!!(this._indentationRules&&this._indentationRules.unIndentedLinePattern&&resetGlobalRegex(this._indentationRules.unIndentedLinePattern)&&this._indentationRules.unIndentedLinePattern.test(text))}getIndentMetadata(text){let ret=0;return this.shouldIncrease(text)&&(ret+=1/* INCREASE_MASK */),this.shouldDecrease(text)&&(ret+=2/* DECREASE_MASK */),this.shouldIndentNextLine(text)&&(ret+=4/* INDENT_NEXTLINE_MASK */),this.shouldIgnore(text)&&(ret+=8/* UNINDENT_MASK */),ret}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/errors.js
var errors=__webpack_require__(817301);// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/onEnter.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class OnEnterSupport{constructor(opts){opts=opts||{},opts.brackets=opts.brackets||[["(",")"],["{","}"],["[","]"]],this._brackets=[],opts.brackets.forEach((bracket=>{const openRegExp=OnEnterSupport._createOpenBracketRegExp(bracket[0]),closeRegExp=OnEnterSupport._createCloseBracketRegExp(bracket[1]);openRegExp&&closeRegExp&&this._brackets.push({open:bracket[0],openRegExp:openRegExp,close:bracket[1],closeRegExp:closeRegExp})})),this._regExpRules=opts.onEnterRules||[]}onEnter(autoIndent,previousLineText,beforeEnterText,afterEnterText){
// (1): `regExpRules`
if(autoIndent>=3/* Advanced */)for(let i=0,len=this._regExpRules.length;i<len;i++){let rule=this._regExpRules[i];const regResult=[{reg:rule.beforeText,text:beforeEnterText},{reg:rule.afterText,text:afterEnterText},{reg:rule.previousLineText,text:previousLineText}].every((obj=>!obj.reg||(obj.reg.lastIndex=0,obj.reg.test(obj.text))));if(regResult)return rule.action}
// (2): Special indent-outdent
if(autoIndent>=2/* Brackets */&&beforeEnterText.length>0&&afterEnterText.length>0)for(let i=0,len=this._brackets.length;i<len;i++){let bracket=this._brackets[i];if(bracket.openRegExp.test(beforeEnterText)&&bracket.closeRegExp.test(afterEnterText))return{indentAction:languageConfiguration/* IndentAction */.wU.IndentOutdent}}
// (4): Open bracket based logic
if(autoIndent>=2/* Brackets */&&beforeEnterText.length>0)for(let i=0,len=this._brackets.length;i<len;i++){let bracket=this._brackets[i];if(bracket.openRegExp.test(beforeEnterText))return{indentAction:languageConfiguration/* IndentAction */.wU.Indent}}return null}static _createOpenBracketRegExp(bracket){let str=strings/* escapeRegExpCharacters */.ec(bracket);return/\B/.test(str.charAt(0))||(str="\\b"+str),str+="\\s*$",OnEnterSupport._safeRegExp(str)}static _createCloseBracketRegExp(bracket){let str=strings/* escapeRegExpCharacters */.ec(bracket);return/\B/.test(str.charAt(str.length-1))||(str+="\\b"),str="^\\s*"+str,OnEnterSupport._safeRegExp(str)}static _safeRegExp(def){try{return new RegExp(def)}catch(err){return(0,errors/* onUnexpectedError */.dL)(err),null}}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js
var instantiation=__webpack_require__(472065),configuration=__webpack_require__(133108),modeService=__webpack_require__(771531),extensions=__webpack_require__(65026),__decorate=function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"===typeof Reflect&&"function"===typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}};
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js
class LanguageConfigurationServiceChangeEvent{constructor(languageId){this.languageId=languageId}affects(languageId){return!this.languageId||this.languageId===languageId}}const ILanguageConfigurationService=(0,instantiation/* createDecorator */.yh)("languageConfigurationService");let LanguageConfigurationService=class extends lifecycle/* Disposable */.JT{constructor(configurationService,modeService){super(),this.configurationService=configurationService,this.modeService=modeService,this.onDidChangeEmitter=this._register(new common_event/* Emitter */.Q5),this.onDidChange=this.onDidChangeEmitter.event,this.configurations=new Map;const languageConfigKeys=new Set(Object.values(customizedLanguageConfigKeys));this._register(this.configurationService.onDidChangeConfiguration((e=>{const globalConfigChanged=e.change.keys.some((k=>languageConfigKeys.has(k))),localConfigChanged=e.change.overrides.filter((([overrideLangName,keys])=>keys.some((k=>languageConfigKeys.has(k))))).map((([overrideLangName])=>this.modeService.validateLanguageId(overrideLangName)));if(globalConfigChanged)this.configurations.clear(),this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(void 0));else for(const languageId of localConfigChanged)languageId&&(this.configurations.delete(languageId),this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(languageId)))}))),this._register(LanguageConfigurationRegistry.onDidChange((e=>{this.configurations.delete(e.languageId),this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(e.languageId))})))}getLanguageConfiguration(languageId){let result=this.configurations.get(languageId);return result||(result=computeConfig(languageId,this.configurationService,this.modeService),this.configurations.set(languageId,result)),result}};function computeConfig(languageId,configurationService,modeService){let languageConfig=LanguageConfigurationRegistry.getLanguageConfiguration(languageId);if(!languageConfig){const validLanguageId=modeService.validateLanguageId(languageId);if(!validLanguageId)throw new Error("Unexpected languageId");languageConfig=new ResolvedLanguageConfiguration(validLanguageId,{})}const customizedConfig=getCustomizedLanguageConfig(languageConfig.languageId,configurationService),data=combineLanguageConfigurations([languageConfig.underlyingConfig,customizedConfig]),config=new ResolvedLanguageConfiguration(languageConfig.languageId,data);return config}LanguageConfigurationService=__decorate([__param(0,configuration/* IConfigurationService */.Ui),__param(1,modeService/* IModeService */.h)],LanguageConfigurationService);const customizedLanguageConfigKeys={brackets:"editor.language.brackets",colorizedBracketPairs:"editor.language.colorizedBracketPairs"};function getCustomizedLanguageConfig(languageId,configurationService){const brackets=configurationService.getValue(customizedLanguageConfigKeys.brackets,{overrideIdentifier:languageId}),colorizedBracketPairs=configurationService.getValue(customizedLanguageConfigKeys.colorizedBracketPairs,{overrideIdentifier:languageId});return{brackets:validateBracketPairs(brackets),colorizedBracketPairs:validateBracketPairs(colorizedBracketPairs)}}function validateBracketPairs(data){if(Array.isArray(data))return data.map((pair=>{if(Array.isArray(pair)&&2===pair.length)return[pair[0],pair[1]]})).filter((p=>!!p))}class LanguageConfigurationChangeEvent{constructor(languageId){this.languageId=languageId}}class LanguageConfigurationRegistryImpl{constructor(){this._entries=new Map,this._onDidChange=new common_event/* Emitter */.Q5,this.onDidChange=this._onDidChange.event}
/**
     * @param priority Use a higher number for higher priority
     */register(languageId,configuration,priority=0){let entries=this._entries.get(languageId);entries||(entries=new ComposedLanguageConfiguration(languageId),this._entries.set(languageId,entries));const disposable=entries.register(configuration,priority);return this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId)),(0,lifecycle/* toDisposable */.OF)((()=>{disposable.dispose(),this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId))}))}getLanguageConfiguration(languageId){let entries=this._entries.get(languageId);return(null===entries||void 0===entries?void 0:entries.getResolvedConfiguration())||null}getIndentationRules(languageId){const value=this.getLanguageConfiguration(languageId);return value&&value.indentationRules||null}
// begin electricCharacter
_getElectricCharacterSupport(languageId){let value=this.getLanguageConfiguration(languageId);return value&&value.electricCharacter||null}getElectricCharacters(languageId){let electricCharacterSupport=this._getElectricCharacterSupport(languageId);return electricCharacterSupport?electricCharacterSupport.getElectricCharacters():[]}
/**
     * Should return opening bracket type to match indentation with
     */onElectricCharacter(character,context,column){let scopedLineTokens=(0,supports/* createScopedLineTokens */.wH)(context,column-1),electricCharacterSupport=this._getElectricCharacterSupport(scopedLineTokens.languageId);return electricCharacterSupport?electricCharacterSupport.onElectricCharacter(character,scopedLineTokens,column-scopedLineTokens.firstCharOffset):null}
// end electricCharacter
getComments(languageId){let value=this.getLanguageConfiguration(languageId);return value&&value.comments||null}
// begin characterPair
_getCharacterPairSupport(languageId){let value=this.getLanguageConfiguration(languageId);return value&&value.characterPair||null}getAutoClosingPairs(languageId){const characterPairSupport=this._getCharacterPairSupport(languageId);return new languageConfiguration/* AutoClosingPairs */.c$(characterPairSupport?characterPairSupport.getAutoClosingPairs():[])}getAutoCloseBeforeSet(languageId){let characterPairSupport=this._getCharacterPairSupport(languageId);return characterPairSupport?characterPairSupport.getAutoCloseBeforeSet():CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED}getSurroundingPairs(languageId){let characterPairSupport=this._getCharacterPairSupport(languageId);return characterPairSupport?characterPairSupport.getSurroundingPairs():[]}shouldAutoClosePair(autoClosingPair,context,column){const scopedLineTokens=(0,supports/* createScopedLineTokens */.wH)(context,column-1);return CharacterPairSupport.shouldAutoClosePair(autoClosingPair,scopedLineTokens,column-scopedLineTokens.firstCharOffset)}
// end characterPair
getWordDefinition(languageId){let value=this.getLanguageConfiguration(languageId);return value?(0,wordHelper/* ensureValidWordDefinition */.eq)(value.wordDefinition||null):(0,wordHelper/* ensureValidWordDefinition */.eq)(null)}getFoldingRules(languageId){let value=this.getLanguageConfiguration(languageId);return value?value.foldingRules:{}}
// begin Indent Rules
getIndentRulesSupport(languageId){let value=this.getLanguageConfiguration(languageId);return value&&value.indentRulesSupport||null}
/**
     * Get nearest preceding line which doesn't match unIndentPattern or contains all whitespace.
     * Result:
     * -1: run into the boundary of embedded languages
     * 0: every line above are invalid
     * else: nearest preceding line of the same language
     */getPrecedingValidLine(model,lineNumber,indentRulesSupport){let languageID=model.getLanguageIdAtPosition(lineNumber,0);if(lineNumber>1){let lastLineNumber,resultLineNumber=-1;for(lastLineNumber=lineNumber-1;lastLineNumber>=1;lastLineNumber--){if(model.getLanguageIdAtPosition(lastLineNumber,0)!==languageID)return resultLineNumber;let text=model.getLineContent(lastLineNumber);if(!indentRulesSupport.shouldIgnore(text)&&!/^\s+$/.test(text)&&""!==text)return lastLineNumber;resultLineNumber=lastLineNumber}}return-1}
/**
     * Get inherited indentation from above lines.
     * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.
     * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.
     * 3. If this line doesn't match any indent rules
     *   a. check whether the line above it matches indentNextLinePattern
     *   b. If not, the indent level of this line is the result
     *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).
     * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`
     *
     * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.
     */getInheritIndentForLine(autoIndent,model,lineNumber,honorIntentialIndent=!0){if(autoIndent<4/* Full */)return null;const indentRulesSupport=this.getIndentRulesSupport(model.getLanguageId());if(!indentRulesSupport)return null;if(lineNumber<=1)return{indentation:"",action:null};const precedingUnIgnoredLine=this.getPrecedingValidLine(model,lineNumber,indentRulesSupport);if(precedingUnIgnoredLine<0)return null;if(precedingUnIgnoredLine<1)return{indentation:"",action:null};const precedingUnIgnoredLineContent=model.getLineContent(precedingUnIgnoredLine);if(indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent)||indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent))return{indentation:strings/* getLeadingWhitespace */.V8(precedingUnIgnoredLineContent),action:languageConfiguration/* IndentAction */.wU.Indent,line:precedingUnIgnoredLine};if(indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent))return{indentation:strings/* getLeadingWhitespace */.V8(precedingUnIgnoredLineContent),action:null,line:precedingUnIgnoredLine};{
// precedingUnIgnoredLine can not be ignored.
// it doesn't increase indent of following lines
// it doesn't increase just next line
// so current line is not affect by precedingUnIgnoredLine
// and then we should get a correct inheritted indentation from above lines
if(1===precedingUnIgnoredLine)return{indentation:strings/* getLeadingWhitespace */.V8(model.getLineContent(precedingUnIgnoredLine)),action:null,line:precedingUnIgnoredLine};const previousLine=precedingUnIgnoredLine-1,previousLineIndentMetadata=indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));if(!(3/* DECREASE_MASK */&previousLineIndentMetadata)&&4/* INDENT_NEXTLINE_MASK */&previousLineIndentMetadata){let stopLine=0;for(let i=previousLine-1;i>0;i--)if(!indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))){stopLine=i;break}return{indentation:strings/* getLeadingWhitespace */.V8(model.getLineContent(stopLine+1)),action:null,line:stopLine+1}}if(honorIntentialIndent)return{indentation:strings/* getLeadingWhitespace */.V8(model.getLineContent(precedingUnIgnoredLine)),action:null,line:precedingUnIgnoredLine};
// search from precedingUnIgnoredLine until we find one whose indent is not temporary
for(let i=precedingUnIgnoredLine;i>0;i--){const lineContent=model.getLineContent(i);if(indentRulesSupport.shouldIncrease(lineContent))return{indentation:strings/* getLeadingWhitespace */.V8(lineContent),action:languageConfiguration/* IndentAction */.wU.Indent,line:i};if(indentRulesSupport.shouldIndentNextLine(lineContent)){let stopLine=0;for(let j=i-1;j>0;j--)if(!indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))){stopLine=j;break}return{indentation:strings/* getLeadingWhitespace */.V8(model.getLineContent(stopLine+1)),action:null,line:stopLine+1}}if(indentRulesSupport.shouldDecrease(lineContent))return{indentation:strings/* getLeadingWhitespace */.V8(lineContent),action:null,line:i}}return{indentation:strings/* getLeadingWhitespace */.V8(model.getLineContent(1)),action:null,line:1}}}getGoodIndentForLine(autoIndent,virtualModel,languageId,lineNumber,indentConverter){if(autoIndent<4/* Full */)return null;const richEditSupport=this.getLanguageConfiguration(languageId);if(!richEditSupport)return null;const indentRulesSupport=this.getIndentRulesSupport(languageId);if(!indentRulesSupport)return null;const indent=this.getInheritIndentForLine(autoIndent,virtualModel,lineNumber),lineContent=virtualModel.getLineContent(lineNumber);if(indent){const inheritLine=indent.line;if(void 0!==inheritLine){const enterResult=richEditSupport.onEnter(autoIndent,"",virtualModel.getLineContent(inheritLine),"");if(enterResult){let indentation=strings/* getLeadingWhitespace */.V8(virtualModel.getLineContent(inheritLine));return enterResult.removeText&&(indentation=indentation.substring(0,indentation.length-enterResult.removeText)),enterResult.indentAction===languageConfiguration/* IndentAction */.wU.Indent||enterResult.indentAction===languageConfiguration/* IndentAction */.wU.IndentOutdent?indentation=indentConverter.shiftIndent(indentation):enterResult.indentAction===languageConfiguration/* IndentAction */.wU.Outdent&&(indentation=indentConverter.unshiftIndent(indentation)),indentRulesSupport.shouldDecrease(lineContent)&&(indentation=indentConverter.unshiftIndent(indentation)),enterResult.appendText&&(indentation+=enterResult.appendText),strings/* getLeadingWhitespace */.V8(indentation)}}return indentRulesSupport.shouldDecrease(lineContent)?indent.action===languageConfiguration/* IndentAction */.wU.Indent?indent.indentation:indentConverter.unshiftIndent(indent.indentation):indent.action===languageConfiguration/* IndentAction */.wU.Indent?indentConverter.shiftIndent(indent.indentation):indent.indentation}return null}getIndentForEnter(autoIndent,model,range,indentConverter){if(autoIndent<4/* Full */)return null;model.forceTokenization(range.startLineNumber);const lineTokens=model.getLineTokens(range.startLineNumber),scopedLineTokens=(0,supports/* createScopedLineTokens */.wH)(lineTokens,range.startColumn-1),scopedLineText=scopedLineTokens.getLineContent();let beforeEnterText,afterEnterText,embeddedLanguage=!1;if(scopedLineTokens.firstCharOffset>0&&lineTokens.getLanguageId(0)!==scopedLineTokens.languageId?(
// we are in the embeded language content
embeddedLanguage=!0,// if embeddedLanguage is true, then we don't touch the indentation of current line
beforeEnterText=scopedLineText.substr(0,range.startColumn-1-scopedLineTokens.firstCharOffset)):beforeEnterText=lineTokens.getLineContent().substring(0,range.startColumn-1),range.isEmpty())afterEnterText=scopedLineText.substr(range.startColumn-1-scopedLineTokens.firstCharOffset);else{const endScopedLineTokens=this.getScopedLineTokens(model,range.endLineNumber,range.endColumn);afterEnterText=endScopedLineTokens.getLineContent().substr(range.endColumn-1-scopedLineTokens.firstCharOffset)}const indentRulesSupport=this.getIndentRulesSupport(scopedLineTokens.languageId);if(!indentRulesSupport)return null;const beforeEnterResult=beforeEnterText,beforeEnterIndent=strings/* getLeadingWhitespace */.V8(beforeEnterText),virtualModel={getLineTokens:lineNumber=>model.getLineTokens(lineNumber),getLanguageId:()=>model.getLanguageId(),getLanguageIdAtPosition:(lineNumber,column)=>model.getLanguageIdAtPosition(lineNumber,column),getLineContent:lineNumber=>lineNumber===range.startLineNumber?beforeEnterResult:model.getLineContent(lineNumber)},currentLineIndent=strings/* getLeadingWhitespace */.V8(lineTokens.getLineContent()),afterEnterAction=this.getInheritIndentForLine(autoIndent,virtualModel,range.startLineNumber+1);if(!afterEnterAction){const beforeEnter=embeddedLanguage?currentLineIndent:beforeEnterIndent;return{beforeEnter:beforeEnter,afterEnter:beforeEnter}}let afterEnterIndent=embeddedLanguage?currentLineIndent:afterEnterAction.indentation;return afterEnterAction.action===languageConfiguration/* IndentAction */.wU.Indent&&(afterEnterIndent=indentConverter.shiftIndent(afterEnterIndent)),indentRulesSupport.shouldDecrease(afterEnterText)&&(afterEnterIndent=indentConverter.unshiftIndent(afterEnterIndent)),{beforeEnter:embeddedLanguage?currentLineIndent:beforeEnterIndent,afterEnter:afterEnterIndent}}
/**
     * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of
     * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.
     */getIndentActionForType(autoIndent,model,range,ch,indentConverter){if(autoIndent<4/* Full */)return null;const scopedLineTokens=this.getScopedLineTokens(model,range.startLineNumber,range.startColumn);if(scopedLineTokens.firstCharOffset)
// this line has mixed languages and indentation rules will not work
return null;const indentRulesSupport=this.getIndentRulesSupport(scopedLineTokens.languageId);if(!indentRulesSupport)return null;const scopedLineText=scopedLineTokens.getLineContent(),beforeTypeText=scopedLineText.substr(0,range.startColumn-1-scopedLineTokens.firstCharOffset);
// selection support
let afterTypeText;if(range.isEmpty())afterTypeText=scopedLineText.substr(range.startColumn-1-scopedLineTokens.firstCharOffset);else{const endScopedLineTokens=this.getScopedLineTokens(model,range.endLineNumber,range.endColumn);afterTypeText=endScopedLineTokens.getLineContent().substr(range.endColumn-1-scopedLineTokens.firstCharOffset)}
// If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted
// Users might change the indentation by purpose and we should honor that instead of readjusting.
if(!indentRulesSupport.shouldDecrease(beforeTypeText+afterTypeText)&&indentRulesSupport.shouldDecrease(beforeTypeText+ch+afterTypeText)){
// after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.
// 1. Get inherited indent action
const r=this.getInheritIndentForLine(autoIndent,model,range.startLineNumber,!1);if(!r)return null;let indentation=r.indentation;return r.action!==languageConfiguration/* IndentAction */.wU.Indent&&(indentation=indentConverter.unshiftIndent(indentation)),indentation}return null}getIndentMetadata(model,lineNumber){const indentRulesSupport=this.getIndentRulesSupport(model.getLanguageId());return indentRulesSupport?lineNumber<1||lineNumber>model.getLineCount()?null:indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber)):null}
// end Indent Rules
// begin onEnter
getEnterAction(autoIndent,model,range){const scopedLineTokens=this.getScopedLineTokens(model,range.startLineNumber,range.startColumn),richEditSupport=this.getLanguageConfiguration(scopedLineTokens.languageId);if(!richEditSupport)return null;const scopedLineText=scopedLineTokens.getLineContent(),beforeEnterText=scopedLineText.substr(0,range.startColumn-1-scopedLineTokens.firstCharOffset);
// selection support
let afterEnterText;if(range.isEmpty())afterEnterText=scopedLineText.substr(range.startColumn-1-scopedLineTokens.firstCharOffset);else{const endScopedLineTokens=this.getScopedLineTokens(model,range.endLineNumber,range.endColumn);afterEnterText=endScopedLineTokens.getLineContent().substr(range.endColumn-1-scopedLineTokens.firstCharOffset)}let previousLineText="";if(range.startLineNumber>1&&0===scopedLineTokens.firstCharOffset){
// This is not the first line and the entire line belongs to this mode
const oneLineAboveScopedLineTokens=this.getScopedLineTokens(model,range.startLineNumber-1);oneLineAboveScopedLineTokens.languageId===scopedLineTokens.languageId&&(
// The line above ends with text belonging to the same mode
previousLineText=oneLineAboveScopedLineTokens.getLineContent())}const enterResult=richEditSupport.onEnter(autoIndent,previousLineText,beforeEnterText,afterEnterText);if(!enterResult)return null;const indentAction=enterResult.indentAction;let appendText=enterResult.appendText;const removeText=enterResult.removeText||0;
// Here we add `\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.
appendText?indentAction===languageConfiguration/* IndentAction */.wU.Indent&&(appendText="\t"+appendText):appendText=indentAction===languageConfiguration/* IndentAction */.wU.Indent||indentAction===languageConfiguration/* IndentAction */.wU.IndentOutdent?"\t":"";let indentation=this.getIndentationAtPosition(model,range.startLineNumber,range.startColumn);return removeText&&(indentation=indentation.substring(0,indentation.length-removeText)),{indentAction:indentAction,appendText:appendText,removeText:removeText,indentation:indentation}}getIndentationAtPosition(model,lineNumber,column){const lineText=model.getLineContent(lineNumber);let indentation=strings/* getLeadingWhitespace */.V8(lineText);return indentation.length>column-1&&(indentation=indentation.substring(0,column-1)),indentation}getScopedLineTokens(model,lineNumber,columnNumber){model.forceTokenization(lineNumber);const lineTokens=model.getLineTokens(lineNumber),column="undefined"===typeof columnNumber?model.getLineMaxColumn(lineNumber)-1:columnNumber-1;return(0,supports/* createScopedLineTokens */.wH)(lineTokens,column)}}const LanguageConfigurationRegistry=new LanguageConfigurationRegistryImpl;class ComposedLanguageConfiguration{constructor(languageId){this.languageId=languageId,this._resolved=null,this._entries=[],this._order=0,this._resolved=null}register(configuration,priority){const entry=new LanguageConfigurationContribution(configuration,priority,++this._order);return this._entries.push(entry),this._resolved=null,(0,lifecycle/* toDisposable */.OF)((()=>{for(let i=0;i<this._entries.length;i++)if(this._entries[i]===entry){this._entries.splice(i,1),this._resolved=null;break}}))}getResolvedConfiguration(){if(!this._resolved){const config=this._resolve();config&&(this._resolved=new ResolvedLanguageConfiguration(this.languageId,config))}return this._resolved}_resolve(){return 0===this._entries.length?null:(this._entries.sort(LanguageConfigurationContribution.cmp),combineLanguageConfigurations(this._entries.map((e=>e.configuration))))}}function combineLanguageConfigurations(configs){let result={comments:void 0,brackets:void 0,wordPattern:void 0,indentationRules:void 0,onEnterRules:void 0,autoClosingPairs:void 0,surroundingPairs:void 0,autoCloseBefore:void 0,folding:void 0,colorizedBracketPairs:void 0,__electricCharacterSupport:void 0};for(const entry of configs)result={comments:entry.comments||result.comments,brackets:entry.brackets||result.brackets,wordPattern:entry.wordPattern||result.wordPattern,indentationRules:entry.indentationRules||result.indentationRules,onEnterRules:entry.onEnterRules||result.onEnterRules,autoClosingPairs:entry.autoClosingPairs||result.autoClosingPairs,surroundingPairs:entry.surroundingPairs||result.surroundingPairs,autoCloseBefore:entry.autoCloseBefore||result.autoCloseBefore,folding:entry.folding||result.folding,colorizedBracketPairs:entry.colorizedBracketPairs||result.colorizedBracketPairs,__electricCharacterSupport:entry.__electricCharacterSupport||result.__electricCharacterSupport};return result}class LanguageConfigurationContribution{constructor(configuration,priority,order){this.configuration=configuration,this.priority=priority,this.order=order}static cmp(a,b){return a.priority===b.priority?a.order-b.order:a.priority-b.priority;
// higher priority last
}}
/**
 * Immutable.
*/class ResolvedLanguageConfiguration{constructor(languageId,underlyingConfig){this.languageId=languageId,this.underlyingConfig=underlyingConfig,this._brackets=null,this._electricCharacter=null,this._onEnterSupport=this.underlyingConfig.brackets||this.underlyingConfig.indentationRules||this.underlyingConfig.onEnterRules?new OnEnterSupport(this.underlyingConfig):null,this.comments=ResolvedLanguageConfiguration._handleComments(this.underlyingConfig),this.characterPair=new CharacterPairSupport(this.underlyingConfig),this.wordDefinition=this.underlyingConfig.wordPattern||wordHelper/* DEFAULT_WORD_REGEXP */.Af,this.indentationRules=this.underlyingConfig.indentationRules,this.underlyingConfig.indentationRules?this.indentRulesSupport=new IndentRulesSupport(this.underlyingConfig.indentationRules):this.indentRulesSupport=null,this.foldingRules=this.underlyingConfig.folding||{}}getWordDefinition(){return(0,wordHelper/* ensureValidWordDefinition */.eq)(this.wordDefinition)}get brackets(){return!this._brackets&&this.underlyingConfig.brackets&&(this._brackets=new richEditBrackets/* RichEditBrackets */.EA(this.languageId,this.underlyingConfig.brackets)),this._brackets}get electricCharacter(){return this._electricCharacter||(this._electricCharacter=new BracketElectricCharacterSupport(this.brackets)),this._electricCharacter}onEnter(autoIndent,previousLineText,beforeEnterText,afterEnterText){return this._onEnterSupport?this._onEnterSupport.onEnter(autoIndent,previousLineText,beforeEnterText,afterEnterText):null}static _handleComments(conf){let commentRule=conf.comments;if(!commentRule)return null;
// comment configuration
let comments={};if(commentRule.lineComment&&(comments.lineCommentToken=commentRule.lineComment),commentRule.blockComment){let[blockStart,blockEnd]=commentRule.blockComment;comments.blockCommentStartToken=blockStart,comments.blockCommentEndToken=blockEnd}return comments}}(0,extensions/* registerSingleton */.z)(ILanguageConfigurationService,LanguageConfigurationService)},
/***/305405:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
// EXPORTS
__webpack_require__.d(__webpack_exports__,{c:function(){/* binding */return LanguageFeatureRegistry},Y:function(){/* binding */return LanguageFeatureRequestDelays}});
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/event.js
var common_event=__webpack_require__(104669),hash=__webpack_require__(89954),lifecycle=__webpack_require__(905976),map=__webpack_require__(843702),numbers=__webpack_require__(159870),glob=__webpack_require__(314118),path=__webpack_require__(555336);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/hash.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/languageSelector.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function score(selector,candidateUri,candidateLanguage,candidateIsSynchronized){if(Array.isArray(selector)){
// array -> take max individual value
let ret=0;for(const filter of selector){const value=score(filter,candidateUri,candidateLanguage,candidateIsSynchronized);if(10===value)return value;// already at the highest
value>ret&&(ret=value)}return ret}if("string"===typeof selector)return candidateIsSynchronized?
// short-hand notion, desugars to
// 'fooLang' -> { language: 'fooLang'}
// '*' -> { language: '*' }
"*"===selector?5:selector===candidateLanguage?10:0:0;if(selector){
// filter -> select accordingly, use defaults for scheme
const{language:language,pattern:pattern,scheme:scheme,hasAccessToAllModels:hasAccessToAllModels}=selector;// TODO: microsoft/TypeScript#42768
if(!candidateIsSynchronized&&!hasAccessToAllModels)return 0;let ret=0;if(scheme)if(scheme===candidateUri.scheme)ret=10;else{if("*"!==scheme)return 0;ret=5}if(language)if(language===candidateLanguage)ret=10;else{if("*"!==language)return 0;ret=Math.max(ret,5)}if(pattern){let normalizedPattern;if(normalizedPattern="string"===typeof pattern?pattern:Object.assign(Object.assign({},pattern),{base:(0,path/* normalize */.Fv)(pattern.base)}),normalizedPattern!==candidateUri.fsPath&&!(0,glob/* match */.EQ)(normalizedPattern,candidateUri.fsPath))return 0;ret=10}return ret}return 0}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js
var modelService=__webpack_require__(151200);// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/languageFeatureRegistry.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function isExclusive(selector){return"string"!==typeof selector&&(Array.isArray(selector)?selector.every(isExclusive):!!selector.exclusive)}class LanguageFeatureRegistry{constructor(){this._clock=0,this._entries=[],this._onDidChange=new common_event/* Emitter */.Q5}get onDidChange(){return this._onDidChange.event}register(selector,provider){let entry={selector:selector,provider:provider,_score:-1,_time:this._clock++};return this._entries.push(entry),this._lastCandidate=void 0,this._onDidChange.fire(this._entries.length),(0,lifecycle/* toDisposable */.OF)((()=>{if(entry){let idx=this._entries.indexOf(entry);idx>=0&&(this._entries.splice(idx,1),this._lastCandidate=void 0,this._onDidChange.fire(this._entries.length),entry=void 0)}}))}has(model){return this.all(model).length>0}all(model){if(!model)return[];this._updateScores(model);const result=[];
// from registry
for(let entry of this._entries)entry._score>0&&result.push(entry.provider);return result}ordered(model){const result=[];return this._orderedForEach(model,(entry=>result.push(entry.provider))),result}orderedGroups(model){const result=[];let lastBucket,lastBucketScore;return this._orderedForEach(model,(entry=>{lastBucket&&lastBucketScore===entry._score?lastBucket.push(entry.provider):(lastBucketScore=entry._score,lastBucket=[entry.provider],result.push(lastBucket))})),result}_orderedForEach(model,callback){if(model){this._updateScores(model);for(const entry of this._entries)entry._score>0&&callback(entry)}}_updateScores(model){let candidate={uri:model.uri.toString(),language:model.getLanguageId()};if(!this._lastCandidate||this._lastCandidate.language!==candidate.language||this._lastCandidate.uri!==candidate.uri){this._lastCandidate=candidate;for(let entry of this._entries)if(entry._score=score(entry.selector,model.uri,model.getLanguageId(),(0,modelService/* shouldSynchronizeModel */.p)(model)),isExclusive(entry.selector)&&entry._score>0){
// support for one exclusive selector that overwrites
// any other selector
for(let entry of this._entries)entry._score=0;entry._score=1e3;break}
// needs sorting
this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime)}}static _compareByScoreAndTime(a,b){return a._score<b._score?1:a._score>b._score?-1:a._time<b._time?1:a._time>b._time?-1:0}}const _hashes=new WeakMap;let pool=0;function weakHash(obj){let value=_hashes.get(obj);return void 0===value&&(value=++pool,_hashes.set(obj,value)),value}
/**
 * Keeps moving average per model and set of providers so that requests
 * can be debounce according to the provider performance
 */class LanguageFeatureRequestDelays{constructor(_registry,min,max=Number.MAX_SAFE_INTEGER){this._registry=_registry,this.min=min,this.max=max,this._cache=new map/* LRUCache */.z6(50,.7)}_key(model){return model.id+this._registry.all(model).reduce(((hashVal,obj)=>(0,hash/* doHash */.SP)(weakHash(obj),hashVal)),0)}_clamp(value){return void 0===value?this.min:Math.min(this.max,Math.max(this.min,Math.floor(1.3*value)))}get(model){const key=this._key(model),avg=this._cache.get(key);return this._clamp(null===avg||void 0===avg?void 0:avg.value)}update(model,value){const key=this._key(model);let avg=this._cache.get(key);return avg||(avg=new numbers/* MovingAverage */.n,this._cache.set(key,avg)),avg.update(value),this.get(model)}}
/***/},
/***/571144:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */XT:function(){/* binding */return PLAINTEXT_MODE_ID},
/* harmony export */dQ:function(){/* binding */return ModesRegistry}
/* harmony export */});
/* unused harmony exports Extensions, EditorModesRegistry, PLAINTEXT_EXTENSION */
/* harmony import */var _nls_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(663580),_base_common_event_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(104669),_languageConfigurationRegistry_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(594660),_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(789872),_base_common_mime_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(581170);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Define extension point ids
const Extensions={ModesRegistry:"editor.modesRegistry"};class EditorModesRegistry{constructor(){this._onDidChangeLanguages=new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__/* .Emitter */.Q5,this.onDidChangeLanguages=this._onDidChangeLanguages.event,this._languages=[],this._dynamicLanguages=[]}
// --- languages
registerLanguage(def){return this._languages.push(def),this._onDidChangeLanguages.fire(void 0),{dispose:()=>{for(let i=0,len=this._languages.length;i<len;i++)if(this._languages[i]===def)return void this._languages.splice(i,1)}}}getLanguages(){return[].concat(this._languages).concat(this._dynamicLanguages)}}const ModesRegistry=new EditorModesRegistry;_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_2__/* .Registry */.B.add(Extensions.ModesRegistry,ModesRegistry);const PLAINTEXT_MODE_ID="plaintext",PLAINTEXT_EXTENSION=".txt";ModesRegistry.registerLanguage({id:PLAINTEXT_MODE_ID,extensions:[PLAINTEXT_EXTENSION],aliases:[_nls_js__WEBPACK_IMPORTED_MODULE_4__/* .localize */.N("plainText.alias","Plain Text"),"text"],mimetypes:[_base_common_mime_js__WEBPACK_IMPORTED_MODULE_3__/* .Mimes */.vW.text]}),_languageConfigurationRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .LanguageConfigurationRegistry */.zu.register(PLAINTEXT_MODE_ID,{brackets:[["(",")"],["[","]"],["{","}"]],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"<",close:">"},{open:'"',close:'"'},{open:"'",close:"'"},{open:"`",close:"`"}],colorizedBracketPairs:[],folding:{offSide:!0}},0)},
/***/428111:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */Ri:function(){/* binding */return nullTokenize},
/* harmony export */TG:function(){/* binding */return NULL_MODE_ID},
/* harmony export */mh:function(){/* binding */return nullTokenize2},
/* harmony export */nO:function(){/* binding */return NULL_STATE}
/* harmony export */});
/* harmony import */var _core_token_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(85600);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/class NullStateImpl{clone(){return this}equals(other){return this===other}}const NULL_STATE=new NullStateImpl,NULL_MODE_ID="vs.editor.nullMode";function nullTokenize(languageId,buffer,state,deltaOffset){return new _core_token_js__WEBPACK_IMPORTED_MODULE_0__/* .TokenizationResult */.hG([new _core_token_js__WEBPACK_IMPORTED_MODULE_0__/* .Token */.WU(deltaOffset,"",languageId)],state)}function nullTokenize2(languageId,buffer,state,deltaOffset){let tokens=new Uint32Array(2);return tokens[0]=deltaOffset,tokens[1]=(16384/* FOREGROUND_OFFSET */|languageId<<0/* LANGUAGEID_OFFSET */|2/* DefaultBackground */<<23/* BACKGROUND_OFFSET */)>>>0,new _core_token_js__WEBPACK_IMPORTED_MODULE_0__/* .TokenizationResult2 */.Hi(tokens,null===state?NULL_STATE:state)}
/***/},
/***/640764:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* unused harmony export ScopedLineTokens */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function createScopedLineTokens(context,offset){let tokenCount=context.getCount(),tokenIndex=context.findTokenIndexAtOffset(offset),desiredLanguageId=context.getLanguageId(tokenIndex),lastTokenIndex=tokenIndex;while(lastTokenIndex+1<tokenCount&&context.getLanguageId(lastTokenIndex+1)===desiredLanguageId)lastTokenIndex++;let firstTokenIndex=tokenIndex;while(firstTokenIndex>0&&context.getLanguageId(firstTokenIndex-1)===desiredLanguageId)firstTokenIndex--;return new ScopedLineTokens(context,desiredLanguageId,firstTokenIndex,lastTokenIndex+1,context.getStartOffset(firstTokenIndex),context.getEndOffset(lastTokenIndex))}
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */Bu:function(){/* binding */return ignoreBracketsInToken},
/* harmony export */wH:function(){/* binding */return createScopedLineTokens}
/* harmony export */});class ScopedLineTokens{constructor(actual,languageId,firstTokenIndex,lastTokenIndex,firstCharOffset,lastCharOffset){this._scopedLineTokensBrand=void 0,this._actual=actual,this.languageId=languageId,this._firstTokenIndex=firstTokenIndex,this._lastTokenIndex=lastTokenIndex,this.firstCharOffset=firstCharOffset,this._lastCharOffset=lastCharOffset}getLineContent(){const actualLineContent=this._actual.getLineContent();return actualLineContent.substring(this.firstCharOffset,this._lastCharOffset)}getActualLineContentBefore(offset){const actualLineContent=this._actual.getLineContent();return actualLineContent.substring(0,this.firstCharOffset+offset)}getTokenCount(){return this._lastTokenIndex-this._firstTokenIndex}findTokenIndexAtOffset(offset){return this._actual.findTokenIndexAtOffset(offset+this.firstCharOffset)-this._firstTokenIndex}getStandardTokenType(tokenIndex){return this._actual.getStandardTokenType(tokenIndex+this._firstTokenIndex)}}function ignoreBracketsInToken(standardTokenType){return 0!==(7/* value */&standardTokenType)}
/***/},
/***/134227:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */EA:function(){/* binding */return RichEditBrackets},
/* harmony export */Vr:function(){/* binding */return BracketsUtils}
/* harmony export */});
/* unused harmony export RichEditBracket */
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295),_core_stringBuilder_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(150072),_core_range_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(624314);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Represents a grouping of colliding bracket pairs.
 *
 * Most of the times this contains a single bracket pair,
 * but sometimes this contains multiple bracket pairs in cases
 * where the same string appears as a closing bracket for multiple
 * bracket pairs, or the same string appears an opening bracket for
 * multiple bracket pairs.
 *
 * e.g. of a group containing a single pair:
 *   open: ['{'], close: ['}']
 *
 * e.g. of a group containing multiple pairs:
 *   open: ['if', 'for'], close: ['end', 'end']
 */
class RichEditBracket{constructor(languageId,index,open,close,forwardRegex,reversedRegex){this._richEditBracketBrand=void 0,this.languageId=languageId,this.index=index,this.open=open,this.close=close,this.forwardRegex=forwardRegex,this.reversedRegex=reversedRegex,this._openSet=RichEditBracket._toSet(this.open),this._closeSet=RichEditBracket._toSet(this.close)}
/**
     * Check if the provided `text` is an open bracket in this group.
     */isOpen(text){return this._openSet.has(text)}
/**
     * Check if the provided `text` is a close bracket in this group.
     */isClose(text){return this._closeSet.has(text)}static _toSet(arr){const result=new Set;for(const element of arr)result.add(element);return result}}
/**
 * Groups together brackets that have equal open or close sequences.
 *
 * For example, if the following brackets are defined:
 *   ['IF','END']
 *   ['for','end']
 *   ['{','}']
 *
 * Then the grouped brackets would be:
 *   { open: ['if', 'for'], close: ['end', 'end'] }
 *   { open: ['{'], close: ['}'] }
 *
 */function groupFuzzyBrackets(brackets){const N=brackets.length;brackets=brackets.map((b=>[b[0].toLowerCase(),b[1].toLowerCase()]));const group=[];for(let i=0;i<N;i++)group[i]=i;const areOverlapping=(a,b)=>{const[aOpen,aClose]=a,[bOpen,bClose]=b;return aOpen===bOpen||aOpen===bClose||aClose===bOpen||aClose===bClose},mergeGroups=(g1,g2)=>{const newG=Math.min(g1,g2),oldG=Math.max(g1,g2);for(let i=0;i<N;i++)group[i]===oldG&&(group[i]=newG)};
// group together brackets that have the same open or the same close sequence
for(let i=0;i<N;i++){const a=brackets[i];for(let j=i+1;j<N;j++){const b=brackets[j];areOverlapping(a,b)&&mergeGroups(group[i],group[j])}}const result=[];for(let g=0;g<N;g++){let currentOpen=[],currentClose=[];for(let i=0;i<N;i++)if(group[i]===g){const[open,close]=brackets[i];currentOpen.push(open),currentClose.push(close)}currentOpen.length>0&&result.push({open:currentOpen,close:currentClose})}return result}class RichEditBrackets{constructor(languageId,_brackets){this._richEditBracketsBrand=void 0;const brackets=groupFuzzyBrackets(_brackets);this.brackets=brackets.map(((b,index)=>new RichEditBracket(languageId,index,b.open,b.close,getRegexForBracketPair(b.open,b.close,brackets,index),getReversedRegexForBracketPair(b.open,b.close,brackets,index)))),this.forwardRegex=getRegexForBrackets(this.brackets),this.reversedRegex=getReversedRegexForBrackets(this.brackets),this.textIsBracket={},this.textIsOpenBracket={},this.maxBracketLength=0;for(const bracket of this.brackets){for(const open of bracket.open)this.textIsBracket[open]=bracket,this.textIsOpenBracket[open]=!0,this.maxBracketLength=Math.max(this.maxBracketLength,open.length);for(const close of bracket.close)this.textIsBracket[close]=bracket,this.textIsOpenBracket[close]=!1,this.maxBracketLength=Math.max(this.maxBracketLength,close.length)}}}function collectSuperstrings(str,brackets,currentIndex,dest){for(let i=0,len=brackets.length;i<len;i++){if(i===currentIndex)continue;const bracket=brackets[i];for(const open of bracket.open)open.indexOf(str)>=0&&dest.push(open);for(const close of bracket.close)close.indexOf(str)>=0&&dest.push(close)}}function lengthcmp(a,b){return a.length-b.length}function unique(arr){if(arr.length<=1)return arr;const result=[],seen=new Set;for(const element of arr)seen.has(element)||(result.push(element),seen.add(element));return result}
/**
 * Create a regular expression that can be used to search forward in a piece of text
 * for a group of bracket pairs. But this regex must be built in a way in which
 * it is aware of the other bracket pairs defined for the language.
 *
 * For example, if a language contains the following bracket pairs:
 *   ['begin', 'end']
 *   ['if', 'end if']
 * The two bracket pairs do not collide because no open or close brackets are equal.
 * So the function getRegexForBracketPair is called twice, once with
 * the ['begin'], ['end'] group consisting of one bracket pair, and once with
 * the ['if'], ['end if'] group consiting of the other bracket pair.
 *
 * But there could be a situation where an occurrence of 'end if' is mistaken
 * for an occurrence of 'end'.
 *
 * Therefore, for the bracket pair ['begin', 'end'], the regex will also
 * target 'end if'. The regex will be something like:
 *   /(\bend if\b)|(\bend\b)|(\bif\b)/
 *
 * The regex also searches for "superstrings" (other brackets that might be mistaken with the current bracket).
 *
 */function getRegexForBracketPair(open,close,brackets,currentIndex){
// search in all brackets for other brackets that are a superstring of these brackets
let pieces=[];pieces=pieces.concat(open),pieces=pieces.concat(close);for(let i=0,len=pieces.length;i<len;i++)collectSuperstrings(pieces[i],brackets,currentIndex,pieces);return pieces=unique(pieces),pieces.sort(lengthcmp),pieces.reverse(),createBracketOrRegExp(pieces)}
/**
 * Matching a regular expression in JS can only be done "forwards". So JS offers natively only
 * methods to find the first match of a regex in a string. But sometimes, it is useful to
 * find the last match of a regex in a string. For such a situation, a nice solution is to
 * simply reverse the string and then search for a reversed regex.
 *
 * This function also has the fine details of `getRegexForBracketPair`. For the same example
 * given above, the regex produced here would look like:
 *   /(\bfi dne\b)|(\bdne\b)|(\bfi\b)/
 */function getReversedRegexForBracketPair(open,close,brackets,currentIndex){
// search in all brackets for other brackets that are a superstring of these brackets
let pieces=[];pieces=pieces.concat(open),pieces=pieces.concat(close);for(let i=0,len=pieces.length;i<len;i++)collectSuperstrings(pieces[i],brackets,currentIndex,pieces);return pieces=unique(pieces),pieces.sort(lengthcmp),pieces.reverse(),createBracketOrRegExp(pieces.map(toReversedString))}
/**
 * Creates a regular expression that targets all bracket pairs.
 *
 * e.g. for the bracket pairs:
 *  ['{','}']
 *  ['begin,'end']
 *  ['for','end']
 * the regex would look like:
 *  /(\{)|(\})|(\bbegin\b)|(\bend\b)|(\bfor\b)/
 */function getRegexForBrackets(brackets){let pieces=[];for(const bracket of brackets){for(const open of bracket.open)pieces.push(open);for(const close of bracket.close)pieces.push(close)}return pieces=unique(pieces),createBracketOrRegExp(pieces)}
/**
 * Matching a regular expression in JS can only be done "forwards". So JS offers natively only
 * methods to find the first match of a regex in a string. But sometimes, it is useful to
 * find the last match of a regex in a string. For such a situation, a nice solution is to
 * simply reverse the string and then search for a reversed regex.
 *
 * e.g. for the bracket pairs:
 *  ['{','}']
 *  ['begin,'end']
 *  ['for','end']
 * the regex would look like:
 *  /(\{)|(\})|(\bnigeb\b)|(\bdne\b)|(\brof\b)/
 */function getReversedRegexForBrackets(brackets){let pieces=[];for(const bracket of brackets){for(const open of bracket.open)pieces.push(open);for(const close of bracket.close)pieces.push(close)}return pieces=unique(pieces),createBracketOrRegExp(pieces.map(toReversedString))}function prepareBracketForRegExp(str){
// This bracket pair uses letters like e.g. "begin" - "end"
const insertWordBoundaries=/^[\w ]+$/.test(str);return str=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .escapeRegExpCharacters */.ec(str),insertWordBoundaries?`\\b${str}\\b`:str}function createBracketOrRegExp(pieces){let regexStr=`(${pieces.map(prepareBracketForRegExp).join(")|(")})`;return _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .createRegExp */.GF(regexStr,!0)}const toReversedString=function(){function reverse(str){if(_core_stringBuilder_js__WEBPACK_IMPORTED_MODULE_1__/* .hasTextDecoder */.lZ){
// create a Uint16Array and then use a TextDecoder to create a string
const arr=new Uint16Array(str.length);let offset=0;for(let i=str.length-1;i>=0;i--)arr[offset++]=str.charCodeAt(i);return _core_stringBuilder_js__WEBPACK_IMPORTED_MODULE_1__/* .getPlatformTextDecoder */.oe().decode(arr)}{let result=[],resultLen=0;for(let i=str.length-1;i>=0;i--)result[resultLen++]=str.charAt(i);return result.join("")}}let lastInput=null,lastOutput=null;return function(str){return lastInput!==str&&(lastInput=str,lastOutput=reverse(lastInput)),lastOutput}}();class BracketsUtils{static _findPrevBracketInText(reversedBracketRegex,lineNumber,reversedText,offset){let m=reversedText.match(reversedBracketRegex);if(!m)return null;let matchOffset=reversedText.length-(m.index||0),matchLength=m[0].length,absoluteMatchOffset=offset+matchOffset;return new _core_range_js__WEBPACK_IMPORTED_MODULE_2__/* .Range */.e(lineNumber,absoluteMatchOffset-matchLength+1,lineNumber,absoluteMatchOffset+1)}static findPrevBracketInRange(reversedBracketRegex,lineNumber,lineText,startOffset,endOffset){
// Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)
const reversedLineText=toReversedString(lineText),reversedSubstr=reversedLineText.substring(lineText.length-endOffset,lineText.length-startOffset);return this._findPrevBracketInText(reversedBracketRegex,lineNumber,reversedSubstr,startOffset)}static findNextBracketInText(bracketRegex,lineNumber,text,offset){let m=text.match(bracketRegex);if(!m)return null;let matchOffset=m.index||0,matchLength=m[0].length;if(0===matchLength)return null;let absoluteMatchOffset=offset+matchOffset;return new _core_range_js__WEBPACK_IMPORTED_MODULE_2__/* .Range */.e(lineNumber,absoluteMatchOffset+1,lineNumber,absoluteMatchOffset+1+matchLength)}static findNextBracketInRange(bracketRegex,lineNumber,lineText,startOffset,endOffset){const substr=lineText.substring(startOffset,endOffset);return this.findNextBracketInText(bracketRegex,lineNumber,substr,startOffset)}}
/***/},
/***/596885:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */si:function(){/* binding */return TokenTheme},
/* harmony export */yr:function(){/* binding */return generateTokensCSSForColorMap}
/* harmony export */});
/* unused harmony exports ParsedTokenThemeRule, parseTokenTheme, ColorMap, toStandardTokenType, strcmp, ThemeTrieElementRule, ThemeTrieElement */
/* harmony import */var _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(41264);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/class ParsedTokenThemeRule{constructor(token,index,fontStyle,foreground,background){this._parsedThemeRuleBrand=void 0,this.token=token,this.index=index,this.fontStyle=fontStyle,this.foreground=foreground,this.background=background}}
/**
 * Parse a raw theme into rules.
 */function parseTokenTheme(source){if(!source||!Array.isArray(source))return[];let result=[],resultLen=0;for(let i=0,len=source.length;i<len;i++){let entry=source[i],fontStyle=-1/* NotSet */;if("string"===typeof entry.fontStyle){fontStyle=0/* None */;let segments=entry.fontStyle.split(" ");for(let j=0,lenJ=segments.length;j<lenJ;j++){let segment=segments[j];switch(segment){case"italic":fontStyle|=1/* Italic */;break;case"bold":fontStyle|=2/* Bold */;break;case"underline":fontStyle|=4/* Underline */;break}}}let foreground=null;"string"===typeof entry.foreground&&(foreground=entry.foreground);let background=null;"string"===typeof entry.background&&(background=entry.background),result[resultLen++]=new ParsedTokenThemeRule(entry.token||"",i,fontStyle,foreground,background)}return result}
/**
 * Resolve rules (i.e. inheritance).
 */function resolveParsedTokenThemeRules(parsedThemeRules,customTokenColors){
// Sort rules lexicographically, and then by index if necessary
parsedThemeRules.sort(((a,b)=>{let r=strcmp(a.token,b.token);return 0!==r?r:a.index-b.index}));
// Determine defaults
let defaultFontStyle=0/* None */,defaultForeground="000000",defaultBackground="ffffff";while(parsedThemeRules.length>=1&&""===parsedThemeRules[0].token){let incomingDefaults=parsedThemeRules.shift();-1/* NotSet */!==incomingDefaults.fontStyle&&(defaultFontStyle=incomingDefaults.fontStyle),null!==incomingDefaults.foreground&&(defaultForeground=incomingDefaults.foreground),null!==incomingDefaults.background&&(defaultBackground=incomingDefaults.background)}let colorMap=new ColorMap;
// start with token colors from custom token themes
for(let color of customTokenColors)colorMap.getId(color);let foregroundColorId=colorMap.getId(defaultForeground),backgroundColorId=colorMap.getId(defaultBackground),defaults=new ThemeTrieElementRule(defaultFontStyle,foregroundColorId,backgroundColorId),root=new ThemeTrieElement(defaults);for(let i=0,len=parsedThemeRules.length;i<len;i++){let rule=parsedThemeRules[i];root.insert(rule.token,rule.fontStyle,colorMap.getId(rule.foreground),colorMap.getId(rule.background))}return new TokenTheme(colorMap,root)}const colorRegExp=/^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;class ColorMap{constructor(){this._lastColorId=0,this._id2color=[],this._color2id=new Map}getId(color){if(null===color)return 0;const match=color.match(colorRegExp);if(!match)throw new Error("Illegal value for token color: "+color);color=match[1].toUpperCase();let value=this._color2id.get(color);return value||(value=++this._lastColorId,this._color2id.set(color,value),this._id2color[value]=_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.fromHex("#"+color),value)}getColorMap(){return this._id2color.slice(0)}}class TokenTheme{constructor(colorMap,root){this._colorMap=colorMap,this._root=root,this._cache=new Map}static createFromRawTokenTheme(source,customTokenColors){return this.createFromParsedTokenTheme(parseTokenTheme(source),customTokenColors)}static createFromParsedTokenTheme(source,customTokenColors){return resolveParsedTokenThemeRules(source,customTokenColors)}getColorMap(){return this._colorMap.getColorMap()}_match(token){return this._root.match(token)}match(languageId,token){
// The cache contains the metadata without the language bits set.
let result=this._cache.get(token);if("undefined"===typeof result){let rule=this._match(token),standardToken=toStandardTokenType(token);result=(rule.metadata|standardToken<<8/* TOKEN_TYPE_OFFSET */)>>>0,this._cache.set(token,result)}return(result|languageId<<0/* LANGUAGEID_OFFSET */)>>>0}}const STANDARD_TOKEN_TYPE_REGEXP=/\b(comment|string|regex|regexp)\b/;function toStandardTokenType(tokenType){let m=tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);if(!m)return 0/* Other */;switch(m[1]){case"comment":return 1/* Comment */;case"string":return 2/* String */;case"regex":return 4/* RegEx */;case"regexp":return 4/* RegEx */}throw new Error("Unexpected match for standard token type!")}function strcmp(a,b){return a<b?-1:a>b?1:0}class ThemeTrieElementRule{constructor(fontStyle,foreground,background){this._themeTrieElementRuleBrand=void 0,this._fontStyle=fontStyle,this._foreground=foreground,this._background=background,this.metadata=(this._fontStyle<<11/* FONT_STYLE_OFFSET */|this._foreground<<14/* FOREGROUND_OFFSET */|this._background<<23/* BACKGROUND_OFFSET */)>>>0}clone(){return new ThemeTrieElementRule(this._fontStyle,this._foreground,this._background)}acceptOverwrite(fontStyle,foreground,background){-1/* NotSet */!==fontStyle&&(this._fontStyle=fontStyle),0/* None */!==foreground&&(this._foreground=foreground),0/* None */!==background&&(this._background=background),this.metadata=(this._fontStyle<<11/* FONT_STYLE_OFFSET */|this._foreground<<14/* FOREGROUND_OFFSET */|this._background<<23/* BACKGROUND_OFFSET */)>>>0}}class ThemeTrieElement{constructor(mainRule){this._themeTrieElementBrand=void 0,this._mainRule=mainRule,this._children=new Map}match(token){if(""===token)return this._mainRule;let head,tail,dotIndex=token.indexOf(".");-1===dotIndex?(head=token,tail=""):(head=token.substring(0,dotIndex),tail=token.substring(dotIndex+1));let child=this._children.get(head);return"undefined"!==typeof child?child.match(tail):this._mainRule}insert(token,fontStyle,foreground,background){if(""===token)
// Merge into the main rule
return void this._mainRule.acceptOverwrite(fontStyle,foreground,background);let head,tail,dotIndex=token.indexOf(".");-1===dotIndex?(head=token,tail=""):(head=token.substring(0,dotIndex),tail=token.substring(dotIndex+1));let child=this._children.get(head);"undefined"===typeof child&&(child=new ThemeTrieElement(this._mainRule.clone()),this._children.set(head,child)),child.insert(tail,fontStyle,foreground,background)}}function generateTokensCSSForColorMap(colorMap){let rules=[];for(let i=1,len=colorMap.length;i<len;i++){let color=colorMap[i];rules[i]=`.mtk${i} { color: ${color}; }`}return rules.push(".mtki { font-style: italic; }"),rules.push(".mtkb { font-weight: bold; }"),rules.push(".mtku { text-decoration: underline; text-underline-position: under; }"),rules.join("\n")}
/***/},
/***/955713:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */C:function(){/* binding */return tokenizeToString},
/* harmony export */F:function(){/* binding */return tokenizeLineToHTML}
/* harmony export */});
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295),_core_lineTokens_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(878411),_nullMode_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(428111);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const fallback={getInitialState:()=>_nullMode_js__WEBPACK_IMPORTED_MODULE_2__/* .NULL_STATE */.nO,tokenize2:(buffer,hasEOL,state,deltaOffset)=>(0,_nullMode_js__WEBPACK_IMPORTED_MODULE_2__/* .nullTokenize2 */.mh)(0/* Null */,buffer,state,deltaOffset)};function tokenizeToString(text,languageIdCodec,tokenizationSupport=fallback){return _tokenizeToString(text,languageIdCodec,tokenizationSupport||fallback)}function tokenizeLineToHTML(text,viewLineTokens,colorMap,startOffset,endOffset,tabSize,useNbsp){let result="<div>",charIndex=startOffset,tabsCharDelta=0,prevIsSpace=!0;for(let tokenIndex=0,tokenCount=viewLineTokens.getCount();tokenIndex<tokenCount;tokenIndex++){const tokenEndIndex=viewLineTokens.getEndOffset(tokenIndex);if(tokenEndIndex<=startOffset)continue;let partContent="";for(;charIndex<tokenEndIndex&&charIndex<endOffset;charIndex++){const charCode=text.charCodeAt(charIndex);switch(charCode){case 9/* Tab */:let insertSpacesCount=tabSize-(charIndex+tabsCharDelta)%tabSize;tabsCharDelta+=insertSpacesCount-1;while(insertSpacesCount>0)useNbsp&&prevIsSpace?(partContent+="&#160;",prevIsSpace=!1):(partContent+=" ",prevIsSpace=!0),insertSpacesCount--;break;case 60/* LessThan */:partContent+="&lt;",prevIsSpace=!1;break;case 62/* GreaterThan */:partContent+="&gt;",prevIsSpace=!1;break;case 38/* Ampersand */:partContent+="&amp;",prevIsSpace=!1;break;case 0/* Null */:partContent+="&#00;",prevIsSpace=!1;break;case 65279/* UTF8_BOM */:case 8232/* LINE_SEPARATOR */:case 8233/* PARAGRAPH_SEPARATOR */:case 133/* NEXT_LINE */:partContent+="�",prevIsSpace=!1;break;case 13/* CarriageReturn */:
// zero width space, because carriage return would introduce a line break
partContent+="&#8203",prevIsSpace=!1;break;case 32/* Space */:useNbsp&&prevIsSpace?(partContent+="&#160;",prevIsSpace=!1):(partContent+=" ",prevIsSpace=!0);break;default:partContent+=String.fromCharCode(charCode),prevIsSpace=!1}}if(result+=`<span style="${viewLineTokens.getInlineStyle(tokenIndex,colorMap)}">${partContent}</span>`,tokenEndIndex>endOffset||charIndex>=endOffset)break}return result+="</div>",result}function _tokenizeToString(text,languageIdCodec,tokenizationSupport){let result='<div class="monaco-tokenized-source">';const lines=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .splitLines */.uq(text);let currentState=tokenizationSupport.getInitialState();for(let i=0,len=lines.length;i<len;i++){const line=lines[i];i>0&&(result+="<br/>");const tokenizationResult=tokenizationSupport.tokenize2(line,!0,currentState,0);_core_lineTokens_js__WEBPACK_IMPORTED_MODULE_1__/* .LineTokens */.A.convertToEndOffset(tokenizationResult.tokens,line.length);const lineTokens=new _core_lineTokens_js__WEBPACK_IMPORTED_MODULE_1__/* .LineTokens */.A(tokenizationResult.tokens,line,languageIdCodec),viewLineTokens=lineTokens.inflate();let startOffset=0;for(let j=0,lenJ=viewLineTokens.getCount();j<lenJ;j++){const type=viewLineTokens.getClassName(j),endIndex=viewLineTokens.getEndOffset(j);result+=`<span class="${type}">${_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .escape */.YU(line.substring(startOffset,endIndex))}</span>`,startOffset=endIndex}currentState=tokenizationResult.endState}return result+="</div>",result}
/***/},
/***/590469:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */p:function(){/* binding */return IEditorWorkerService}
/* harmony export */});
/* unused harmony export ID_EDITOR_WORKER_SERVICE */
/* harmony import */var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(472065);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/const ID_EDITOR_WORKER_SERVICE="editorWorkerService",IEditorWorkerService=(0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__/* .createDecorator */.yh)(ID_EDITOR_WORKER_SERVICE)},
/***/87689:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
// EXPORTS
__webpack_require__.d(__webpack_exports__,{Q8:function(){/* binding */return EditorWorkerClient},dI:function(){/* binding */return EditorWorkerServiceImpl}});
// UNUSED EXPORTS: EditorWorkerHost
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/async.js
var common_async=__webpack_require__(715393),lifecycle=__webpack_require__(905976),simpleWorker=__webpack_require__(318352),defaultWorkerFactory=__webpack_require__(517549),core_range=__webpack_require__(624314),modes=__webpack_require__(860303),languageConfigurationRegistry=__webpack_require__(594660),diff=__webpack_require__(722571),platform=__webpack_require__(901432),uri=__webpack_require__(70666),core_position=__webpack_require__(50187),strings=__webpack_require__(697295);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const MINIMUM_MATCHING_CHARACTER_LENGTH=3;function computeDiff(originalSequence,modifiedSequence,continueProcessingPredicate,pretty){const diffAlgo=new diff/* LcsDiff */.Hs(originalSequence,modifiedSequence,continueProcessingPredicate);return diffAlgo.ComputeDiff(pretty)}class LineSequence{constructor(lines){const startColumns=[],endColumns=[];for(let i=0,length=lines.length;i<length;i++)startColumns[i]=getFirstNonBlankColumn(lines[i],1),endColumns[i]=getLastNonBlankColumn(lines[i],1);this.lines=lines,this._startColumns=startColumns,this._endColumns=endColumns}getElements(){const elements=[];for(let i=0,len=this.lines.length;i<len;i++)elements[i]=this.lines[i].substring(this._startColumns[i]-1,this._endColumns[i]-1);return elements}getStrictElement(index){return this.lines[index]}getStartLineNumber(i){return i+1}getEndLineNumber(i){return i+1}createCharSequence(shouldIgnoreTrimWhitespace,startIndex,endIndex){const charCodes=[],lineNumbers=[],columns=[];let len=0;for(let index=startIndex;index<=endIndex;index++){const lineContent=this.lines[index],startColumn=shouldIgnoreTrimWhitespace?this._startColumns[index]:1,endColumn=shouldIgnoreTrimWhitespace?this._endColumns[index]:lineContent.length+1;for(let col=startColumn;col<endColumn;col++)charCodes[len]=lineContent.charCodeAt(col-1),lineNumbers[len]=index+1,columns[len]=col,len++}return new CharSequence(charCodes,lineNumbers,columns)}}class CharSequence{constructor(charCodes,lineNumbers,columns){this._charCodes=charCodes,this._lineNumbers=lineNumbers,this._columns=columns}getElements(){return this._charCodes}getStartLineNumber(i){return this._lineNumbers[i]}getStartColumn(i){return this._columns[i]}getEndLineNumber(i){return this._lineNumbers[i]}getEndColumn(i){return this._columns[i]+1}}class CharChange{constructor(originalStartLineNumber,originalStartColumn,originalEndLineNumber,originalEndColumn,modifiedStartLineNumber,modifiedStartColumn,modifiedEndLineNumber,modifiedEndColumn){this.originalStartLineNumber=originalStartLineNumber,this.originalStartColumn=originalStartColumn,this.originalEndLineNumber=originalEndLineNumber,this.originalEndColumn=originalEndColumn,this.modifiedStartLineNumber=modifiedStartLineNumber,this.modifiedStartColumn=modifiedStartColumn,this.modifiedEndLineNumber=modifiedEndLineNumber,this.modifiedEndColumn=modifiedEndColumn}static createFromDiffChange(diffChange,originalCharSequence,modifiedCharSequence){let originalStartLineNumber,originalStartColumn,originalEndLineNumber,originalEndColumn,modifiedStartLineNumber,modifiedStartColumn,modifiedEndLineNumber,modifiedEndColumn;return 0===diffChange.originalLength?(originalStartLineNumber=0,originalStartColumn=0,originalEndLineNumber=0,originalEndColumn=0):(originalStartLineNumber=originalCharSequence.getStartLineNumber(diffChange.originalStart),originalStartColumn=originalCharSequence.getStartColumn(diffChange.originalStart),originalEndLineNumber=originalCharSequence.getEndLineNumber(diffChange.originalStart+diffChange.originalLength-1),originalEndColumn=originalCharSequence.getEndColumn(diffChange.originalStart+diffChange.originalLength-1)),0===diffChange.modifiedLength?(modifiedStartLineNumber=0,modifiedStartColumn=0,modifiedEndLineNumber=0,modifiedEndColumn=0):(modifiedStartLineNumber=modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart),modifiedStartColumn=modifiedCharSequence.getStartColumn(diffChange.modifiedStart),modifiedEndLineNumber=modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart+diffChange.modifiedLength-1),modifiedEndColumn=modifiedCharSequence.getEndColumn(diffChange.modifiedStart+diffChange.modifiedLength-1)),new CharChange(originalStartLineNumber,originalStartColumn,originalEndLineNumber,originalEndColumn,modifiedStartLineNumber,modifiedStartColumn,modifiedEndLineNumber,modifiedEndColumn)}}function postProcessCharChanges(rawChanges){if(rawChanges.length<=1)return rawChanges;const result=[rawChanges[0]];let prevChange=result[0];for(let i=1,len=rawChanges.length;i<len;i++){const currChange=rawChanges[i],originalMatchingLength=currChange.originalStart-(prevChange.originalStart+prevChange.originalLength),modifiedMatchingLength=currChange.modifiedStart-(prevChange.modifiedStart+prevChange.modifiedLength),matchingLength=Math.min(originalMatchingLength,modifiedMatchingLength);matchingLength<MINIMUM_MATCHING_CHARACTER_LENGTH?(
// Merge the current change into the previous one
prevChange.originalLength=currChange.originalStart+currChange.originalLength-prevChange.originalStart,prevChange.modifiedLength=currChange.modifiedStart+currChange.modifiedLength-prevChange.modifiedStart):(
// Add the current change
result.push(currChange),prevChange=currChange)}return result}class LineChange{constructor(originalStartLineNumber,originalEndLineNumber,modifiedStartLineNumber,modifiedEndLineNumber,charChanges){this.originalStartLineNumber=originalStartLineNumber,this.originalEndLineNumber=originalEndLineNumber,this.modifiedStartLineNumber=modifiedStartLineNumber,this.modifiedEndLineNumber=modifiedEndLineNumber,this.charChanges=charChanges}static createFromDiffResult(shouldIgnoreTrimWhitespace,diffChange,originalLineSequence,modifiedLineSequence,continueCharDiff,shouldComputeCharChanges,shouldPostProcessCharChanges){let originalStartLineNumber,originalEndLineNumber,modifiedStartLineNumber,modifiedEndLineNumber,charChanges;if(0===diffChange.originalLength?(originalStartLineNumber=originalLineSequence.getStartLineNumber(diffChange.originalStart)-1,originalEndLineNumber=0):(originalStartLineNumber=originalLineSequence.getStartLineNumber(diffChange.originalStart),originalEndLineNumber=originalLineSequence.getEndLineNumber(diffChange.originalStart+diffChange.originalLength-1)),0===diffChange.modifiedLength?(modifiedStartLineNumber=modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart)-1,modifiedEndLineNumber=0):(modifiedStartLineNumber=modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart),modifiedEndLineNumber=modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart+diffChange.modifiedLength-1)),shouldComputeCharChanges&&diffChange.originalLength>0&&diffChange.originalLength<20&&diffChange.modifiedLength>0&&diffChange.modifiedLength<20&&continueCharDiff()){
// Compute character changes for diff chunks of at most 20 lines...
const originalCharSequence=originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace,diffChange.originalStart,diffChange.originalStart+diffChange.originalLength-1),modifiedCharSequence=modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace,diffChange.modifiedStart,diffChange.modifiedStart+diffChange.modifiedLength-1);let rawChanges=computeDiff(originalCharSequence,modifiedCharSequence,continueCharDiff,!0).changes;shouldPostProcessCharChanges&&(rawChanges=postProcessCharChanges(rawChanges)),charChanges=[];for(let i=0,length=rawChanges.length;i<length;i++)charChanges.push(CharChange.createFromDiffChange(rawChanges[i],originalCharSequence,modifiedCharSequence))}return new LineChange(originalStartLineNumber,originalEndLineNumber,modifiedStartLineNumber,modifiedEndLineNumber,charChanges)}}class DiffComputer{constructor(originalLines,modifiedLines,opts){this.shouldComputeCharChanges=opts.shouldComputeCharChanges,this.shouldPostProcessCharChanges=opts.shouldPostProcessCharChanges,this.shouldIgnoreTrimWhitespace=opts.shouldIgnoreTrimWhitespace,this.shouldMakePrettyDiff=opts.shouldMakePrettyDiff,this.originalLines=originalLines,this.modifiedLines=modifiedLines,this.original=new LineSequence(originalLines),this.modified=new LineSequence(modifiedLines),this.continueLineDiff=createContinueProcessingPredicate(opts.maxComputationTime),this.continueCharDiff=createContinueProcessingPredicate(0===opts.maxComputationTime?0:Math.min(opts.maxComputationTime,5e3))}computeDiff(){if(1===this.original.lines.length&&0===this.original.lines[0].length)
// empty original => fast path
return 1===this.modified.lines.length&&0===this.modified.lines[0].length?{quitEarly:!1,changes:[]}:{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:1,modifiedStartLineNumber:1,modifiedEndLineNumber:this.modified.lines.length,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}]};if(1===this.modified.lines.length&&0===this.modified.lines[0].length)
// empty modified => fast path
return{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:this.original.lines.length,modifiedStartLineNumber:1,modifiedEndLineNumber:1,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}]};const diffResult=computeDiff(this.original,this.modified,this.continueLineDiff,this.shouldMakePrettyDiff),rawChanges=diffResult.changes,quitEarly=diffResult.quitEarly;
// The diff is always computed with ignoring trim whitespace
// This ensures we get the prettiest diff
if(this.shouldIgnoreTrimWhitespace){const lineChanges=[];for(let i=0,length=rawChanges.length;i<length;i++)lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace,rawChanges[i],this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges));return{quitEarly:quitEarly,changes:lineChanges}}
// Need to post-process and introduce changes where the trim whitespace is different
// Note that we are looping starting at -1 to also cover the lines before the first change
const result=[];let originalLineIndex=0,modifiedLineIndex=0;for(let i=-1/* !!!! */,len=rawChanges.length;i<len;i++){const nextChange=i+1<len?rawChanges[i+1]:null,originalStop=nextChange?nextChange.originalStart:this.originalLines.length,modifiedStop=nextChange?nextChange.modifiedStart:this.modifiedLines.length;while(originalLineIndex<originalStop&&modifiedLineIndex<modifiedStop){const originalLine=this.originalLines[originalLineIndex],modifiedLine=this.modifiedLines[modifiedLineIndex];if(originalLine!==modifiedLine){
// These lines differ only in trim whitespace
// Check the leading whitespace
{let originalStartColumn=getFirstNonBlankColumn(originalLine,1),modifiedStartColumn=getFirstNonBlankColumn(modifiedLine,1);while(originalStartColumn>1&&modifiedStartColumn>1){const originalChar=originalLine.charCodeAt(originalStartColumn-2),modifiedChar=modifiedLine.charCodeAt(modifiedStartColumn-2);if(originalChar!==modifiedChar)break;originalStartColumn--,modifiedStartColumn--}(originalStartColumn>1||modifiedStartColumn>1)&&this._pushTrimWhitespaceCharChange(result,originalLineIndex+1,1,originalStartColumn,modifiedLineIndex+1,1,modifiedStartColumn)}
// Check the trailing whitespace
{let originalEndColumn=getLastNonBlankColumn(originalLine,1),modifiedEndColumn=getLastNonBlankColumn(modifiedLine,1);const originalMaxColumn=originalLine.length+1,modifiedMaxColumn=modifiedLine.length+1;while(originalEndColumn<originalMaxColumn&&modifiedEndColumn<modifiedMaxColumn){const originalChar=originalLine.charCodeAt(originalEndColumn-1),modifiedChar=originalLine.charCodeAt(modifiedEndColumn-1);if(originalChar!==modifiedChar)break;originalEndColumn++,modifiedEndColumn++}(originalEndColumn<originalMaxColumn||modifiedEndColumn<modifiedMaxColumn)&&this._pushTrimWhitespaceCharChange(result,originalLineIndex+1,originalEndColumn,originalMaxColumn,modifiedLineIndex+1,modifiedEndColumn,modifiedMaxColumn)}}originalLineIndex++,modifiedLineIndex++}nextChange&&(
// Emit the actual change
result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace,nextChange,this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges)),originalLineIndex+=nextChange.originalLength,modifiedLineIndex+=nextChange.modifiedLength)}return{quitEarly:quitEarly,changes:result}}_pushTrimWhitespaceCharChange(result,originalLineNumber,originalStartColumn,originalEndColumn,modifiedLineNumber,modifiedStartColumn,modifiedEndColumn){if(this._mergeTrimWhitespaceCharChange(result,originalLineNumber,originalStartColumn,originalEndColumn,modifiedLineNumber,modifiedStartColumn,modifiedEndColumn))
// Merged into previous
return;let charChanges;this.shouldComputeCharChanges&&(charChanges=[new CharChange(originalLineNumber,originalStartColumn,originalLineNumber,originalEndColumn,modifiedLineNumber,modifiedStartColumn,modifiedLineNumber,modifiedEndColumn)]),result.push(new LineChange(originalLineNumber,originalLineNumber,modifiedLineNumber,modifiedLineNumber,charChanges))}_mergeTrimWhitespaceCharChange(result,originalLineNumber,originalStartColumn,originalEndColumn,modifiedLineNumber,modifiedStartColumn,modifiedEndColumn){const len=result.length;if(0===len)return!1;const prevChange=result[len-1];return 0!==prevChange.originalEndLineNumber&&0!==prevChange.modifiedEndLineNumber&&(prevChange.originalEndLineNumber+1===originalLineNumber&&prevChange.modifiedEndLineNumber+1===modifiedLineNumber&&(prevChange.originalEndLineNumber=originalLineNumber,prevChange.modifiedEndLineNumber=modifiedLineNumber,this.shouldComputeCharChanges&&prevChange.charChanges&&prevChange.charChanges.push(new CharChange(originalLineNumber,originalStartColumn,originalLineNumber,originalEndColumn,modifiedLineNumber,modifiedStartColumn,modifiedLineNumber,modifiedEndColumn)),!0))}}function getFirstNonBlankColumn(txt,defaultValue){const r=strings/* firstNonWhitespaceIndex */.LC(txt);return-1===r?defaultValue:r+1}function getLastNonBlankColumn(txt,defaultValue){const r=strings/* lastNonWhitespaceIndex */.ow(txt);return-1===r?defaultValue:r+2}function createContinueProcessingPredicate(maximumRuntime){if(0===maximumRuntime)return()=>!0;const startTime=Date.now();return()=>Date.now()-startTime<maximumRuntime}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js
var prefixSumComputer=__webpack_require__(403544);// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class MirrorTextModel{constructor(uri,lines,eol,versionId){this._uri=uri,this._lines=lines,this._eol=eol,this._versionId=versionId,this._lineStarts=null,this._cachedTextValue=null}dispose(){this._lines.length=0}get version(){return this._versionId}getText(){return null===this._cachedTextValue&&(this._cachedTextValue=this._lines.join(this._eol)),this._cachedTextValue}onEvents(e){e.eol&&e.eol!==this._eol&&(this._eol=e.eol,this._lineStarts=null);
// Update my lines
const changes=e.changes;for(const change of changes)this._acceptDeleteRange(change.range),this._acceptInsertText(new core_position/* Position */.L(change.range.startLineNumber,change.range.startColumn),change.text);this._versionId=e.versionId,this._cachedTextValue=null}_ensureLineStarts(){if(!this._lineStarts){const eolLength=this._eol.length,linesLength=this._lines.length,lineStartValues=new Uint32Array(linesLength);for(let i=0;i<linesLength;i++)lineStartValues[i]=this._lines[i].length+eolLength;this._lineStarts=new prefixSumComputer/* PrefixSumComputer */.o(lineStartValues)}}
/**
     * All changes to a line's text go through this method
     */_setLineText(lineIndex,newValue){this._lines[lineIndex]=newValue,this._lineStarts&&
// update prefix sum
this._lineStarts.changeValue(lineIndex,this._lines[lineIndex].length+this._eol.length)}_acceptDeleteRange(range){if(range.startLineNumber!==range.endLineNumber)
// Take remaining text on last line and append it to remaining text on first line
this._setLineText(range.startLineNumber-1,this._lines[range.startLineNumber-1].substring(0,range.startColumn-1)+this._lines[range.endLineNumber-1].substring(range.endColumn-1)),
// Delete middle lines
this._lines.splice(range.startLineNumber,range.endLineNumber-range.startLineNumber),this._lineStarts&&
// update prefix sum
this._lineStarts.removeValues(range.startLineNumber,range.endLineNumber-range.startLineNumber);else{if(range.startColumn===range.endColumn)
// Nothing to delete
return;
// Delete text on the affected line
this._setLineText(range.startLineNumber-1,this._lines[range.startLineNumber-1].substring(0,range.startColumn-1)+this._lines[range.startLineNumber-1].substring(range.endColumn-1))}}_acceptInsertText(position,insertText){if(0===insertText.length)
// Nothing to insert
return;let insertLines=(0,strings/* splitLines */.uq)(insertText);if(1===insertLines.length)
// Inserting text on one line
return void this._setLineText(position.lineNumber-1,this._lines[position.lineNumber-1].substring(0,position.column-1)+insertLines[0]+this._lines[position.lineNumber-1].substring(position.column-1));
// Append overflowing text from first line to the end of text to insert
insertLines[insertLines.length-1]+=this._lines[position.lineNumber-1].substring(position.column-1),
// Delete overflowing text from first line and insert text on first line
this._setLineText(position.lineNumber-1,this._lines[position.lineNumber-1].substring(0,position.column-1)+insertLines[0]);
// Insert new lines & store lengths
let newLengths=new Uint32Array(insertLines.length-1);for(let i=1;i<insertLines.length;i++)this._lines.splice(position.lineNumber+i-1,0,insertLines[i]),newLengths[i-1]=insertLines[i].length+this._eol.length;this._lineStarts&&
// update prefix sum
this._lineStarts.insertValues(position.lineNumber,newLengths)}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js
var wordHelper=__webpack_require__(997461),characterClassifier=__webpack_require__(744906);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class Uint8Matrix{constructor(rows,cols,defaultValue){const data=new Uint8Array(rows*cols);for(let i=0,len=rows*cols;i<len;i++)data[i]=defaultValue;this._data=data,this.rows=rows,this.cols=cols}get(row,col){return this._data[row*this.cols+col]}set(row,col,value){this._data[row*this.cols+col]=value}}class StateMachine{constructor(edges){let maxCharCode=0,maxState=0/* Invalid */;for(let i=0,len=edges.length;i<len;i++){let[from,chCode,to]=edges[i];chCode>maxCharCode&&(maxCharCode=chCode),from>maxState&&(maxState=from),to>maxState&&(maxState=to)}maxCharCode++,maxState++;let states=new Uint8Matrix(maxState,maxCharCode,0/* Invalid */);for(let i=0,len=edges.length;i<len;i++){let[from,chCode,to]=edges[i];states.set(from,chCode,to)}this._states=states,this._maxCharCode=maxCharCode}nextState(currentState,chCode){return chCode<0||chCode>=this._maxCharCode?0/* Invalid */:this._states.get(currentState,chCode)}}
// State machine for http:// or https:// or file://
let _stateMachine=null;function getStateMachine(){return null===_stateMachine&&(_stateMachine=new StateMachine([[1/* Start */,104/* h */,2/* H */],[1/* Start */,72/* H */,2/* H */],[1/* Start */,102/* f */,6/* F */],[1/* Start */,70/* F */,6/* F */],[2/* H */,116/* t */,3/* HT */],[2/* H */,84/* T */,3/* HT */],[3/* HT */,116/* t */,4/* HTT */],[3/* HT */,84/* T */,4/* HTT */],[4/* HTT */,112/* p */,5/* HTTP */],[4/* HTT */,80/* P */,5/* HTTP */],[5/* HTTP */,115/* s */,9/* BeforeColon */],[5/* HTTP */,83/* S */,9/* BeforeColon */],[5/* HTTP */,58/* Colon */,10/* AfterColon */],[6/* F */,105/* i */,7/* FI */],[6/* F */,73/* I */,7/* FI */],[7/* FI */,108/* l */,8/* FIL */],[7/* FI */,76/* L */,8/* FIL */],[8/* FIL */,101/* e */,9/* BeforeColon */],[8/* FIL */,69/* E */,9/* BeforeColon */],[9/* BeforeColon */,58/* Colon */,10/* AfterColon */],[10/* AfterColon */,47/* Slash */,11/* AlmostThere */],[11/* AlmostThere */,47/* Slash */,12/* End */]])),_stateMachine}let _classifier=null;function getClassifier(){if(null===_classifier){_classifier=new characterClassifier/* CharacterClassifier */.N(0/* None */);const FORCE_TERMINATION_CHARACTERS=" \t<>'\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…";for(let i=0;i<FORCE_TERMINATION_CHARACTERS.length;i++)_classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i),1/* ForceTermination */);const CANNOT_END_WITH_CHARACTERS=".,;";for(let i=0;i<CANNOT_END_WITH_CHARACTERS.length;i++)_classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i),2/* CannotEndIn */)}return _classifier}class LinkComputer{static _createLink(classifier,line,lineNumber,linkBeginIndex,linkEndIndex){
// Do not allow to end link in certain characters...
let lastIncludedCharIndex=linkEndIndex-1;do{const chCode=line.charCodeAt(lastIncludedCharIndex),chClass=classifier.get(chCode);if(2/* CannotEndIn */!==chClass)break;lastIncludedCharIndex--}while(lastIncludedCharIndex>linkBeginIndex);
// Handle links enclosed in parens, square brackets and curlys.
if(linkBeginIndex>0){const charCodeBeforeLink=line.charCodeAt(linkBeginIndex-1),lastCharCodeInLink=line.charCodeAt(lastIncludedCharIndex);(40/* OpenParen */===charCodeBeforeLink&&41/* CloseParen */===lastCharCodeInLink||91/* OpenSquareBracket */===charCodeBeforeLink&&93/* CloseSquareBracket */===lastCharCodeInLink||123/* OpenCurlyBrace */===charCodeBeforeLink&&125/* CloseCurlyBrace */===lastCharCodeInLink)&&
// Do not end in ) if ( is before the link start
// Do not end in ] if [ is before the link start
// Do not end in } if { is before the link start
lastIncludedCharIndex--}return{range:{startLineNumber:lineNumber,startColumn:linkBeginIndex+1,endLineNumber:lineNumber,endColumn:lastIncludedCharIndex+2},url:line.substring(linkBeginIndex,lastIncludedCharIndex+1)}}static computeLinks(model,stateMachine=getStateMachine()){const classifier=getClassifier();let result=[];for(let i=1,lineCount=model.getLineCount();i<=lineCount;i++){const line=model.getLineContent(i),len=line.length;let j=0,linkBeginIndex=0,linkBeginChCode=0,state=1/* Start */,hasOpenParens=!1,hasOpenSquareBracket=!1,inSquareBrackets=!1,hasOpenCurlyBracket=!1;while(j<len){let resetStateMachine=!1;const chCode=line.charCodeAt(j);if(13/* Accept */===state){let chClass;switch(chCode){case 40/* OpenParen */:hasOpenParens=!0,chClass=0/* None */;break;case 41/* CloseParen */:chClass=hasOpenParens?0/* None */:1/* ForceTermination */;break;case 91/* OpenSquareBracket */:inSquareBrackets=!0,hasOpenSquareBracket=!0,chClass=0/* None */;break;case 93/* CloseSquareBracket */:inSquareBrackets=!1,chClass=hasOpenSquareBracket?0/* None */:1/* ForceTermination */;break;case 123/* OpenCurlyBrace */:hasOpenCurlyBracket=!0,chClass=0/* None */;break;case 125/* CloseCurlyBrace */:chClass=hasOpenCurlyBracket?0/* None */:1/* ForceTermination */;break;
/* The following three rules make it that ' or " or ` are allowed inside links if the link began with a different one */case 39/* SingleQuote */:chClass=34/* DoubleQuote */===linkBeginChCode||96/* BackTick */===linkBeginChCode?0/* None */:1/* ForceTermination */;break;case 34/* DoubleQuote */:chClass=39/* SingleQuote */===linkBeginChCode||96/* BackTick */===linkBeginChCode?0/* None */:1/* ForceTermination */;break;case 96/* BackTick */:chClass=39/* SingleQuote */===linkBeginChCode||34/* DoubleQuote */===linkBeginChCode?0/* None */:1/* ForceTermination */;break;case 42/* Asterisk */:
// `*` terminates a link if the link began with `*`
chClass=42/* Asterisk */===linkBeginChCode?1/* ForceTermination */:0/* None */;break;case 124/* Pipe */:
// `|` terminates a link if the link began with `|`
chClass=124/* Pipe */===linkBeginChCode?1/* ForceTermination */:0/* None */;break;case 32/* Space */:
// ` ` allow space in between [ and ]
chClass=inSquareBrackets?0/* None */:1/* ForceTermination */;break;default:chClass=classifier.get(chCode)}
// Check if character terminates link
1/* ForceTermination */===chClass&&(result.push(LinkComputer._createLink(classifier,line,i,linkBeginIndex,j)),resetStateMachine=!0)}else if(12/* End */===state){let chClass;91/* OpenSquareBracket */===chCode?(
// Allow for the authority part to contain ipv6 addresses which contain [ and ]
hasOpenSquareBracket=!0,chClass=0/* None */):chClass=classifier.get(chCode),
// Check if character terminates link
1/* ForceTermination */===chClass?resetStateMachine=!0:state=13/* Accept */}else state=stateMachine.nextState(state,chCode),0/* Invalid */===state&&(resetStateMachine=!0);resetStateMachine&&(state=1/* Start */,hasOpenParens=!1,hasOpenSquareBracket=!1,hasOpenCurlyBracket=!1,
// Record where the link started
linkBeginIndex=j+1,linkBeginChCode=chCode),j++}13/* Accept */===state&&result.push(LinkComputer._createLink(classifier,line,i,linkBeginIndex,len))}return result}}
/**
 * Returns an array of all links contains in the provided
 * document. *Note* that this operation is computational
 * expensive and should not run in the UI thread.
 */function computeLinks(model){return model&&"function"===typeof model.getLineCount&&"function"===typeof model.getLineContent?LinkComputer.computeLinks(model):[]}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/inplaceReplaceSupport.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class BasicInplaceReplace{constructor(){this._defaultValueSet=[["true","false"],["True","False"],["Private","Public","Friend","ReadOnly","Partial","Protected","WriteOnly"],["public","protected","private"]]}navigateValueSet(range1,text1,range2,text2,up){if(range1&&text1){let result=this.doNavigateValueSet(text1,up);if(result)return{range:range1,value:result}}if(range2&&text2){let result=this.doNavigateValueSet(text2,up);if(result)return{range:range2,value:result}}return null}doNavigateValueSet(text,up){let numberResult=this.numberReplace(text,up);return null!==numberResult?numberResult:this.textReplace(text,up)}numberReplace(value,up){let precision=Math.pow(10,value.length-(value.lastIndexOf(".")+1)),n1=Number(value),n2=parseFloat(value);return isNaN(n1)||isNaN(n2)||n1!==n2?null:0!==n1||up?(n1=Math.floor(n1*precision),n1+=up?precision:-precision,String(n1/precision)):null}textReplace(value,up){return this.valueSetsReplace(this._defaultValueSet,value,up)}valueSetsReplace(valueSets,value,up){let result=null;for(let i=0,len=valueSets.length;null===result&&i<len;i++)result=this.valueSetReplace(valueSets[i],value,up);return result}valueSetReplace(valueSet,value,up){let idx=valueSet.indexOf(value);return idx>=0?(idx+=up?1:-1,idx<0?idx=valueSet.length-1:idx%=valueSet.length,valueSet[idx]):null}}BasicInplaceReplace.INSTANCE=new BasicInplaceReplace;
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneBase.js
var standaloneBase=__webpack_require__(861762),types=__webpack_require__(998401),stopwatch=__webpack_require__(84013),__awaiter=function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/types.js
/**
 * @internal
 */
class MirrorModel extends MirrorTextModel{get uri(){return this._uri}get eol(){return this._eol}getValue(){return this.getText()}getLinesContent(){return this._lines.slice(0)}getLineCount(){return this._lines.length}getLineContent(lineNumber){return this._lines[lineNumber-1]}getWordAtPosition(position,wordDefinition){let wordAtText=(0,wordHelper/* getWordAtText */.t2)(position.column,(0,wordHelper/* ensureValidWordDefinition */.eq)(wordDefinition),this._lines[position.lineNumber-1],0);return wordAtText?new core_range/* Range */.e(position.lineNumber,wordAtText.startColumn,position.lineNumber,wordAtText.endColumn):null}words(wordDefinition){const lines=this._lines,wordenize=this._wordenize.bind(this);let lineNumber=0,lineText="",wordRangesIdx=0,wordRanges=[];return{*[Symbol.iterator](){while(1)if(wordRangesIdx<wordRanges.length){const value=lineText.substring(wordRanges[wordRangesIdx].start,wordRanges[wordRangesIdx].end);wordRangesIdx+=1,yield value}else{if(!(lineNumber<lines.length))break;lineText=lines[lineNumber],wordRanges=wordenize(lineText,wordDefinition),wordRangesIdx=0,lineNumber+=1}}}}getLineWords(lineNumber,wordDefinition){let content=this._lines[lineNumber-1],ranges=this._wordenize(content,wordDefinition),words=[];for(const range of ranges)words.push({word:content.substring(range.start,range.end),startColumn:range.start+1,endColumn:range.end+1});return words}_wordenize(content,wordDefinition){const result=[];let match;wordDefinition.lastIndex=0;// reset lastIndex just to be sure
while(match=wordDefinition.exec(content)){if(0===match[0].length)
// it did match the empty string
break;result.push({start:match.index,end:match.index+match[0].length})}return result}getValueInRange(range){if(range=this._validateRange(range),range.startLineNumber===range.endLineNumber)return this._lines[range.startLineNumber-1].substring(range.startColumn-1,range.endColumn-1);let lineEnding=this._eol,startLineIndex=range.startLineNumber-1,endLineIndex=range.endLineNumber-1,resultLines=[];resultLines.push(this._lines[startLineIndex].substring(range.startColumn-1));for(let i=startLineIndex+1;i<endLineIndex;i++)resultLines.push(this._lines[i]);return resultLines.push(this._lines[endLineIndex].substring(0,range.endColumn-1)),resultLines.join(lineEnding)}offsetAt(position){return position=this._validatePosition(position),this._ensureLineStarts(),this._lineStarts.getPrefixSum(position.lineNumber-2)+(position.column-1)}positionAt(offset){offset=Math.floor(offset),offset=Math.max(0,offset),this._ensureLineStarts();let out=this._lineStarts.getIndexOf(offset),lineLength=this._lines[out.index].length;
// Ensure we return a valid position
return{lineNumber:1+out.index,column:1+Math.min(out.remainder,lineLength)}}_validateRange(range){const start=this._validatePosition({lineNumber:range.startLineNumber,column:range.startColumn}),end=this._validatePosition({lineNumber:range.endLineNumber,column:range.endColumn});return start.lineNumber!==range.startLineNumber||start.column!==range.startColumn||end.lineNumber!==range.endLineNumber||end.column!==range.endColumn?{startLineNumber:start.lineNumber,startColumn:start.column,endLineNumber:end.lineNumber,endColumn:end.column}:range}_validatePosition(position){if(!core_position/* Position */.L.isIPosition(position))throw new Error("bad position");let{lineNumber:lineNumber,column:column}=position,hasChanged=!1;if(lineNumber<1)lineNumber=1,column=1,hasChanged=!0;else if(lineNumber>this._lines.length)lineNumber=this._lines.length,column=this._lines[lineNumber-1].length+1,hasChanged=!0;else{let maxCharacter=this._lines[lineNumber-1].length+1;column<1?(column=1,hasChanged=!0):column>maxCharacter&&(column=maxCharacter,hasChanged=!0)}return hasChanged?{lineNumber:lineNumber,column:column}:position}}
/**
 * @internal
 */class EditorSimpleWorker{constructor(host,foreignModuleFactory){this._host=host,this._models=Object.create(null),this._foreignModuleFactory=foreignModuleFactory,this._foreignModule=null}dispose(){this._models=Object.create(null)}_getModel(uri){return this._models[uri]}_getModels(){let all=[];return Object.keys(this._models).forEach((key=>all.push(this._models[key]))),all}acceptNewModel(data){this._models[data.url]=new MirrorModel(uri/* URI */.o.parse(data.url),data.lines,data.EOL,data.versionId)}acceptModelChanged(strURL,e){if(!this._models[strURL])return;let model=this._models[strURL];model.onEvents(e)}acceptRemovedModel(strURL){this._models[strURL]&&delete this._models[strURL]}
// ---- BEGIN diff --------------------------------------------------------------------------
computeDiff(originalUrl,modifiedUrl,ignoreTrimWhitespace,maxComputationTime){return __awaiter(this,void 0,void 0,(function*(){const original=this._getModel(originalUrl),modified=this._getModel(modifiedUrl);if(!original||!modified)return null;const originalLines=original.getLinesContent(),modifiedLines=modified.getLinesContent(),diffComputer=new DiffComputer(originalLines,modifiedLines,{shouldComputeCharChanges:!0,shouldPostProcessCharChanges:!0,shouldIgnoreTrimWhitespace:ignoreTrimWhitespace,shouldMakePrettyDiff:!0,maxComputationTime:maxComputationTime}),diffResult=diffComputer.computeDiff(),identical=!(diffResult.changes.length>0)&&this._modelsAreIdentical(original,modified);return{quitEarly:diffResult.quitEarly,identical:identical,changes:diffResult.changes}}))}_modelsAreIdentical(original,modified){const originalLineCount=original.getLineCount(),modifiedLineCount=modified.getLineCount();if(originalLineCount!==modifiedLineCount)return!1;for(let line=1;line<=originalLineCount;line++){const originalLine=original.getLineContent(line),modifiedLine=modified.getLineContent(line);if(originalLine!==modifiedLine)return!1}return!0}computeMoreMinimalEdits(modelUrl,edits){return __awaiter(this,void 0,void 0,(function*(){const model=this._getModel(modelUrl);if(!model)return edits;const result=[];let lastEol;edits=edits.slice(0).sort(((a,b)=>{if(a.range&&b.range)return core_range/* Range */.e.compareRangesUsingStarts(a.range,b.range);
// eol only changes should go to the end
let aRng=a.range?0:1,bRng=b.range?0:1;return aRng-bRng}));for(let{range:range,text:text,eol:eol}of edits){if("number"===typeof eol&&(lastEol=eol),core_range/* Range */.e.isEmpty(range)&&!text)
// empty change
continue;const original=model.getValueInRange(range);if(text=text.replace(/\r\n|\n|\r/g,model.eol),original===text)
// noop
continue;
// make sure diff won't take too long
if(Math.max(text.length,original.length)>EditorSimpleWorker._diffLimit){result.push({range:range,text:text});continue}
// compute diff between original and edit.text
const changes=(0,diff/* stringDiff */.a$)(original,text,!1),editOffset=model.offsetAt(core_range/* Range */.e.lift(range).getStartPosition());for(const change of changes){const start=model.positionAt(editOffset+change.originalStart),end=model.positionAt(editOffset+change.originalStart+change.originalLength),newEdit={text:text.substr(change.modifiedStart,change.modifiedLength),range:{startLineNumber:start.lineNumber,startColumn:start.column,endLineNumber:end.lineNumber,endColumn:end.column}};model.getValueInRange(newEdit.range)!==newEdit.text&&result.push(newEdit)}}return"number"===typeof lastEol&&result.push({eol:lastEol,text:"",range:{startLineNumber:0,startColumn:0,endLineNumber:0,endColumn:0}}),result}))}
// ---- END minimal edits ---------------------------------------------------------------
computeLinks(modelUrl){return __awaiter(this,void 0,void 0,(function*(){let model=this._getModel(modelUrl);return model?computeLinks(model):null}))}textualSuggest(modelUrls,leadingWord,wordDef,wordDefFlags){return __awaiter(this,void 0,void 0,(function*(){const sw=new stopwatch/* StopWatch */.G(!0),wordDefRegExp=new RegExp(wordDef,wordDefFlags),seen=new Set;outer:for(let url of modelUrls){const model=this._getModel(url);if(model)for(let word of model.words(wordDefRegExp))if(word!==leadingWord&&isNaN(Number(word))&&(seen.add(word),seen.size>EditorSimpleWorker._suggestionsLimit))break outer}return{words:Array.from(seen),duration:sw.elapsed()}}))}
// ---- END suggest --------------------------------------------------------------------------
//#region -- word ranges --
computeWordRanges(modelUrl,range,wordDef,wordDefFlags){return __awaiter(this,void 0,void 0,(function*(){let model=this._getModel(modelUrl);if(!model)return Object.create(null);const wordDefRegExp=new RegExp(wordDef,wordDefFlags),result=Object.create(null);for(let line=range.startLineNumber;line<range.endLineNumber;line++){let words=model.getLineWords(line,wordDefRegExp);for(const word of words){if(!isNaN(Number(word.word)))continue;let array=result[word.word];array||(array=[],result[word.word]=array),array.push({startLineNumber:line,startColumn:word.startColumn,endLineNumber:line,endColumn:word.endColumn})}}return result}))}
//#endregion
navigateValueSet(modelUrl,range,up,wordDef,wordDefFlags){return __awaiter(this,void 0,void 0,(function*(){let model=this._getModel(modelUrl);if(!model)return null;let wordDefRegExp=new RegExp(wordDef,wordDefFlags);range.startColumn===range.endColumn&&(range={startLineNumber:range.startLineNumber,startColumn:range.startColumn,endLineNumber:range.endLineNumber,endColumn:range.endColumn+1});let selectionText=model.getValueInRange(range),wordRange=model.getWordAtPosition({lineNumber:range.startLineNumber,column:range.startColumn},wordDefRegExp);if(!wordRange)return null;let word=model.getValueInRange(wordRange),result=BasicInplaceReplace.INSTANCE.navigateValueSet(range,selectionText,wordRange,word,up);return result}))}
// ---- BEGIN foreign module support --------------------------------------------------------------------------
loadForeignModule(moduleId,createData,foreignHostMethods){const proxyMethodRequest=(method,args)=>this._host.fhr(method,args),foreignHost=types/* createProxyObject */.IU(foreignHostMethods,proxyMethodRequest);let ctx={host:foreignHost,getMirrorModels:()=>this._getModels()};return this._foreignModuleFactory?(this._foreignModule=this._foreignModuleFactory(ctx,createData),Promise.resolve(types/* getAllMethodNames */.$E(this._foreignModule))):Promise.reject(new Error("Unexpected usage"));
// ESM-comment-begin
// 		return new Promise<any>((resolve, reject) => {
// 			require([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {
// 				this._foreignModule = foreignModule.create(ctx, createData);

// 				resolve(types.getAllMethodNames(this._foreignModule));

// 			}, reject);
// 		});
// ESM-comment-end
// ESM-uncomment-begin
}
// foreign method request
fmr(method,args){if(!this._foreignModule||"function"!==typeof this._foreignModule[method])return Promise.reject(new Error("Missing requestHandler or method: "+method));try{return Promise.resolve(this._foreignModule[method].apply(this._foreignModule,args))}catch(e){return Promise.reject(e)}}}
// ---- END diff --------------------------------------------------------------------------
// ---- BEGIN minimal edits ---------------------------------------------------------------
EditorSimpleWorker._diffLimit=1e5,
// ---- BEGIN suggest --------------------------------------------------------------------------
EditorSimpleWorker._suggestionsLimit=1e4,"function"===typeof importScripts&&(
// Running in a web worker
platform/* globals */.li.monaco=(0,standaloneBase/* createMonacoBaseAPI */.O)());
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js
var modelService=__webpack_require__(151200),textResourceConfigurationService=__webpack_require__(333187),arrays=__webpack_require__(609488),log=__webpack_require__(43557),errors=__webpack_require__(817301),__decorate=function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"===typeof Reflect&&"function"===typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}},editorWorkerServiceImpl_awaiter=function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/services/textResourceConfigurationService.js
/**
 * Stop syncing a model to the worker if it was not needed for 1 min.
 */
const STOP_SYNC_MODEL_DELTA_TIME_MS=6e4,STOP_WORKER_DELTA_TIME_MS=3e5;
/**
 * Stop the worker if it was not needed for 5 min.
 */function canSyncModel(modelService,resource){let model=modelService.getModel(resource);return!!model&&!model.isTooLargeForSyncing()}let EditorWorkerServiceImpl=class extends lifecycle/* Disposable */.JT{constructor(modelService,configurationService,logService){super(),this._modelService=modelService,this._workerManager=this._register(new WorkerManager(this._modelService)),this._logService=logService,
// register default link-provider and default completions-provider
this._register(modes/* LinkProviderRegistry */.pM.register({language:"*",hasAccessToAllModels:!0},{provideLinks:(model,token)=>canSyncModel(this._modelService,model.uri)?this._workerManager.withWorker().then((client=>client.computeLinks(model.uri))).then((links=>links&&{links:links})):Promise.resolve({links:[]})})),this._register(modes/* CompletionProviderRegistry */.KZ.register("*",new WordBasedCompletionItemProvider(this._workerManager,configurationService,this._modelService)))}dispose(){super.dispose()}computeDiff(original,modified,ignoreTrimWhitespace,maxComputationTime){return this._workerManager.withWorker().then((client=>client.computeDiff(original,modified,ignoreTrimWhitespace,maxComputationTime)))}computeMoreMinimalEdits(resource,edits){if((0,arrays/* isNonEmptyArray */.Of)(edits)){if(!canSyncModel(this._modelService,resource))return Promise.resolve(edits);// File too large
const sw=stopwatch/* StopWatch */.G.create(!0),result=this._workerManager.withWorker().then((client=>client.computeMoreMinimalEdits(resource,edits)));return result.finally((()=>this._logService.trace("FORMAT#computeMoreMinimalEdits",resource.toString(!0),sw.elapsed()))),Promise.race([result,(0,common_async/* timeout */.Vs)(1e3).then((()=>edits))])}return Promise.resolve(void 0)}canNavigateValueSet(resource){return canSyncModel(this._modelService,resource)}navigateValueSet(resource,range,up){return this._workerManager.withWorker().then((client=>client.navigateValueSet(resource,range,up)))}canComputeWordRanges(resource){return canSyncModel(this._modelService,resource)}computeWordRanges(resource,range){return this._workerManager.withWorker().then((client=>client.computeWordRanges(resource,range)))}};EditorWorkerServiceImpl=__decorate([__param(0,modelService/* IModelService */.q),__param(1,textResourceConfigurationService/* ITextResourceConfigurationService */.V),__param(2,log/* ILogService */.VZ)],EditorWorkerServiceImpl);class WordBasedCompletionItemProvider{constructor(workerManager,configurationService,modelService){this._debugDisplayName="wordbasedCompletions",this._workerManager=workerManager,this._configurationService=configurationService,this._modelService=modelService}provideCompletionItems(model,position){return editorWorkerServiceImpl_awaiter(this,void 0,void 0,(function*(){const config=this._configurationService.getValue(model.uri,position,"editor");if(!config.wordBasedSuggestions)return;const models=[];if("currentDocument"===config.wordBasedSuggestionsMode)
// only current file and only if not too large
canSyncModel(this._modelService,model.uri)&&models.push(model.uri);else
// either all files or files of same language
for(const candidate of this._modelService.getModels())canSyncModel(this._modelService,candidate.uri)&&(candidate===model?models.unshift(candidate.uri):"allDocuments"!==config.wordBasedSuggestionsMode&&candidate.getLanguageId()!==model.getLanguageId()||models.push(candidate.uri));if(0===models.length)return;// File too large, no other files
const wordDefRegExp=languageConfigurationRegistry/* LanguageConfigurationRegistry */.zu.getWordDefinition(model.getLanguageId()),word=model.getWordAtPosition(position),replace=word?new core_range/* Range */.e(position.lineNumber,word.startColumn,position.lineNumber,word.endColumn):core_range/* Range */.e.fromPositions(position),insert=replace.setEndPosition(position.lineNumber,position.column),client=yield this._workerManager.withWorker(),data=yield client.textualSuggest(models,null===word||void 0===word?void 0:word.word,wordDefRegExp);return data?{duration:data.duration,suggestions:data.words.map((word=>({kind:18/* Text */,label:word,insertText:word,range:{insert:insert,replace:replace}})))}:void 0}))}}class WorkerManager extends lifecycle/* Disposable */.JT{constructor(modelService){super(),this._modelService=modelService,this._editorWorkerClient=null,this._lastWorkerUsedTime=(new Date).getTime();let stopWorkerInterval=this._register(new common_async/* IntervalTimer */.zh);stopWorkerInterval.cancelAndSet((()=>this._checkStopIdleWorker()),Math.round(STOP_WORKER_DELTA_TIME_MS/2)),this._register(this._modelService.onModelRemoved((_=>this._checkStopEmptyWorker())))}dispose(){this._editorWorkerClient&&(this._editorWorkerClient.dispose(),this._editorWorkerClient=null),super.dispose()}
/**
     * Check if the model service has no more models and stop the worker if that is the case.
     */_checkStopEmptyWorker(){if(!this._editorWorkerClient)return;let models=this._modelService.getModels();0===models.length&&(
// There are no more models => nothing possible for me to do
this._editorWorkerClient.dispose(),this._editorWorkerClient=null)}
/**
     * Check if the worker has been idle for a while and then stop it.
     */_checkStopIdleWorker(){if(!this._editorWorkerClient)return;let timeSinceLastWorkerUsedTime=(new Date).getTime()-this._lastWorkerUsedTime;timeSinceLastWorkerUsedTime>STOP_WORKER_DELTA_TIME_MS&&(this._editorWorkerClient.dispose(),this._editorWorkerClient=null)}withWorker(){return this._lastWorkerUsedTime=(new Date).getTime(),this._editorWorkerClient||(this._editorWorkerClient=new EditorWorkerClient(this._modelService,!1,"editorWorkerService")),Promise.resolve(this._editorWorkerClient)}}class EditorModelManager extends lifecycle/* Disposable */.JT{constructor(proxy,modelService,keepIdleModels){if(super(),this._syncedModels=Object.create(null),this._syncedModelsLastUsedTime=Object.create(null),this._proxy=proxy,this._modelService=modelService,!keepIdleModels){let timer=new common_async/* IntervalTimer */.zh;timer.cancelAndSet((()=>this._checkStopModelSync()),Math.round(STOP_SYNC_MODEL_DELTA_TIME_MS/2)),this._register(timer)}}dispose(){for(let modelUrl in this._syncedModels)(0,lifecycle/* dispose */.B9)(this._syncedModels[modelUrl]);this._syncedModels=Object.create(null),this._syncedModelsLastUsedTime=Object.create(null),super.dispose()}ensureSyncedResources(resources,forceLargeModels){for(const resource of resources){let resourceStr=resource.toString();this._syncedModels[resourceStr]||this._beginModelSync(resource,forceLargeModels),this._syncedModels[resourceStr]&&(this._syncedModelsLastUsedTime[resourceStr]=(new Date).getTime())}}_checkStopModelSync(){let currentTime=(new Date).getTime(),toRemove=[];for(let modelUrl in this._syncedModelsLastUsedTime){let elapsedTime=currentTime-this._syncedModelsLastUsedTime[modelUrl];elapsedTime>STOP_SYNC_MODEL_DELTA_TIME_MS&&toRemove.push(modelUrl)}for(const e of toRemove)this._stopModelSync(e)}_beginModelSync(resource,forceLargeModels){let model=this._modelService.getModel(resource);if(!model)return;if(!forceLargeModels&&model.isTooLargeForSyncing())return;let modelUrl=resource.toString();this._proxy.acceptNewModel({url:model.uri.toString(),lines:model.getLinesContent(),EOL:model.getEOL(),versionId:model.getVersionId()});const toDispose=new lifecycle/* DisposableStore */.SL;toDispose.add(model.onDidChangeContent((e=>{this._proxy.acceptModelChanged(modelUrl.toString(),e)}))),toDispose.add(model.onWillDispose((()=>{this._stopModelSync(modelUrl)}))),toDispose.add((0,lifecycle/* toDisposable */.OF)((()=>{this._proxy.acceptRemovedModel(modelUrl)}))),this._syncedModels[modelUrl]=toDispose}_stopModelSync(modelUrl){let toDispose=this._syncedModels[modelUrl];delete this._syncedModels[modelUrl],delete this._syncedModelsLastUsedTime[modelUrl],(0,lifecycle/* dispose */.B9)(toDispose)}}class SynchronousWorkerClient{constructor(instance){this._instance=instance,this._proxyObj=Promise.resolve(this._instance)}dispose(){this._instance.dispose()}getProxyObject(){return this._proxyObj}}class EditorWorkerHost{constructor(workerClient){this._workerClient=workerClient}
// foreign host request
fhr(method,args){return this._workerClient.fhr(method,args)}}class EditorWorkerClient extends lifecycle/* Disposable */.JT{constructor(modelService,keepIdleModels,label){super(),this._disposed=!1,this._modelService=modelService,this._keepIdleModels=keepIdleModels,this._workerFactory=new defaultWorkerFactory/* DefaultWorkerFactory */.H(label),this._worker=null,this._modelManager=null}
// foreign host request
fhr(method,args){throw new Error("Not implemented!")}_getOrCreateWorker(){if(!this._worker)try{this._worker=this._register(new simpleWorker/* SimpleWorkerClient */.PB(this._workerFactory,"vs/editor/common/services/editorSimpleWorker",new EditorWorkerHost(this)))}catch(err){(0,simpleWorker/* logOnceWebWorkerWarning */.HZ)(err),this._worker=new SynchronousWorkerClient(new EditorSimpleWorker(new EditorWorkerHost(this),null))}return this._worker}_getProxy(){return this._getOrCreateWorker().getProxyObject().then(void 0,(err=>((0,simpleWorker/* logOnceWebWorkerWarning */.HZ)(err),this._worker=new SynchronousWorkerClient(new EditorSimpleWorker(new EditorWorkerHost(this),null)),this._getOrCreateWorker().getProxyObject())))}_getOrCreateModelManager(proxy){return this._modelManager||(this._modelManager=this._register(new EditorModelManager(proxy,this._modelService,this._keepIdleModels))),this._modelManager}_withSyncedResources(resources,forceLargeModels=!1){return editorWorkerServiceImpl_awaiter(this,void 0,void 0,(function*(){return this._disposed?Promise.reject((0,errors/* canceled */.F0)()):this._getProxy().then((proxy=>(this._getOrCreateModelManager(proxy).ensureSyncedResources(resources,forceLargeModels),proxy)))}))}computeDiff(original,modified,ignoreTrimWhitespace,maxComputationTime){return this._withSyncedResources([original,modified],/* forceLargeModels */!0).then((proxy=>proxy.computeDiff(original.toString(),modified.toString(),ignoreTrimWhitespace,maxComputationTime)))}computeMoreMinimalEdits(resource,edits){return this._withSyncedResources([resource]).then((proxy=>proxy.computeMoreMinimalEdits(resource.toString(),edits)))}computeLinks(resource){return this._withSyncedResources([resource]).then((proxy=>proxy.computeLinks(resource.toString())))}textualSuggest(resources,leadingWord,wordDefRegExp){return editorWorkerServiceImpl_awaiter(this,void 0,void 0,(function*(){const proxy=yield this._withSyncedResources(resources),wordDef=wordDefRegExp.source,wordDefFlags=(0,strings/* regExpFlags */.mr)(wordDefRegExp);return proxy.textualSuggest(resources.map((r=>r.toString())),leadingWord,wordDef,wordDefFlags)}))}computeWordRanges(resource,range){return this._withSyncedResources([resource]).then((proxy=>{let model=this._modelService.getModel(resource);if(!model)return Promise.resolve(null);let wordDefRegExp=languageConfigurationRegistry/* LanguageConfigurationRegistry */.zu.getWordDefinition(model.getLanguageId()),wordDef=wordDefRegExp.source,wordDefFlags=(0,strings/* regExpFlags */.mr)(wordDefRegExp);return proxy.computeWordRanges(resource.toString(),range,wordDef,wordDefFlags)}))}navigateValueSet(resource,range,up){return this._withSyncedResources([resource]).then((proxy=>{let model=this._modelService.getModel(resource);if(!model)return null;let wordDefRegExp=languageConfigurationRegistry/* LanguageConfigurationRegistry */.zu.getWordDefinition(model.getLanguageId()),wordDef=wordDefRegExp.source,wordDefFlags=(0,strings/* regExpFlags */.mr)(wordDefRegExp);return proxy.navigateValueSet(resource.toString(),range,up,wordDef,wordDefFlags)}))}dispose(){super.dispose(),this._disposed=!0}}
/***/},
/***/422016:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */r:function(){/* binding */return getIconClasses}
/* harmony export */});
/* unused harmony export cssEscape */
/* harmony import */var _base_common_network_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(566663),_base_common_resources_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(195935),_modes_modesRegistry_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(571144),_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(475761);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function getIconClasses(modelService,modeService,resource,fileKind){
// we always set these base classes even if we do not have a path
const classes=fileKind===_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_3__/* .FileKind */.R.ROOT_FOLDER?["rootfolder-icon"]:fileKind===_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_3__/* .FileKind */.R.FOLDER?["folder-icon"]:["file-icon"];if(resource){
// Get the path and name of the resource. For data-URIs, we need to parse specially
let name;if(resource.scheme===_base_common_network_js__WEBPACK_IMPORTED_MODULE_0__/* .Schemas */.lg.data){const metadata=_base_common_resources_js__WEBPACK_IMPORTED_MODULE_1__/* .DataUri */.Vb.parseMetaData(resource);name=metadata.get(_base_common_resources_js__WEBPACK_IMPORTED_MODULE_1__/* .DataUri */.Vb.META_DATA_LABEL)}else name=cssEscape((0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_1__/* .basenameOrAuthority */.Hx)(resource).toLowerCase());
// Folders
if(fileKind===_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_3__/* .FileKind */.R.FOLDER)classes.push(`${name}-name-folder-icon`);else{
// Name & Extension(s)
if(name){
// Avoid doing an explosive combination of extensions for very long filenames
// (most file systems do not allow files > 255 length) with lots of `.` characters
// https://github.com/microsoft/vscode/issues/116199
if(classes.push(`${name}-name-file-icon`),name.length<=255){const dotSegments=name.split(".");for(let i=1;i<dotSegments.length;i++)classes.push(`${dotSegments.slice(i).join(".")}-ext-file-icon`);// add each combination of all found extensions if more than one
}classes.push("ext-file-icon")}
// Detected Mode
const detectedModeId=detectModeId(modelService,modeService,resource);detectedModeId&&classes.push(`${cssEscape(detectedModeId)}-lang-file-icon`)}}return classes}function detectModeId(modelService,modeService,resource){if(!resource)return null;// we need a resource at least
let modeId=null;
// Data URI: check for encoded metadata
if(resource.scheme===_base_common_network_js__WEBPACK_IMPORTED_MODULE_0__/* .Schemas */.lg.data){const metadata=_base_common_resources_js__WEBPACK_IMPORTED_MODULE_1__/* .DataUri */.Vb.parseMetaData(resource),mime=metadata.get(_base_common_resources_js__WEBPACK_IMPORTED_MODULE_1__/* .DataUri */.Vb.META_DATA_MIME);mime&&(modeId=modeService.getModeId(mime))}
// Any other URI: check for model if existing
else{const model=modelService.getModel(resource);model&&(modeId=model.getLanguageId())}
// only take if the mode is specific (aka no just plain text)
return modeId&&modeId!==_modes_modesRegistry_js__WEBPACK_IMPORTED_MODULE_2__/* .PLAINTEXT_MODE_ID */.XT?modeId:modeService.getModeIdByFilepathOrFirstLine(resource);
// otherwise fallback to path based detection
}function cssEscape(str){return str.replace(/[\11\12\14\15\40]/g,"/");// HTML class names can not contain certain whitespace characters, use / instead, which doesn't exist in file names.
}
/***/},
/***/632670:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
// EXPORTS
__webpack_require__.d(__webpack_exports__,{OG:function(){/* binding */return getDocumentRangeSemanticTokens},ML:function(){/* binding */return getDocumentSemanticTokens},KO:function(){/* binding */return hasDocumentRangeSemanticTokensProvider},Jc:function(){/* binding */return hasDocumentSemanticTokensProvider},Vl:function(){/* binding */return isSemanticTokens},Vj:function(){/* binding */return isSemanticTokensEdits}});
// UNUSED EXPORTS: DocumentSemanticTokensResult
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/cancellation.js
var cancellation=__webpack_require__(471050),errors=__webpack_require__(817301),common_uri=__webpack_require__(70666),modes=__webpack_require__(860303),modelService=__webpack_require__(151200),commands=__webpack_require__(820942),types=__webpack_require__(998401),buffer=__webpack_require__(153060),platform=__webpack_require__(901432);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/errors.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensDto.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function reverseEndianness(arr){for(let i=0,len=arr.length;i<len;i+=4){
// flip bytes 0<->3 and 1<->2
const b0=arr[i+0],b1=arr[i+1],b2=arr[i+2],b3=arr[i+3];arr[i+0]=b3,arr[i+1]=b2,arr[i+2]=b1,arr[i+3]=b0}}function toLittleEndianBuffer(arr){const uint8Arr=new Uint8Array(arr.buffer,arr.byteOffset,4*arr.length);return platform/* isLittleEndian */.r()||
// the byte order must be changed
reverseEndianness(uint8Arr),buffer/* VSBuffer */.KN.wrap(uint8Arr)}function encodeSemanticTokensDto(semanticTokens){const dest=new Uint32Array(encodeSemanticTokensDtoSize(semanticTokens));let offset=0;if(dest[offset++]=semanticTokens.id,"full"===semanticTokens.type)dest[offset++]=1/* Full */,dest[offset++]=semanticTokens.data.length,dest.set(semanticTokens.data,offset),offset+=semanticTokens.data.length;else{dest[offset++]=2/* Delta */,dest[offset++]=semanticTokens.deltas.length;for(const delta of semanticTokens.deltas)dest[offset++]=delta.start,dest[offset++]=delta.deleteCount,delta.data?(dest[offset++]=delta.data.length,dest.set(delta.data,offset),offset+=delta.data.length):dest[offset++]=0}return toLittleEndianBuffer(dest)}function encodeSemanticTokensDtoSize(semanticTokens){let result=0;if(result+=2,"full"===semanticTokens.type)result+=1+semanticTokens.data.length;else{result+=1,result+=3*semanticTokens.deltas.length;// delta count
for(const delta of semanticTokens.deltas)delta.data&&(result+=delta.data.length)}return result}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/core/range.js
var core_range=__webpack_require__(624314),__awaiter=function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};function isSemanticTokens(v){return v&&!!v.data}function isSemanticTokensEdits(v){return v&&Array.isArray(v.edits)}class DocumentSemanticTokensResult{constructor(provider,tokens){this.provider=provider,this.tokens=tokens}}function hasDocumentSemanticTokensProvider(model){return modes/* DocumentSemanticTokensProviderRegistry */.wT.has(model)}function getDocumentSemanticTokensProviders(model){const groups=modes/* DocumentSemanticTokensProviderRegistry */.wT.orderedGroups(model);return groups.length>0?groups[0]:[]}function getDocumentSemanticTokens(model,lastProvider,lastResultId,token){return __awaiter(this,void 0,void 0,(function*(){const providers=getDocumentSemanticTokensProviders(model),results=yield Promise.all(providers.map((provider=>__awaiter(this,void 0,void 0,(function*(){let result;try{result=yield provider.provideDocumentSemanticTokens(model,provider===lastProvider?lastResultId:null,token)}catch(err){(0,errors/* onUnexpectedExternalError */.Cp)(err),result=null}return result&&(isSemanticTokens(result)||isSemanticTokensEdits(result))||(result=null),new DocumentSemanticTokensResult(provider,result)})))));
// Get tokens from all providers at the same time.
// Try to return the first result with actual tokens
for(const result of results)if(result.tokens)return result;
// Return the first result, even if it doesn't have tokens
return results.length>0?results[0]:null}))}function _getDocumentSemanticTokensProviderHighestGroup(model){const result=modes/* DocumentSemanticTokensProviderRegistry */.wT.orderedGroups(model);return result.length>0?result[0]:null}class DocumentRangeSemanticTokensResult{constructor(provider,tokens){this.provider=provider,this.tokens=tokens}}function hasDocumentRangeSemanticTokensProvider(model){return modes/* DocumentRangeSemanticTokensProviderRegistry */.K7.has(model)}function getDocumentRangeSemanticTokensProviders(model){const groups=modes/* DocumentRangeSemanticTokensProviderRegistry */.K7.orderedGroups(model);return groups.length>0?groups[0]:[]}function getDocumentRangeSemanticTokens(model,range,token){return __awaiter(this,void 0,void 0,(function*(){const providers=getDocumentRangeSemanticTokensProviders(model),results=yield Promise.all(providers.map((provider=>__awaiter(this,void 0,void 0,(function*(){let result;try{result=yield provider.provideDocumentRangeSemanticTokens(model,range,token)}catch(err){(0,errors/* onUnexpectedExternalError */.Cp)(err),result=null}return result&&isSemanticTokens(result)||(result=null),new DocumentRangeSemanticTokensResult(provider,result)})))));
// Get tokens from all providers at the same time.
// Try to return the first result with actual tokens
for(const result of results)if(result.tokens)return result;
// Return the first result, even if it doesn't have tokens
return results.length>0?results[0]:null}))}commands/* CommandsRegistry */.P.registerCommand("_provideDocumentSemanticTokensLegend",((accessor,...args)=>__awaiter(void 0,void 0,void 0,(function*(){const[uri]=args;(0,types/* assertType */.p_)(uri instanceof common_uri/* URI */.o);const model=accessor.get(modelService/* IModelService */.q).getModel(uri);if(!model)return;const providers=_getDocumentSemanticTokensProviderHighestGroup(model);return providers?providers[0].getLegend():accessor.get(commands/* ICommandService */.H).executeCommand("_provideDocumentRangeSemanticTokensLegend",uri)})))),commands/* CommandsRegistry */.P.registerCommand("_provideDocumentSemanticTokens",((accessor,...args)=>__awaiter(void 0,void 0,void 0,(function*(){const[uri]=args;(0,types/* assertType */.p_)(uri instanceof common_uri/* URI */.o);const model=accessor.get(modelService/* IModelService */.q).getModel(uri);if(!model)return;if(!hasDocumentSemanticTokensProvider(model))
// there is no provider => fall back to a document range semantic tokens provider
return accessor.get(commands/* ICommandService */.H).executeCommand("_provideDocumentRangeSemanticTokens",uri,model.getFullModelRange());const r=yield getDocumentSemanticTokens(model,null,null,cancellation/* CancellationToken */.T.None);if(!r)return;const{provider:provider,tokens:tokens}=r;if(!tokens||!isSemanticTokens(tokens))return;const buff=encodeSemanticTokensDto({id:0,type:"full",data:tokens.data});return tokens.resultId&&provider.releaseDocumentSemanticTokens(tokens.resultId),buff})))),commands/* CommandsRegistry */.P.registerCommand("_provideDocumentRangeSemanticTokensLegend",((accessor,...args)=>__awaiter(void 0,void 0,void 0,(function*(){const[uri,range]=args;(0,types/* assertType */.p_)(uri instanceof common_uri/* URI */.o);const model=accessor.get(modelService/* IModelService */.q).getModel(uri);if(!model)return;const providers=getDocumentRangeSemanticTokensProviders(model);if(0===providers.length)
// no providers
return;if(1===providers.length)
// straight forward case, just a single provider
return providers[0].getLegend();if(!range||!core_range/* Range */.e.isIRange(range))return providers[0].getLegend();const result=yield getDocumentRangeSemanticTokens(model,core_range/* Range */.e.lift(range),cancellation/* CancellationToken */.T.None);return result?result.provider.getLegend():void 0})))),commands/* CommandsRegistry */.P.registerCommand("_provideDocumentRangeSemanticTokens",((accessor,...args)=>__awaiter(void 0,void 0,void 0,(function*(){const[uri,range]=args;(0,types/* assertType */.p_)(uri instanceof common_uri/* URI */.o),(0,types/* assertType */.p_)(core_range/* Range */.e.isIRange(range));const model=accessor.get(modelService/* IModelService */.q).getModel(uri);if(!model)return;const result=yield getDocumentRangeSemanticTokens(model,core_range/* Range */.e.lift(range),cancellation/* CancellationToken */.T.None);return result&&result.tokens?encodeSemanticTokensDto({id:0,type:"full",data:result.tokens.data}):void 0}))))},
/***/456688:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */x:function(){/* binding */return MarkerDecorationsService}
/* harmony export */});
/* harmony import */var _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(998674),_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(905976),_model_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(984973),_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(897781),_view_editorColorRegistry_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(627869),_modelService_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(151200),_core_range_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(624314),_base_common_network_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(566663),_base_common_event_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(104669),_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(173910),_base_common_map_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(843702),__decorate=function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"===typeof Reflect&&"function"===typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}};
/* harmony import */class MarkerDecorations extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .Disposable */.JT{constructor(model){super(),this.model=model,this._markersData=new Map,this._register((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .toDisposable */.OF)((()=>{this.model.deltaDecorations([...this._markersData.keys()],[]),this._markersData.clear()})))}update(markers,newDecorations){const oldIds=[...this._markersData.keys()];this._markersData.clear();const ids=this.model.deltaDecorations(oldIds,newDecorations);for(let index=0;index<ids.length;index++)this._markersData.set(ids[index],markers[index]);return 0!==oldIds.length||0!==ids.length}getMarker(decoration){return this._markersData.get(decoration.id)}}let MarkerDecorationsService=class extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .Disposable */.JT{constructor(modelService,_markerService){super(),this._markerService=_markerService,this._onDidChangeMarker=this._register(new _base_common_event_js__WEBPACK_IMPORTED_MODULE_7__/* .Emitter */.Q5),this._markerDecorations=new _base_common_map_js__WEBPACK_IMPORTED_MODULE_9__/* .ResourceMap */.Y9,modelService.getModels().forEach((model=>this._onModelAdded(model))),this._register(modelService.onModelAdded(this._onModelAdded,this)),this._register(modelService.onModelRemoved(this._onModelRemoved,this)),this._register(this._markerService.onMarkerChanged(this._handleMarkerChange,this))}dispose(){super.dispose(),this._markerDecorations.forEach((value=>value.dispose())),this._markerDecorations.clear()}getMarker(uri,decoration){const markerDecorations=this._markerDecorations.get(uri);return markerDecorations&&markerDecorations.getMarker(decoration)||null}_handleMarkerChange(changedResources){changedResources.forEach((resource=>{const markerDecorations=this._markerDecorations.get(resource);markerDecorations&&this._updateDecorations(markerDecorations)}))}_onModelAdded(model){const markerDecorations=new MarkerDecorations(model);this._markerDecorations.set(model.uri,markerDecorations),this._updateDecorations(markerDecorations)}_onModelRemoved(model){const markerDecorations=this._markerDecorations.get(model.uri);markerDecorations&&(markerDecorations.dispose(),this._markerDecorations.delete(model.uri)),
// clean up markers for internal, transient models
model.uri.scheme!==_base_common_network_js__WEBPACK_IMPORTED_MODULE_6__/* .Schemas */.lg.inMemory&&model.uri.scheme!==_base_common_network_js__WEBPACK_IMPORTED_MODULE_6__/* .Schemas */.lg.internal&&model.uri.scheme!==_base_common_network_js__WEBPACK_IMPORTED_MODULE_6__/* .Schemas */.lg.vscode||this._markerService&&this._markerService.read({resource:model.uri}).map((marker=>marker.owner)).forEach((owner=>this._markerService.remove(owner,[model.uri])))}_updateDecorations(markerDecorations){
// Limit to the first 500 errors/warnings
const markers=this._markerService.read({resource:markerDecorations.model.uri,take:500});let newModelDecorations=markers.map((marker=>({range:this._createDecorationRange(markerDecorations.model,marker),options:this._createDecorationOption(marker)})));markerDecorations.update(markers,newModelDecorations)&&this._onDidChangeMarker.fire(markerDecorations.model)}_createDecorationRange(model,rawMarker){let ret=_core_range_js__WEBPACK_IMPORTED_MODULE_10__/* .Range */.e.lift(rawMarker);return rawMarker.severity!==_platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_0__/* .MarkerSeverity */.ZL.Hint||this._hasMarkerTag(rawMarker,1/* Unnecessary */)||this._hasMarkerTag(rawMarker,2/* Deprecated */)||(
// * never render hints on multiple lines
// * make enough space for three dots
ret=ret.setEndPosition(ret.startLineNumber,ret.startColumn+2)),model.validateRange(ret)}_createDecorationOption(marker){let className,color,zIndex,inlineClassName,minimap;switch(marker.severity){case _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_0__/* .MarkerSeverity */.ZL.Hint:className=this._hasMarkerTag(marker,2/* Deprecated */)?void 0:this._hasMarkerTag(marker,1/* Unnecessary */)?"squiggly-unnecessary"/* EditorUnnecessaryDecoration */:"squiggly-hint"/* EditorHintDecoration */,zIndex=0;break;case _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_0__/* .MarkerSeverity */.ZL.Warning:className="squiggly-warning"/* EditorWarningDecoration */,color=(0,_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_3__/* .themeColorFromId */.EN)(_view_editorColorRegistry_js__WEBPACK_IMPORTED_MODULE_4__/* .overviewRulerWarning */.Re),zIndex=20,minimap={color:(0,_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_3__/* .themeColorFromId */.EN)(_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_8__/* .minimapWarning */.Iv),position:_model_js__WEBPACK_IMPORTED_MODULE_2__/* .MinimapPosition */.F5.Inline};break;case _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_0__/* .MarkerSeverity */.ZL.Info:className="squiggly-info"/* EditorInfoDecoration */,color=(0,_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_3__/* .themeColorFromId */.EN)(_view_editorColorRegistry_js__WEBPACK_IMPORTED_MODULE_4__/* .overviewRulerInfo */.eS),zIndex=10;break;case _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_0__/* .MarkerSeverity */.ZL.Error:default:className="squiggly-error"/* EditorErrorDecoration */,color=(0,_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_3__/* .themeColorFromId */.EN)(_view_editorColorRegistry_js__WEBPACK_IMPORTED_MODULE_4__/* .overviewRulerError */.lK),zIndex=30,minimap={color:(0,_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_3__/* .themeColorFromId */.EN)(_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_8__/* .minimapError */.Gj),position:_model_js__WEBPACK_IMPORTED_MODULE_2__/* .MinimapPosition */.F5.Inline};break}return marker.tags&&(-1!==marker.tags.indexOf(1/* Unnecessary */)&&(inlineClassName="squiggly-inline-unnecessary"/* EditorUnnecessaryInlineDecoration */),-1!==marker.tags.indexOf(2/* Deprecated */)&&(inlineClassName="squiggly-inline-deprecated"/* EditorDeprecatedInlineDecoration */)),{description:"marker-decoration",stickiness:1/* NeverGrowsWhenTypingAtEdges */,className:className,showIfCollapsed:!0,overviewRuler:{color:color,position:_model_js__WEBPACK_IMPORTED_MODULE_2__/* .OverviewRulerLane */.sh.Right},minimap:minimap,zIndex:zIndex,inlineClassName:inlineClassName}}_hasMarkerTag(marker,tag){return!!marker.tags&&marker.tags.indexOf(tag)>=0}};MarkerDecorationsService=__decorate([__param(0,_modelService_js__WEBPACK_IMPORTED_MODULE_5__/* .IModelService */.q),__param(1,_platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_0__/* .IMarkerService */.lT)],MarkerDecorationsService)},
/***/826479:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */i:function(){/* binding */return IMarkerDecorationsService}
/* harmony export */});
/* harmony import */var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(472065);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/const IMarkerDecorationsService=(0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__/* .createDecorator */.yh)("markerDecorationsService");
/***/},
/***/771531:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */h:function(){/* binding */return IModeService}
/* harmony export */});
/* harmony import */var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(472065);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/const IModeService=(0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__/* .createDecorator */.yh)("modeService");
/***/},
/***/109628:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
// EXPORTS
__webpack_require__.d(__webpack_exports__,{d:function(){/* binding */return ModeServiceImpl}});
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/event.js
var common_event=__webpack_require__(104669),lifecycle=__webpack_require__(905976),nullMode=__webpack_require__(428111),errors=__webpack_require__(817301),mime=__webpack_require__(581170),strings=__webpack_require__(697295),modesRegistry=__webpack_require__(571144),configurationRegistry=__webpack_require__(423193),platform=__webpack_require__(789872);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/services/languagesRegistry.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const languagesRegistry_hasOwnProperty=Object.prototype.hasOwnProperty;class LanguageIdCodec{constructor(){this._languageIdToLanguage=[],this._languageToLanguageId=new Map,this._register(nullMode/* NULL_MODE_ID */.TG,0/* Null */),this._register(modesRegistry/* PLAINTEXT_MODE_ID */.XT,1/* PlainText */),this._nextLanguageId=2}_register(language,languageId){this._languageIdToLanguage[languageId]=language,this._languageToLanguageId.set(language,languageId)}register(language){if(this._languageToLanguageId.has(language))return;const languageId=this._nextLanguageId++;this._register(language,languageId)}encodeLanguageId(languageId){return this._languageToLanguageId.get(languageId)||0/* Null */}decodeLanguageId(languageId){return this._languageIdToLanguage[languageId]||nullMode/* NULL_MODE_ID */.TG}}class LanguagesRegistry extends lifecycle/* Disposable */.JT{constructor(useModesRegistry=!0,warnOnOverwrite=!1){super(),this._onDidChange=this._register(new common_event/* Emitter */.Q5),this.onDidChange=this._onDidChange.event,LanguagesRegistry.instanceCount++,this._warnOnOverwrite=warnOnOverwrite,this.languageIdCodec=new LanguageIdCodec,this._languages={},this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},useModesRegistry&&(this._initializeFromRegistry(),this._register(modesRegistry/* ModesRegistry */.dQ.onDidChangeLanguages((m=>{
// console.log(`onDidChangeLanguages - inst count: ${LanguagesRegistry.instanceCount}`);
this._initializeFromRegistry()}))))}dispose(){LanguagesRegistry.instanceCount--,super.dispose()}_initializeFromRegistry(){this._languages={},this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},mime/* clearTextMimes */.bS();const desc=modesRegistry/* ModesRegistry */.dQ.getLanguages();this._registerLanguages(desc)}_registerLanguages(desc){for(const d of desc)this._registerLanguage(d);
// Rebuild fast path maps
this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},Object.keys(this._languages).forEach((langId=>{let language=this._languages[langId];language.name&&(this._nameMap[language.name]=language.identifier),language.aliases.forEach((alias=>{this._lowercaseNameMap[alias.toLowerCase()]=language.identifier})),language.mimetypes.forEach((mimetype=>{this._mimeTypesMap[mimetype]=language.identifier}))})),platform/* Registry */.B.as(configurationRegistry/* Extensions */.IP.Configuration).registerOverrideIdentifiers(modesRegistry/* ModesRegistry */.dQ.getLanguages().map((language=>language.id))),this._onDidChange.fire()}_registerLanguage(lang){const langId=lang.id;let resolvedLanguage;languagesRegistry_hasOwnProperty.call(this._languages,langId)?resolvedLanguage=this._languages[langId]:(this.languageIdCodec.register(langId),resolvedLanguage={identifier:langId,name:null,mimetypes:[],aliases:[],extensions:[],filenames:[],configurationFiles:[]},this._languages[langId]=resolvedLanguage),this._mergeLanguage(resolvedLanguage,lang)}_mergeLanguage(resolvedLanguage,lang){const langId=lang.id;let primaryMime=null;if(Array.isArray(lang.mimetypes)&&lang.mimetypes.length>0&&(resolvedLanguage.mimetypes.push(...lang.mimetypes),primaryMime=lang.mimetypes[0]),primaryMime||(primaryMime=`text/x-${langId}`,resolvedLanguage.mimetypes.push(primaryMime)),Array.isArray(lang.extensions)){lang.configuration?
// insert first as this appears to be the 'primary' language definition
resolvedLanguage.extensions=lang.extensions.concat(resolvedLanguage.extensions):resolvedLanguage.extensions=resolvedLanguage.extensions.concat(lang.extensions);for(let extension of lang.extensions)mime/* registerTextMime */.sA({id:langId,mime:primaryMime,extension:extension},this._warnOnOverwrite)}if(Array.isArray(lang.filenames))for(let filename of lang.filenames)mime/* registerTextMime */.sA({id:langId,mime:primaryMime,filename:filename},this._warnOnOverwrite),resolvedLanguage.filenames.push(filename);if(Array.isArray(lang.filenamePatterns))for(let filenamePattern of lang.filenamePatterns)mime/* registerTextMime */.sA({id:langId,mime:primaryMime,filepattern:filenamePattern},this._warnOnOverwrite);if("string"===typeof lang.firstLine&&lang.firstLine.length>0){let firstLineRegexStr=lang.firstLine;"^"!==firstLineRegexStr.charAt(0)&&(firstLineRegexStr="^"+firstLineRegexStr);try{let firstLineRegex=new RegExp(firstLineRegexStr);strings/* regExpLeadsToEndlessLoop */.IO(firstLineRegex)||mime/* registerTextMime */.sA({id:langId,mime:primaryMime,firstline:firstLineRegex},this._warnOnOverwrite)}catch(err){
// Most likely, the regex was bad
(0,errors/* onUnexpectedError */.dL)(err)}}resolvedLanguage.aliases.push(langId);let langAliases=null;if("undefined"!==typeof lang.aliases&&Array.isArray(lang.aliases)&&(
// signal that this language should not get a name
langAliases=0===lang.aliases.length?[null]:lang.aliases),null!==langAliases)for(const langAlias of langAliases)langAlias&&0!==langAlias.length&&resolvedLanguage.aliases.push(langAlias);let containsAliases=null!==langAliases&&langAliases.length>0;if(containsAliases&&null===langAliases[0]);else{let bestName=(containsAliases?langAliases[0]:null)||langId;!containsAliases&&resolvedLanguage.name||(resolvedLanguage.name=bestName)}lang.configuration&&resolvedLanguage.configurationFiles.push(lang.configuration)}isRegisteredMode(mimetypeOrModeId){
// Is this a known mime type ?
return!!languagesRegistry_hasOwnProperty.call(this._mimeTypesMap,mimetypeOrModeId)||languagesRegistry_hasOwnProperty.call(this._languages,mimetypeOrModeId);
// Is this a known mode id ?
}getModeIdForLanguageNameLowercase(languageNameLower){return languagesRegistry_hasOwnProperty.call(this._lowercaseNameMap,languageNameLower)?this._lowercaseNameMap[languageNameLower]:null}extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds){return commaSeparatedMimetypesOrCommaSeparatedIds?commaSeparatedMimetypesOrCommaSeparatedIds.split(",").map((mimeTypeOrId=>mimeTypeOrId.trim())).map((mimeTypeOrId=>languagesRegistry_hasOwnProperty.call(this._mimeTypesMap,mimeTypeOrId)?this._mimeTypesMap[mimeTypeOrId]:mimeTypeOrId)).filter((languageId=>languagesRegistry_hasOwnProperty.call(this._languages,languageId))):[]}validateLanguageId(languageId){return languageId&&languageId!==nullMode/* NULL_MODE_ID */.TG?languagesRegistry_hasOwnProperty.call(this._languages,languageId)?languageId:null:nullMode/* NULL_MODE_ID */.TG}getModeIdsFromFilepathOrFirstLine(resource,firstLine){if(!resource&&!firstLine)return[];let mimeTypes=mime/* guessMimeTypes */.G8(resource,firstLine);return this.extractModeIds(mimeTypes.join(","))}}LanguagesRegistry.instanceCount=0;
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/arrays.js
var arrays=__webpack_require__(609488);// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/services/modeServiceImpl.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class LanguageSelection{constructor(onLanguagesMaybeChanged,selector){let listener;this._selector=selector,this.languageId=this._selector(),this._onDidChange=new common_event/* Emitter */.Q5({onFirstListenerAdd:()=>{listener=onLanguagesMaybeChanged((()=>this._evaluate()))},onLastListenerRemove:()=>{listener.dispose()}}),this.onDidChange=this._onDidChange.event}_evaluate(){const languageId=this._selector();languageId!==this.languageId&&(this.languageId=languageId,this._onDidChange.fire(this.languageId))}}class ModeServiceImpl extends lifecycle/* Disposable */.JT{constructor(warnOnOverwrite=!1){super(),this._onDidEncounterLanguage=this._register(new common_event/* Emitter */.Q5),this.onDidEncounterLanguage=this._onDidEncounterLanguage.event,this._onLanguagesMaybeChanged=this._register(new common_event/* Emitter */.Q5({leakWarningThreshold:200/* https://github.com/microsoft/vscode/issues/119968 */})),this.onLanguagesMaybeChanged=this._onLanguagesMaybeChanged.event,ModeServiceImpl.instanceCount++,this._encounteredLanguages=new Set,this._registry=this._register(new LanguagesRegistry(!0,warnOnOverwrite)),this.languageIdCodec=this._registry.languageIdCodec,this._register(this._registry.onDidChange((()=>this._onLanguagesMaybeChanged.fire())))}dispose(){ModeServiceImpl.instanceCount--,super.dispose()}isRegisteredMode(mimetypeOrModeId){return this._registry.isRegisteredMode(mimetypeOrModeId)}getModeIdForLanguageName(alias){return this._registry.getModeIdForLanguageNameLowercase(alias)}getModeIdByFilepathOrFirstLine(resource,firstLine){const modeIds=this._registry.getModeIdsFromFilepathOrFirstLine(resource,firstLine);return(0,arrays/* firstOrDefault */.Xh)(modeIds,null)}getModeId(commaSeparatedMimetypesOrCommaSeparatedIds){const modeIds=this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);return(0,arrays/* firstOrDefault */.Xh)(modeIds,null)}validateLanguageId(languageId){return this._registry.validateLanguageId(languageId)}
// --- instantiation
create(commaSeparatedMimetypesOrCommaSeparatedIds){return new LanguageSelection(this.onLanguagesMaybeChanged,(()=>{const languageId=this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);return this._createModeAndGetLanguageIdentifier(languageId)}))}createByFilepathOrFirstLine(resource,firstLine){return new LanguageSelection(this.onLanguagesMaybeChanged,(()=>{const languageId=this.getModeIdByFilepathOrFirstLine(resource,firstLine);return this._createModeAndGetLanguageIdentifier(languageId)}))}_createModeAndGetLanguageIdentifier(languageId){
// Fall back to plain text if no mode was found
const validLanguageId=this.validateLanguageId(languageId||"plaintext")||nullMode/* NULL_MODE_ID */.TG;return this._getOrCreateMode(validLanguageId),validLanguageId}triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds){const languageId=this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);
// Fall back to plain text if no mode was found
this._getOrCreateMode(languageId||"plaintext")}_getOrCreateMode(languageId){if(!this._encounteredLanguages.has(languageId)){this._encounteredLanguages.add(languageId);const validLanguageId=this.validateLanguageId(languageId)||nullMode/* NULL_MODE_ID */.TG;this._onDidEncounterLanguage.fire(validLanguageId)}}}ModeServiceImpl.instanceCount=0},
/***/151200:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */p:function(){/* binding */return shouldSynchronizeModel},
/* harmony export */q:function(){/* binding */return IModelService}
/* harmony export */});
/* harmony import */var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(472065);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/const IModelService=(0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__/* .createDecorator */.yh)("modelService");function shouldSynchronizeModel(model){return!model.isTooLargeForSyncing()&&!model.isForSimpleWidget}
/***/},
/***/32334:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */BR:function(){/* binding */return ModelServiceImpl},
/* harmony export */e3:function(){/* binding */return SEMANTIC_HIGHLIGHTING_SETTING_ID},
/* harmony export */tw:function(){/* binding */return isSemanticColoringEnabled}
/* harmony export */});
/* unused harmony export ModelSemanticColoring */
/* harmony import */var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(104669),_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(905976),_base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(901432),_base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(817301),_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(364141),_model_textModel_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(724979),_modes_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(860303),_modes_modesRegistry_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(571144),_modeService_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(771531),_textResourceConfigurationService_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(333187),_platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(133108),_base_common_async_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(715393),_base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(471050),_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(897781),_platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(43557),_platform_undoRedo_common_undoRedo_js__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(364862),_base_common_hash_js__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(89954),_model_editStack_js__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(295215),_base_common_network_js__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__(566663),_semanticTokensProviderStyling_js__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__(665072),_getSemanticTokens_js__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__(632670),_base_common_objects_js__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__(936248),_modes_languageConfigurationRegistry_js__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__(594660),__decorate=function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"===typeof Reflect&&"function"===typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}};
/* harmony import */function MODEL_ID(resource){return resource.toString()}function computeModelSha1(model){
// compute the sha1
const shaComputer=new _base_common_hash_js__WEBPACK_IMPORTED_MODULE_16__/* .StringSHA1 */.yP,snapshot=model.createSnapshot();let text;while(text=snapshot.read())shaComputer.update(text);return shaComputer.digest()}class ModelData{constructor(model,onWillDispose,onDidChangeLanguage){this._modelEventListeners=new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .DisposableStore */.SL,this.model=model,this._languageSelection=null,this._languageSelectionListener=null,this._modelEventListeners.add(model.onWillDispose((()=>onWillDispose(model)))),this._modelEventListeners.add(model.onDidChangeLanguage((e=>onDidChangeLanguage(model,e))))}_disposeLanguageSelection(){this._languageSelectionListener&&(this._languageSelectionListener.dispose(),this._languageSelectionListener=null)}dispose(){this._modelEventListeners.dispose(),this._disposeLanguageSelection()}setLanguage(languageSelection){this._disposeLanguageSelection(),this._languageSelection=languageSelection,this._languageSelectionListener=this._languageSelection.onDidChange((()=>this.model.setMode(languageSelection.languageId))),this.model.setMode(languageSelection.languageId)}}const DEFAULT_EOL=_base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__/* .isLinux */.IJ||_base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__/* .isMacintosh */.dz?1/* LF */:2/* CRLF */;class DisposedModelInfo{constructor(uri,initialUndoRedoSnapshot,time,sharesUndoRedoStack,heapSize,sha1,versionId,alternativeVersionId){this.uri=uri,this.initialUndoRedoSnapshot=initialUndoRedoSnapshot,this.time=time,this.sharesUndoRedoStack=sharesUndoRedoStack,this.heapSize=heapSize,this.sha1=sha1,this.versionId=versionId,this.alternativeVersionId=alternativeVersionId}}let ModelServiceImpl=class ModelServiceImpl extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .Disposable */.JT{constructor(_configurationService,_resourcePropertiesService,_themeService,_logService,_undoRedoService,_modeService,_languageConfigurationService){super(),this._configurationService=_configurationService,this._resourcePropertiesService=_resourcePropertiesService,this._themeService=_themeService,this._logService=_logService,this._undoRedoService=_undoRedoService,this._modeService=_modeService,this._languageConfigurationService=_languageConfigurationService,this._onModelAdded=this._register(new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__/* .Emitter */.Q5),this.onModelAdded=this._onModelAdded.event,this._onModelRemoved=this._register(new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__/* .Emitter */.Q5),this.onModelRemoved=this._onModelRemoved.event,this._onModelModeChanged=this._register(new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__/* .Emitter */.Q5),this.onModelModeChanged=this._onModelModeChanged.event,this._modelCreationOptionsByLanguageAndResource=Object.create(null),this._models={},this._disposedModels=new Map,this._disposedModelsHeapSize=0,this._semanticStyling=this._register(new SemanticStyling(this._themeService,this._modeService,this._logService)),this._register(this._configurationService.onDidChangeConfiguration((()=>this._updateModelOptions()))),this._updateModelOptions(),this._register(new SemanticColoringFeature(this,this._themeService,this._configurationService,this._semanticStyling))}static _readModelOptions(config,isForSimpleWidget){var _a;let tabSize=_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_4__/* .EDITOR_MODEL_DEFAULTS */.DB.tabSize;if(config.editor&&"undefined"!==typeof config.editor.tabSize){const parsedTabSize=parseInt(config.editor.tabSize,10);isNaN(parsedTabSize)||(tabSize=parsedTabSize),tabSize<1&&(tabSize=1)}let indentSize=tabSize;if(config.editor&&"undefined"!==typeof config.editor.indentSize&&"tabSize"!==config.editor.indentSize){const parsedIndentSize=parseInt(config.editor.indentSize,10);isNaN(parsedIndentSize)||(indentSize=parsedIndentSize),indentSize<1&&(indentSize=1)}let insertSpaces=_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_4__/* .EDITOR_MODEL_DEFAULTS */.DB.insertSpaces;config.editor&&"undefined"!==typeof config.editor.insertSpaces&&(insertSpaces="false"!==config.editor.insertSpaces&&Boolean(config.editor.insertSpaces));let newDefaultEOL=DEFAULT_EOL;const eol=config.eol;"\r\n"===eol?newDefaultEOL=2/* CRLF */:"\n"===eol&&(newDefaultEOL=1/* LF */);let trimAutoWhitespace=_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_4__/* .EDITOR_MODEL_DEFAULTS */.DB.trimAutoWhitespace;config.editor&&"undefined"!==typeof config.editor.trimAutoWhitespace&&(trimAutoWhitespace="false"!==config.editor.trimAutoWhitespace&&Boolean(config.editor.trimAutoWhitespace));let detectIndentation=_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_4__/* .EDITOR_MODEL_DEFAULTS */.DB.detectIndentation;config.editor&&"undefined"!==typeof config.editor.detectIndentation&&(detectIndentation="false"!==config.editor.detectIndentation&&Boolean(config.editor.detectIndentation));let largeFileOptimizations=_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_4__/* .EDITOR_MODEL_DEFAULTS */.DB.largeFileOptimizations;config.editor&&"undefined"!==typeof config.editor.largeFileOptimizations&&(largeFileOptimizations="false"!==config.editor.largeFileOptimizations&&Boolean(config.editor.largeFileOptimizations));let bracketPairColorizationOptions=_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_4__/* .EDITOR_MODEL_DEFAULTS */.DB.bracketPairColorizationOptions;return(null===(_a=config.editor)||void 0===_a?void 0:_a.bracketPairColorization)&&"object"===typeof config.editor.bracketPairColorization&&(bracketPairColorizationOptions={enabled:!!config.editor.bracketPairColorization.enabled}),{isForSimpleWidget:isForSimpleWidget,tabSize:tabSize,indentSize:indentSize,insertSpaces:insertSpaces,detectIndentation:detectIndentation,defaultEOL:newDefaultEOL,trimAutoWhitespace:trimAutoWhitespace,largeFileOptimizations:largeFileOptimizations,bracketPairColorizationOptions:bracketPairColorizationOptions}}_getEOL(resource,language){if(resource)return this._resourcePropertiesService.getEOL(resource,language);const eol=this._configurationService.getValue("files.eol",{overrideIdentifier:language});return eol&&"string"===typeof eol&&"auto"!==eol?eol:3/* Linux */===_base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.OS||2/* Macintosh */===_base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.OS?"\n":"\r\n"}_shouldRestoreUndoStack(){const result=this._configurationService.getValue("files.restoreUndoStack");return"boolean"!==typeof result||result}getCreationOptions(language,resource,isForSimpleWidget){let creationOptions=this._modelCreationOptionsByLanguageAndResource[language+resource];if(!creationOptions){const editor=this._configurationService.getValue("editor",{overrideIdentifier:language,resource:resource}),eol=this._getEOL(resource,language);creationOptions=ModelServiceImpl._readModelOptions({editor:editor,eol:eol},isForSimpleWidget),this._modelCreationOptionsByLanguageAndResource[language+resource]=creationOptions}return creationOptions}_updateModelOptions(){const oldOptionsByLanguageAndResource=this._modelCreationOptionsByLanguageAndResource;this._modelCreationOptionsByLanguageAndResource=Object.create(null);
// Update options on all models
const keys=Object.keys(this._models);for(let i=0,len=keys.length;i<len;i++){const modelId=keys[i],modelData=this._models[modelId],language=modelData.model.getLanguageId(),uri=modelData.model.uri,oldOptions=oldOptionsByLanguageAndResource[language+uri],newOptions=this.getCreationOptions(language,uri,modelData.model.isForSimpleWidget);ModelServiceImpl._setModelOptionsForModel(modelData.model,newOptions,oldOptions)}}static _setModelOptionsForModel(model,newOptions,currentOptions){currentOptions&&currentOptions.defaultEOL!==newOptions.defaultEOL&&1===model.getLineCount()&&model.setEOL(1/* LF */===newOptions.defaultEOL?0/* LF */:1/* CRLF */),currentOptions&&currentOptions.detectIndentation===newOptions.detectIndentation&&currentOptions.insertSpaces===newOptions.insertSpaces&&currentOptions.tabSize===newOptions.tabSize&&currentOptions.indentSize===newOptions.indentSize&&currentOptions.trimAutoWhitespace===newOptions.trimAutoWhitespace&&(0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_21__/* .equals */.fS)(currentOptions.bracketPairColorizationOptions,newOptions.bracketPairColorizationOptions)||(newOptions.detectIndentation?(model.detectIndentation(newOptions.insertSpaces,newOptions.tabSize),model.updateOptions({trimAutoWhitespace:newOptions.trimAutoWhitespace,bracketColorizationOptions:newOptions.bracketPairColorizationOptions})):model.updateOptions({insertSpaces:newOptions.insertSpaces,tabSize:newOptions.tabSize,indentSize:newOptions.indentSize,trimAutoWhitespace:newOptions.trimAutoWhitespace,bracketColorizationOptions:newOptions.bracketPairColorizationOptions}))}
// --- begin IModelService
_insertDisposedModel(disposedModelData){this._disposedModels.set(MODEL_ID(disposedModelData.uri),disposedModelData),this._disposedModelsHeapSize+=disposedModelData.heapSize}_removeDisposedModel(resource){const disposedModelData=this._disposedModels.get(MODEL_ID(resource));return disposedModelData&&(this._disposedModelsHeapSize-=disposedModelData.heapSize),this._disposedModels.delete(MODEL_ID(resource)),disposedModelData}_ensureDisposedModelsHeapSize(maxModelsHeapSize){if(this._disposedModelsHeapSize>maxModelsHeapSize){
// we must remove some old undo stack elements to free up some memory
const disposedModels=[];this._disposedModels.forEach((entry=>{entry.sharesUndoRedoStack||disposedModels.push(entry)})),disposedModels.sort(((a,b)=>a.time-b.time));while(disposedModels.length>0&&this._disposedModelsHeapSize>maxModelsHeapSize){const disposedModel=disposedModels.shift();this._removeDisposedModel(disposedModel.uri),null!==disposedModel.initialUndoRedoSnapshot&&this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot)}}}_createModelData(value,languageId,resource,isForSimpleWidget){
// create & save the model
const options=this.getCreationOptions(languageId,resource,isForSimpleWidget),model=new _model_textModel_js__WEBPACK_IMPORTED_MODULE_5__/* .TextModel */.yO(value,options,languageId,resource,this._undoRedoService,this._modeService,this._languageConfigurationService);if(resource&&this._disposedModels.has(MODEL_ID(resource))){const disposedModelData=this._removeDisposedModel(resource),elements=this._undoRedoService.getElements(resource),sha1IsEqual=computeModelSha1(model)===disposedModelData.sha1;if(sha1IsEqual||disposedModelData.sharesUndoRedoStack){for(const element of elements.past)(0,_model_editStack_js__WEBPACK_IMPORTED_MODULE_17__/* .isEditStackElement */.e9)(element)&&element.matchesResource(resource)&&element.setModel(model);for(const element of elements.future)(0,_model_editStack_js__WEBPACK_IMPORTED_MODULE_17__/* .isEditStackElement */.e9)(element)&&element.matchesResource(resource)&&element.setModel(model);this._undoRedoService.setElementsValidFlag(resource,!0,(element=>(0,_model_editStack_js__WEBPACK_IMPORTED_MODULE_17__/* .isEditStackElement */.e9)(element)&&element.matchesResource(resource))),sha1IsEqual&&(model._overwriteVersionId(disposedModelData.versionId),model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId),model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot))}else null!==disposedModelData.initialUndoRedoSnapshot&&this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot)}const modelId=MODEL_ID(model.uri);if(this._models[modelId])
// There already exists a model with this id => this is a programmer error
throw new Error("ModelService: Cannot add model because it already exists!");const modelData=new ModelData(model,(model=>this._onWillDispose(model)),((model,e)=>this._onDidChangeLanguage(model,e)));return this._models[modelId]=modelData,modelData}createModel(value,languageSelection,resource,isForSimpleWidget=!1){let modelData;return languageSelection?(modelData=this._createModelData(value,languageSelection.languageId,resource,isForSimpleWidget),this.setMode(modelData.model,languageSelection)):modelData=this._createModelData(value,_modes_modesRegistry_js__WEBPACK_IMPORTED_MODULE_7__/* .PLAINTEXT_MODE_ID */.XT,resource,isForSimpleWidget),this._onModelAdded.fire(modelData.model),modelData.model}setMode(model,languageSelection){if(!languageSelection)return;const modelData=this._models[MODEL_ID(model.uri)];modelData&&modelData.setLanguage(languageSelection)}getModels(){const ret=[],keys=Object.keys(this._models);for(let i=0,len=keys.length;i<len;i++){const modelId=keys[i];ret.push(this._models[modelId].model)}return ret}getModel(resource){const modelId=MODEL_ID(resource),modelData=this._models[modelId];return modelData?modelData.model:null}getSemanticTokensProviderStyling(provider){return this._semanticStyling.get(provider)}
// --- end IModelService
_schemaShouldMaintainUndoRedoElements(resource){return resource.scheme===_base_common_network_js__WEBPACK_IMPORTED_MODULE_18__/* .Schemas */.lg.file||resource.scheme===_base_common_network_js__WEBPACK_IMPORTED_MODULE_18__/* .Schemas */.lg.vscodeRemote||resource.scheme===_base_common_network_js__WEBPACK_IMPORTED_MODULE_18__/* .Schemas */.lg.userData||resource.scheme===_base_common_network_js__WEBPACK_IMPORTED_MODULE_18__/* .Schemas */.lg.vscodeNotebookCell||"fake-fs"===resource.scheme}_onWillDispose(model){const modelId=MODEL_ID(model.uri),modelData=this._models[modelId],sharesUndoRedoStack=this._undoRedoService.getUriComparisonKey(model.uri)!==model.uri.toString();let maintainUndoRedoStack=!1,heapSize=0;if(sharesUndoRedoStack||this._shouldRestoreUndoStack()&&this._schemaShouldMaintainUndoRedoElements(model.uri)){const elements=this._undoRedoService.getElements(model.uri);if(elements.past.length>0||elements.future.length>0){for(const element of elements.past)(0,_model_editStack_js__WEBPACK_IMPORTED_MODULE_17__/* .isEditStackElement */.e9)(element)&&element.matchesResource(model.uri)&&(maintainUndoRedoStack=!0,heapSize+=element.heapSize(model.uri),element.setModel(model.uri));for(const element of elements.future)(0,_model_editStack_js__WEBPACK_IMPORTED_MODULE_17__/* .isEditStackElement */.e9)(element)&&element.matchesResource(model.uri)&&(maintainUndoRedoStack=!0,heapSize+=element.heapSize(model.uri),element.setModel(model.uri))}}const maxMemory=ModelServiceImpl.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;if(maintainUndoRedoStack)if(!sharesUndoRedoStack&&heapSize>maxMemory){
// the undo stack for this file would never fit in the configured memory, so don't bother with it.
const initialUndoRedoSnapshot=modelData.model.getInitialUndoRedoSnapshot();null!==initialUndoRedoSnapshot&&this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot)}else this._ensureDisposedModelsHeapSize(maxMemory-heapSize),
// We only invalidate the elements, but they remain in the undo-redo service.
this._undoRedoService.setElementsValidFlag(model.uri,!1,(element=>(0,_model_editStack_js__WEBPACK_IMPORTED_MODULE_17__/* .isEditStackElement */.e9)(element)&&element.matchesResource(model.uri))),this._insertDisposedModel(new DisposedModelInfo(model.uri,modelData.model.getInitialUndoRedoSnapshot(),Date.now(),sharesUndoRedoStack,heapSize,computeModelSha1(model),model.getVersionId(),model.getAlternativeVersionId()));else if(!sharesUndoRedoStack){const initialUndoRedoSnapshot=modelData.model.getInitialUndoRedoSnapshot();null!==initialUndoRedoSnapshot&&this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot)}delete this._models[modelId],modelData.dispose(),
// clean up cache
delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId()+model.uri],this._onModelRemoved.fire(model)}_onDidChangeLanguage(model,e){const oldModeId=e.oldLanguage,newModeId=model.getLanguageId(),oldOptions=this.getCreationOptions(oldModeId,model.uri,model.isForSimpleWidget),newOptions=this.getCreationOptions(newModeId,model.uri,model.isForSimpleWidget);ModelServiceImpl._setModelOptionsForModel(model,newOptions,oldOptions),this._onModelModeChanged.fire({model:model,oldModeId:oldModeId})}};ModelServiceImpl.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK=20971520,ModelServiceImpl=__decorate([__param(0,_platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_10__/* .IConfigurationService */.Ui),__param(1,_textResourceConfigurationService_js__WEBPACK_IMPORTED_MODULE_9__/* .ITextResourcePropertiesService */.y),__param(2,_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_13__/* .IThemeService */.XE),__param(3,_platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_14__/* .ILogService */.VZ),__param(4,_platform_undoRedo_common_undoRedo_js__WEBPACK_IMPORTED_MODULE_15__/* .IUndoRedoService */.tJ),__param(5,_modeService_js__WEBPACK_IMPORTED_MODULE_8__/* .IModeService */.h),__param(6,_modes_languageConfigurationRegistry_js__WEBPACK_IMPORTED_MODULE_22__/* .ILanguageConfigurationService */.c_)],ModelServiceImpl);const SEMANTIC_HIGHLIGHTING_SETTING_ID="editor.semanticHighlighting";function isSemanticColoringEnabled(model,themeService,configurationService){var _a;const setting=null===(_a=configurationService.getValue(SEMANTIC_HIGHLIGHTING_SETTING_ID,{overrideIdentifier:model.getLanguageId(),resource:model.uri}))||void 0===_a?void 0:_a.enabled;return"boolean"===typeof setting?setting:themeService.getColorTheme().semanticHighlighting}class SemanticColoringFeature extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .Disposable */.JT{constructor(modelService,themeService,configurationService,semanticStyling){super(),this._watchers=Object.create(null),this._semanticStyling=semanticStyling;const register=model=>{this._watchers[model.uri.toString()]=new ModelSemanticColoring(model,themeService,this._semanticStyling)},deregister=(model,modelSemanticColoring)=>{modelSemanticColoring.dispose(),delete this._watchers[model.uri.toString()]},handleSettingOrThemeChange=()=>{for(let model of modelService.getModels()){const curr=this._watchers[model.uri.toString()];isSemanticColoringEnabled(model,themeService,configurationService)?curr||register(model):curr&&deregister(model,curr)}};this._register(modelService.onModelAdded((model=>{isSemanticColoringEnabled(model,themeService,configurationService)&&register(model)}))),this._register(modelService.onModelRemoved((model=>{const curr=this._watchers[model.uri.toString()];curr&&deregister(model,curr)}))),this._register(configurationService.onDidChangeConfiguration((e=>{e.affectsConfiguration(SEMANTIC_HIGHLIGHTING_SETTING_ID)&&handleSettingOrThemeChange()}))),this._register(themeService.onDidColorThemeChange(handleSettingOrThemeChange))}}class SemanticStyling extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .Disposable */.JT{constructor(_themeService,_modeService,_logService){super(),this._themeService=_themeService,this._modeService=_modeService,this._logService=_logService,this._caches=new WeakMap,this._register(this._themeService.onDidColorThemeChange((()=>{this._caches=new WeakMap})))}get(provider){return this._caches.has(provider)||this._caches.set(provider,new _semanticTokensProviderStyling_js__WEBPACK_IMPORTED_MODULE_19__/* .SemanticTokensProviderStyling */.$(provider.getLegend(),this._themeService,this._modeService,this._logService)),this._caches.get(provider)}}class SemanticTokensResponse{constructor(provider,resultId,data){this.provider=provider,this.resultId=resultId,this.data=data}dispose(){this.provider.releaseDocumentSemanticTokens(this.resultId)}}class ModelSemanticColoring extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .Disposable */.JT{constructor(model,themeService,stylingProvider){super(),this._isDisposed=!1,this._model=model,this._semanticStyling=stylingProvider,this._fetchDocumentSemanticTokens=this._register(new _base_common_async_js__WEBPACK_IMPORTED_MODULE_11__/* .RunOnceScheduler */.pY((()=>this._fetchDocumentSemanticTokensNow()),ModelSemanticColoring.FETCH_DOCUMENT_SEMANTIC_TOKENS_DELAY)),this._currentDocumentResponse=null,this._currentDocumentRequestCancellationTokenSource=null,this._documentProvidersChangeListeners=[],this._register(this._model.onDidChangeContent((()=>{this._fetchDocumentSemanticTokens.isScheduled()||this._fetchDocumentSemanticTokens.schedule()}))),this._register(this._model.onDidChangeLanguage((()=>{
// clear any outstanding state
this._currentDocumentResponse&&(this._currentDocumentResponse.dispose(),this._currentDocumentResponse=null),this._currentDocumentRequestCancellationTokenSource&&(this._currentDocumentRequestCancellationTokenSource.cancel(),this._currentDocumentRequestCancellationTokenSource=null),this._setDocumentSemanticTokens(null,null,null,[]),this._fetchDocumentSemanticTokens.schedule(0)})));const bindDocumentChangeListeners=()=>{(0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .dispose */.B9)(this._documentProvidersChangeListeners),this._documentProvidersChangeListeners=[];for(const provider of _modes_js__WEBPACK_IMPORTED_MODULE_6__/* .DocumentSemanticTokensProviderRegistry */.wT.all(model))"function"===typeof provider.onDidChange&&this._documentProvidersChangeListeners.push(provider.onDidChange((()=>this._fetchDocumentSemanticTokens.schedule(0))))};bindDocumentChangeListeners(),this._register(_modes_js__WEBPACK_IMPORTED_MODULE_6__/* .DocumentSemanticTokensProviderRegistry */.wT.onDidChange((()=>{bindDocumentChangeListeners(),this._fetchDocumentSemanticTokens.schedule()}))),this._register(themeService.onDidColorThemeChange((_=>{
// clear out existing tokens
this._setDocumentSemanticTokens(null,null,null,[]),this._fetchDocumentSemanticTokens.schedule()}))),this._fetchDocumentSemanticTokens.schedule(0)}dispose(){this._currentDocumentResponse&&(this._currentDocumentResponse.dispose(),this._currentDocumentResponse=null),this._currentDocumentRequestCancellationTokenSource&&(this._currentDocumentRequestCancellationTokenSource.cancel(),this._currentDocumentRequestCancellationTokenSource=null),this._setDocumentSemanticTokens(null,null,null,[]),this._isDisposed=!0,super.dispose()}_fetchDocumentSemanticTokensNow(){if(this._currentDocumentRequestCancellationTokenSource)
// there is already a request running, let it finish...
return;if(!(0,_getSemanticTokens_js__WEBPACK_IMPORTED_MODULE_20__/* .hasDocumentSemanticTokensProvider */.Jc)(this._model))
// there is no provider
return void(this._currentDocumentResponse&&
// there are semantic tokens set
this._model.setSemanticTokens(null,!1));const cancellationTokenSource=new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_12__/* .CancellationTokenSource */.A,lastProvider=this._currentDocumentResponse?this._currentDocumentResponse.provider:null,lastResultId=this._currentDocumentResponse&&this._currentDocumentResponse.resultId||null,request=(0,_getSemanticTokens_js__WEBPACK_IMPORTED_MODULE_20__/* .getDocumentSemanticTokens */.ML)(this._model,lastProvider,lastResultId,cancellationTokenSource.token);this._currentDocumentRequestCancellationTokenSource=cancellationTokenSource;const pendingChanges=[],contentChangeListener=this._model.onDidChangeContent((e=>{pendingChanges.push(e)}));request.then((res=>{if(this._currentDocumentRequestCancellationTokenSource=null,contentChangeListener.dispose(),res){const{provider:provider,tokens:tokens}=res,styling=this._semanticStyling.get(provider);this._setDocumentSemanticTokens(provider,tokens||null,styling,pendingChanges)}else this._setDocumentSemanticTokens(null,null,null,pendingChanges)}),(err=>{const isExpectedError=err&&(_base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__/* .isPromiseCanceledError */.VV(err)||"string"===typeof err.message&&-1!==err.message.indexOf("busy"));isExpectedError||_base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__/* .onUnexpectedError */.dL(err),
// Semantic tokens eats up all errors and considers errors to mean that the result is temporarily not available
// The API does not have a special error kind to express this...
this._currentDocumentRequestCancellationTokenSource=null,contentChangeListener.dispose(),pendingChanges.length>0&&(
// More changes occurred while the request was running
this._fetchDocumentSemanticTokens.isScheduled()||this._fetchDocumentSemanticTokens.schedule())}))}static _copy(src,srcOffset,dest,destOffset,length){for(let i=0;i<length;i++)dest[destOffset+i]=src[srcOffset+i]}_setDocumentSemanticTokens(provider,tokens,styling,pendingChanges){const currentResponse=this._currentDocumentResponse,rescheduleIfNeeded=()=>{pendingChanges.length>0&&!this._fetchDocumentSemanticTokens.isScheduled()&&this._fetchDocumentSemanticTokens.schedule()};if(this._currentDocumentResponse&&(this._currentDocumentResponse.dispose(),this._currentDocumentResponse=null),this._isDisposed)
// disposed!
provider&&tokens&&provider.releaseDocumentSemanticTokens(tokens.resultId);else if(provider&&styling){if(!tokens)return this._model.setSemanticTokens(null,!0),void rescheduleIfNeeded();if((0,_getSemanticTokens_js__WEBPACK_IMPORTED_MODULE_20__/* .isSemanticTokensEdits */.Vj)(tokens)){if(!currentResponse)
// not possible!
return void this._model.setSemanticTokens(null,!0);if(0===tokens.edits.length)
// nothing to do!
tokens={resultId:tokens.resultId,data:currentResponse.data};else{let deltaLength=0;for(const edit of tokens.edits)deltaLength+=(edit.data?edit.data.length:0)-edit.deleteCount;const srcData=currentResponse.data,destData=new Uint32Array(srcData.length+deltaLength);let srcLastStart=srcData.length,destLastStart=destData.length;for(let i=tokens.edits.length-1;i>=0;i--){const edit=tokens.edits[i],copyCount=srcLastStart-(edit.start+edit.deleteCount);copyCount>0&&(ModelSemanticColoring._copy(srcData,srcLastStart-copyCount,destData,destLastStart-copyCount,copyCount),destLastStart-=copyCount),edit.data&&(ModelSemanticColoring._copy(edit.data,0,destData,destLastStart-edit.data.length,edit.data.length),destLastStart-=edit.data.length),srcLastStart=edit.start}srcLastStart>0&&ModelSemanticColoring._copy(srcData,0,destData,0,srcLastStart),tokens={resultId:tokens.resultId,data:destData}}}if((0,_getSemanticTokens_js__WEBPACK_IMPORTED_MODULE_20__/* .isSemanticTokens */.Vl)(tokens)){this._currentDocumentResponse=new SemanticTokensResponse(provider,tokens.resultId,tokens.data);const result=(0,_semanticTokensProviderStyling_js__WEBPACK_IMPORTED_MODULE_19__/* .toMultilineTokens2 */.h)(tokens,styling,this._model.getLanguageId());
// Adjust incoming semantic tokens
if(pendingChanges.length>0)
// More changes occurred while the request was running
// We need to:
// 1. Adjust incoming semantic tokens
// 2. Request them again
for(const change of pendingChanges)for(const area of result)for(const singleChange of change.changes)area.applyEdit(singleChange.range,singleChange.text);this._model.setSemanticTokens(result,!0)}else this._model.setSemanticTokens(null,!0);rescheduleIfNeeded()}else this._model.setSemanticTokens(null,!1)}}ModelSemanticColoring.FETCH_DOCUMENT_SEMANTIC_TOKENS_DELAY=300},
/***/288216:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */S:function(){/* binding */return ITextModelService}
/* harmony export */});
/* harmony import */var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(472065);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/const ITextModelService=(0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__/* .createDecorator */.yh)("textModelService");
/***/},
/***/665072:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */$:function(){/* binding */return SemanticTokensProviderStyling},
/* harmony export */h:function(){/* binding */return toMultilineTokens2}
/* harmony export */});
/* harmony import */var _modes_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(860303),_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(897781),_platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(43557),_model_tokensStore_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(858409),_modeService_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(771531),__decorate=function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"===typeof Reflect&&"function"===typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}};
/* harmony import */let SemanticTokensProviderStyling=class{constructor(_legend,_themeService,_modeService,_logService){this._legend=_legend,this._themeService=_themeService,this._modeService=_modeService,this._logService=_logService,this._hashTable=new HashTable,this._hasWarnedOverlappingTokens=!1}getMetadata(tokenTypeIndex,tokenModifierSet,languageId){const encodedLanguageId=this._modeService.languageIdCodec.encodeLanguageId(languageId),entry=this._hashTable.get(tokenTypeIndex,tokenModifierSet,encodedLanguageId);let metadata;if(entry)metadata=entry.metadata,this._logService.getLevel()===_platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_2__/* .LogLevel */["in"].Trace&&this._logService.trace(`SemanticTokensProviderStyling [CACHED] ${tokenTypeIndex} / ${tokenModifierSet}: foreground ${_modes_js__WEBPACK_IMPORTED_MODULE_0__/* .TokenMetadata */.NX.getForeground(metadata)}, fontStyle ${_modes_js__WEBPACK_IMPORTED_MODULE_0__/* .TokenMetadata */.NX.getFontStyle(metadata).toString(2)}`);else{let tokenType=this._legend.tokenTypes[tokenTypeIndex];const tokenModifiers=[];if(tokenType){let modifierSet=tokenModifierSet;for(let modifierIndex=0;modifierSet>0&&modifierIndex<this._legend.tokenModifiers.length;modifierIndex++)1&modifierSet&&tokenModifiers.push(this._legend.tokenModifiers[modifierIndex]),modifierSet>>=1;modifierSet>0&&this._logService.getLevel()===_platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_2__/* .LogLevel */["in"].Trace&&(this._logService.trace(`SemanticTokensProviderStyling: unknown token modifier index: ${tokenModifierSet.toString(2)} for legend: ${JSON.stringify(this._legend.tokenModifiers)}`),tokenModifiers.push("not-in-legend"));const tokenStyle=this._themeService.getColorTheme().getTokenStyleMetadata(tokenType,tokenModifiers,languageId);if("undefined"===typeof tokenStyle)metadata=2147483647/* NO_STYLING */;else{if(metadata=0,"undefined"!==typeof tokenStyle.italic){const italicBit=(tokenStyle.italic?1/* Italic */:0)<<11/* FONT_STYLE_OFFSET */;metadata|=1/* SEMANTIC_USE_ITALIC */|italicBit}if("undefined"!==typeof tokenStyle.bold){const boldBit=(tokenStyle.bold?2/* Bold */:0)<<11/* FONT_STYLE_OFFSET */;metadata|=2/* SEMANTIC_USE_BOLD */|boldBit}if("undefined"!==typeof tokenStyle.underline){const underlineBit=(tokenStyle.underline?4/* Underline */:0)<<11/* FONT_STYLE_OFFSET */;metadata|=4/* SEMANTIC_USE_UNDERLINE */|underlineBit}if(tokenStyle.foreground){const foregroundBits=tokenStyle.foreground<<14/* FOREGROUND_OFFSET */;metadata|=8/* SEMANTIC_USE_FOREGROUND */|foregroundBits}0===metadata&&(
// Nothing!
metadata=2147483647/* NO_STYLING */)}}else this._logService.getLevel()===_platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_2__/* .LogLevel */["in"].Trace&&this._logService.trace(`SemanticTokensProviderStyling: unknown token type index: ${tokenTypeIndex} for legend: ${JSON.stringify(this._legend.tokenTypes)}`),metadata=2147483647/* NO_STYLING */,tokenType="not-in-legend";this._hashTable.add(tokenTypeIndex,tokenModifierSet,encodedLanguageId,metadata),this._logService.getLevel()===_platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_2__/* .LogLevel */["in"].Trace&&this._logService.trace(`SemanticTokensProviderStyling ${tokenTypeIndex} (${tokenType}) / ${tokenModifierSet} (${tokenModifiers.join(" ")}): foreground ${_modes_js__WEBPACK_IMPORTED_MODULE_0__/* .TokenMetadata */.NX.getForeground(metadata)}, fontStyle ${_modes_js__WEBPACK_IMPORTED_MODULE_0__/* .TokenMetadata */.NX.getFontStyle(metadata).toString(2)}`)}return metadata}warnOverlappingSemanticTokens(lineNumber,startColumn){this._hasWarnedOverlappingTokens||(this._hasWarnedOverlappingTokens=!0)}};function toMultilineTokens2(tokens,styling,languageId){const srcData=tokens.data,tokenCount=tokens.data.length/5|0,tokensPerArea=Math.max(Math.ceil(tokenCount/1024/* DesiredMaxAreas */),400/* DesiredTokensPerArea */),result=[];let tokenIndex=0,lastLineNumber=1,lastStartCharacter=0;while(tokenIndex<tokenCount){const tokenStartIndex=tokenIndex;let tokenEndIndex=Math.min(tokenStartIndex+tokensPerArea,tokenCount);
// Keep tokens on the same line in the same area...
if(tokenEndIndex<tokenCount){let smallTokenEndIndex=tokenEndIndex;while(smallTokenEndIndex-1>tokenStartIndex&&0===srcData[5*smallTokenEndIndex])smallTokenEndIndex--;if(smallTokenEndIndex-1===tokenStartIndex){
// there are so many tokens on this line that our area would be empty, we must now go right
let bigTokenEndIndex=tokenEndIndex;while(bigTokenEndIndex+1<tokenCount&&0===srcData[5*bigTokenEndIndex])bigTokenEndIndex++;tokenEndIndex=bigTokenEndIndex}else tokenEndIndex=smallTokenEndIndex}let destData=new Uint32Array(4*(tokenEndIndex-tokenStartIndex)),destOffset=0,areaLine=0,prevLineNumber=0,prevStartCharacter=0,prevEndCharacter=0;while(tokenIndex<tokenEndIndex){const srcOffset=5*tokenIndex,deltaLine=srcData[srcOffset],deltaCharacter=srcData[srcOffset+1],lineNumber=lastLineNumber+deltaLine|0,startCharacter=0===deltaLine?lastStartCharacter+deltaCharacter|0:deltaCharacter,length=srcData[srcOffset+2],tokenTypeIndex=srcData[srcOffset+3],tokenModifierSet=srcData[srcOffset+4],metadata=styling.getMetadata(tokenTypeIndex,tokenModifierSet,languageId);2147483647/* NO_STYLING */!==metadata&&(0===areaLine&&(areaLine=lineNumber),prevLineNumber===lineNumber&&prevEndCharacter>startCharacter&&(styling.warnOverlappingSemanticTokens(lineNumber,startCharacter+1),prevStartCharacter<startCharacter?
// the previous token survives after the overlapping one
destData[destOffset-4+2]=startCharacter:
// the previous token is entirely covered by the overlapping one
destOffset-=4),destData[destOffset]=lineNumber-areaLine,destData[destOffset+1]=startCharacter,destData[destOffset+2]=startCharacter+length,destData[destOffset+3]=metadata,destOffset+=4,prevLineNumber=lineNumber,prevStartCharacter=startCharacter,prevEndCharacter=startCharacter+length),lastLineNumber=lineNumber,lastStartCharacter=startCharacter,tokenIndex++}destOffset!==destData.length&&(destData=destData.subarray(0,destOffset));const tokens=new _model_tokensStore_js__WEBPACK_IMPORTED_MODULE_3__/* .MultilineTokens2 */.Wz(areaLine,new _model_tokensStore_js__WEBPACK_IMPORTED_MODULE_3__/* .SparseEncodedTokens */.OU(destData));result.push(tokens)}return result}SemanticTokensProviderStyling=__decorate([__param(1,_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_1__/* .IThemeService */.XE),__param(2,_modeService_js__WEBPACK_IMPORTED_MODULE_4__/* .IModeService */.h),__param(3,_platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_2__/* .ILogService */.VZ)],SemanticTokensProviderStyling);class HashTableEntry{constructor(tokenTypeIndex,tokenModifierSet,languageId,metadata){this.tokenTypeIndex=tokenTypeIndex,this.tokenModifierSet=tokenModifierSet,this.languageId=languageId,this.metadata=metadata,this.next=null}}class HashTable{constructor(){this._elementsCount=0,this._currentLengthIndex=0,this._currentLength=HashTable._SIZES[this._currentLengthIndex],this._growCount=Math.round(this._currentLengthIndex+1<HashTable._SIZES.length?2/3*this._currentLength:0),this._elements=[],HashTable._nullOutEntries(this._elements,this._currentLength)}static _nullOutEntries(entries,length){for(let i=0;i<length;i++)entries[i]=null}_hash2(n1,n2){return(n1<<5)-n1+n2|0;// n1 * 31 + n2, keep as int32
}_hashFunc(tokenTypeIndex,tokenModifierSet,languageId){return this._hash2(this._hash2(tokenTypeIndex,tokenModifierSet),languageId)%this._currentLength}get(tokenTypeIndex,tokenModifierSet,languageId){const hash=this._hashFunc(tokenTypeIndex,tokenModifierSet,languageId);let p=this._elements[hash];while(p){if(p.tokenTypeIndex===tokenTypeIndex&&p.tokenModifierSet===tokenModifierSet&&p.languageId===languageId)return p;p=p.next}return null}add(tokenTypeIndex,tokenModifierSet,languageId,metadata){if(this._elementsCount++,0!==this._growCount&&this._elementsCount>=this._growCount){
// expand!
const oldElements=this._elements;this._currentLengthIndex++,this._currentLength=HashTable._SIZES[this._currentLengthIndex],this._growCount=Math.round(this._currentLengthIndex+1<HashTable._SIZES.length?2/3*this._currentLength:0),this._elements=[],HashTable._nullOutEntries(this._elements,this._currentLength);for(const first of oldElements){let p=first;while(p){const oldNext=p.next;p.next=null,this._add(p),p=oldNext}}}this._add(new HashTableEntry(tokenTypeIndex,tokenModifierSet,languageId,metadata))}_add(element){const hash=this._hashFunc(element.tokenTypeIndex,element.tokenModifierSet,element.languageId);element.next=this._elements[hash],this._elements[hash]=element}}HashTable._SIZES=[3,7,13,31,61,127,251,509,1021,2039,4093,8191,16381,32749,65521,131071,262139,524287,1048573,2097143]},
/***/333187:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */V:function(){/* binding */return ITextResourceConfigurationService},
/* harmony export */y:function(){/* binding */return ITextResourcePropertiesService}
/* harmony export */});
/* harmony import */var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(472065);const ITextResourceConfigurationService=(0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__/* .createDecorator */.yh)("textResourceConfigurationService"),ITextResourcePropertiesService=(0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__/* .createDecorator */.yh)("textResourcePropertiesService")},
/***/543457:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */j:function(){/* binding */return createWebWorker}
/* harmony export */});
/* harmony import */var _editorWorkerServiceImpl_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(87689),_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(998401);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Create a new web worker that has model syncing capabilities built in.
 * Specify an AMD module to load that will `create` an object that will be proxied.
 */
function createWebWorker(modelService,opts){return new MonacoWebWorkerImpl(modelService,opts)}class MonacoWebWorkerImpl extends _editorWorkerServiceImpl_js__WEBPACK_IMPORTED_MODULE_0__/* .EditorWorkerClient */.Q8{constructor(modelService,opts){super(modelService,opts.keepIdleModels||!1,opts.label),this._foreignModuleId=opts.moduleId,this._foreignModuleCreateData=opts.createData||null,this._foreignModuleHost=opts.host||null,this._foreignProxy=null}
// foreign host request
fhr(method,args){if(!this._foreignModuleHost||"function"!==typeof this._foreignModuleHost[method])return Promise.reject(new Error("Missing method "+method+" or missing main thread foreign host."));try{return Promise.resolve(this._foreignModuleHost[method].apply(this._foreignModuleHost,args))}catch(e){return Promise.reject(e)}}_getForeignProxy(){return this._foreignProxy||(this._foreignProxy=this._getProxy().then((proxy=>{const foreignHostMethods=this._foreignModuleHost?_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__/* .getAllMethodNames */.$E(this._foreignModuleHost):[];return proxy.loadForeignModule(this._foreignModuleId,this._foreignModuleCreateData,foreignHostMethods).then((foreignMethods=>{this._foreignModuleCreateData=null;const proxyMethodRequest=(method,args)=>proxy.fmr(method,args),createProxyMethod=(method,proxyMethodRequest)=>function(){const args=Array.prototype.slice.call(arguments,0);return proxyMethodRequest(method,args)};let foreignProxy={};for(const foreignMethod of foreignMethods)foreignProxy[foreignMethod]=createProxyMethod(foreignMethod,proxyMethodRequest);return foreignProxy}))}))),this._foreignProxy}getProxy(){return this._getForeignProxy()}withSyncedResources(resources){return this._withSyncedResources(resources).then((_=>this.getProxy()))}}
/***/},
/***/861762:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */O:function(){/* binding */return createMonacoBaseAPI}
/* harmony export */});
/* unused harmony export KeyMod */
/* harmony import */var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(471050),_base_common_event_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(104669),_base_common_keyCodes_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(22258),_base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(70666),_core_position_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(50187),_core_range_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(624314),_core_selection_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(203860),_core_token_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(85600),_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(370902);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class KeyMod{static chord(firstPart,secondPart){return(0,_base_common_keyCodes_js__WEBPACK_IMPORTED_MODULE_2__/* .KeyChord */.gx)(firstPart,secondPart)}}function createMonacoBaseAPI(){return{editor:void 0,languages:void 0,CancellationTokenSource:_base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__/* .CancellationTokenSource */.A,Emitter:_base_common_event_js__WEBPACK_IMPORTED_MODULE_1__/* .Emitter */.Q5,KeyCode:_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_4__/* .KeyCode */.VD,KeyMod:KeyMod,Position:_core_position_js__WEBPACK_IMPORTED_MODULE_5__/* .Position */.L,Range:_core_range_js__WEBPACK_IMPORTED_MODULE_6__/* .Range */.e,Selection:_core_selection_js__WEBPACK_IMPORTED_MODULE_7__/* .Selection */.Y,SelectionDirection:_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_4__/* .SelectionDirection */.a$,MarkerSeverity:_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_4__/* .MarkerSeverity */.ZL,MarkerTag:_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_4__/* .MarkerTag */.eB,Uri:_base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__/* .URI */.o,Token:_core_token_js__WEBPACK_IMPORTED_MODULE_8__/* .Token */.WU}}
/***/KeyMod.CtrlCmd=2048/* CtrlCmd */,KeyMod.Shift=1024/* Shift */,KeyMod.Alt=512/* Alt */,KeyMod.WinCtrl=256/* WinCtrl */},
/***/370902:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY.
var AccessibilitySupport,CompletionItemInsertTextRule,CompletionItemKind,CompletionItemTag,CompletionTriggerKind,ContentWidgetPositionPreference,CursorChangeReason,DefaultEndOfLine,DocumentHighlightKind,EditorAutoIndentStrategy,EditorOption,EndOfLinePreference,EndOfLineSequence,IndentAction,InlayHintKind,InlineCompletionTriggerKind,KeyCode,MarkerSeverity,MarkerTag,MinimapPosition,MouseTargetType,OverlayWidgetPositionPreference,OverviewRulerLane,RenderLineNumbersType,RenderMinimap,ScrollType,ScrollbarVisibility,SelectionDirection,SignatureHelpTriggerKind,SymbolKind,SymbolTag,TextEditorCursorBlinkingStyle,TextEditorCursorStyle,TrackedRangeStickiness,WrappingIndent;
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */E$:function(){/* binding */return OverlayWidgetPositionPreference},
/* harmony export */F5:function(){/* binding */return MinimapPosition},
/* harmony export */Ij:function(){/* binding */return CompletionTriggerKind},
/* harmony export */In:function(){/* binding */return TextEditorCursorBlinkingStyle},
/* harmony export */Lu:function(){/* binding */return RenderLineNumbersType},
/* harmony export */MG:function(){/* binding */return MouseTargetType},
/* harmony export */MY:function(){/* binding */return DocumentHighlightKind},
/* harmony export */OI:function(){/* binding */return TrackedRangeStickiness},
/* harmony export */VD:function(){/* binding */return KeyCode},
/* harmony export */Vi:function(){/* binding */return CursorChangeReason},
/* harmony export */WW:function(){/* binding */return SignatureHelpTriggerKind},
/* harmony export */ZL:function(){/* binding */return MarkerSeverity},
/* harmony export */_x:function(){/* binding */return DefaultEndOfLine},
/* harmony export */a$:function(){/* binding */return SelectionDirection},
/* harmony export */a7:function(){/* binding */return CompletionItemInsertTextRule},
/* harmony export */ao:function(){/* binding */return AccessibilitySupport},
/* harmony export */bw:function(){/* binding */return InlineCompletionTriggerKind},
/* harmony export */cR:function(){/* binding */return SymbolKind},
/* harmony export */cm:function(){/* binding */return CompletionItemKind},
/* harmony export */d2:function(){/* binding */return TextEditorCursorStyle},
/* harmony export */eB:function(){/* binding */return MarkerTag},
/* harmony export */g4:function(){/* binding */return ScrollType},
/* harmony export */g_:function(){/* binding */return ScrollbarVisibility},
/* harmony export */gl:function(){/* binding */return InlayHintKind},
/* harmony export */gm:function(){/* binding */return EndOfLinePreference},
/* harmony export */jl:function(){/* binding */return EndOfLineSequence},
/* harmony export */r3:function(){/* binding */return ContentWidgetPositionPreference},
/* harmony export */r4:function(){/* binding */return SymbolTag},
/* harmony export */rf:function(){/* binding */return EditorAutoIndentStrategy},
/* harmony export */sh:function(){/* binding */return OverviewRulerLane},
/* harmony export */up:function(){/* binding */return WrappingIndent},
/* harmony export */vQ:function(){/* binding */return RenderMinimap},
/* harmony export */wT:function(){/* binding */return EditorOption},
/* harmony export */wU:function(){/* binding */return IndentAction},
/* harmony export */we:function(){/* binding */return CompletionItemTag}
/* harmony export */}),function(AccessibilitySupport){
/**
     * This should be the browser case where it is not known if a screen reader is attached or no.
     */
AccessibilitySupport[AccessibilitySupport["Unknown"]=0]="Unknown",AccessibilitySupport[AccessibilitySupport["Disabled"]=1]="Disabled",AccessibilitySupport[AccessibilitySupport["Enabled"]=2]="Enabled"}(AccessibilitySupport||(AccessibilitySupport={})),function(CompletionItemInsertTextRule){
/**
     * Adjust whitespace/indentation of multiline insert texts to
     * match the current line indentation.
     */
CompletionItemInsertTextRule[CompletionItemInsertTextRule["KeepWhitespace"]=1]="KeepWhitespace",
/**
     * `insertText` is a snippet.
     */
CompletionItemInsertTextRule[CompletionItemInsertTextRule["InsertAsSnippet"]=4]="InsertAsSnippet"}(CompletionItemInsertTextRule||(CompletionItemInsertTextRule={})),function(CompletionItemKind){CompletionItemKind[CompletionItemKind["Method"]=0]="Method",CompletionItemKind[CompletionItemKind["Function"]=1]="Function",CompletionItemKind[CompletionItemKind["Constructor"]=2]="Constructor",CompletionItemKind[CompletionItemKind["Field"]=3]="Field",CompletionItemKind[CompletionItemKind["Variable"]=4]="Variable",CompletionItemKind[CompletionItemKind["Class"]=5]="Class",CompletionItemKind[CompletionItemKind["Struct"]=6]="Struct",CompletionItemKind[CompletionItemKind["Interface"]=7]="Interface",CompletionItemKind[CompletionItemKind["Module"]=8]="Module",CompletionItemKind[CompletionItemKind["Property"]=9]="Property",CompletionItemKind[CompletionItemKind["Event"]=10]="Event",CompletionItemKind[CompletionItemKind["Operator"]=11]="Operator",CompletionItemKind[CompletionItemKind["Unit"]=12]="Unit",CompletionItemKind[CompletionItemKind["Value"]=13]="Value",CompletionItemKind[CompletionItemKind["Constant"]=14]="Constant",CompletionItemKind[CompletionItemKind["Enum"]=15]="Enum",CompletionItemKind[CompletionItemKind["EnumMember"]=16]="EnumMember",CompletionItemKind[CompletionItemKind["Keyword"]=17]="Keyword",CompletionItemKind[CompletionItemKind["Text"]=18]="Text",CompletionItemKind[CompletionItemKind["Color"]=19]="Color",CompletionItemKind[CompletionItemKind["File"]=20]="File",CompletionItemKind[CompletionItemKind["Reference"]=21]="Reference",CompletionItemKind[CompletionItemKind["Customcolor"]=22]="Customcolor",CompletionItemKind[CompletionItemKind["Folder"]=23]="Folder",CompletionItemKind[CompletionItemKind["TypeParameter"]=24]="TypeParameter",CompletionItemKind[CompletionItemKind["User"]=25]="User",CompletionItemKind[CompletionItemKind["Issue"]=26]="Issue",CompletionItemKind[CompletionItemKind["Snippet"]=27]="Snippet"}(CompletionItemKind||(CompletionItemKind={})),function(CompletionItemTag){CompletionItemTag[CompletionItemTag["Deprecated"]=1]="Deprecated"}(CompletionItemTag||(CompletionItemTag={})),function(CompletionTriggerKind){CompletionTriggerKind[CompletionTriggerKind["Invoke"]=0]="Invoke",CompletionTriggerKind[CompletionTriggerKind["TriggerCharacter"]=1]="TriggerCharacter",CompletionTriggerKind[CompletionTriggerKind["TriggerForIncompleteCompletions"]=2]="TriggerForIncompleteCompletions"}(CompletionTriggerKind||(CompletionTriggerKind={})),function(ContentWidgetPositionPreference){
/**
     * Place the content widget exactly at a position
     */
ContentWidgetPositionPreference[ContentWidgetPositionPreference["EXACT"]=0]="EXACT",
/**
     * Place the content widget above a position
     */
ContentWidgetPositionPreference[ContentWidgetPositionPreference["ABOVE"]=1]="ABOVE",
/**
     * Place the content widget below a position
     */
ContentWidgetPositionPreference[ContentWidgetPositionPreference["BELOW"]=2]="BELOW"}(ContentWidgetPositionPreference||(ContentWidgetPositionPreference={})),function(CursorChangeReason){
/**
     * Unknown or not set.
     */
CursorChangeReason[CursorChangeReason["NotSet"]=0]="NotSet",
/**
     * A `model.setValue()` was called.
     */
CursorChangeReason[CursorChangeReason["ContentFlush"]=1]="ContentFlush",
/**
     * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.
     */
CursorChangeReason[CursorChangeReason["RecoverFromMarkers"]=2]="RecoverFromMarkers",
/**
     * There was an explicit user gesture.
     */
CursorChangeReason[CursorChangeReason["Explicit"]=3]="Explicit",
/**
     * There was a Paste.
     */
CursorChangeReason[CursorChangeReason["Paste"]=4]="Paste",
/**
     * There was an Undo.
     */
CursorChangeReason[CursorChangeReason["Undo"]=5]="Undo",
/**
     * There was a Redo.
     */
CursorChangeReason[CursorChangeReason["Redo"]=6]="Redo"}(CursorChangeReason||(CursorChangeReason={})),function(DefaultEndOfLine){
/**
     * Use line feed (\n) as the end of line character.
     */
DefaultEndOfLine[DefaultEndOfLine["LF"]=1]="LF",
/**
     * Use carriage return and line feed (\r\n) as the end of line character.
     */
DefaultEndOfLine[DefaultEndOfLine["CRLF"]=2]="CRLF"}(DefaultEndOfLine||(DefaultEndOfLine={})),function(DocumentHighlightKind){
/**
     * A textual occurrence.
     */
DocumentHighlightKind[DocumentHighlightKind["Text"]=0]="Text",
/**
     * Read-access of a symbol, like reading a variable.
     */
DocumentHighlightKind[DocumentHighlightKind["Read"]=1]="Read",
/**
     * Write-access of a symbol, like writing to a variable.
     */
DocumentHighlightKind[DocumentHighlightKind["Write"]=2]="Write"}(DocumentHighlightKind||(DocumentHighlightKind={})),function(EditorAutoIndentStrategy){EditorAutoIndentStrategy[EditorAutoIndentStrategy["None"]=0]="None",EditorAutoIndentStrategy[EditorAutoIndentStrategy["Keep"]=1]="Keep",EditorAutoIndentStrategy[EditorAutoIndentStrategy["Brackets"]=2]="Brackets",EditorAutoIndentStrategy[EditorAutoIndentStrategy["Advanced"]=3]="Advanced",EditorAutoIndentStrategy[EditorAutoIndentStrategy["Full"]=4]="Full"}(EditorAutoIndentStrategy||(EditorAutoIndentStrategy={})),function(EditorOption){EditorOption[EditorOption["acceptSuggestionOnCommitCharacter"]=0]="acceptSuggestionOnCommitCharacter",EditorOption[EditorOption["acceptSuggestionOnEnter"]=1]="acceptSuggestionOnEnter",EditorOption[EditorOption["accessibilitySupport"]=2]="accessibilitySupport",EditorOption[EditorOption["accessibilityPageSize"]=3]="accessibilityPageSize",EditorOption[EditorOption["ariaLabel"]=4]="ariaLabel",EditorOption[EditorOption["autoClosingBrackets"]=5]="autoClosingBrackets",EditorOption[EditorOption["autoClosingDelete"]=6]="autoClosingDelete",EditorOption[EditorOption["autoClosingOvertype"]=7]="autoClosingOvertype",EditorOption[EditorOption["autoClosingQuotes"]=8]="autoClosingQuotes",EditorOption[EditorOption["autoIndent"]=9]="autoIndent",EditorOption[EditorOption["automaticLayout"]=10]="automaticLayout",EditorOption[EditorOption["autoSurround"]=11]="autoSurround",EditorOption[EditorOption["bracketPairColorization"]=12]="bracketPairColorization",EditorOption[EditorOption["guides"]=13]="guides",EditorOption[EditorOption["codeLens"]=14]="codeLens",EditorOption[EditorOption["codeLensFontFamily"]=15]="codeLensFontFamily",EditorOption[EditorOption["codeLensFontSize"]=16]="codeLensFontSize",EditorOption[EditorOption["colorDecorators"]=17]="colorDecorators",EditorOption[EditorOption["columnSelection"]=18]="columnSelection",EditorOption[EditorOption["comments"]=19]="comments",EditorOption[EditorOption["contextmenu"]=20]="contextmenu",EditorOption[EditorOption["copyWithSyntaxHighlighting"]=21]="copyWithSyntaxHighlighting",EditorOption[EditorOption["cursorBlinking"]=22]="cursorBlinking",EditorOption[EditorOption["cursorSmoothCaretAnimation"]=23]="cursorSmoothCaretAnimation",EditorOption[EditorOption["cursorStyle"]=24]="cursorStyle",EditorOption[EditorOption["cursorSurroundingLines"]=25]="cursorSurroundingLines",EditorOption[EditorOption["cursorSurroundingLinesStyle"]=26]="cursorSurroundingLinesStyle",EditorOption[EditorOption["cursorWidth"]=27]="cursorWidth",EditorOption[EditorOption["disableLayerHinting"]=28]="disableLayerHinting",EditorOption[EditorOption["disableMonospaceOptimizations"]=29]="disableMonospaceOptimizations",EditorOption[EditorOption["domReadOnly"]=30]="domReadOnly",EditorOption[EditorOption["dragAndDrop"]=31]="dragAndDrop",EditorOption[EditorOption["emptySelectionClipboard"]=32]="emptySelectionClipboard",EditorOption[EditorOption["extraEditorClassName"]=33]="extraEditorClassName",EditorOption[EditorOption["fastScrollSensitivity"]=34]="fastScrollSensitivity",EditorOption[EditorOption["find"]=35]="find",EditorOption[EditorOption["fixedOverflowWidgets"]=36]="fixedOverflowWidgets",EditorOption[EditorOption["folding"]=37]="folding",EditorOption[EditorOption["foldingStrategy"]=38]="foldingStrategy",EditorOption[EditorOption["foldingHighlight"]=39]="foldingHighlight",EditorOption[EditorOption["foldingImportsByDefault"]=40]="foldingImportsByDefault",EditorOption[EditorOption["unfoldOnClickAfterEndOfLine"]=41]="unfoldOnClickAfterEndOfLine",EditorOption[EditorOption["fontFamily"]=42]="fontFamily",EditorOption[EditorOption["fontInfo"]=43]="fontInfo",EditorOption[EditorOption["fontLigatures"]=44]="fontLigatures",EditorOption[EditorOption["fontSize"]=45]="fontSize",EditorOption[EditorOption["fontWeight"]=46]="fontWeight",EditorOption[EditorOption["formatOnPaste"]=47]="formatOnPaste",EditorOption[EditorOption["formatOnType"]=48]="formatOnType",EditorOption[EditorOption["glyphMargin"]=49]="glyphMargin",EditorOption[EditorOption["gotoLocation"]=50]="gotoLocation",EditorOption[EditorOption["hideCursorInOverviewRuler"]=51]="hideCursorInOverviewRuler",EditorOption[EditorOption["hover"]=52]="hover",EditorOption[EditorOption["inDiffEditor"]=53]="inDiffEditor",EditorOption[EditorOption["inlineSuggest"]=54]="inlineSuggest",EditorOption[EditorOption["letterSpacing"]=55]="letterSpacing",EditorOption[EditorOption["lightbulb"]=56]="lightbulb",EditorOption[EditorOption["lineDecorationsWidth"]=57]="lineDecorationsWidth",EditorOption[EditorOption["lineHeight"]=58]="lineHeight",EditorOption[EditorOption["lineNumbers"]=59]="lineNumbers",EditorOption[EditorOption["lineNumbersMinChars"]=60]="lineNumbersMinChars",EditorOption[EditorOption["linkedEditing"]=61]="linkedEditing",EditorOption[EditorOption["links"]=62]="links",EditorOption[EditorOption["matchBrackets"]=63]="matchBrackets",EditorOption[EditorOption["minimap"]=64]="minimap",EditorOption[EditorOption["mouseStyle"]=65]="mouseStyle",EditorOption[EditorOption["mouseWheelScrollSensitivity"]=66]="mouseWheelScrollSensitivity",EditorOption[EditorOption["mouseWheelZoom"]=67]="mouseWheelZoom",EditorOption[EditorOption["multiCursorMergeOverlapping"]=68]="multiCursorMergeOverlapping",EditorOption[EditorOption["multiCursorModifier"]=69]="multiCursorModifier",EditorOption[EditorOption["multiCursorPaste"]=70]="multiCursorPaste",EditorOption[EditorOption["occurrencesHighlight"]=71]="occurrencesHighlight",EditorOption[EditorOption["overviewRulerBorder"]=72]="overviewRulerBorder",EditorOption[EditorOption["overviewRulerLanes"]=73]="overviewRulerLanes",EditorOption[EditorOption["padding"]=74]="padding",EditorOption[EditorOption["parameterHints"]=75]="parameterHints",EditorOption[EditorOption["peekWidgetDefaultFocus"]=76]="peekWidgetDefaultFocus",EditorOption[EditorOption["definitionLinkOpensInPeek"]=77]="definitionLinkOpensInPeek",EditorOption[EditorOption["quickSuggestions"]=78]="quickSuggestions",EditorOption[EditorOption["quickSuggestionsDelay"]=79]="quickSuggestionsDelay",EditorOption[EditorOption["readOnly"]=80]="readOnly",EditorOption[EditorOption["renameOnType"]=81]="renameOnType",EditorOption[EditorOption["renderControlCharacters"]=82]="renderControlCharacters",EditorOption[EditorOption["renderFinalNewline"]=83]="renderFinalNewline",EditorOption[EditorOption["renderLineHighlight"]=84]="renderLineHighlight",EditorOption[EditorOption["renderLineHighlightOnlyWhenFocus"]=85]="renderLineHighlightOnlyWhenFocus",EditorOption[EditorOption["renderValidationDecorations"]=86]="renderValidationDecorations",EditorOption[EditorOption["renderWhitespace"]=87]="renderWhitespace",EditorOption[EditorOption["revealHorizontalRightPadding"]=88]="revealHorizontalRightPadding",EditorOption[EditorOption["roundedSelection"]=89]="roundedSelection",EditorOption[EditorOption["rulers"]=90]="rulers",EditorOption[EditorOption["scrollbar"]=91]="scrollbar",EditorOption[EditorOption["scrollBeyondLastColumn"]=92]="scrollBeyondLastColumn",EditorOption[EditorOption["scrollBeyondLastLine"]=93]="scrollBeyondLastLine",EditorOption[EditorOption["scrollPredominantAxis"]=94]="scrollPredominantAxis",EditorOption[EditorOption["selectionClipboard"]=95]="selectionClipboard",EditorOption[EditorOption["selectionHighlight"]=96]="selectionHighlight",EditorOption[EditorOption["selectOnLineNumbers"]=97]="selectOnLineNumbers",EditorOption[EditorOption["showFoldingControls"]=98]="showFoldingControls",EditorOption[EditorOption["showUnused"]=99]="showUnused",EditorOption[EditorOption["snippetSuggestions"]=100]="snippetSuggestions",EditorOption[EditorOption["smartSelect"]=101]="smartSelect",EditorOption[EditorOption["smoothScrolling"]=102]="smoothScrolling",EditorOption[EditorOption["stickyTabStops"]=103]="stickyTabStops",EditorOption[EditorOption["stopRenderingLineAfter"]=104]="stopRenderingLineAfter",EditorOption[EditorOption["suggest"]=105]="suggest",EditorOption[EditorOption["suggestFontSize"]=106]="suggestFontSize",EditorOption[EditorOption["suggestLineHeight"]=107]="suggestLineHeight",EditorOption[EditorOption["suggestOnTriggerCharacters"]=108]="suggestOnTriggerCharacters",EditorOption[EditorOption["suggestSelection"]=109]="suggestSelection",EditorOption[EditorOption["tabCompletion"]=110]="tabCompletion",EditorOption[EditorOption["tabIndex"]=111]="tabIndex",EditorOption[EditorOption["unusualLineTerminators"]=112]="unusualLineTerminators",EditorOption[EditorOption["useShadowDOM"]=113]="useShadowDOM",EditorOption[EditorOption["useTabStops"]=114]="useTabStops",EditorOption[EditorOption["wordSeparators"]=115]="wordSeparators",EditorOption[EditorOption["wordWrap"]=116]="wordWrap",EditorOption[EditorOption["wordWrapBreakAfterCharacters"]=117]="wordWrapBreakAfterCharacters",EditorOption[EditorOption["wordWrapBreakBeforeCharacters"]=118]="wordWrapBreakBeforeCharacters",EditorOption[EditorOption["wordWrapColumn"]=119]="wordWrapColumn",EditorOption[EditorOption["wordWrapOverride1"]=120]="wordWrapOverride1",EditorOption[EditorOption["wordWrapOverride2"]=121]="wordWrapOverride2",EditorOption[EditorOption["wrappingIndent"]=122]="wrappingIndent",EditorOption[EditorOption["wrappingStrategy"]=123]="wrappingStrategy",EditorOption[EditorOption["showDeprecated"]=124]="showDeprecated",EditorOption[EditorOption["inlayHints"]=125]="inlayHints",EditorOption[EditorOption["editorClassName"]=126]="editorClassName",EditorOption[EditorOption["pixelRatio"]=127]="pixelRatio",EditorOption[EditorOption["tabFocusMode"]=128]="tabFocusMode",EditorOption[EditorOption["layoutInfo"]=129]="layoutInfo",EditorOption[EditorOption["wrappingInfo"]=130]="wrappingInfo"}(EditorOption||(EditorOption={})),function(EndOfLinePreference){
/**
     * Use the end of line character identified in the text buffer.
     */
EndOfLinePreference[EndOfLinePreference["TextDefined"]=0]="TextDefined",
/**
     * Use line feed (\n) as the end of line character.
     */
EndOfLinePreference[EndOfLinePreference["LF"]=1]="LF",
/**
     * Use carriage return and line feed (\r\n) as the end of line character.
     */
EndOfLinePreference[EndOfLinePreference["CRLF"]=2]="CRLF"}(EndOfLinePreference||(EndOfLinePreference={})),function(EndOfLineSequence){
/**
     * Use line feed (\n) as the end of line character.
     */
EndOfLineSequence[EndOfLineSequence["LF"]=0]="LF",
/**
     * Use carriage return and line feed (\r\n) as the end of line character.
     */
EndOfLineSequence[EndOfLineSequence["CRLF"]=1]="CRLF"}(EndOfLineSequence||(EndOfLineSequence={})),function(IndentAction){
/**
     * Insert new line and copy the previous line's indentation.
     */
IndentAction[IndentAction["None"]=0]="None",
/**
     * Insert new line and indent once (relative to the previous line's indentation).
     */
IndentAction[IndentAction["Indent"]=1]="Indent",
/**
     * Insert two new lines:
     *  - the first one indented which will hold the cursor
     *  - the second one at the same indentation level
     */
IndentAction[IndentAction["IndentOutdent"]=2]="IndentOutdent",
/**
     * Insert new line and outdent once (relative to the previous line's indentation).
     */
IndentAction[IndentAction["Outdent"]=3]="Outdent"}(IndentAction||(IndentAction={})),function(InlayHintKind){InlayHintKind[InlayHintKind["Other"]=0]="Other",InlayHintKind[InlayHintKind["Type"]=1]="Type",InlayHintKind[InlayHintKind["Parameter"]=2]="Parameter"}(InlayHintKind||(InlayHintKind={})),function(InlineCompletionTriggerKind){
/**
     * Completion was triggered automatically while editing.
     * It is sufficient to return a single completion item in this case.
     */
InlineCompletionTriggerKind[InlineCompletionTriggerKind["Automatic"]=0]="Automatic",
/**
     * Completion was triggered explicitly by a user gesture.
     * Return multiple completion items to enable cycling through them.
     */
InlineCompletionTriggerKind[InlineCompletionTriggerKind["Explicit"]=1]="Explicit"}(InlineCompletionTriggerKind||(InlineCompletionTriggerKind={})),function(KeyCode){KeyCode[KeyCode["DependsOnKbLayout"]=-1]="DependsOnKbLayout",
/**
     * Placed first to cover the 0 value of the enum.
     */
KeyCode[KeyCode["Unknown"]=0]="Unknown",KeyCode[KeyCode["Backspace"]=1]="Backspace",KeyCode[KeyCode["Tab"]=2]="Tab",KeyCode[KeyCode["Enter"]=3]="Enter",KeyCode[KeyCode["Shift"]=4]="Shift",KeyCode[KeyCode["Ctrl"]=5]="Ctrl",KeyCode[KeyCode["Alt"]=6]="Alt",KeyCode[KeyCode["PauseBreak"]=7]="PauseBreak",KeyCode[KeyCode["CapsLock"]=8]="CapsLock",KeyCode[KeyCode["Escape"]=9]="Escape",KeyCode[KeyCode["Space"]=10]="Space",KeyCode[KeyCode["PageUp"]=11]="PageUp",KeyCode[KeyCode["PageDown"]=12]="PageDown",KeyCode[KeyCode["End"]=13]="End",KeyCode[KeyCode["Home"]=14]="Home",KeyCode[KeyCode["LeftArrow"]=15]="LeftArrow",KeyCode[KeyCode["UpArrow"]=16]="UpArrow",KeyCode[KeyCode["RightArrow"]=17]="RightArrow",KeyCode[KeyCode["DownArrow"]=18]="DownArrow",KeyCode[KeyCode["Insert"]=19]="Insert",KeyCode[KeyCode["Delete"]=20]="Delete",KeyCode[KeyCode["Digit0"]=21]="Digit0",KeyCode[KeyCode["Digit1"]=22]="Digit1",KeyCode[KeyCode["Digit2"]=23]="Digit2",KeyCode[KeyCode["Digit3"]=24]="Digit3",KeyCode[KeyCode["Digit4"]=25]="Digit4",KeyCode[KeyCode["Digit5"]=26]="Digit5",KeyCode[KeyCode["Digit6"]=27]="Digit6",KeyCode[KeyCode["Digit7"]=28]="Digit7",KeyCode[KeyCode["Digit8"]=29]="Digit8",KeyCode[KeyCode["Digit9"]=30]="Digit9",KeyCode[KeyCode["KeyA"]=31]="KeyA",KeyCode[KeyCode["KeyB"]=32]="KeyB",KeyCode[KeyCode["KeyC"]=33]="KeyC",KeyCode[KeyCode["KeyD"]=34]="KeyD",KeyCode[KeyCode["KeyE"]=35]="KeyE",KeyCode[KeyCode["KeyF"]=36]="KeyF",KeyCode[KeyCode["KeyG"]=37]="KeyG",KeyCode[KeyCode["KeyH"]=38]="KeyH",KeyCode[KeyCode["KeyI"]=39]="KeyI",KeyCode[KeyCode["KeyJ"]=40]="KeyJ",KeyCode[KeyCode["KeyK"]=41]="KeyK",KeyCode[KeyCode["KeyL"]=42]="KeyL",KeyCode[KeyCode["KeyM"]=43]="KeyM",KeyCode[KeyCode["KeyN"]=44]="KeyN",KeyCode[KeyCode["KeyO"]=45]="KeyO",KeyCode[KeyCode["KeyP"]=46]="KeyP",KeyCode[KeyCode["KeyQ"]=47]="KeyQ",KeyCode[KeyCode["KeyR"]=48]="KeyR",KeyCode[KeyCode["KeyS"]=49]="KeyS",KeyCode[KeyCode["KeyT"]=50]="KeyT",KeyCode[KeyCode["KeyU"]=51]="KeyU",KeyCode[KeyCode["KeyV"]=52]="KeyV",KeyCode[KeyCode["KeyW"]=53]="KeyW",KeyCode[KeyCode["KeyX"]=54]="KeyX",KeyCode[KeyCode["KeyY"]=55]="KeyY",KeyCode[KeyCode["KeyZ"]=56]="KeyZ",KeyCode[KeyCode["Meta"]=57]="Meta",KeyCode[KeyCode["ContextMenu"]=58]="ContextMenu",KeyCode[KeyCode["F1"]=59]="F1",KeyCode[KeyCode["F2"]=60]="F2",KeyCode[KeyCode["F3"]=61]="F3",KeyCode[KeyCode["F4"]=62]="F4",KeyCode[KeyCode["F5"]=63]="F5",KeyCode[KeyCode["F6"]=64]="F6",KeyCode[KeyCode["F7"]=65]="F7",KeyCode[KeyCode["F8"]=66]="F8",KeyCode[KeyCode["F9"]=67]="F9",KeyCode[KeyCode["F10"]=68]="F10",KeyCode[KeyCode["F11"]=69]="F11",KeyCode[KeyCode["F12"]=70]="F12",KeyCode[KeyCode["F13"]=71]="F13",KeyCode[KeyCode["F14"]=72]="F14",KeyCode[KeyCode["F15"]=73]="F15",KeyCode[KeyCode["F16"]=74]="F16",KeyCode[KeyCode["F17"]=75]="F17",KeyCode[KeyCode["F18"]=76]="F18",KeyCode[KeyCode["F19"]=77]="F19",KeyCode[KeyCode["NumLock"]=78]="NumLock",KeyCode[KeyCode["ScrollLock"]=79]="ScrollLock",
/**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the ';:' key
     */
KeyCode[KeyCode["Semicolon"]=80]="Semicolon",
/**
     * For any country/region, the '+' key
     * For the US standard keyboard, the '=+' key
     */
KeyCode[KeyCode["Equal"]=81]="Equal",
/**
     * For any country/region, the ',' key
     * For the US standard keyboard, the ',<' key
     */
KeyCode[KeyCode["Comma"]=82]="Comma",
/**
     * For any country/region, the '-' key
     * For the US standard keyboard, the '-_' key
     */
KeyCode[KeyCode["Minus"]=83]="Minus",
/**
     * For any country/region, the '.' key
     * For the US standard keyboard, the '.>' key
     */
KeyCode[KeyCode["Period"]=84]="Period",
/**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '/?' key
     */
KeyCode[KeyCode["Slash"]=85]="Slash",
/**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '`~' key
     */
KeyCode[KeyCode["Backquote"]=86]="Backquote",
/**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '[{' key
     */
KeyCode[KeyCode["BracketLeft"]=87]="BracketLeft",
/**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '\|' key
     */
KeyCode[KeyCode["Backslash"]=88]="Backslash",
/**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the ']}' key
     */
KeyCode[KeyCode["BracketRight"]=89]="BracketRight",
/**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the ''"' key
     */
KeyCode[KeyCode["Quote"]=90]="Quote",
/**
     * Used for miscellaneous characters; it can vary by keyboard.
     */
KeyCode[KeyCode["OEM_8"]=91]="OEM_8",
/**
     * Either the angle bracket key or the backslash key on the RT 102-key keyboard.
     */
KeyCode[KeyCode["IntlBackslash"]=92]="IntlBackslash",KeyCode[KeyCode["Numpad0"]=93]="Numpad0",KeyCode[KeyCode["Numpad1"]=94]="Numpad1",KeyCode[KeyCode["Numpad2"]=95]="Numpad2",KeyCode[KeyCode["Numpad3"]=96]="Numpad3",KeyCode[KeyCode["Numpad4"]=97]="Numpad4",KeyCode[KeyCode["Numpad5"]=98]="Numpad5",KeyCode[KeyCode["Numpad6"]=99]="Numpad6",KeyCode[KeyCode["Numpad7"]=100]="Numpad7",KeyCode[KeyCode["Numpad8"]=101]="Numpad8",KeyCode[KeyCode["Numpad9"]=102]="Numpad9",KeyCode[KeyCode["NumpadMultiply"]=103]="NumpadMultiply",KeyCode[KeyCode["NumpadAdd"]=104]="NumpadAdd",KeyCode[KeyCode["NUMPAD_SEPARATOR"]=105]="NUMPAD_SEPARATOR",KeyCode[KeyCode["NumpadSubtract"]=106]="NumpadSubtract",KeyCode[KeyCode["NumpadDecimal"]=107]="NumpadDecimal",KeyCode[KeyCode["NumpadDivide"]=108]="NumpadDivide",
/**
     * Cover all key codes when IME is processing input.
     */
KeyCode[KeyCode["KEY_IN_COMPOSITION"]=109]="KEY_IN_COMPOSITION",KeyCode[KeyCode["ABNT_C1"]=110]="ABNT_C1",KeyCode[KeyCode["ABNT_C2"]=111]="ABNT_C2",KeyCode[KeyCode["AudioVolumeMute"]=112]="AudioVolumeMute",KeyCode[KeyCode["AudioVolumeUp"]=113]="AudioVolumeUp",KeyCode[KeyCode["AudioVolumeDown"]=114]="AudioVolumeDown",KeyCode[KeyCode["BrowserSearch"]=115]="BrowserSearch",KeyCode[KeyCode["BrowserHome"]=116]="BrowserHome",KeyCode[KeyCode["BrowserBack"]=117]="BrowserBack",KeyCode[KeyCode["BrowserForward"]=118]="BrowserForward",KeyCode[KeyCode["MediaTrackNext"]=119]="MediaTrackNext",KeyCode[KeyCode["MediaTrackPrevious"]=120]="MediaTrackPrevious",KeyCode[KeyCode["MediaStop"]=121]="MediaStop",KeyCode[KeyCode["MediaPlayPause"]=122]="MediaPlayPause",KeyCode[KeyCode["LaunchMediaPlayer"]=123]="LaunchMediaPlayer",KeyCode[KeyCode["LaunchMail"]=124]="LaunchMail",KeyCode[KeyCode["LaunchApp2"]=125]="LaunchApp2",
/**
     * Placed last to cover the length of the enum.
     * Please do not depend on this value!
     */
KeyCode[KeyCode["MAX_VALUE"]=126]="MAX_VALUE"}(KeyCode||(KeyCode={})),function(MarkerSeverity){MarkerSeverity[MarkerSeverity["Hint"]=1]="Hint",MarkerSeverity[MarkerSeverity["Info"]=2]="Info",MarkerSeverity[MarkerSeverity["Warning"]=4]="Warning",MarkerSeverity[MarkerSeverity["Error"]=8]="Error"}(MarkerSeverity||(MarkerSeverity={})),function(MarkerTag){MarkerTag[MarkerTag["Unnecessary"]=1]="Unnecessary",MarkerTag[MarkerTag["Deprecated"]=2]="Deprecated"}(MarkerTag||(MarkerTag={})),function(MinimapPosition){MinimapPosition[MinimapPosition["Inline"]=1]="Inline",MinimapPosition[MinimapPosition["Gutter"]=2]="Gutter"}(MinimapPosition||(MinimapPosition={})),function(MouseTargetType){
/**
     * Mouse is on top of an unknown element.
     */
MouseTargetType[MouseTargetType["UNKNOWN"]=0]="UNKNOWN",
/**
     * Mouse is on top of the textarea used for input.
     */
MouseTargetType[MouseTargetType["TEXTAREA"]=1]="TEXTAREA",
/**
     * Mouse is on top of the glyph margin
     */
MouseTargetType[MouseTargetType["GUTTER_GLYPH_MARGIN"]=2]="GUTTER_GLYPH_MARGIN",
/**
     * Mouse is on top of the line numbers
     */
MouseTargetType[MouseTargetType["GUTTER_LINE_NUMBERS"]=3]="GUTTER_LINE_NUMBERS",
/**
     * Mouse is on top of the line decorations
     */
MouseTargetType[MouseTargetType["GUTTER_LINE_DECORATIONS"]=4]="GUTTER_LINE_DECORATIONS",
/**
     * Mouse is on top of the whitespace left in the gutter by a view zone.
     */
MouseTargetType[MouseTargetType["GUTTER_VIEW_ZONE"]=5]="GUTTER_VIEW_ZONE",
/**
     * Mouse is on top of text in the content.
     */
MouseTargetType[MouseTargetType["CONTENT_TEXT"]=6]="CONTENT_TEXT",
/**
     * Mouse is on top of empty space in the content (e.g. after line text or below last line)
     */
MouseTargetType[MouseTargetType["CONTENT_EMPTY"]=7]="CONTENT_EMPTY",
/**
     * Mouse is on top of a view zone in the content.
     */
MouseTargetType[MouseTargetType["CONTENT_VIEW_ZONE"]=8]="CONTENT_VIEW_ZONE",
/**
     * Mouse is on top of a content widget.
     */
MouseTargetType[MouseTargetType["CONTENT_WIDGET"]=9]="CONTENT_WIDGET",
/**
     * Mouse is on top of the decorations overview ruler.
     */
MouseTargetType[MouseTargetType["OVERVIEW_RULER"]=10]="OVERVIEW_RULER",
/**
     * Mouse is on top of a scrollbar.
     */
MouseTargetType[MouseTargetType["SCROLLBAR"]=11]="SCROLLBAR",
/**
     * Mouse is on top of an overlay widget.
     */
MouseTargetType[MouseTargetType["OVERLAY_WIDGET"]=12]="OVERLAY_WIDGET",
/**
     * Mouse is outside of the editor.
     */
MouseTargetType[MouseTargetType["OUTSIDE_EDITOR"]=13]="OUTSIDE_EDITOR"}(MouseTargetType||(MouseTargetType={})),function(OverlayWidgetPositionPreference){
/**
     * Position the overlay widget in the top right corner
     */
OverlayWidgetPositionPreference[OverlayWidgetPositionPreference["TOP_RIGHT_CORNER"]=0]="TOP_RIGHT_CORNER",
/**
     * Position the overlay widget in the bottom right corner
     */
OverlayWidgetPositionPreference[OverlayWidgetPositionPreference["BOTTOM_RIGHT_CORNER"]=1]="BOTTOM_RIGHT_CORNER",
/**
     * Position the overlay widget in the top center
     */
OverlayWidgetPositionPreference[OverlayWidgetPositionPreference["TOP_CENTER"]=2]="TOP_CENTER"}(OverlayWidgetPositionPreference||(OverlayWidgetPositionPreference={})),function(OverviewRulerLane){OverviewRulerLane[OverviewRulerLane["Left"]=1]="Left",OverviewRulerLane[OverviewRulerLane["Center"]=2]="Center",OverviewRulerLane[OverviewRulerLane["Right"]=4]="Right",OverviewRulerLane[OverviewRulerLane["Full"]=7]="Full"}(OverviewRulerLane||(OverviewRulerLane={})),function(RenderLineNumbersType){RenderLineNumbersType[RenderLineNumbersType["Off"]=0]="Off",RenderLineNumbersType[RenderLineNumbersType["On"]=1]="On",RenderLineNumbersType[RenderLineNumbersType["Relative"]=2]="Relative",RenderLineNumbersType[RenderLineNumbersType["Interval"]=3]="Interval",RenderLineNumbersType[RenderLineNumbersType["Custom"]=4]="Custom"}(RenderLineNumbersType||(RenderLineNumbersType={})),function(RenderMinimap){RenderMinimap[RenderMinimap["None"]=0]="None",RenderMinimap[RenderMinimap["Text"]=1]="Text",RenderMinimap[RenderMinimap["Blocks"]=2]="Blocks"}(RenderMinimap||(RenderMinimap={})),function(ScrollType){ScrollType[ScrollType["Smooth"]=0]="Smooth",ScrollType[ScrollType["Immediate"]=1]="Immediate"}(ScrollType||(ScrollType={})),function(ScrollbarVisibility){ScrollbarVisibility[ScrollbarVisibility["Auto"]=1]="Auto",ScrollbarVisibility[ScrollbarVisibility["Hidden"]=2]="Hidden",ScrollbarVisibility[ScrollbarVisibility["Visible"]=3]="Visible"}(ScrollbarVisibility||(ScrollbarVisibility={})),function(SelectionDirection){
/**
     * The selection starts above where it ends.
     */
SelectionDirection[SelectionDirection["LTR"]=0]="LTR",
/**
     * The selection starts below where it ends.
     */
SelectionDirection[SelectionDirection["RTL"]=1]="RTL"}(SelectionDirection||(SelectionDirection={})),function(SignatureHelpTriggerKind){SignatureHelpTriggerKind[SignatureHelpTriggerKind["Invoke"]=1]="Invoke",SignatureHelpTriggerKind[SignatureHelpTriggerKind["TriggerCharacter"]=2]="TriggerCharacter",SignatureHelpTriggerKind[SignatureHelpTriggerKind["ContentChange"]=3]="ContentChange"}(SignatureHelpTriggerKind||(SignatureHelpTriggerKind={})),function(SymbolKind){SymbolKind[SymbolKind["File"]=0]="File",SymbolKind[SymbolKind["Module"]=1]="Module",SymbolKind[SymbolKind["Namespace"]=2]="Namespace",SymbolKind[SymbolKind["Package"]=3]="Package",SymbolKind[SymbolKind["Class"]=4]="Class",SymbolKind[SymbolKind["Method"]=5]="Method",SymbolKind[SymbolKind["Property"]=6]="Property",SymbolKind[SymbolKind["Field"]=7]="Field",SymbolKind[SymbolKind["Constructor"]=8]="Constructor",SymbolKind[SymbolKind["Enum"]=9]="Enum",SymbolKind[SymbolKind["Interface"]=10]="Interface",SymbolKind[SymbolKind["Function"]=11]="Function",SymbolKind[SymbolKind["Variable"]=12]="Variable",SymbolKind[SymbolKind["Constant"]=13]="Constant",SymbolKind[SymbolKind["String"]=14]="String",SymbolKind[SymbolKind["Number"]=15]="Number",SymbolKind[SymbolKind["Boolean"]=16]="Boolean",SymbolKind[SymbolKind["Array"]=17]="Array",SymbolKind[SymbolKind["Object"]=18]="Object",SymbolKind[SymbolKind["Key"]=19]="Key",SymbolKind[SymbolKind["Null"]=20]="Null",SymbolKind[SymbolKind["EnumMember"]=21]="EnumMember",SymbolKind[SymbolKind["Struct"]=22]="Struct",SymbolKind[SymbolKind["Event"]=23]="Event",SymbolKind[SymbolKind["Operator"]=24]="Operator",SymbolKind[SymbolKind["TypeParameter"]=25]="TypeParameter"}(SymbolKind||(SymbolKind={})),function(SymbolTag){SymbolTag[SymbolTag["Deprecated"]=1]="Deprecated"}(SymbolTag||(SymbolTag={})),function(TextEditorCursorBlinkingStyle){
/**
     * Hidden
     */
TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Hidden"]=0]="Hidden",
/**
     * Blinking
     */
TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Blink"]=1]="Blink",
/**
     * Blinking with smooth fading
     */
TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Smooth"]=2]="Smooth",
/**
     * Blinking with prolonged filled state and smooth fading
     */
TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Phase"]=3]="Phase",
/**
     * Expand collapse animation on the y axis
     */
TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Expand"]=4]="Expand",
/**
     * No-Blinking
     */
TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Solid"]=5]="Solid"}(TextEditorCursorBlinkingStyle||(TextEditorCursorBlinkingStyle={})),function(TextEditorCursorStyle){
/**
     * As a vertical line (sitting between two characters).
     */
TextEditorCursorStyle[TextEditorCursorStyle["Line"]=1]="Line",
/**
     * As a block (sitting on top of a character).
     */
TextEditorCursorStyle[TextEditorCursorStyle["Block"]=2]="Block",
/**
     * As a horizontal line (sitting under a character).
     */
TextEditorCursorStyle[TextEditorCursorStyle["Underline"]=3]="Underline",
/**
     * As a thin vertical line (sitting between two characters).
     */
TextEditorCursorStyle[TextEditorCursorStyle["LineThin"]=4]="LineThin",
/**
     * As an outlined block (sitting on top of a character).
     */
TextEditorCursorStyle[TextEditorCursorStyle["BlockOutline"]=5]="BlockOutline",
/**
     * As a thin horizontal line (sitting under a character).
     */
TextEditorCursorStyle[TextEditorCursorStyle["UnderlineThin"]=6]="UnderlineThin"}(TextEditorCursorStyle||(TextEditorCursorStyle={})),function(TrackedRangeStickiness){TrackedRangeStickiness[TrackedRangeStickiness["AlwaysGrowsWhenTypingAtEdges"]=0]="AlwaysGrowsWhenTypingAtEdges",TrackedRangeStickiness[TrackedRangeStickiness["NeverGrowsWhenTypingAtEdges"]=1]="NeverGrowsWhenTypingAtEdges",TrackedRangeStickiness[TrackedRangeStickiness["GrowsOnlyWhenTypingBefore"]=2]="GrowsOnlyWhenTypingBefore",TrackedRangeStickiness[TrackedRangeStickiness["GrowsOnlyWhenTypingAfter"]=3]="GrowsOnlyWhenTypingAfter"}(TrackedRangeStickiness||(TrackedRangeStickiness={})),function(WrappingIndent){
/**
     * No indentation => wrapped lines begin at column 1.
     */
WrappingIndent[WrappingIndent["None"]=0]="None",
/**
     * Same => wrapped lines get the same indentation as the parent.
     */
WrappingIndent[WrappingIndent["Same"]=1]="Same",
/**
     * Indent => wrapped lines get +1 indentation toward the parent.
     */
WrappingIndent[WrappingIndent["Indent"]=2]="Indent",
/**
     * DeepIndent => wrapped lines get +2 indentation toward the parent.
     */
WrappingIndent[WrappingIndent["DeepIndent"]=3]="DeepIndent"}(WrappingIndent||(WrappingIndent={}))},
/***/820913:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */B8:function(){/* binding */return StandaloneCodeEditorNLS},
/* harmony export */Oe:function(){/* binding */return AccessibilityHelpNLS},
/* harmony export */UL:function(){/* binding */return SimpleServicesNLS},
/* harmony export */UX:function(){/* binding */return QuickCommandNLS},
/* harmony export */aq:function(){/* binding */return QuickOutlineNLS},
/* harmony export */ld:function(){/* binding */return QuickHelpNLS},
/* harmony export */qq:function(){/* binding */return GoToLineNLS},
/* harmony export */ug:function(){/* binding */return InspectTokensNLS},
/* harmony export */xi:function(){/* binding */return ToggleHighContrastNLS}
/* harmony export */});
/* harmony import */var AccessibilityHelpNLS,InspectTokensNLS,GoToLineNLS,QuickHelpNLS,QuickCommandNLS,QuickOutlineNLS,StandaloneCodeEditorNLS,ToggleHighContrastNLS,SimpleServicesNLS,_nls_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(663580);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/(function(AccessibilityHelpNLS){AccessibilityHelpNLS.noSelection=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("noSelection","No selection"),AccessibilityHelpNLS.singleSelectionRange=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("singleSelectionRange","Line {0}, Column {1} ({2} selected)"),AccessibilityHelpNLS.singleSelection=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("singleSelection","Line {0}, Column {1}"),AccessibilityHelpNLS.multiSelectionRange=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("multiSelectionRange","{0} selections ({1} characters selected)"),AccessibilityHelpNLS.multiSelection=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("multiSelection","{0} selections"),AccessibilityHelpNLS.emergencyConfOn=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("emergencyConfOn","Now changing the setting `accessibilitySupport` to 'on'."),AccessibilityHelpNLS.openingDocs=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("openingDocs","Now opening the Editor Accessibility documentation page."),AccessibilityHelpNLS.readonlyDiffEditor=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("readonlyDiffEditor"," in a read-only pane of a diff editor."),AccessibilityHelpNLS.editableDiffEditor=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("editableDiffEditor"," in a pane of a diff editor."),AccessibilityHelpNLS.readonlyEditor=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("readonlyEditor"," in a read-only code editor"),AccessibilityHelpNLS.editableEditor=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("editableEditor"," in a code editor"),AccessibilityHelpNLS.changeConfigToOnMac=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("changeConfigToOnMac","To configure the editor to be optimized for usage with a Screen Reader press Command+E now."),AccessibilityHelpNLS.changeConfigToOnWinLinux=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("changeConfigToOnWinLinux","To configure the editor to be optimized for usage with a Screen Reader press Control+E now."),AccessibilityHelpNLS.auto_on=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("auto_on","The editor is configured to be optimized for usage with a Screen Reader."),AccessibilityHelpNLS.auto_off=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("auto_off","The editor is configured to never be optimized for usage with a Screen Reader, which is not the case at this time."),AccessibilityHelpNLS.tabFocusModeOnMsg=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("tabFocusModeOnMsg","Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}."),AccessibilityHelpNLS.tabFocusModeOnMsgNoKb=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("tabFocusModeOnMsgNoKb","Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding."),AccessibilityHelpNLS.tabFocusModeOffMsg=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("tabFocusModeOffMsg","Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}."),AccessibilityHelpNLS.tabFocusModeOffMsgNoKb=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("tabFocusModeOffMsgNoKb","Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding."),AccessibilityHelpNLS.openDocMac=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("openDocMac","Press Command+H now to open a browser window with more information related to editor accessibility."),AccessibilityHelpNLS.openDocWinLinux=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("openDocWinLinux","Press Control+H now to open a browser window with more information related to editor accessibility."),AccessibilityHelpNLS.outroMsg=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("outroMsg","You can dismiss this tooltip and return to the editor by pressing Escape or Shift+Escape."),AccessibilityHelpNLS.showAccessibilityHelpAction=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("showAccessibilityHelpAction","Show Accessibility Help")})(AccessibilityHelpNLS||(AccessibilityHelpNLS={})),function(InspectTokensNLS){InspectTokensNLS.inspectTokensAction=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("inspectTokens","Developer: Inspect Tokens")}(InspectTokensNLS||(InspectTokensNLS={})),function(GoToLineNLS){GoToLineNLS.gotoLineActionLabel=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("gotoLineActionLabel","Go to Line/Column...")}(GoToLineNLS||(GoToLineNLS={})),function(QuickHelpNLS){QuickHelpNLS.helpQuickAccessActionLabel=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("helpQuickAccess","Show all Quick Access Providers")}(QuickHelpNLS||(QuickHelpNLS={})),function(QuickCommandNLS){QuickCommandNLS.quickCommandActionLabel=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("quickCommandActionLabel","Command Palette"),QuickCommandNLS.quickCommandHelp=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("quickCommandActionHelp","Show And Run Commands")}(QuickCommandNLS||(QuickCommandNLS={})),function(QuickOutlineNLS){QuickOutlineNLS.quickOutlineActionLabel=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("quickOutlineActionLabel","Go to Symbol..."),QuickOutlineNLS.quickOutlineByCategoryActionLabel=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("quickOutlineByCategoryActionLabel","Go to Symbol by Category...")}(QuickOutlineNLS||(QuickOutlineNLS={})),function(StandaloneCodeEditorNLS){StandaloneCodeEditorNLS.editorViewAccessibleLabel=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("editorViewAccessibleLabel","Editor content"),StandaloneCodeEditorNLS.accessibilityHelpMessage=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("accessibilityHelpMessage","Press Alt+F1 for Accessibility Options.")}(StandaloneCodeEditorNLS||(StandaloneCodeEditorNLS={})),function(ToggleHighContrastNLS){ToggleHighContrastNLS.toggleHighContrast=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("toggleHighContrast","Toggle High Contrast Theme")}(ToggleHighContrastNLS||(ToggleHighContrastNLS={})),function(SimpleServicesNLS){SimpleServicesNLS.bulkEditServiceSummary=_nls_js__WEBPACK_IMPORTED_MODULE_0__/* .localize */.N("bulkEditServiceSummary","Made {0} edits in {1} files")}(SimpleServicesNLS||(SimpleServicesNLS={}))},
/***/627869:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */CE:function(){/* binding */return editorBracketHighlightingForeground3},
/* harmony export */DD:function(){/* binding */return editorActiveLineNumber},
/* harmony export */DS:function(){/* binding */return editorBracketPairGuideBackground3},
/* harmony export */Dl:function(){/* binding */return editorBracketMatchBorder},
/* harmony export */HV:function(){/* binding */return editorBracketPairGuideActiveBackground5},
/* harmony export */Jn:function(){/* binding */return editorBracketPairGuideBackground5},
/* harmony export */Kh:function(){/* binding */return editorLineHighlight},
/* harmony export */L7:function(){/* binding */return editorBracketPairGuideActiveBackground4},
/* harmony export */Mm:function(){/* binding */return editorLineHighlightBorder},
/* harmony export */N5:function(){/* binding */return ghostTextForeground},
/* harmony export */Qb:function(){/* binding */return editorBracketPairGuideActiveBackground1},
/* harmony export */Re:function(){/* binding */return overviewRulerWarning},
/* harmony export */TC:function(){/* binding */return editorBracketMatchBackground},
/* harmony export */To:function(){/* binding */return editorBracketPairGuideActiveBackground3},
/* harmony export */UP:function(){/* binding */return editorBracketHighlightingForeground4},
/* harmony export */Vs:function(){/* binding */return editorBracketHighlightingForeground2},
/* harmony export */YF:function(){/* binding */return editorBracketPairGuideBackground6},
/* harmony export */Ym:function(){/* binding */return editorActiveIndentGuides},
/* harmony export */Yp:function(){/* binding */return editorCodeLensForeground},
/* harmony export */eS:function(){/* binding */return overviewRulerInfo},
/* harmony export */e_:function(){/* binding */return editorOverviewRulerBackground},
/* harmony export */f9:function(){/* binding */return editorBracketPairGuideActiveBackground6},
/* harmony export */fY:function(){/* binding */return editorCursorBackground},
/* harmony export */hw:function(){/* binding */return editorLineNumbers},
/* harmony export */kp:function(){/* binding */return editorUnnecessaryCodeBorder},
/* harmony export */lK:function(){/* binding */return overviewRulerError},
/* harmony export */lS:function(){/* binding */return editorBracketPairGuideBackground4},
/* harmony export */m$:function(){/* binding */return editorBracketPairGuideBackground2},
/* harmony export */m1:function(){/* binding */return editorBracketHighlightingForeground6},
/* harmony export */m3:function(){/* binding */return editorBracketPairGuideActiveBackground2},
/* harmony export */m9:function(){/* binding */return overviewRulerRangeHighlight},
/* harmony export */n0:function(){/* binding */return editorCursorForeground},
/* harmony export */oV:function(){/* binding */return editorBracketPairGuideBackground1},
/* harmony export */r0:function(){/* binding */return editorBracketHighlightingForeground5},
/* harmony export */tR:function(){/* binding */return editorIndentGuides},
/* harmony export */ts:function(){/* binding */return editorBracketHighlightingUnexpectedBracketForeground},
/* harmony export */x3:function(){/* binding */return ghostTextBorder},
/* harmony export */zJ:function(){/* binding */return editorBracketHighlightingForeground1},
/* harmony export */zk:function(){/* binding */return editorRuler},
/* harmony export */zu:function(){/* binding */return editorUnnecessaryCodeOpacity},
/* harmony export */zw:function(){/* binding */return editorOverviewRulerBorder}
/* harmony export */});
/* unused harmony exports editorRangeHighlight, editorRangeHighlightBorder, editorSymbolHighlight, editorSymbolHighlightBorder, editorWhitespaces, editorGutter */
/* harmony import */var _nls_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(663580),_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(41264),_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(173910),_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(897781);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Definition of the editor colors
 */
const editorLineHighlight=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editor.lineHighlightBackground",{dark:null,light:null,hc:null},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("lineHighlight","Background color for the highlight of line at the cursor position.")),editorLineHighlightBorder=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editor.lineHighlightBorder",{dark:"#282828",light:"#eeeeee",hc:"#f38518"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("lineHighlightBorderBox","Background color for the border around the line at the cursor position.")),editorRangeHighlight=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editor.rangeHighlightBackground",{dark:"#ffffff0b",light:"#fdff0033",hc:null},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("rangeHighlight","Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations."),!0),editorRangeHighlightBorder=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editor.rangeHighlightBorder",{dark:null,light:null,hc:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .activeContrastBorder */.xL},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("rangeHighlightBorder","Background color of the border around highlighted ranges."),!0),editorSymbolHighlight=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editor.symbolHighlightBackground",{dark:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorFindMatchHighlight */.MU,light:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorFindMatchHighlight */.MU,hc:null},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("symbolHighlight","Background color of highlighted symbol, like for go to definition or go next/previous symbol. The color must not be opaque so as not to hide underlying decorations."),!0),editorSymbolHighlightBorder=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editor.symbolHighlightBorder",{dark:null,light:null,hc:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .activeContrastBorder */.xL},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("symbolHighlightBorder","Background color of the border around highlighted symbols."),!0),editorCursorForeground=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorCursor.foreground",{dark:"#AEAFAD",light:_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.black,hc:_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.white},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("caret","Color of the editor cursor.")),editorCursorBackground=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorCursor.background",null,_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorCursorBackground","The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.")),editorWhitespaces=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorWhitespace.foreground",{dark:"#e3e4e229",light:"#33333333",hc:"#e3e4e229"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorWhitespaces","Color of whitespace characters in the editor.")),editorIndentGuides=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorIndentGuide.background",{dark:editorWhitespaces,light:editorWhitespaces,hc:editorWhitespaces},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorIndentGuides","Color of the editor indentation guides.")),editorActiveIndentGuides=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorIndentGuide.activeBackground",{dark:editorWhitespaces,light:editorWhitespaces,hc:editorWhitespaces},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorActiveIndentGuide","Color of the active editor indentation guides.")),editorLineNumbers=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorLineNumber.foreground",{dark:"#858585",light:"#237893",hc:_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.white},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorLineNumbers","Color of editor line numbers.")),deprecatedEditorActiveLineNumber=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorActiveLineNumber.foreground",{dark:"#c6c6c6",light:"#0B216F",hc:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .activeContrastBorder */.xL},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorActiveLineNumber","Color of editor active line number"),!1,_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("deprecatedEditorActiveLineNumber","Id is deprecated. Use 'editorLineNumber.activeForeground' instead.")),editorActiveLineNumber=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorLineNumber.activeForeground",{dark:deprecatedEditorActiveLineNumber,light:deprecatedEditorActiveLineNumber,hc:deprecatedEditorActiveLineNumber},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorActiveLineNumber","Color of editor active line number")),editorRuler=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorRuler.foreground",{dark:"#5A5A5A",light:_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.lightgrey,hc:_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.white},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorRuler","Color of the editor rulers.")),editorCodeLensForeground=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorCodeLens.foreground",{dark:"#999999",light:"#919191",hc:"#999999"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorCodeLensForeground","Foreground color of editor CodeLens")),editorBracketMatchBackground=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketMatch.background",{dark:"#0064001a",light:"#0064001a",hc:"#0064001a"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketMatchBackground","Background color behind matching brackets")),editorBracketMatchBorder=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketMatch.border",{dark:"#888",light:"#B9B9B9",hc:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .contrastBorder */.lR},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketMatchBorder","Color for matching brackets boxes")),editorOverviewRulerBorder=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorOverviewRuler.border",{dark:"#7f7f7f4d",light:"#7f7f7f4d",hc:"#7f7f7f4d"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorOverviewRulerBorder","Color of the overview ruler border.")),editorOverviewRulerBackground=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorOverviewRuler.background",null,_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorOverviewRulerBackground","Background color of the editor overview ruler. Only used when the minimap is enabled and placed on the right side of the editor.")),editorGutter=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorGutter.background",{dark:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorBackground */.cv,light:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorBackground */.cv,hc:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorBackground */.cv},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorGutter","Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.")),editorUnnecessaryCodeBorder=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorUnnecessaryCode.border",{dark:null,light:null,hc:_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.fromHex("#fff").transparent(.8)},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("unnecessaryCodeBorder","Border color of unnecessary (unused) source code in the editor.")),editorUnnecessaryCodeOpacity=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorUnnecessaryCode.opacity",{dark:_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.fromHex("#000a"),light:_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.fromHex("#0007"),hc:null},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("unnecessaryCodeOpacity","Opacity of unnecessary (unused) source code in the editor. For example, \"#000000c0\" will render the code with 75% opacity. For high contrast themes, use the  'editorUnnecessaryCode.border' theme color to underline unnecessary code instead of fading it out.")),ghostTextBorder=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorGhostText.border",{dark:null,light:null,hc:_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.fromHex("#fff").transparent(.8)},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorGhostTextBorder","Border color of ghost text in the editor.")),ghostTextForeground=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorGhostText.foreground",{dark:_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.fromHex("#ffffff56"),light:_base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il.fromHex("#0007"),hc:null},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorGhostTextForeground","Foreground color of the ghost text in the editor.")),rulerRangeDefault=new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il(new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .RGBA */.VS(0,122,204,.6)),overviewRulerRangeHighlight=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorOverviewRuler.rangeHighlightForeground",{dark:rulerRangeDefault,light:rulerRangeDefault,hc:rulerRangeDefault},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("overviewRulerRangeHighlight","Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations."),!0),overviewRulerError=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorOverviewRuler.errorForeground",{dark:new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il(new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .RGBA */.VS(255,18,18,.7)),light:new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il(new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .RGBA */.VS(255,18,18,.7)),hc:new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il(new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .RGBA */.VS(255,50,50,1))},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("overviewRuleError","Overview ruler marker color for errors.")),overviewRulerWarning=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorOverviewRuler.warningForeground",{dark:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorWarningForeground */.uo,light:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorWarningForeground */.uo,hc:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorWarningBorder */.pW},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("overviewRuleWarning","Overview ruler marker color for warnings.")),overviewRulerInfo=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorOverviewRuler.infoForeground",{dark:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorInfoForeground */.c6,light:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorInfoForeground */.c6,hc:_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorInfoBorder */.T8},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("overviewRuleInfo","Overview ruler marker color for infos.")),editorBracketHighlightingForeground1=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketHighlight.foreground1",{dark:"#FFD700",light:"#0431FAFF",hc:"#FFD700"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketHighlightForeground1","Foreground color of brackets (1). Requires enabling bracket pair colorization.")),editorBracketHighlightingForeground2=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketHighlight.foreground2",{dark:"#DA70D6",light:"#319331FF",hc:"#DA70D6"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketHighlightForeground2","Foreground color of brackets (2). Requires enabling bracket pair colorization.")),editorBracketHighlightingForeground3=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketHighlight.foreground3",{dark:"#179FFF",light:"#7B3814FF",hc:"#87CEFA"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketHighlightForeground3","Foreground color of brackets (3). Requires enabling bracket pair colorization.")),editorBracketHighlightingForeground4=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketHighlight.foreground4",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketHighlightForeground4","Foreground color of brackets (4). Requires enabling bracket pair colorization.")),editorBracketHighlightingForeground5=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketHighlight.foreground5",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketHighlightForeground5","Foreground color of brackets (5). Requires enabling bracket pair colorization.")),editorBracketHighlightingForeground6=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketHighlight.foreground6",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketHighlightForeground6","Foreground color of brackets (6). Requires enabling bracket pair colorization.")),editorBracketHighlightingUnexpectedBracketForeground=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketHighlight.unexpectedBracket.foreground",{dark:new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il(new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .RGBA */.VS(255,18,18,.8)),light:new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il(new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .RGBA */.VS(255,18,18,.8)),hc:new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .Color */.Il(new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__/* .RGBA */.VS(255,50,50,1))},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketHighlightUnexpectedBracketForeground","Foreground color of unexpected brackets.")),editorBracketPairGuideBackground1=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.background1",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.background1","Background color of inactive bracket pair guides (1). Requires enabling bracket pair guides.")),editorBracketPairGuideBackground2=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.background2",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.background2","Background color of inactive bracket pair guides (2). Requires enabling bracket pair guides.")),editorBracketPairGuideBackground3=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.background3",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.background3","Background color of inactive bracket pair guides (3). Requires enabling bracket pair guides.")),editorBracketPairGuideBackground4=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.background4",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.background4","Background color of inactive bracket pair guides (4). Requires enabling bracket pair guides.")),editorBracketPairGuideBackground5=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.background5",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.background5","Background color of inactive bracket pair guides (5). Requires enabling bracket pair guides.")),editorBracketPairGuideBackground6=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.background6",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.background6","Background color of inactive bracket pair guides (6). Requires enabling bracket pair guides.")),editorBracketPairGuideActiveBackground1=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.activeBackground1",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.activeBackground1","Background color of active bracket pair guides (1). Requires enabling bracket pair guides.")),editorBracketPairGuideActiveBackground2=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.activeBackground2",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.activeBackground2","Background color of active bracket pair guides (2). Requires enabling bracket pair guides.")),editorBracketPairGuideActiveBackground3=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.activeBackground3",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.activeBackground3","Background color of active bracket pair guides (3). Requires enabling bracket pair guides.")),editorBracketPairGuideActiveBackground4=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.activeBackground4",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.activeBackground4","Background color of active bracket pair guides (4). Requires enabling bracket pair guides.")),editorBracketPairGuideActiveBackground5=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.activeBackground5",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.activeBackground5","Background color of active bracket pair guides (5). Requires enabling bracket pair guides.")),editorBracketPairGuideActiveBackground6=(0,_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .registerColor */.P6)("editorBracketPairGuide.activeBackground6",{dark:"#00000000",light:"#00000000",hc:"#00000000"},_nls_js__WEBPACK_IMPORTED_MODULE_3__/* .localize */.N("editorBracketPairGuide.activeBackground6","Background color of active bracket pair guides (6). Requires enabling bracket pair guides."));
// contains all color rules that used to defined in editor/browser/widget/editor.css
(0,_platform_theme_common_themeService_js__WEBPACK_IMPORTED_MODULE_2__/* .registerThemingParticipant */.Ic)(((theme,collector)=>{const background=theme.getColor(_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorBackground */.cv);background&&collector.addRule(`.monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input { background-color: ${background}; }`);const foreground=theme.getColor(_platform_theme_common_colorRegistry_js__WEBPACK_IMPORTED_MODULE_1__/* .editorForeground */.NO);foreground&&collector.addRule(`.monaco-editor, .monaco-editor .inputarea.ime-input { color: ${foreground}; }`);const gutter=theme.getColor(editorGutter);gutter&&collector.addRule(`.monaco-editor .margin { background-color: ${gutter}; }`);const rangeHighlight=theme.getColor(editorRangeHighlight);rangeHighlight&&collector.addRule(`.monaco-editor .rangeHighlight { background-color: ${rangeHighlight}; }`);const rangeHighlightBorder=theme.getColor(editorRangeHighlightBorder);rangeHighlightBorder&&collector.addRule(`.monaco-editor .rangeHighlight { border: 1px ${"hc"===theme.type?"dotted":"solid"} ${rangeHighlightBorder}; }`);const symbolHighlight=theme.getColor(editorSymbolHighlight);symbolHighlight&&collector.addRule(`.monaco-editor .symbolHighlight { background-color: ${symbolHighlight}; }`);const symbolHighlightBorder=theme.getColor(editorSymbolHighlightBorder);symbolHighlightBorder&&collector.addRule(`.monaco-editor .symbolHighlight { border: 1px ${"hc"===theme.type?"dotted":"solid"} ${symbolHighlightBorder}; }`);const invisibles=theme.getColor(editorWhitespaces);invisibles&&(collector.addRule(`.monaco-editor .mtkw { color: ${invisibles} !important; }`),collector.addRule(`.monaco-editor .mtkz { color: ${invisibles} !important; }`))}))},
/***/92003:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */EY:function(){/* binding */return OverviewRulerZone},
/* harmony export */Tj:function(){/* binding */return OverviewZoneManager}
/* harmony export */});
/* unused harmony export ColorZone */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class ColorZone{constructor(from,to,colorId){this._colorZoneBrand=void 0,this.from=0|from,this.to=0|to,this.colorId=0|colorId}static compare(a,b){return a.colorId===b.colorId?a.from===b.from?a.to-b.to:a.from-b.from:a.colorId-b.colorId}}
/**
 * A zone in the overview ruler
 */class OverviewRulerZone{constructor(startLineNumber,endLineNumber,color){this._overviewRulerZoneBrand=void 0,this.startLineNumber=startLineNumber,this.endLineNumber=endLineNumber,this.color=color,this._colorZone=null}static compare(a,b){return a.color===b.color?a.startLineNumber===b.startLineNumber?a.endLineNumber-b.endLineNumber:a.startLineNumber-b.startLineNumber:a.color<b.color?-1:1}setColorZone(colorZone){this._colorZone=colorZone}getColorZones(){return this._colorZone}}class OverviewZoneManager{constructor(getVerticalOffsetForLine){this._getVerticalOffsetForLine=getVerticalOffsetForLine,this._zones=[],this._colorZonesInvalid=!1,this._lineHeight=0,this._domWidth=0,this._domHeight=0,this._outerHeight=0,this._pixelRatio=1,this._lastAssignedId=0,this._color2Id=Object.create(null),this._id2Color=[]}getId2Color(){return this._id2Color}setZones(newZones){this._zones=newZones,this._zones.sort(OverviewRulerZone.compare)}setLineHeight(lineHeight){return this._lineHeight!==lineHeight&&(this._lineHeight=lineHeight,this._colorZonesInvalid=!0,!0)}setPixelRatio(pixelRatio){this._pixelRatio=pixelRatio,this._colorZonesInvalid=!0}getDOMWidth(){return this._domWidth}getCanvasWidth(){return this._domWidth*this._pixelRatio}setDOMWidth(width){return this._domWidth!==width&&(this._domWidth=width,this._colorZonesInvalid=!0,!0)}getDOMHeight(){return this._domHeight}getCanvasHeight(){return this._domHeight*this._pixelRatio}setDOMHeight(height){return this._domHeight!==height&&(this._domHeight=height,this._colorZonesInvalid=!0,!0)}getOuterHeight(){return this._outerHeight}setOuterHeight(outerHeight){return this._outerHeight!==outerHeight&&(this._outerHeight=outerHeight,this._colorZonesInvalid=!0,!0)}resolveColorZones(){const colorZonesInvalid=this._colorZonesInvalid,lineHeight=Math.floor(this._lineHeight),totalHeight=Math.floor(this.getCanvasHeight()),outerHeight=Math.floor(this._outerHeight),heightRatio=totalHeight/outerHeight,halfMinimumHeight=Math.floor(4/* MINIMUM_HEIGHT */*this._pixelRatio/2);let allColorZones=[];for(let i=0,len=this._zones.length;i<len;i++){const zone=this._zones[i];if(!colorZonesInvalid){const colorZone=zone.getColorZones();if(colorZone){allColorZones.push(colorZone);continue}}const y1=Math.floor(heightRatio*this._getVerticalOffsetForLine(zone.startLineNumber)),y2=Math.floor(heightRatio*(this._getVerticalOffsetForLine(zone.endLineNumber)+lineHeight));let ycenter=Math.floor((y1+y2)/2),halfHeight=y2-ycenter;halfHeight<halfMinimumHeight&&(halfHeight=halfMinimumHeight),ycenter-halfHeight<0&&(ycenter=halfHeight),ycenter+halfHeight>totalHeight&&(ycenter=totalHeight-halfHeight);const color=zone.color;let colorId=this._color2Id[color];colorId||(colorId=++this._lastAssignedId,this._color2Id[color]=colorId,this._id2Color[colorId]=color);const colorZone=new ColorZone(ycenter-halfHeight,ycenter+halfHeight,colorId);zone.setColorZone(colorZone),allColorZones.push(colorZone)}return this._colorZonesInvalid=!1,allColorZones.sort(ColorZone.compare),allColorZones}}
/***/},
/***/953890:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */CH:function(){/* binding */return VisibleRanges},
/* harmony export */CR:function(){/* binding */return FloatHorizontalRange},
/* harmony export */D4:function(){/* binding */return HorizontalPosition},
/* harmony export */u7:function(){/* binding */return LineVisibleRanges},
/* harmony export */xh:function(){/* binding */return RenderingContext},
/* harmony export */yu:function(){/* binding */return HorizontalRange}
/* harmony export */});
/* unused harmony export RestrictedRenderingContext */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class RestrictedRenderingContext{constructor(viewLayout,viewportData){this._restrictedRenderingContextBrand=void 0,this._viewLayout=viewLayout,this.viewportData=viewportData,this.scrollWidth=this._viewLayout.getScrollWidth(),this.scrollHeight=this._viewLayout.getScrollHeight(),this.visibleRange=this.viewportData.visibleRange,this.bigNumbersDelta=this.viewportData.bigNumbersDelta;const vInfo=this._viewLayout.getCurrentViewport();this.scrollTop=vInfo.top,this.scrollLeft=vInfo.left,this.viewportWidth=vInfo.width,this.viewportHeight=vInfo.height}getScrolledTopFromAbsoluteTop(absoluteTop){return absoluteTop-this.scrollTop}getVerticalOffsetForLineNumber(lineNumber){return this._viewLayout.getVerticalOffsetForLineNumber(lineNumber)}getDecorationsInViewport(){return this.viewportData.getDecorationsInViewport()}}class RenderingContext extends RestrictedRenderingContext{constructor(viewLayout,viewportData,viewLines){super(viewLayout,viewportData),this._renderingContextBrand=void 0,this._viewLines=viewLines}linesVisibleRangesForRange(range,includeNewLines){return this._viewLines.linesVisibleRangesForRange(range,includeNewLines)}visibleRangeForPosition(position){return this._viewLines.visibleRangeForPosition(position)}}class LineVisibleRanges{constructor(outsideRenderedLine,lineNumber,ranges){this.outsideRenderedLine=outsideRenderedLine,this.lineNumber=lineNumber,this.ranges=ranges}}class HorizontalRange{constructor(left,width){this._horizontalRangeBrand=void 0,this.left=Math.round(left),this.width=Math.round(width)}static from(ranges){const result=new Array(ranges.length);for(let i=0,len=ranges.length;i<len;i++){const range=ranges[i];result[i]=new HorizontalRange(range.left,range.width)}return result}toString(){return`[${this.left},${this.width}]`}}class FloatHorizontalRange{constructor(left,width){this._floatHorizontalRangeBrand=void 0,this.left=left,this.width=width}toString(){return`[${this.left},${this.width}]`}static compare(a,b){return a.left-b.left}}class HorizontalPosition{constructor(outsideRenderedLine,left){this.outsideRenderedLine=outsideRenderedLine,this.originalLeft=left,this.left=Math.round(this.originalLeft)}}class VisibleRanges{constructor(outsideRenderedLine,ranges){this.outsideRenderedLine=outsideRenderedLine,this.ranges=ranges}}
/***/},
/***/431923:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */A:function(){/* binding */return ViewContext}
/* harmony export */});
/* unused harmony export EditorTheme */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class EditorTheme{constructor(theme){this._theme=theme}get type(){return this._theme.type}update(theme){this._theme=theme}getColor(color){return this._theme.getColor(color)}}class ViewContext{constructor(configuration,theme,model){this.configuration=configuration,this.theme=new EditorTheme(theme),this.model=model,this.viewLayout=model.viewLayout}addEventHandler(eventHandler){this.model.addViewEventHandler(eventHandler)}removeEventHandler(eventHandler){this.model.removeViewEventHandler(eventHandler)}}
/***/},
/***/533805:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */Ay:function(){/* binding */return ViewScrollChangedEvent},
/* harmony export */CL:function(){/* binding */return ViewFlushedEvent},
/* harmony export */H9:function(){/* binding */return ViewTokensChangedEvent},
/* harmony export */Hf:function(){/* binding */return ViewThemeChangedEvent},
/* harmony export */IN:function(){/* binding */return ViewCompositionEndEvent},
/* harmony export */Ic:function(){/* binding */return ViewZonesChangedEvent},
/* harmony export */JP:function(){/* binding */return ViewCompositionStartEvent},
/* harmony export */K9:function(){/* binding */return ViewLinesInsertedEvent},
/* harmony export */Qb:function(){/* binding */return ViewRevealRangeRequestEvent},
/* harmony export */SJ:function(){/* binding */return ViewFocusChangedEvent},
/* harmony export */_0:function(){/* binding */return ViewLanguageConfigurationEvent},
/* harmony export */d8:function(){/* binding */return ViewLineMappingChangedEvent},
/* harmony export */e$:function(){/* binding */return ViewCursorStateChangedEvent},
/* harmony export */il:function(){/* binding */return ViewLinesChangedEvent},
/* harmony export */uc:function(){/* binding */return ViewTokensColorsChangedEvent},
/* harmony export */vA:function(){/* binding */return ViewDecorationsChangedEvent},
/* harmony export */vk:function(){/* binding */return ViewLinesDeletedEvent},
/* harmony export */x4:function(){/* binding */return ViewConfigurationChangedEvent}
/* harmony export */});
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class ViewCompositionStartEvent{constructor(){this.type=0/* ViewCompositionStart */}}class ViewCompositionEndEvent{constructor(){this.type=1/* ViewCompositionEnd */}}class ViewConfigurationChangedEvent{constructor(source){this.type=2/* ViewConfigurationChanged */,this._source=source}hasChanged(id){return this._source.hasChanged(id)}}class ViewCursorStateChangedEvent{constructor(selections,modelSelections){this.type=3/* ViewCursorStateChanged */,this.selections=selections,this.modelSelections=modelSelections}}class ViewDecorationsChangedEvent{constructor(source){this.type=4/* ViewDecorationsChanged */,source?(this.affectsMinimap=source.affectsMinimap,this.affectsOverviewRuler=source.affectsOverviewRuler):(this.affectsMinimap=!0,this.affectsOverviewRuler=!0)}}class ViewFlushedEvent{constructor(){this.type=5/* ViewFlushed */;
// Nothing to do
}}class ViewFocusChangedEvent{constructor(isFocused){this.type=6/* ViewFocusChanged */,this.isFocused=isFocused}}class ViewLanguageConfigurationEvent{constructor(){this.type=7/* ViewLanguageConfigurationChanged */}}class ViewLineMappingChangedEvent{constructor(){this.type=8/* ViewLineMappingChanged */;
// Nothing to do
}}class ViewLinesChangedEvent{constructor(fromLineNumber,toLineNumber){this.type=9/* ViewLinesChanged */,this.fromLineNumber=fromLineNumber,this.toLineNumber=toLineNumber}}class ViewLinesDeletedEvent{constructor(fromLineNumber,toLineNumber){this.type=10/* ViewLinesDeleted */,this.fromLineNumber=fromLineNumber,this.toLineNumber=toLineNumber}}class ViewLinesInsertedEvent{constructor(fromLineNumber,toLineNumber){this.type=11/* ViewLinesInserted */,this.fromLineNumber=fromLineNumber,this.toLineNumber=toLineNumber}}class ViewRevealRangeRequestEvent{constructor(source,range,selections,verticalType,revealHorizontal,scrollType){this.type=12/* ViewRevealRangeRequest */,this.source=source,this.range=range,this.selections=selections,this.verticalType=verticalType,this.revealHorizontal=revealHorizontal,this.scrollType=scrollType}}class ViewScrollChangedEvent{constructor(source){this.type=13/* ViewScrollChanged */,this.scrollWidth=source.scrollWidth,this.scrollLeft=source.scrollLeft,this.scrollHeight=source.scrollHeight,this.scrollTop=source.scrollTop,this.scrollWidthChanged=source.scrollWidthChanged,this.scrollLeftChanged=source.scrollLeftChanged,this.scrollHeightChanged=source.scrollHeightChanged,this.scrollTopChanged=source.scrollTopChanged}}class ViewThemeChangedEvent{constructor(){this.type=14/* ViewThemeChanged */}}class ViewTokensChangedEvent{constructor(ranges){this.type=15/* ViewTokensChanged */,this.ranges=ranges}}class ViewTokensColorsChangedEvent{constructor(){this.type=16/* ViewTokensColorsChanged */;
// Nothing to do
}}class ViewZonesChangedEvent{constructor(){this.type=17/* ViewZonesChanged */;
// Nothing to do
}}
/***/},
/***/92550:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */Kp:function(){/* binding */return LineDecoration},
/* harmony export */k:function(){/* binding */return LineDecorationsNormalizer}
/* harmony export */});
/* unused harmony export DecorationSegment */
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/class LineDecoration{constructor(startColumn,endColumn,className,type){this.startColumn=startColumn,this.endColumn=endColumn,this.className=className,this.type=type,this._lineDecorationBrand=void 0}static _equals(a,b){return a.startColumn===b.startColumn&&a.endColumn===b.endColumn&&a.className===b.className&&a.type===b.type}static equalsArr(a,b){const aLen=a.length,bLen=b.length;if(aLen!==bLen)return!1;for(let i=0;i<aLen;i++)if(!LineDecoration._equals(a[i],b[i]))return!1;return!0}static extractWrapped(arr,startOffset,endOffset){if(0===arr.length)return arr;const startColumn=startOffset+1,endColumn=endOffset+1,lineLength=endOffset-startOffset,r=[];let rLength=0;for(const dec of arr)dec.endColumn<=startColumn||dec.startColumn>=endColumn||(r[rLength++]=new LineDecoration(Math.max(1,dec.startColumn-startColumn+1),Math.min(lineLength+1,dec.endColumn-startColumn+1),dec.className,dec.type));return r}static filter(lineDecorations,lineNumber,minLineColumn,maxLineColumn){if(0===lineDecorations.length)return[];let result=[],resultLen=0;for(let i=0,len=lineDecorations.length;i<len;i++){const d=lineDecorations[i],range=d.range;if(range.endLineNumber<lineNumber||range.startLineNumber>lineNumber)
// Ignore decorations that sit outside this line
continue;if(range.isEmpty()&&(0/* Regular */===d.type||3/* RegularAffectingLetterSpacing */===d.type))
// Ignore empty range decorations
continue;const startColumn=range.startLineNumber===lineNumber?range.startColumn:minLineColumn,endColumn=range.endLineNumber===lineNumber?range.endColumn:maxLineColumn;result[resultLen++]=new LineDecoration(startColumn,endColumn,d.inlineClassName,d.type)}return result}static _typeCompare(a,b){const ORDER=[2,0,1,3];return ORDER[a]-ORDER[b]}static compare(a,b){if(a.startColumn!==b.startColumn)return a.startColumn-b.startColumn;if(a.endColumn!==b.endColumn)return a.endColumn-b.endColumn;const typeCmp=LineDecoration._typeCompare(a.type,b.type);return 0!==typeCmp?typeCmp:a.className!==b.className?a.className<b.className?-1:1:0}}class DecorationSegment{constructor(startOffset,endOffset,className,metadata){this.startOffset=startOffset,this.endOffset=endOffset,this.className=className,this.metadata=metadata}}class Stack{constructor(){this.stopOffsets=[],this.classNames=[],this.metadata=[],this.count=0}static _metadata(metadata){let result=0;for(let i=0,len=metadata.length;i<len;i++)result|=metadata[i];return result}consumeLowerThan(maxStopOffset,nextStartOffset,result){while(this.count>0&&this.stopOffsets[0]<maxStopOffset){let i=0;
// Take all equal stopping offsets
while(i+1<this.count&&this.stopOffsets[i]===this.stopOffsets[i+1])i++;
// Basically we are consuming the first i + 1 elements of the stack
result.push(new DecorationSegment(nextStartOffset,this.stopOffsets[i],this.classNames.join(" "),Stack._metadata(this.metadata))),nextStartOffset=this.stopOffsets[i]+1,
// Consume them
this.stopOffsets.splice(0,i+1),this.classNames.splice(0,i+1),this.metadata.splice(0,i+1),this.count-=i+1}return this.count>0&&nextStartOffset<maxStopOffset&&(result.push(new DecorationSegment(nextStartOffset,maxStopOffset-1,this.classNames.join(" "),Stack._metadata(this.metadata))),nextStartOffset=maxStopOffset),nextStartOffset}insert(stopOffset,className,metadata){if(0===this.count||this.stopOffsets[this.count-1]<=stopOffset)
// Insert at the end
this.stopOffsets.push(stopOffset),this.classNames.push(className),this.metadata.push(metadata);else
// Find the insertion position for `stopOffset`
for(let i=0;i<this.count;i++)if(this.stopOffsets[i]>=stopOffset){this.stopOffsets.splice(i,0,stopOffset),this.classNames.splice(i,0,className),this.metadata.splice(i,0,metadata);break}this.count++}}class LineDecorationsNormalizer{
/**
     * Normalize line decorations. Overlapping decorations will generate multiple segments
     */
static normalize(lineContent,lineDecorations){if(0===lineDecorations.length)return[];let result=[];const stack=new Stack;let nextStartOffset=0;for(let i=0,len=lineDecorations.length;i<len;i++){const d=lineDecorations[i];let startColumn=d.startColumn,endColumn=d.endColumn;const className=d.className,metadata=1/* Before */===d.type?2/* PSEUDO_BEFORE */:2/* After */===d.type?4/* PSEUDO_AFTER */:0;
// If the position would end up in the middle of a high-low surrogate pair, we move it to before the pair
if(startColumn>1){const charCodeBefore=lineContent.charCodeAt(startColumn-2);_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isHighSurrogate */.ZG(charCodeBefore)&&startColumn--}if(endColumn>1){const charCodeBefore=lineContent.charCodeAt(endColumn-2);_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isHighSurrogate */.ZG(charCodeBefore)&&endColumn--}const currentStartOffset=startColumn-1,currentEndOffset=endColumn-2;nextStartOffset=stack.consumeLowerThan(currentStartOffset,nextStartOffset,result),0===stack.count&&(nextStartOffset=currentStartOffset),stack.insert(currentEndOffset,className,metadata)}return stack.consumeLowerThan(1073741824/* MAX_SAFE_SMALL_INTEGER */,nextStartOffset,result),result}}
/***/},
/***/777736:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */IJ:function(){/* binding */return RenderLineInput},
/* harmony export */Nd:function(){/* binding */return DomPosition},
/* harmony export */d1:function(){/* binding */return renderViewLine},
/* harmony export */tF:function(){/* binding */return renderViewLine2},
/* harmony export */zG:function(){/* binding */return LineRange}
/* harmony export */});
/* unused harmony exports CharacterMapping, RenderLineOutput, RenderLineOutput2 */
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295),_core_stringBuilder_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(150072),_lineDecorations_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(92550);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class LinePart{constructor(endIndex,type,metadata){this._linePartBrand=void 0,this.endIndex=endIndex,this.type=type,this.metadata=metadata}isWhitespace(){return!!(1/* IS_WHITESPACE_MASK */&this.metadata)}isPseudoAfter(){return!!(4/* PSEUDO_AFTER_MASK */&this.metadata)}}class LineRange{constructor(startIndex,endIndex){this.startOffset=startIndex,this.endOffset=endIndex}equals(otherLineRange){return this.startOffset===otherLineRange.startOffset&&this.endOffset===otherLineRange.endOffset}}class RenderLineInput{constructor(useMonospaceOptimizations,canUseHalfwidthRightwardsArrow,lineContent,continuesWithWrappedLine,isBasicASCII,containsRTL,fauxIndentLength,lineTokens,lineDecorations,tabSize,startVisibleColumn,spaceWidth,middotWidth,wsmiddotWidth,stopRenderingLineAfter,renderWhitespace,renderControlCharacters,fontLigatures,selectionsOnLine){this.useMonospaceOptimizations=useMonospaceOptimizations,this.canUseHalfwidthRightwardsArrow=canUseHalfwidthRightwardsArrow,this.lineContent=lineContent,this.continuesWithWrappedLine=continuesWithWrappedLine,this.isBasicASCII=isBasicASCII,this.containsRTL=containsRTL,this.fauxIndentLength=fauxIndentLength,this.lineTokens=lineTokens,this.lineDecorations=lineDecorations.sort(_lineDecorations_js__WEBPACK_IMPORTED_MODULE_2__/* .LineDecoration */.Kp.compare),this.tabSize=tabSize,this.startVisibleColumn=startVisibleColumn,this.spaceWidth=spaceWidth,this.stopRenderingLineAfter=stopRenderingLineAfter,this.renderWhitespace="all"===renderWhitespace?4/* All */:"boundary"===renderWhitespace?1/* Boundary */:"selection"===renderWhitespace?2/* Selection */:"trailing"===renderWhitespace?3/* Trailing */:0/* None */,this.renderControlCharacters=renderControlCharacters,this.fontLigatures=fontLigatures,this.selectionsOnLine=selectionsOnLine&&selectionsOnLine.sort(((a,b)=>a.startOffset<b.startOffset?-1:1));const wsmiddotDiff=Math.abs(wsmiddotWidth-spaceWidth),middotDiff=Math.abs(middotWidth-spaceWidth);wsmiddotDiff<middotDiff?(this.renderSpaceWidth=wsmiddotWidth,this.renderSpaceCharCode=11825):(this.renderSpaceWidth=middotWidth,this.renderSpaceCharCode=183)}sameSelection(otherSelections){if(null===this.selectionsOnLine)return null===otherSelections;if(null===otherSelections)return!1;if(otherSelections.length!==this.selectionsOnLine.length)return!1;for(let i=0;i<this.selectionsOnLine.length;i++)if(!this.selectionsOnLine[i].equals(otherSelections[i]))return!1;return!0}equals(other){return this.useMonospaceOptimizations===other.useMonospaceOptimizations&&this.canUseHalfwidthRightwardsArrow===other.canUseHalfwidthRightwardsArrow&&this.lineContent===other.lineContent&&this.continuesWithWrappedLine===other.continuesWithWrappedLine&&this.isBasicASCII===other.isBasicASCII&&this.containsRTL===other.containsRTL&&this.fauxIndentLength===other.fauxIndentLength&&this.tabSize===other.tabSize&&this.startVisibleColumn===other.startVisibleColumn&&this.spaceWidth===other.spaceWidth&&this.renderSpaceWidth===other.renderSpaceWidth&&this.renderSpaceCharCode===other.renderSpaceCharCode&&this.stopRenderingLineAfter===other.stopRenderingLineAfter&&this.renderWhitespace===other.renderWhitespace&&this.renderControlCharacters===other.renderControlCharacters&&this.fontLigatures===other.fontLigatures&&_lineDecorations_js__WEBPACK_IMPORTED_MODULE_2__/* .LineDecoration */.Kp.equalsArr(this.lineDecorations,other.lineDecorations)&&this.lineTokens.equals(other.lineTokens)&&this.sameSelection(other.selectionsOnLine)}}class DomPosition{constructor(partIndex,charIndex){this.partIndex=partIndex,this.charIndex=charIndex}}
/**
 * Provides a both direction mapping between a line's character and its rendered position.
 */class CharacterMapping{constructor(length,partCount){this.length=length,this._data=new Uint32Array(this.length),this._absoluteOffsets=new Uint32Array(this.length)}static getPartIndex(partData){return(4294901760/* PART_INDEX_MASK */&partData)>>>16/* PART_INDEX_OFFSET */}static getCharIndex(partData){return(65535/* CHAR_INDEX_MASK */&partData)>>>0/* CHAR_INDEX_OFFSET */}setColumnInfo(column,partIndex,charIndex,partAbsoluteOffset){const partData=(partIndex<<16/* PART_INDEX_OFFSET */|charIndex<<0/* CHAR_INDEX_OFFSET */)>>>0;this._data[column-1]=partData,this._absoluteOffsets[column-1]=partAbsoluteOffset+charIndex}getAbsoluteOffset(column){return 0===this._absoluteOffsets.length?0:this._absoluteOffsets[column-1]}charOffsetToPartData(charOffset){return 0===this.length?0:charOffset<0?this._data[0]:charOffset>=this.length?this._data[this.length-1]:this._data[charOffset]}getDomPosition(column){const partData=this.charOffsetToPartData(column-1),partIndex=CharacterMapping.getPartIndex(partData),charIndex=CharacterMapping.getCharIndex(partData);return new DomPosition(partIndex,charIndex)}getColumn(domPosition,partLength){const charOffset=this.partDataToCharOffset(domPosition.partIndex,partLength,domPosition.charIndex);return charOffset+1}partDataToCharOffset(partIndex,partLength,charIndex){if(0===this.length)return 0;let searchEntry=(partIndex<<16/* PART_INDEX_OFFSET */|charIndex<<0/* CHAR_INDEX_OFFSET */)>>>0,min=0,max=this.length-1;while(min+1<max){let mid=min+max>>>1,midEntry=this._data[mid];if(midEntry===searchEntry)return mid;midEntry>searchEntry?max=mid:min=mid}if(min===max)return min;let minEntry=this._data[min],maxEntry=this._data[max];if(minEntry===searchEntry)return min;if(maxEntry===searchEntry)return max;let maxCharIndex,minPartIndex=CharacterMapping.getPartIndex(minEntry),minCharIndex=CharacterMapping.getCharIndex(minEntry),maxPartIndex=CharacterMapping.getPartIndex(maxEntry);
// sitting between parts
maxCharIndex=minPartIndex!==maxPartIndex?partLength:CharacterMapping.getCharIndex(maxEntry);let minEntryDistance=charIndex-minCharIndex,maxEntryDistance=maxCharIndex-charIndex;return minEntryDistance<=maxEntryDistance?min:max}}class RenderLineOutput{constructor(characterMapping,containsRTL,containsForeignElements){this._renderLineOutputBrand=void 0,this.characterMapping=characterMapping,this.containsRTL=containsRTL,this.containsForeignElements=containsForeignElements}}function renderViewLine(input,sb){if(0===input.lineContent.length){if(input.lineDecorations.length>0){
// This line is empty, but it contains inline decorations
sb.appendASCIIString("<span>");let beforeCount=0,afterCount=0,containsForeignElements=0/* None */;for(const lineDecoration of input.lineDecorations)1/* Before */!==lineDecoration.type&&2/* After */!==lineDecoration.type||(sb.appendASCIIString('<span class="'),sb.appendASCIIString(lineDecoration.className),sb.appendASCIIString('"></span>'),1/* Before */===lineDecoration.type&&(containsForeignElements|=1/* Before */,beforeCount++),2/* After */===lineDecoration.type&&(containsForeignElements|=2/* After */,afterCount++));sb.appendASCIIString("</span>");const characterMapping=new CharacterMapping(1,beforeCount+afterCount);return characterMapping.setColumnInfo(1,beforeCount,0,0),new RenderLineOutput(characterMapping,!1,containsForeignElements)}
// completely empty line
return sb.appendASCIIString("<span><span></span></span>"),new RenderLineOutput(new CharacterMapping(0,0),!1,0/* None */)}return _renderLine(resolveRenderLineInput(input),sb)}class RenderLineOutput2{constructor(characterMapping,html,containsRTL,containsForeignElements){this.characterMapping=characterMapping,this.html=html,this.containsRTL=containsRTL,this.containsForeignElements=containsForeignElements}}function renderViewLine2(input){let sb=(0,_core_stringBuilder_js__WEBPACK_IMPORTED_MODULE_1__/* .createStringBuilder */.l$)(1e4),out=renderViewLine(input,sb);return new RenderLineOutput2(out.characterMapping,sb.build(),out.containsRTL,out.containsForeignElements)}class ResolvedRenderLineInput{constructor(fontIsMonospace,canUseHalfwidthRightwardsArrow,lineContent,len,isOverflowing,parts,containsForeignElements,fauxIndentLength,tabSize,startVisibleColumn,containsRTL,spaceWidth,renderSpaceCharCode,renderWhitespace,renderControlCharacters){this.fontIsMonospace=fontIsMonospace,this.canUseHalfwidthRightwardsArrow=canUseHalfwidthRightwardsArrow,this.lineContent=lineContent,this.len=len,this.isOverflowing=isOverflowing,this.parts=parts,this.containsForeignElements=containsForeignElements,this.fauxIndentLength=fauxIndentLength,this.tabSize=tabSize,this.startVisibleColumn=startVisibleColumn,this.containsRTL=containsRTL,this.spaceWidth=spaceWidth,this.renderSpaceCharCode=renderSpaceCharCode,this.renderWhitespace=renderWhitespace,this.renderControlCharacters=renderControlCharacters}}function resolveRenderLineInput(input){const lineContent=input.lineContent;let isOverflowing,len;-1!==input.stopRenderingLineAfter&&input.stopRenderingLineAfter<lineContent.length?(isOverflowing=!0,len=input.stopRenderingLineAfter):(isOverflowing=!1,len=lineContent.length);let tokens=transformAndRemoveOverflowing(input.lineTokens,input.fauxIndentLength,len);(4/* All */===input.renderWhitespace||1/* Boundary */===input.renderWhitespace||2/* Selection */===input.renderWhitespace&&input.selectionsOnLine||3/* Trailing */===input.renderWhitespace)&&(tokens=_applyRenderWhitespace(input,lineContent,len,tokens));let containsForeignElements=0/* None */;if(input.lineDecorations.length>0){for(let i=0,len=input.lineDecorations.length;i<len;i++){const lineDecoration=input.lineDecorations[i];3/* RegularAffectingLetterSpacing */===lineDecoration.type||1/* Before */===lineDecoration.type?
// Pretend there are foreign elements... although not 100% accurate.
containsForeignElements|=1/* Before */:2/* After */===lineDecoration.type&&(containsForeignElements|=2/* After */)}tokens=_applyInlineDecorations(lineContent,len,tokens,input.lineDecorations)}return input.containsRTL||(
// We can never split RTL text, as it ruins the rendering
tokens=splitLargeTokens(lineContent,tokens,!input.isBasicASCII||input.fontLigatures)),input.renderControlCharacters&&!input.isBasicASCII&&(tokens=extractControlCharacters(lineContent,tokens)),new ResolvedRenderLineInput(input.useMonospaceOptimizations,input.canUseHalfwidthRightwardsArrow,lineContent,len,isOverflowing,tokens,containsForeignElements,input.fauxIndentLength,input.tabSize,input.startVisibleColumn,input.containsRTL,input.spaceWidth,input.renderSpaceCharCode,input.renderWhitespace,input.renderControlCharacters)}
/**
 * In the rendering phase, characters are always looped until token.endIndex.
 * Ensure that all tokens end before `len` and the last one ends precisely at `len`.
 */function transformAndRemoveOverflowing(tokens,fauxIndentLength,len){let result=[],resultLen=0;
// The faux indent part of the line should have no token type
fauxIndentLength>0&&(result[resultLen++]=new LinePart(fauxIndentLength,"",0));for(let tokenIndex=0,tokensLen=tokens.getCount();tokenIndex<tokensLen;tokenIndex++){const endIndex=tokens.getEndOffset(tokenIndex);if(endIndex<=fauxIndentLength)
// The faux indent part of the line should have no token type
continue;const type=tokens.getClassName(tokenIndex);if(endIndex>=len){result[resultLen++]=new LinePart(len,type,0);break}result[resultLen++]=new LinePart(endIndex,type,0)}return result}
/**
 * See https://github.com/microsoft/vscode/issues/6885.
 * It appears that having very large spans causes very slow reading of character positions.
 * So here we try to avoid that.
 */function splitLargeTokens(lineContent,tokens,onlyAtSpaces){let lastTokenEndIndex=0,result=[],resultLen=0;if(onlyAtSpaces)
// Split only at spaces => we need to walk each character
for(let i=0,len=tokens.length;i<len;i++){const token=tokens[i],tokenEndIndex=token.endIndex;if(lastTokenEndIndex+50/* LongToken */<tokenEndIndex){const tokenType=token.type,tokenMetadata=token.metadata;let lastSpaceOffset=-1,currTokenStart=lastTokenEndIndex;for(let j=lastTokenEndIndex;j<tokenEndIndex;j++)32/* Space */===lineContent.charCodeAt(j)&&(lastSpaceOffset=j),-1!==lastSpaceOffset&&j-currTokenStart>=50/* LongToken */&&(
// Split at `lastSpaceOffset` + 1
result[resultLen++]=new LinePart(lastSpaceOffset+1,tokenType,tokenMetadata),currTokenStart=lastSpaceOffset+1,lastSpaceOffset=-1);currTokenStart!==tokenEndIndex&&(result[resultLen++]=new LinePart(tokenEndIndex,tokenType,tokenMetadata))}else result[resultLen++]=token;lastTokenEndIndex=tokenEndIndex}else
// Split anywhere => we don't need to walk each character
for(let i=0,len=tokens.length;i<len;i++){const token=tokens[i],tokenEndIndex=token.endIndex;let diff=tokenEndIndex-lastTokenEndIndex;if(diff>50/* LongToken */){const tokenType=token.type,tokenMetadata=token.metadata,piecesCount=Math.ceil(diff/50/* LongToken */);for(let j=1;j<piecesCount;j++){let pieceEndIndex=lastTokenEndIndex+50/* LongToken */*j;result[resultLen++]=new LinePart(pieceEndIndex,tokenType,tokenMetadata)}result[resultLen++]=new LinePart(tokenEndIndex,tokenType,tokenMetadata)}else result[resultLen++]=token;lastTokenEndIndex=tokenEndIndex}return result}function isControlCharacter(charCode){return charCode<32?9/* Tab */!==charCode:127===charCode||(charCode>=8234&&charCode<=8238||charCode>=8294&&charCode<=8297||charCode>=8206&&charCode<=8207||1564===charCode)}function extractControlCharacters(lineContent,tokens){let result=[],lastLinePart=new LinePart(0,"",0),charOffset=0;for(const token of tokens){const tokenEndIndex=token.endIndex;for(;charOffset<tokenEndIndex;charOffset++){const charCode=lineContent.charCodeAt(charOffset);isControlCharacter(charCode)&&(charOffset>lastLinePart.endIndex&&(
// emit previous part if it has text
lastLinePart=new LinePart(charOffset,token.type,token.metadata),result.push(lastLinePart)),lastLinePart=new LinePart(charOffset+1,"mtkcontrol",token.metadata),result.push(lastLinePart))}charOffset>lastLinePart.endIndex&&(
// emit previous part if it has text
lastLinePart=new LinePart(tokenEndIndex,token.type,token.metadata),result.push(lastLinePart))}return result}
/**
 * Whitespace is rendered by "replacing" tokens with a special-purpose `mtkw` type that is later recognized in the rendering phase.
 * Moreover, a token is created for every visual indent because on some fonts the glyphs used for rendering whitespace (&rarr; or &middot;) do not have the same width as &nbsp;.
 * The rendering phase will generate `style="width:..."` for these tokens.
 */function _applyRenderWhitespace(input,lineContent,len,tokens){const continuesWithWrappedLine=input.continuesWithWrappedLine,fauxIndentLength=input.fauxIndentLength,tabSize=input.tabSize,startVisibleColumn=input.startVisibleColumn,useMonospaceOptimizations=input.useMonospaceOptimizations,selections=input.selectionsOnLine,onlyBoundary=1/* Boundary */===input.renderWhitespace,onlyTrailing=3/* Trailing */===input.renderWhitespace,generateLinePartForEachWhitespace=input.renderSpaceWidth!==input.spaceWidth;let result=[],resultLen=0,tokenIndex=0,tokenType=tokens[tokenIndex].type,tokenEndIndex=tokens[tokenIndex].endIndex;const tokensLength=tokens.length;let lastNonWhitespaceIndex,lineIsEmptyOrWhitespace=!1,firstNonWhitespaceIndex=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .firstNonWhitespaceIndex */.LC(lineContent);-1===firstNonWhitespaceIndex?(lineIsEmptyOrWhitespace=!0,firstNonWhitespaceIndex=len,lastNonWhitespaceIndex=len):lastNonWhitespaceIndex=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .lastNonWhitespaceIndex */.ow(lineContent);let wasInWhitespace=!1,currentSelectionIndex=0,currentSelection=selections&&selections[currentSelectionIndex],tmpIndent=startVisibleColumn%tabSize;for(let charIndex=fauxIndentLength;charIndex<len;charIndex++){const chCode=lineContent.charCodeAt(charIndex);let isInWhitespace;if(currentSelection&&charIndex>=currentSelection.endOffset&&(currentSelectionIndex++,currentSelection=selections&&selections[currentSelectionIndex]),charIndex<firstNonWhitespaceIndex||charIndex>lastNonWhitespaceIndex)
// in leading or trailing whitespace
isInWhitespace=!0;else if(9/* Tab */===chCode)
// a tab character is rendered both in all and boundary cases
isInWhitespace=!0;else if(32/* Space */===chCode)
// hit a space character
if(onlyBoundary)
// rendering only boundary whitespace
if(wasInWhitespace)isInWhitespace=!0;else{const nextChCode=charIndex+1<len?lineContent.charCodeAt(charIndex+1):0/* Null */;isInWhitespace=32/* Space */===nextChCode||9/* Tab */===nextChCode}else isInWhitespace=!0;else isInWhitespace=!1;
// If rendering whitespace on selection, check that the charIndex falls within a selection
if(isInWhitespace&&selections&&(isInWhitespace=!!currentSelection&&currentSelection.startOffset<=charIndex&&currentSelection.endOffset>charIndex),
// If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.
isInWhitespace&&onlyTrailing&&(isInWhitespace=lineIsEmptyOrWhitespace||charIndex>lastNonWhitespaceIndex),wasInWhitespace){
// was in whitespace token
if(!isInWhitespace||!useMonospaceOptimizations&&tmpIndent>=tabSize){
// leaving whitespace token or entering a new indent
if(generateLinePartForEachWhitespace){const lastEndIndex=resultLen>0?result[resultLen-1].endIndex:fauxIndentLength;for(let i=lastEndIndex+1;i<=charIndex;i++)result[resultLen++]=new LinePart(i,"mtkw",1/* IS_WHITESPACE */)}else result[resultLen++]=new LinePart(charIndex,"mtkw",1/* IS_WHITESPACE */);tmpIndent%=tabSize}}else
// was in regular token
(charIndex===tokenEndIndex||isInWhitespace&&charIndex>fauxIndentLength)&&(result[resultLen++]=new LinePart(charIndex,tokenType,0),tmpIndent%=tabSize);9/* Tab */===chCode?tmpIndent=tabSize:_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isFullWidthCharacter */.K7(chCode)?tmpIndent+=2:tmpIndent++,wasInWhitespace=isInWhitespace;while(charIndex===tokenEndIndex){if(tokenIndex++,!(tokenIndex<tokensLength))break;tokenType=tokens[tokenIndex].type,tokenEndIndex=tokens[tokenIndex].endIndex}}let generateWhitespace=!1;if(wasInWhitespace)
// was in whitespace token
if(continuesWithWrappedLine&&onlyBoundary){let lastCharCode=len>0?lineContent.charCodeAt(len-1):0/* Null */,prevCharCode=len>1?lineContent.charCodeAt(len-2):0/* Null */,isSingleTrailingSpace=32/* Space */===lastCharCode&&32/* Space */!==prevCharCode&&9/* Tab */!==prevCharCode;isSingleTrailingSpace||(generateWhitespace=!0)}else generateWhitespace=!0;if(generateWhitespace)if(generateLinePartForEachWhitespace){const lastEndIndex=resultLen>0?result[resultLen-1].endIndex:fauxIndentLength;for(let i=lastEndIndex+1;i<=len;i++)result[resultLen++]=new LinePart(i,"mtkw",1/* IS_WHITESPACE */)}else result[resultLen++]=new LinePart(len,"mtkw",1/* IS_WHITESPACE */);else result[resultLen++]=new LinePart(len,tokenType,0);return result}
/**
 * Inline decorations are "merged" on top of tokens.
 * Special care must be taken when multiple inline decorations are at play and they overlap.
 */function _applyInlineDecorations(lineContent,len,tokens,_lineDecorations){_lineDecorations.sort(_lineDecorations_js__WEBPACK_IMPORTED_MODULE_2__/* .LineDecoration */.Kp.compare);const lineDecorations=_lineDecorations_js__WEBPACK_IMPORTED_MODULE_2__/* .LineDecorationsNormalizer */.k.normalize(lineContent,_lineDecorations),lineDecorationsLen=lineDecorations.length;let lineDecorationIndex=0,result=[],resultLen=0,lastResultEndIndex=0;for(let tokenIndex=0,len=tokens.length;tokenIndex<len;tokenIndex++){const token=tokens[tokenIndex],tokenEndIndex=token.endIndex,tokenType=token.type,tokenMetadata=token.metadata;while(lineDecorationIndex<lineDecorationsLen&&lineDecorations[lineDecorationIndex].startOffset<tokenEndIndex){const lineDecoration=lineDecorations[lineDecorationIndex];if(lineDecoration.startOffset>lastResultEndIndex&&(lastResultEndIndex=lineDecoration.startOffset,result[resultLen++]=new LinePart(lastResultEndIndex,tokenType,tokenMetadata)),!(lineDecoration.endOffset+1<=tokenEndIndex)){
// This line decoration continues on to the next token
lastResultEndIndex=tokenEndIndex,result[resultLen++]=new LinePart(lastResultEndIndex,tokenType+" "+lineDecoration.className,tokenMetadata|lineDecoration.metadata);break}
// This line decoration ends before this token ends
lastResultEndIndex=lineDecoration.endOffset+1,result[resultLen++]=new LinePart(lastResultEndIndex,tokenType+" "+lineDecoration.className,tokenMetadata|lineDecoration.metadata),lineDecorationIndex++}tokenEndIndex>lastResultEndIndex&&(lastResultEndIndex=tokenEndIndex,result[resultLen++]=new LinePart(lastResultEndIndex,tokenType,tokenMetadata))}const lastTokenEndIndex=tokens[tokens.length-1].endIndex;if(lineDecorationIndex<lineDecorationsLen&&lineDecorations[lineDecorationIndex].startOffset===lastTokenEndIndex)while(lineDecorationIndex<lineDecorationsLen&&lineDecorations[lineDecorationIndex].startOffset===lastTokenEndIndex){const lineDecoration=lineDecorations[lineDecorationIndex];result[resultLen++]=new LinePart(lastResultEndIndex,lineDecoration.className,lineDecoration.metadata),lineDecorationIndex++}return result}
/**
 * This function is on purpose not split up into multiple functions to allow runtime type inference (i.e. performance reasons).
 * Notice how all the needed data is fully resolved and passed in (i.e. no other calls).
 */function _renderLine(input,sb){const fontIsMonospace=input.fontIsMonospace,canUseHalfwidthRightwardsArrow=input.canUseHalfwidthRightwardsArrow,containsForeignElements=input.containsForeignElements,lineContent=input.lineContent,len=input.len,isOverflowing=input.isOverflowing,parts=input.parts,fauxIndentLength=input.fauxIndentLength,tabSize=input.tabSize,startVisibleColumn=input.startVisibleColumn,containsRTL=input.containsRTL,spaceWidth=input.spaceWidth,renderSpaceCharCode=input.renderSpaceCharCode,renderWhitespace=input.renderWhitespace,renderControlCharacters=input.renderControlCharacters,characterMapping=new CharacterMapping(len+1,parts.length);let lastCharacterMappingDefined=!1,charIndex=0,visibleColumn=startVisibleColumn,charOffsetInPart=0,partDisplacement=0,prevPartContentCnt=0,partAbsoluteOffset=0;containsRTL?sb.appendASCIIString('<span dir="ltr">'):sb.appendASCIIString("<span>");for(let partIndex=0,tokensLen=parts.length;partIndex<tokensLen;partIndex++){partAbsoluteOffset+=prevPartContentCnt;const part=parts[partIndex],partEndIndex=part.endIndex,partType=part.type,partRendersWhitespace=0/* None */!==renderWhitespace&&part.isWhitespace(),partRendersWhitespaceWithWidth=partRendersWhitespace&&!fontIsMonospace&&("mtkw"/*only whitespace*/===partType||!containsForeignElements),partIsEmptyAndHasPseudoAfter=charIndex===partEndIndex&&part.isPseudoAfter();if(charOffsetInPart=0,sb.appendASCIIString('<span class="'),sb.appendASCIIString(partRendersWhitespaceWithWidth?"mtkz":partType),sb.appendASCII(34/* DoubleQuote */),partRendersWhitespace){let partContentCnt=0;{let _charIndex=charIndex,_visibleColumn=visibleColumn;for(;_charIndex<partEndIndex;_charIndex++){const charCode=lineContent.charCodeAt(_charIndex),charWidth=0|(9/* Tab */===charCode?tabSize-_visibleColumn%tabSize:1);partContentCnt+=charWidth,_charIndex>=fauxIndentLength&&(_visibleColumn+=charWidth)}}for(partRendersWhitespaceWithWidth&&(sb.appendASCIIString(' style="width:'),sb.appendASCIIString(String(spaceWidth*partContentCnt)),sb.appendASCIIString('px"')),sb.appendASCII(62/* GreaterThan */);charIndex<partEndIndex;charIndex++){characterMapping.setColumnInfo(charIndex+1,partIndex-partDisplacement,charOffsetInPart,partAbsoluteOffset),partDisplacement=0;const charCode=lineContent.charCodeAt(charIndex);let charWidth;if(9/* Tab */===charCode){charWidth=tabSize-visibleColumn%tabSize|0,!canUseHalfwidthRightwardsArrow||charWidth>1?sb.write1(8594):sb.write1(65515);for(let space=2;space<=charWidth;space++)sb.write1(160);// &nbsp;
}else// must be CharCode.Space
charWidth=1,sb.write1(renderSpaceCharCode);charOffsetInPart+=charWidth,charIndex>=fauxIndentLength&&(visibleColumn+=charWidth)}prevPartContentCnt=partContentCnt}else{let partContentCnt=0;for(sb.appendASCII(62/* GreaterThan */);charIndex<partEndIndex;charIndex++){characterMapping.setColumnInfo(charIndex+1,partIndex-partDisplacement,charOffsetInPart,partAbsoluteOffset),partDisplacement=0;const charCode=lineContent.charCodeAt(charIndex);let producedCharacters=1,charWidth=1;switch(charCode){case 9/* Tab */:producedCharacters=tabSize-visibleColumn%tabSize,charWidth=producedCharacters;for(let space=1;space<=producedCharacters;space++)sb.write1(160);// &nbsp;
break;case 32/* Space */:sb.write1(160);// &nbsp;
break;case 60/* LessThan */:sb.appendASCIIString("&lt;");break;case 62/* GreaterThan */:sb.appendASCIIString("&gt;");break;case 38/* Ampersand */:sb.appendASCIIString("&amp;");break;case 0/* Null */:renderControlCharacters?
// See https://unicode-table.com/en/blocks/control-pictures/
sb.write1(9216):sb.appendASCIIString("&#00;");break;case 65279/* UTF8_BOM */:case 8232/* LINE_SEPARATOR */:case 8233/* PARAGRAPH_SEPARATOR */:case 133/* NEXT_LINE */:sb.write1(65533);break;default:_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isFullWidthCharacter */.K7(charCode)&&charWidth++,
// See https://unicode-table.com/en/blocks/control-pictures/
renderControlCharacters&&charCode<32?sb.write1(9216+charCode):renderControlCharacters&&127===charCode?
// DEL
sb.write1(9249):renderControlCharacters&&isControlCharacter(charCode)?(sb.appendASCIIString("[U+"),sb.appendASCIIString(to4CharHex(charCode)),sb.appendASCIIString("]"),producedCharacters=8):sb.write1(charCode)}charOffsetInPart+=producedCharacters,partContentCnt+=producedCharacters,charIndex>=fauxIndentLength&&(visibleColumn+=charWidth)}prevPartContentCnt=partContentCnt}partIsEmptyAndHasPseudoAfter?partDisplacement++:partDisplacement=0,charIndex>=len&&!lastCharacterMappingDefined&&part.isPseudoAfter()&&(lastCharacterMappingDefined=!0,characterMapping.setColumnInfo(charIndex+1,partIndex,charOffsetInPart,partAbsoluteOffset)),sb.appendASCIIString("</span>")}return lastCharacterMappingDefined||
// When getting client rects for the last character, we will position the
// text range at the end of the span, insteaf of at the beginning of next span
characterMapping.setColumnInfo(len+1,parts.length-1,charOffsetInPart,partAbsoluteOffset),isOverflowing&&sb.appendASCIIString("<span>&hellip;</span>"),sb.appendASCIIString("</span>"),new RenderLineOutput(characterMapping,containsRTL,containsForeignElements)}function to4CharHex(n){return n.toString(16).toUpperCase().padStart(4,"0")}
/***/},
/***/863664:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */x:function(){/* binding */return ViewportData}
/* harmony export */});
/* harmony import */var _core_range_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(624314);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Contains all data needed to render at a specific viewport.
 */class ViewportData{constructor(selections,partialData,whitespaceViewportData,model){this.selections=selections,this.startLineNumber=0|partialData.startLineNumber,this.endLineNumber=0|partialData.endLineNumber,this.relativeVerticalOffset=partialData.relativeVerticalOffset,this.bigNumbersDelta=0|partialData.bigNumbersDelta,this.whitespaceViewportData=whitespaceViewportData,this._model=model,this.visibleRange=new _core_range_js__WEBPACK_IMPORTED_MODULE_0__/* .Range */.e(partialData.startLineNumber,this._model.getLineMinColumn(partialData.startLineNumber),partialData.endLineNumber,this._model.getLineMaxColumn(partialData.endLineNumber))}getViewLineRenderingData(lineNumber){return this._model.getViewLineRenderingData(this.visibleRange,lineNumber)}getDecorationsInViewport(){return this._model.getDecorationsInViewport(this.visibleRange)}}
/***/},
/***/489743:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */E:function(){/* binding */return MinimapTokensColorTracker}
/* harmony export */});
/* harmony import */var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(104669),_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(905976),_core_rgba_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(89636),_modes_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(860303);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class MinimapTokensColorTracker extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .Disposable */.JT{constructor(){super(),this._onDidChange=new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__/* .Emitter */.Q5,this.onDidChange=this._onDidChange.event,this._updateColorMap(),this._register(_modes_js__WEBPACK_IMPORTED_MODULE_3__/* .TokenizationRegistry */.RW.onDidChange((e=>{e.changedColorMap&&this._updateColorMap()})))}static getInstance(){return this._INSTANCE||(this._INSTANCE=(0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .markAsSingleton */.dk)(new MinimapTokensColorTracker)),this._INSTANCE}_updateColorMap(){const colorMap=_modes_js__WEBPACK_IMPORTED_MODULE_3__/* .TokenizationRegistry */.RW.getColorMap();if(!colorMap)return this._colors=[_core_rgba_js__WEBPACK_IMPORTED_MODULE_2__/* .RGBA8 */.h.Empty],void(this._backgroundIsLight=!0);this._colors=[_core_rgba_js__WEBPACK_IMPORTED_MODULE_2__/* .RGBA8 */.h.Empty];for(let colorId=1;colorId<colorMap.length;colorId++){const source=colorMap[colorId].rgba;
// Use a VM friendly data-type
this._colors[colorId]=new _core_rgba_js__WEBPACK_IMPORTED_MODULE_2__/* .RGBA8 */.h(source.r,source.g,source.b,Math.round(255*source.a))}let backgroundLuminosity=colorMap[2/* DefaultBackground */].getRelativeLuminance();this._backgroundIsLight=backgroundLuminosity>=.5,this._onDidChange.fire(void 0)}getColor(colorId){return(colorId<1||colorId>=this._colors.length)&&(
// background color (basically invisible)
colorId=2/* DefaultBackground */),this._colors[colorId]}backgroundIsLight(){return this._backgroundIsLight}}MinimapTokensColorTracker._INSTANCE=null},
/***/368263:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */p:function(){/* binding */return MonospaceLineBreaksComputerFactory}
/* harmony export */});
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295),_core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(744906),_viewModel_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(513824),_model_textModelEvents_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(983256);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class WrappingCharacterClassifier extends _core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_2__/* .CharacterClassifier */.N{constructor(BREAK_BEFORE,BREAK_AFTER){super(0/* NONE */);for(let i=0;i<BREAK_BEFORE.length;i++)this.set(BREAK_BEFORE.charCodeAt(i),1/* BREAK_BEFORE */);for(let i=0;i<BREAK_AFTER.length;i++)this.set(BREAK_AFTER.charCodeAt(i),2/* BREAK_AFTER */)}get(charCode){return charCode>=0&&charCode<256?this._asciiMap[charCode]:
// Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:
// 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)
// 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)
// 3. Hiragana and Katakana (0x3040 -- 0x30FF)
charCode>=12352&&charCode<=12543||charCode>=13312&&charCode<=19903||charCode>=19968&&charCode<=40959?3/* BREAK_IDEOGRAPHIC */:this._map.get(charCode)||this._defaultValue}}let arrPool1=[],arrPool2=[];class MonospaceLineBreaksComputerFactory{constructor(breakBeforeChars,breakAfterChars){this.classifier=new WrappingCharacterClassifier(breakBeforeChars,breakAfterChars)}static create(options){return new MonospaceLineBreaksComputerFactory(options.get(118/* wordWrapBreakBeforeCharacters */),options.get(117/* wordWrapBreakAfterCharacters */))}createLineBreaksComputer(fontInfo,tabSize,wrappingColumn,wrappingIndent){tabSize|=0,//@perf
wrappingColumn=+wrappingColumn;//@perf
const requests=[],injectedTexts=[],previousBreakingData=[];return{addRequest:(lineText,injectedText,previousLineBreakData)=>{requests.push(lineText),injectedTexts.push(injectedText),previousBreakingData.push(previousLineBreakData)},finalize:()=>{const columnsForFullWidthChar=fontInfo.typicalFullwidthCharacterWidth/fontInfo.typicalHalfwidthCharacterWidth;//@perf
let result=[];for(let i=0,len=requests.length;i<len;i++){const injectedText=injectedTexts[i],previousLineBreakData=previousBreakingData[i];!previousLineBreakData||previousLineBreakData.injectionOptions||injectedText?result[i]=createLineBreaks(this.classifier,requests[i],injectedText,tabSize,wrappingColumn,columnsForFullWidthChar,wrappingIndent):result[i]=createLineBreaksFromPreviousLineBreaks(this.classifier,previousLineBreakData,requests[i],tabSize,wrappingColumn,columnsForFullWidthChar,wrappingIndent)}return arrPool1.length=0,arrPool2.length=0,result}}}}function createLineBreaksFromPreviousLineBreaks(classifier,previousBreakingData,lineText,tabSize,firstLineBreakColumn,columnsForFullWidthChar,wrappingIndent){if(-1===firstLineBreakColumn)return null;const len=lineText.length;if(len<=1)return null;const prevBreakingOffsets=previousBreakingData.breakOffsets,prevBreakingOffsetsVisibleColumn=previousBreakingData.breakOffsetsVisibleColumn,wrappedTextIndentLength=computeWrappedTextIndentLength(lineText,tabSize,firstLineBreakColumn,columnsForFullWidthChar,wrappingIndent),wrappedLineBreakColumn=firstLineBreakColumn-wrappedTextIndentLength;let breakingOffsets=arrPool1,breakingOffsetsVisibleColumn=arrPool2,breakingOffsetsCount=0,lastBreakingOffset=0,lastBreakingOffsetVisibleColumn=0,breakingColumn=firstLineBreakColumn;const prevLen=prevBreakingOffsets.length;let prevIndex=0;if(prevIndex>=0){let bestDistance=Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex]-breakingColumn);while(prevIndex+1<prevLen){const distance=Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex+1]-breakingColumn);if(distance>=bestDistance)break;bestDistance=distance,prevIndex++}}while(prevIndex<prevLen){
// Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)
let prevBreakOffset=prevIndex<0?0:prevBreakingOffsets[prevIndex],prevBreakOffsetVisibleColumn=prevIndex<0?0:prevBreakingOffsetsVisibleColumn[prevIndex];lastBreakingOffset>prevBreakOffset&&(prevBreakOffset=lastBreakingOffset,prevBreakOffsetVisibleColumn=lastBreakingOffsetVisibleColumn);let breakOffset=0,breakOffsetVisibleColumn=0,forcedBreakOffset=0,forcedBreakOffsetVisibleColumn=0;
// initially, we search as much as possible to the right (if it fits)
if(prevBreakOffsetVisibleColumn<=breakingColumn){let visibleColumn=prevBreakOffsetVisibleColumn,prevCharCode=0===prevBreakOffset?0/* Null */:lineText.charCodeAt(prevBreakOffset-1),prevCharCodeClass=0===prevBreakOffset?0/* NONE */:classifier.get(prevCharCode),entireLineFits=!0;for(let i=prevBreakOffset;i<len;i++){const charStartOffset=i,charCode=lineText.charCodeAt(i);let charCodeClass,charWidth;
// check if adding character at `i` will go over the breaking column
if(_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isHighSurrogate */.ZG(charCode)?(
// A surrogate pair must always be considered as a single unit, so it is never to be broken
i++,charCodeClass=0/* NONE */,charWidth=2):(charCodeClass=classifier.get(charCode),charWidth=computeCharWidth(charCode,visibleColumn,tabSize,columnsForFullWidthChar)),charStartOffset>lastBreakingOffset&&canBreak(prevCharCode,prevCharCodeClass,charCode,charCodeClass)&&(breakOffset=charStartOffset,breakOffsetVisibleColumn=visibleColumn),visibleColumn+=charWidth,visibleColumn>breakingColumn){
// We need to break at least before character at `i`:
charStartOffset>lastBreakingOffset?(forcedBreakOffset=charStartOffset,forcedBreakOffsetVisibleColumn=visibleColumn-charWidth):(
// we need to advance at least by one character
forcedBreakOffset=i+1,forcedBreakOffsetVisibleColumn=visibleColumn),visibleColumn-breakOffsetVisibleColumn>wrappedLineBreakColumn&&(
// Cannot break at `breakOffset` => reset it if it was set
breakOffset=0),entireLineFits=!1;break}prevCharCode=charCode,prevCharCodeClass=charCodeClass}if(entireLineFits){
// there is no more need to break => stop the outer loop!
breakingOffsetsCount>0&&(
// Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`
breakingOffsets[breakingOffsetsCount]=prevBreakingOffsets[prevBreakingOffsets.length-1],breakingOffsetsVisibleColumn[breakingOffsetsCount]=prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length-1],breakingOffsetsCount++);break}}if(0===breakOffset){
// must search left
let visibleColumn=prevBreakOffsetVisibleColumn,charCode=lineText.charCodeAt(prevBreakOffset),charCodeClass=classifier.get(charCode),hitATabCharacter=!1;for(let i=prevBreakOffset-1;i>=lastBreakingOffset;i--){const charStartOffset=i+1,prevCharCode=lineText.charCodeAt(i);if(9/* Tab */===prevCharCode){
// cannot determine the width of a tab when going backwards, so we must go forwards
hitATabCharacter=!0;break}let prevCharCodeClass,prevCharWidth;if(_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isLowSurrogate */.YK(prevCharCode)?(
// A surrogate pair must always be considered as a single unit, so it is never to be broken
i--,prevCharCodeClass=0/* NONE */,prevCharWidth=2):(prevCharCodeClass=classifier.get(prevCharCode),prevCharWidth=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isFullWidthCharacter */.K7(prevCharCode)?columnsForFullWidthChar:1),visibleColumn<=breakingColumn){if(0===forcedBreakOffset&&(forcedBreakOffset=charStartOffset,forcedBreakOffsetVisibleColumn=visibleColumn),visibleColumn<=breakingColumn-wrappedLineBreakColumn)
// went too far!
break;if(canBreak(prevCharCode,prevCharCodeClass,charCode,charCodeClass)){breakOffset=charStartOffset,breakOffsetVisibleColumn=visibleColumn;break}}visibleColumn-=prevCharWidth,charCode=prevCharCode,charCodeClass=prevCharCodeClass}if(0!==breakOffset){const remainingWidthOfNextLine=wrappedLineBreakColumn-(forcedBreakOffsetVisibleColumn-breakOffsetVisibleColumn);if(remainingWidthOfNextLine<=tabSize){const charCodeAtForcedBreakOffset=lineText.charCodeAt(forcedBreakOffset);let charWidth;
// A surrogate pair must always be considered as a single unit, so it is never to be broken
charWidth=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isHighSurrogate */.ZG(charCodeAtForcedBreakOffset)?2:computeCharWidth(charCodeAtForcedBreakOffset,forcedBreakOffsetVisibleColumn,tabSize,columnsForFullWidthChar),remainingWidthOfNextLine-charWidth<0&&(
// it is not worth it to break at breakOffset, it just introduces an extra needless line!
breakOffset=0)}}if(hitATabCharacter){
// cannot determine the width of a tab when going backwards, so we must go forwards from the previous break
prevIndex--;continue}}if(0===breakOffset&&(
// Could not find a good breaking point
breakOffset=forcedBreakOffset,breakOffsetVisibleColumn=forcedBreakOffsetVisibleColumn),breakOffset<=lastBreakingOffset){
// Make sure that we are advancing (at least one character)
const charCode=lineText.charCodeAt(lastBreakingOffset);_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isHighSurrogate */.ZG(charCode)?(
// A surrogate pair must always be considered as a single unit, so it is never to be broken
breakOffset=lastBreakingOffset+2,breakOffsetVisibleColumn=lastBreakingOffsetVisibleColumn+2):(breakOffset=lastBreakingOffset+1,breakOffsetVisibleColumn=lastBreakingOffsetVisibleColumn+computeCharWidth(charCode,lastBreakingOffsetVisibleColumn,tabSize,columnsForFullWidthChar))}lastBreakingOffset=breakOffset,breakingOffsets[breakingOffsetsCount]=breakOffset,lastBreakingOffsetVisibleColumn=breakOffsetVisibleColumn,breakingOffsetsVisibleColumn[breakingOffsetsCount]=breakOffsetVisibleColumn,breakingOffsetsCount++,breakingColumn=breakOffsetVisibleColumn+wrappedLineBreakColumn;while(prevIndex<0||prevIndex<prevLen&&prevBreakingOffsetsVisibleColumn[prevIndex]<breakOffsetVisibleColumn)prevIndex++;let bestDistance=Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex]-breakingColumn);while(prevIndex+1<prevLen){const distance=Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex+1]-breakingColumn);if(distance>=bestDistance)break;bestDistance=distance,prevIndex++}}return 0===breakingOffsetsCount?null:(
// Doing here some object reuse which ends up helping a huge deal with GC pauses!
breakingOffsets.length=breakingOffsetsCount,breakingOffsetsVisibleColumn.length=breakingOffsetsCount,arrPool1=previousBreakingData.breakOffsets,arrPool2=previousBreakingData.breakOffsetsVisibleColumn,previousBreakingData.breakOffsets=breakingOffsets,previousBreakingData.breakOffsetsVisibleColumn=breakingOffsetsVisibleColumn,previousBreakingData.wrappedTextIndentLength=wrappedTextIndentLength,previousBreakingData)}function createLineBreaks(classifier,_lineText,injectedTexts,tabSize,firstLineBreakColumn,columnsForFullWidthChar,wrappingIndent){const lineText=_model_textModelEvents_js__WEBPACK_IMPORTED_MODULE_3__/* .LineInjectedText */.gk.applyInjectedText(_lineText,injectedTexts);let injectionOptions,injectionOffsets;if(injectedTexts&&injectedTexts.length>0?(injectionOptions=injectedTexts.map((t=>t.options)),injectionOffsets=injectedTexts.map((text=>text.column-1))):(injectionOptions=null,injectionOffsets=null),-1===firstLineBreakColumn)return injectionOptions?new _viewModel_js__WEBPACK_IMPORTED_MODULE_1__/* .LineBreakData */.le([lineText.length],[],0,injectionOffsets,injectionOptions):null;
// creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK
// because `breakOffsetsVisibleColumn` will never be used because it contains injected text
const len=lineText.length;if(len<=1)return injectionOptions?new _viewModel_js__WEBPACK_IMPORTED_MODULE_1__/* .LineBreakData */.le([lineText.length],[],0,injectionOffsets,injectionOptions):null;
// creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK
// because `breakOffsetsVisibleColumn` will never be used because it contains injected text
const wrappedTextIndentLength=computeWrappedTextIndentLength(lineText,tabSize,firstLineBreakColumn,columnsForFullWidthChar,wrappingIndent),wrappedLineBreakColumn=firstLineBreakColumn-wrappedTextIndentLength;let breakingOffsets=[],breakingOffsetsVisibleColumn=[],breakingOffsetsCount=0,breakOffset=0,breakOffsetVisibleColumn=0,breakingColumn=firstLineBreakColumn,prevCharCode=lineText.charCodeAt(0),prevCharCodeClass=classifier.get(prevCharCode),visibleColumn=computeCharWidth(prevCharCode,0,tabSize,columnsForFullWidthChar),startOffset=1;_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isHighSurrogate */.ZG(prevCharCode)&&(
// A surrogate pair must always be considered as a single unit, so it is never to be broken
visibleColumn+=1,prevCharCode=lineText.charCodeAt(1),prevCharCodeClass=classifier.get(prevCharCode),startOffset++);for(let i=startOffset;i<len;i++){const charStartOffset=i,charCode=lineText.charCodeAt(i);let charCodeClass,charWidth;_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isHighSurrogate */.ZG(charCode)?(
// A surrogate pair must always be considered as a single unit, so it is never to be broken
i++,charCodeClass=0/* NONE */,charWidth=2):(charCodeClass=classifier.get(charCode),charWidth=computeCharWidth(charCode,visibleColumn,tabSize,columnsForFullWidthChar)),canBreak(prevCharCode,prevCharCodeClass,charCode,charCodeClass)&&(breakOffset=charStartOffset,breakOffsetVisibleColumn=visibleColumn),visibleColumn+=charWidth,
// check if adding character at `i` will go over the breaking column
visibleColumn>breakingColumn&&(
// We need to break at least before character at `i`:
(0===breakOffset||visibleColumn-breakOffsetVisibleColumn>wrappedLineBreakColumn)&&(
// Cannot break at `breakOffset`, must break at `i`
breakOffset=charStartOffset,breakOffsetVisibleColumn=visibleColumn-charWidth),breakingOffsets[breakingOffsetsCount]=breakOffset,breakingOffsetsVisibleColumn[breakingOffsetsCount]=breakOffsetVisibleColumn,breakingOffsetsCount++,breakingColumn=breakOffsetVisibleColumn+wrappedLineBreakColumn,breakOffset=0),prevCharCode=charCode,prevCharCodeClass=charCodeClass}return 0!==breakingOffsetsCount||injectedTexts&&0!==injectedTexts.length?(
// Add last segment
breakingOffsets[breakingOffsetsCount]=len,breakingOffsetsVisibleColumn[breakingOffsetsCount]=visibleColumn,new _viewModel_js__WEBPACK_IMPORTED_MODULE_1__/* .LineBreakData */.le(breakingOffsets,breakingOffsetsVisibleColumn,wrappedTextIndentLength,injectionOffsets,injectionOptions)):null}function computeCharWidth(charCode,visibleColumn,tabSize,columnsForFullWidthChar){return 9/* Tab */===charCode?tabSize-visibleColumn%tabSize:_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isFullWidthCharacter */.K7(charCode)||charCode<32?columnsForFullWidthChar:1}function tabCharacterWidth(visibleColumn,tabSize){return tabSize-visibleColumn%tabSize}
/**
 * Kinsoku Shori : Don't break after a leading character, like an open bracket
 * Kinsoku Shori : Don't break before a trailing character, like a period
 */function canBreak(prevCharCode,prevCharCodeClass,charCode,charCodeClass){return 32/* Space */!==charCode&&(2/* BREAK_AFTER */===prevCharCodeClass||3/* BREAK_IDEOGRAPHIC */===prevCharCodeClass&&2/* BREAK_AFTER */!==charCodeClass||1/* BREAK_BEFORE */===charCodeClass||3/* BREAK_IDEOGRAPHIC */===charCodeClass&&1/* BREAK_BEFORE */!==prevCharCodeClass)}function computeWrappedTextIndentLength(lineText,tabSize,firstLineBreakColumn,columnsForFullWidthChar,wrappingIndent){let wrappedTextIndentLength=0;if(0/* None */!==wrappingIndent){const firstNonWhitespaceIndex=_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .firstNonWhitespaceIndex */.LC(lineText);if(-1!==firstNonWhitespaceIndex){
// Track existing indent
for(let i=0;i<firstNonWhitespaceIndex;i++){const charWidth=9/* Tab */===lineText.charCodeAt(i)?tabCharacterWidth(wrappedTextIndentLength,tabSize):1;wrappedTextIndentLength+=charWidth}
// Increase indent of continuation lines, if desired
const numberOfAdditionalTabs=3/* DeepIndent */===wrappingIndent?2:2/* Indent */===wrappingIndent?1:0;for(let i=0;i<numberOfAdditionalTabs;i++){const charWidth=tabCharacterWidth(wrappedTextIndentLength,tabSize);wrappedTextIndentLength+=charWidth}
// Force sticking to beginning of line if no character would fit except for the indentation
wrappedTextIndentLength+columnsForFullWidthChar>firstLineBreakColumn&&(wrappedTextIndentLength=0)}}return wrappedTextIndentLength}
/***/},
/***/403544:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */T:function(){/* binding */return PrefixSumIndexOfResult},
/* harmony export */o:function(){/* binding */return PrefixSumComputer}
/* harmony export */});
/* harmony import */var _base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(385427);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/class PrefixSumIndexOfResult{constructor(index,remainder){this._prefixSumIndexOfResultBrand=void 0,this.index=index,this.remainder=remainder}}class PrefixSumComputer{constructor(values){this.values=values,this.prefixSum=new Uint32Array(values.length),this.prefixSumValidIndex=new Int32Array(1),this.prefixSumValidIndex[0]=-1}insertValues(insertIndex,insertValues){insertIndex=(0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__/* .toUint32 */.A)(insertIndex);const oldValues=this.values,oldPrefixSum=this.prefixSum,insertValuesLen=insertValues.length;return 0!==insertValuesLen&&(this.values=new Uint32Array(oldValues.length+insertValuesLen),this.values.set(oldValues.subarray(0,insertIndex),0),this.values.set(oldValues.subarray(insertIndex),insertIndex+insertValuesLen),this.values.set(insertValues,insertIndex),insertIndex-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=insertIndex-1),this.prefixSum=new Uint32Array(this.values.length),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(oldPrefixSum.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}changeValue(index,value){return index=(0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__/* .toUint32 */.A)(index),value=(0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__/* .toUint32 */.A)(value),this.values[index]!==value&&(this.values[index]=value,index-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=index-1),!0)}removeValues(startIndex,count){startIndex=(0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__/* .toUint32 */.A)(startIndex),count=(0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__/* .toUint32 */.A)(count);const oldValues=this.values,oldPrefixSum=this.prefixSum;if(startIndex>=oldValues.length)return!1;let maxCount=oldValues.length-startIndex;return count>=maxCount&&(count=maxCount),0!==count&&(this.values=new Uint32Array(oldValues.length-count),this.values.set(oldValues.subarray(0,startIndex),0),this.values.set(oldValues.subarray(startIndex+count),startIndex),this.prefixSum=new Uint32Array(this.values.length),startIndex-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=startIndex-1),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(oldPrefixSum.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}getTotalSum(){return 0===this.values.length?0:this._getPrefixSum(this.values.length-1)}getPrefixSum(index){return index<0?0:(index=(0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__/* .toUint32 */.A)(index),this._getPrefixSum(index))}_getPrefixSum(index){if(index<=this.prefixSumValidIndex[0])return this.prefixSum[index];let startIndex=this.prefixSumValidIndex[0]+1;0===startIndex&&(this.prefixSum[0]=this.values[0],startIndex++),index>=this.values.length&&(index=this.values.length-1);for(let i=startIndex;i<=index;i++)this.prefixSum[i]=this.prefixSum[i-1]+this.values[i];return this.prefixSumValidIndex[0]=Math.max(this.prefixSumValidIndex[0],index),this.prefixSum[index]}getIndexOf(sum){sum=Math.floor(sum),//@perf
// Compute all sums (to get a fully valid prefixSum)
this.getTotalSum();let low=0,high=this.values.length-1,mid=0,midStop=0,midStart=0;while(low<=high)if(mid=low+(high-low)/2|0,midStop=this.prefixSum[mid],midStart=midStop-this.values[mid],sum<midStart)high=mid-1;else{if(!(sum>=midStop))break;low=mid+1}return new PrefixSumIndexOfResult(mid,sum-midStart)}}
/***/},
/***/638272:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */O:function(){/* binding */return ViewEventHandler}
/* harmony export */});
/* harmony import */var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(905976);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/class ViewEventHandler extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__/* .Disposable */.JT{constructor(){super(),this._shouldRender=!0}shouldRender(){return this._shouldRender}forceShouldRender(){this._shouldRender=!0}setShouldRender(){this._shouldRender=!0}onDidRender(){this._shouldRender=!1}
// --- begin event handlers
onCompositionStart(e){return!1}onCompositionEnd(e){return!1}onConfigurationChanged(e){return!1}onCursorStateChanged(e){return!1}onDecorationsChanged(e){return!1}onFlushed(e){return!1}onFocusChanged(e){return!1}onLanguageConfigurationChanged(e){return!1}onLineMappingChanged(e){return!1}onLinesChanged(e){return!1}onLinesDeleted(e){return!1}onLinesInserted(e){return!1}onRevealRangeRequest(e){return!1}onScrollChanged(e){return!1}onThemeChanged(e){return!1}onTokensChanged(e){return!1}onTokensColorsChanged(e){return!1}onZonesChanged(e){return!1}
// --- end event handlers
handleEvents(events){let shouldRender=!1;for(let i=0,len=events.length;i<len;i++){let e=events[i];switch(e.type){case 0/* ViewCompositionStart */:this.onCompositionStart(e)&&(shouldRender=!0);break;case 1/* ViewCompositionEnd */:this.onCompositionEnd(e)&&(shouldRender=!0);break;case 2/* ViewConfigurationChanged */:this.onConfigurationChanged(e)&&(shouldRender=!0);break;case 3/* ViewCursorStateChanged */:this.onCursorStateChanged(e)&&(shouldRender=!0);break;case 4/* ViewDecorationsChanged */:this.onDecorationsChanged(e)&&(shouldRender=!0);break;case 5/* ViewFlushed */:this.onFlushed(e)&&(shouldRender=!0);break;case 6/* ViewFocusChanged */:this.onFocusChanged(e)&&(shouldRender=!0);break;case 7/* ViewLanguageConfigurationChanged */:this.onLanguageConfigurationChanged(e)&&(shouldRender=!0);break;case 8/* ViewLineMappingChanged */:this.onLineMappingChanged(e)&&(shouldRender=!0);break;case 9/* ViewLinesChanged */:this.onLinesChanged(e)&&(shouldRender=!0);break;case 10/* ViewLinesDeleted */:this.onLinesDeleted(e)&&(shouldRender=!0);break;case 11/* ViewLinesInserted */:this.onLinesInserted(e)&&(shouldRender=!0);break;case 12/* ViewRevealRangeRequest */:this.onRevealRangeRequest(e)&&(shouldRender=!0);break;case 13/* ViewScrollChanged */:this.onScrollChanged(e)&&(shouldRender=!0);break;case 15/* ViewTokensChanged */:this.onTokensChanged(e)&&(shouldRender=!0);break;case 14/* ViewThemeChanged */:this.onThemeChanged(e)&&(shouldRender=!0);break;case 16/* ViewTokensColorsChanged */:this.onTokensColorsChanged(e)&&(shouldRender=!0);break;case 17/* ViewZonesChanged */:this.onZonesChanged(e)&&(shouldRender=!0);break;default:}}shouldRender&&(this._shouldRender=!0)}}
/***/},
/***/513824:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */$l:function(){/* binding */return ViewModelDecoration},
/* harmony export */$t:function(){/* binding */return InlineDecoration},
/* harmony export */IP:function(){/* binding */return ViewLineData},
/* harmony export */SQ:function(){/* binding */return OverviewRulerDecorationsGroup},
/* harmony export */Wx:function(){/* binding */return SingleLineInlineDecoration},
/* harmony export */l_:function(){/* binding */return Viewport},
/* harmony export */le:function(){/* binding */return LineBreakData},
/* harmony export */ud:function(){/* binding */return MinimapLinesRenderingData},
/* harmony export */wA:function(){/* binding */return ViewLineRenderingData}
/* harmony export */});
/* unused harmony exports OutputPosition, InjectedText */
/* harmony import */var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(697295),_core_position_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(50187),_core_range_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(624314);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class Viewport{constructor(top,left,width,height){this._viewportBrand=void 0,this.top=0|top,this.left=0|left,this.width=0|width,this.height=0|height}}class OutputPosition{constructor(outputLineIndex,outputOffset){this.outputLineIndex=outputLineIndex,this.outputOffset=outputOffset}toString(){return`${this.outputLineIndex}:${this.outputOffset}`}toPosition(baseLineNumber,wrappedTextIndentLength){const delta=this.outputLineIndex>0?wrappedTextIndentLength:0;return new _core_position_js__WEBPACK_IMPORTED_MODULE_1__/* .Position */.L(baseLineNumber+this.outputLineIndex,delta+this.outputOffset+1)}}class LineBreakData{constructor(breakOffsets,breakOffsetsVisibleColumn,wrappedTextIndentLength,injectionOffsets,injectionOptions){this.breakOffsets=breakOffsets,this.breakOffsetsVisibleColumn=breakOffsetsVisibleColumn,this.wrappedTextIndentLength=wrappedTextIndentLength,this.injectionOffsets=injectionOffsets,this.injectionOptions=injectionOptions}getInputOffsetOfOutputPosition(outputLineIndex,outputOffset){let inputOffset=0;if(inputOffset=0===outputLineIndex?outputOffset:this.breakOffsets[outputLineIndex-1]+outputOffset,null!==this.injectionOffsets)for(let i=0;i<this.injectionOffsets.length;i++){if(!(inputOffset>this.injectionOffsets[i]))break;inputOffset<this.injectionOffsets[i]+this.injectionOptions[i].content.length?
// `inputOffset` is within injected text
inputOffset=this.injectionOffsets[i]:inputOffset-=this.injectionOptions[i].content.length}return inputOffset}getOutputPositionOfInputOffset(inputOffset,affinity=2/* None */){let delta=0;if(null!==this.injectionOffsets)for(let i=0;i<this.injectionOffsets.length;i++){if(inputOffset<this.injectionOffsets[i])break;if(1/* Right */!==affinity&&inputOffset===this.injectionOffsets[i])break;delta+=this.injectionOptions[i].content.length}return inputOffset+=delta,this.getOutputPositionOfOffsetInUnwrappedLine(inputOffset,affinity)}getOutputPositionOfOffsetInUnwrappedLine(inputOffset,affinity=2/* None */){let low=0,high=this.breakOffsets.length-1,mid=0,midStart=0;while(low<=high){mid=low+(high-low)/2|0;const midStop=this.breakOffsets[mid];if(midStart=mid>0?this.breakOffsets[mid-1]:0,0/* Left */===affinity)if(inputOffset<=midStart)high=mid-1;else{if(!(inputOffset>midStop))break;low=mid+1}else if(inputOffset<midStart)high=mid-1;else{if(!(inputOffset>=midStop))break;low=mid+1}}return new OutputPosition(mid,inputOffset-midStart)}outputPositionToOffsetInUnwrappedLine(outputLineIndex,outputOffset){let result=(outputLineIndex>0?this.breakOffsets[outputLineIndex-1]:0)+outputOffset;return outputLineIndex>0&&(result-=this.wrappedTextIndentLength),result}normalizeOffsetAroundInjections(offsetInUnwrappedLine,affinity){const injectedText=this.getInjectedTextAtOffset(offsetInUnwrappedLine);if(!injectedText)return offsetInUnwrappedLine;if(2/* None */===affinity)return offsetInUnwrappedLine===injectedText.offsetInUnwrappedLine+injectedText.length?injectedText.offsetInUnwrappedLine+injectedText.length:injectedText.offsetInUnwrappedLine;if(1/* Right */===affinity){let result=injectedText.offsetInUnwrappedLine+injectedText.length,index=injectedText.injectedTextIndex;
// traverse all injected text that touch eachother
while(index+1<this.injectionOffsets.length&&this.injectionOffsets[index+1]===this.injectionOffsets[index])result+=this.injectionOptions[index+1].content.length,index++;return result}
// affinity is left
let result=injectedText.offsetInUnwrappedLine,index=injectedText.injectedTextIndex;
// traverse all injected text that touch eachother
while(index-1>=0&&this.injectionOffsets[index-1]===this.injectionOffsets[index])result-=this.injectionOptions[index-1].content.length,index++;return result}getInjectedText(outputLineIndex,outputOffset){const offset=this.outputPositionToOffsetInUnwrappedLine(outputLineIndex,outputOffset),injectedText=this.getInjectedTextAtOffset(offset);return injectedText?{options:this.injectionOptions[injectedText.injectedTextIndex]}:null}getInjectedTextAtOffset(offsetInUnwrappedLine){const injectionOffsets=this.injectionOffsets,injectionOptions=this.injectionOptions;if(null!==injectionOffsets){let totalInjectedTextLengthBefore=0;for(let i=0;i<injectionOffsets.length;i++){const length=injectionOptions[i].content.length,injectedTextStartOffsetInUnwrappedLine=injectionOffsets[i]+totalInjectedTextLengthBefore,injectedTextEndOffsetInUnwrappedLine=injectionOffsets[i]+totalInjectedTextLengthBefore+length;if(injectedTextStartOffsetInUnwrappedLine>offsetInUnwrappedLine)
// Injected text starts later.
break;// All later injected texts have an even larger offset.
if(offsetInUnwrappedLine<=injectedTextEndOffsetInUnwrappedLine)
// Injected text ends after or with the given position (but also starts with or before it).
return{injectedTextIndex:i,offsetInUnwrappedLine:injectedTextStartOffsetInUnwrappedLine,length:length};totalInjectedTextLengthBefore+=length}}}}class MinimapLinesRenderingData{constructor(tabSize,data){this.tabSize=tabSize,this.data=data}}class ViewLineData{constructor(content,continuesWithWrappedLine,minColumn,maxColumn,startVisibleColumn,tokens,inlineDecorations){this._viewLineDataBrand=void 0,this.content=content,this.continuesWithWrappedLine=continuesWithWrappedLine,this.minColumn=minColumn,this.maxColumn=maxColumn,this.startVisibleColumn=startVisibleColumn,this.tokens=tokens,this.inlineDecorations=inlineDecorations}}class ViewLineRenderingData{constructor(minColumn,maxColumn,content,continuesWithWrappedLine,mightContainRTL,mightContainNonBasicASCII,tokens,inlineDecorations,tabSize,startVisibleColumn){this.minColumn=minColumn,this.maxColumn=maxColumn,this.content=content,this.continuesWithWrappedLine=continuesWithWrappedLine,this.isBasicASCII=ViewLineRenderingData.isBasicASCII(content,mightContainNonBasicASCII),this.containsRTL=ViewLineRenderingData.containsRTL(content,this.isBasicASCII,mightContainRTL),this.tokens=tokens,this.inlineDecorations=inlineDecorations,this.tabSize=tabSize,this.startVisibleColumn=startVisibleColumn}static isBasicASCII(lineContent,mightContainNonBasicASCII){return!mightContainNonBasicASCII||_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .isBasicASCII */.$i(lineContent)}static containsRTL(lineContent,isBasicASCII,mightContainRTL){return!(isBasicASCII||!mightContainRTL)&&_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__/* .containsRTL */.Ut(lineContent)}}class InlineDecoration{constructor(range,inlineClassName,type){this.range=range,this.inlineClassName=inlineClassName,this.type=type}}class SingleLineInlineDecoration{constructor(startOffset,endOffset,inlineClassName,inlineClassNameAffectsLetterSpacing){this.startOffset=startOffset,this.endOffset=endOffset,this.inlineClassName=inlineClassName,this.inlineClassNameAffectsLetterSpacing=inlineClassNameAffectsLetterSpacing}toInlineDecoration(lineNumber){return new InlineDecoration(new _core_range_js__WEBPACK_IMPORTED_MODULE_2__/* .Range */.e(lineNumber,this.startOffset+1,lineNumber,this.endOffset+1),this.inlineClassName,this.inlineClassNameAffectsLetterSpacing?3/* RegularAffectingLetterSpacing */:0/* Regular */)}}class ViewModelDecoration{constructor(range,options){this._viewModelDecorationBrand=void 0,this.range=range,this.options=options}}class OverviewRulerDecorationsGroup{constructor(color,zIndex,
/**
     * Decorations are encoded in a number array using the following scheme:
     *  - 3*i = lane
     *  - 3*i+1 = startLineNumber
     *  - 3*i+2 = endLineNumber
     */
data){this.color=color,this.zIndex=zIndex,this.data=data}static cmp(a,b){return a.zIndex===b.zIndex?a.color<b.color?-1:a.color>b.color?1:0:a.zIndex-b.zIndex}}
/***/},
/***/969903:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
/* harmony export */__webpack_require__.d(__webpack_exports__,{
/* harmony export */H6:function(){/* binding */return CursorStateChangedEvent},
/* harmony export */Ic:function(){/* binding */return ViewZonesChangedEvent},
/* harmony export */Ki:function(){/* binding */return ReadOnlyEditAttemptEvent},
/* harmony export */Pt:function(){/* binding */return ScrollChangedEvent},
/* harmony export */Zw:function(){/* binding */return FocusChangedEvent},
/* harmony export */nu:function(){/* binding */return ViewModelEventDispatcher},
/* harmony export */zf:function(){/* binding */return ContentSizeChangedEvent}
/* harmony export */});
/* unused harmony exports ViewModelEventsCollector, HiddenAreasChangedEvent */
/* harmony import */var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(104669),_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(905976);
/* harmony import */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class ViewModelEventDispatcher extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__/* .Disposable */.JT{constructor(){super(),this._onEvent=this._register(new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__/* .Emitter */.Q5),this.onEvent=this._onEvent.event,this._eventHandlers=[],this._viewEventQueue=null,this._isConsumingViewEventQueue=!1,this._collector=null,this._collectorCnt=0,this._outgoingEvents=[]}emitOutgoingEvent(e){this._addOutgoingEvent(e),this._emitOutgoingEvents()}_addOutgoingEvent(e){for(let i=0,len=this._outgoingEvents.length;i<len;i++)if(this._outgoingEvents[i].kind===e.kind)return void(this._outgoingEvents[i]=this._outgoingEvents[i].merge(e));
// not merged
this._outgoingEvents.push(e)}_emitOutgoingEvents(){while(this._outgoingEvents.length>0){if(this._collector||this._isConsumingViewEventQueue)
// right now collecting or emitting view events, so let's postpone emitting
return;const event=this._outgoingEvents.shift();event.isNoOp()||this._onEvent.fire(event)}}addViewEventHandler(eventHandler){for(let i=0,len=this._eventHandlers.length;i<len;i++)this._eventHandlers[i];this._eventHandlers.push(eventHandler)}removeViewEventHandler(eventHandler){for(let i=0;i<this._eventHandlers.length;i++)if(this._eventHandlers[i]===eventHandler){this._eventHandlers.splice(i,1);break}}beginEmitViewEvents(){return this._collectorCnt++,1===this._collectorCnt&&(this._collector=new ViewModelEventsCollector),this._collector}endEmitViewEvents(){if(this._collectorCnt--,0===this._collectorCnt){const outgoingEvents=this._collector.outgoingEvents,viewEvents=this._collector.viewEvents;this._collector=null;for(const outgoingEvent of outgoingEvents)this._addOutgoingEvent(outgoingEvent);viewEvents.length>0&&this._emitMany(viewEvents)}this._emitOutgoingEvents()}emitSingleViewEvent(event){try{const eventsCollector=this.beginEmitViewEvents();eventsCollector.emitViewEvent(event)}finally{this.endEmitViewEvents()}}_emitMany(events){this._viewEventQueue?this._viewEventQueue=this._viewEventQueue.concat(events):this._viewEventQueue=events,this._isConsumingViewEventQueue||this._consumeViewEventQueue()}_consumeViewEventQueue(){try{this._isConsumingViewEventQueue=!0,this._doConsumeQueue()}finally{this._isConsumingViewEventQueue=!1}}_doConsumeQueue(){while(this._viewEventQueue){
// Empty event queue, as events might come in while sending these off
const events=this._viewEventQueue;this._viewEventQueue=null;
// Use a clone of the event handlers list, as they might remove themselves
const eventHandlers=this._eventHandlers.slice(0);for(const eventHandler of eventHandlers)eventHandler.handleEvents(events)}}}class ViewModelEventsCollector{constructor(){this.viewEvents=[],this.outgoingEvents=[]}emitViewEvent(event){this.viewEvents.push(event)}emitOutgoingEvent(e){this.outgoingEvents.push(e)}}class ContentSizeChangedEvent{constructor(oldContentWidth,oldContentHeight,contentWidth,contentHeight){this.kind=0/* ContentSizeChanged */,this._oldContentWidth=oldContentWidth,this._oldContentHeight=oldContentHeight,this.contentWidth=contentWidth,this.contentHeight=contentHeight,this.contentWidthChanged=this._oldContentWidth!==this.contentWidth,this.contentHeightChanged=this._oldContentHeight!==this.contentHeight}isNoOp(){return!this.contentWidthChanged&&!this.contentHeightChanged}merge(other){return 0/* ContentSizeChanged */!==other.kind?this:new ContentSizeChangedEvent(this._oldContentWidth,this._oldContentHeight,other.contentWidth,other.contentHeight)}}class FocusChangedEvent{constructor(oldHasFocus,hasFocus){this.kind=1/* FocusChanged */,this.oldHasFocus=oldHasFocus,this.hasFocus=hasFocus}isNoOp(){return this.oldHasFocus===this.hasFocus}merge(other){return 1/* FocusChanged */!==other.kind?this:new FocusChangedEvent(this.oldHasFocus,other.hasFocus)}}class ScrollChangedEvent{constructor(oldScrollWidth,oldScrollLeft,oldScrollHeight,oldScrollTop,scrollWidth,scrollLeft,scrollHeight,scrollTop){this.kind=2/* ScrollChanged */,this._oldScrollWidth=oldScrollWidth,this._oldScrollLeft=oldScrollLeft,this._oldScrollHeight=oldScrollHeight,this._oldScrollTop=oldScrollTop,this.scrollWidth=scrollWidth,this.scrollLeft=scrollLeft,this.scrollHeight=scrollHeight,this.scrollTop=scrollTop,this.scrollWidthChanged=this._oldScrollWidth!==this.scrollWidth,this.scrollLeftChanged=this._oldScrollLeft!==this.scrollLeft,this.scrollHeightChanged=this._oldScrollHeight!==this.scrollHeight,this.scrollTopChanged=this._oldScrollTop!==this.scrollTop}isNoOp(){return!this.scrollWidthChanged&&!this.scrollLeftChanged&&!this.scrollHeightChanged&&!this.scrollTopChanged}merge(other){return 2/* ScrollChanged */!==other.kind?this:new ScrollChangedEvent(this._oldScrollWidth,this._oldScrollLeft,this._oldScrollHeight,this._oldScrollTop,other.scrollWidth,other.scrollLeft,other.scrollHeight,other.scrollTop)}}class ViewZonesChangedEvent{constructor(){this.kind=3/* ViewZonesChanged */}isNoOp(){return!1}merge(other){return this}}class CursorStateChangedEvent{constructor(oldSelections,selections,oldModelVersionId,modelVersionId,source,reason,reachedMaxCursorCount){this.kind=6/* CursorStateChanged */,this.oldSelections=oldSelections,this.selections=selections,this.oldModelVersionId=oldModelVersionId,this.modelVersionId=modelVersionId,this.source=source,this.reason=reason,this.reachedMaxCursorCount=reachedMaxCursorCount}static _selectionsAreEqual(a,b){if(!a&&!b)return!0;if(!a||!b)return!1;const aLen=a.length,bLen=b.length;if(aLen!==bLen)return!1;for(let i=0;i<aLen;i++)if(!a[i].equalsSelection(b[i]))return!1;return!0}isNoOp(){return CursorStateChangedEvent._selectionsAreEqual(this.oldSelections,this.selections)&&this.oldModelVersionId===this.modelVersionId}merge(other){return 6/* CursorStateChanged */!==other.kind?this:new CursorStateChangedEvent(this.oldSelections,other.selections,this.oldModelVersionId,other.modelVersionId,other.source,other.reason,this.reachedMaxCursorCount||other.reachedMaxCursorCount)}}class ReadOnlyEditAttemptEvent{constructor(){this.kind=5/* ReadOnlyEditAttempt */}isNoOp(){return!1}merge(other){return this}}
/***/},
/***/977528:
/***/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){
// EXPORTS
__webpack_require__.d(__webpack_exports__,{j:function(){/* binding */return ViewModel}});
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/color.js
var color=__webpack_require__(41264),lifecycle=__webpack_require__(905976),strings=__webpack_require__(697295),editorOptions=__webpack_require__(364141),core_position=__webpack_require__(50187),core_range=__webpack_require__(624314),textModelEvents=__webpack_require__(983256),modes=__webpack_require__(860303),textToHtmlTokenizer=__webpack_require__(955713),minimapTokensColorTracker=__webpack_require__(489743),viewEvents=__webpack_require__(533805),common_event=__webpack_require__(104669),scrollable=__webpack_require__(676633);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class PendingChanges{constructor(){this._hasPending=!1,this._inserts=[],this._changes=[],this._removes=[]}insert(x){this._hasPending=!0,this._inserts.push(x)}change(x){this._hasPending=!0,this._changes.push(x)}remove(x){this._hasPending=!0,this._removes.push(x)}mustCommit(){return this._hasPending}commit(linesLayout){if(!this._hasPending)return;const inserts=this._inserts,changes=this._changes,removes=this._removes;this._hasPending=!1,this._inserts=[],this._changes=[],this._removes=[],linesLayout._commitPendingChanges(inserts,changes,removes)}}class EditorWhitespace{constructor(id,afterLineNumber,ordinal,height,minWidth){this.id=id,this.afterLineNumber=afterLineNumber,this.ordinal=ordinal,this.height=height,this.minWidth=minWidth,this.prefixSum=0}}
/**
 * Layouting of objects that take vertical space (by having a height) and push down other objects.
 *
 * These objects are basically either text (lines) or spaces between those lines (whitespaces).
 * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).
 */class LinesLayout{constructor(lineCount,lineHeight,paddingTop,paddingBottom){this._instanceId=strings/* singleLetterHash */.PJ(++LinesLayout.INSTANCE_COUNT),this._pendingChanges=new PendingChanges,this._lastWhitespaceId=0,this._arr=[],this._prefixSumValidIndex=-1,this._minWidth=-1,/* marker for not being computed */
this._lineCount=lineCount,this._lineHeight=lineHeight,this._paddingTop=paddingTop,this._paddingBottom=paddingBottom}
/**
     * Find the insertion index for a new value inside a sorted array of values.
     * If the value is already present in the sorted array, the insertion index will be after the already existing value.
     */static findInsertionIndex(arr,afterLineNumber,ordinal){let low=0,high=arr.length;while(low<high){const mid=low+high>>>1;afterLineNumber===arr[mid].afterLineNumber?ordinal<arr[mid].ordinal?high=mid:low=mid+1:afterLineNumber<arr[mid].afterLineNumber?high=mid:low=mid+1}return low}
/**
     * Change the height of a line in pixels.
     */setLineHeight(lineHeight){this._checkPendingChanges(),this._lineHeight=lineHeight}
/**
     * Changes the padding used to calculate vertical offsets.
     */setPadding(paddingTop,paddingBottom){this._paddingTop=paddingTop,this._paddingBottom=paddingBottom}
/**
     * Set the number of lines.
     *
     * @param lineCount New number of lines.
     */onFlushed(lineCount){this._checkPendingChanges(),this._lineCount=lineCount}changeWhitespace(callback){let hadAChange=!1;try{const accessor={insertWhitespace:(afterLineNumber,ordinal,heightInPx,minWidth)=>{hadAChange=!0,afterLineNumber|=0,ordinal|=0,heightInPx|=0,minWidth|=0;const id=this._instanceId+ ++this._lastWhitespaceId;return this._pendingChanges.insert(new EditorWhitespace(id,afterLineNumber,ordinal,heightInPx,minWidth)),id},changeOneWhitespace:(id,newAfterLineNumber,newHeight)=>{hadAChange=!0,newAfterLineNumber|=0,newHeight|=0,this._pendingChanges.change({id:id,newAfterLineNumber:newAfterLineNumber,newHeight:newHeight})},removeWhitespace:id=>{hadAChange=!0,this._pendingChanges.remove({id:id})}};callback(accessor)}finally{this._pendingChanges.commit(this)}return hadAChange}_commitPendingChanges(inserts,changes,removes){if((inserts.length>0||removes.length>0)&&(this._minWidth=-1),inserts.length+changes.length+removes.length<=1){
// when only one thing happened, handle it "delicately"
for(const insert of inserts)this._insertWhitespace(insert);for(const change of changes)this._changeOneWhitespace(change.id,change.newAfterLineNumber,change.newHeight);for(const remove of removes){const index=this._findWhitespaceIndex(remove.id);-1!==index&&this._removeWhitespace(index)}return}
// simply rebuild the entire datastructure
const toRemove=new Set;for(const remove of removes)toRemove.add(remove.id);const toChange=new Map;for(const change of changes)toChange.set(change.id,change);const applyRemoveAndChange=whitespaces=>{let result=[];for(const whitespace of whitespaces)if(!toRemove.has(whitespace.id)){if(toChange.has(whitespace.id)){const change=toChange.get(whitespace.id);whitespace.afterLineNumber=change.newAfterLineNumber,whitespace.height=change.newHeight}result.push(whitespace)}return result},result=applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));result.sort(((a,b)=>a.afterLineNumber===b.afterLineNumber?a.ordinal-b.ordinal:a.afterLineNumber-b.afterLineNumber)),this._arr=result,this._prefixSumValidIndex=-1}_checkPendingChanges(){this._pendingChanges.mustCommit()&&this._pendingChanges.commit(this)}_insertWhitespace(whitespace){const insertIndex=LinesLayout.findInsertionIndex(this._arr,whitespace.afterLineNumber,whitespace.ordinal);this._arr.splice(insertIndex,0,whitespace),this._prefixSumValidIndex=Math.min(this._prefixSumValidIndex,insertIndex-1)}_findWhitespaceIndex(id){const arr=this._arr;for(let i=0,len=arr.length;i<len;i++)if(arr[i].id===id)return i;return-1}_changeOneWhitespace(id,newAfterLineNumber,newHeight){const index=this._findWhitespaceIndex(id);if(-1!==index&&(this._arr[index].height!==newHeight&&(this._arr[index].height=newHeight,this._prefixSumValidIndex=Math.min(this._prefixSumValidIndex,index-1)),this._arr[index].afterLineNumber!==newAfterLineNumber)){
// `afterLineNumber` changed for this whitespace
// Record old whitespace
const whitespace=this._arr[index];
// Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace
this._removeWhitespace(index),whitespace.afterLineNumber=newAfterLineNumber,
// And add it again
this._insertWhitespace(whitespace)}}_removeWhitespace(removeIndex){this._arr.splice(removeIndex,1),this._prefixSumValidIndex=Math.min(this._prefixSumValidIndex,removeIndex-1)}
/**
     * Notify the layouter that lines have been deleted (a continuous zone of lines).
     *
     * @param fromLineNumber The line number at which the deletion started, inclusive
     * @param toLineNumber The line number at which the deletion ended, inclusive
     */onLinesDeleted(fromLineNumber,toLineNumber){this._checkPendingChanges(),fromLineNumber|=0,toLineNumber|=0,this._lineCount-=toLineNumber-fromLineNumber+1;for(let i=0,len=this._arr.length;i<len;i++){const afterLineNumber=this._arr[i].afterLineNumber;fromLineNumber<=afterLineNumber&&afterLineNumber<=toLineNumber?
// The line this whitespace was after has been deleted
//  => move whitespace to before first deleted line
this._arr[i].afterLineNumber=fromLineNumber-1:afterLineNumber>toLineNumber&&(
// The line this whitespace was after has been moved up
//  => move whitespace up
this._arr[i].afterLineNumber-=toLineNumber-fromLineNumber+1)}}
/**
     * Notify the layouter that lines have been inserted (a continuous zone of lines).
     *
     * @param fromLineNumber The line number at which the insertion started, inclusive
     * @param toLineNumber The line number at which the insertion ended, inclusive.
     */onLinesInserted(fromLineNumber,toLineNumber){this._checkPendingChanges(),fromLineNumber|=0,toLineNumber|=0,this._lineCount+=toLineNumber-fromLineNumber+1;for(let i=0,len=this._arr.length;i<len;i++){const afterLineNumber=this._arr[i].afterLineNumber;fromLineNumber<=afterLineNumber&&(this._arr[i].afterLineNumber+=toLineNumber-fromLineNumber+1)}}
/**
     * Get the sum of all the whitespaces.
     */getWhitespacesTotalHeight(){return this._checkPendingChanges(),0===this._arr.length?0:this.getWhitespacesAccumulatedHeight(this._arr.length-1)}
/**
     * Return the sum of the heights of the whitespaces at [0..index].
     * This includes the whitespace at `index`.
     *
     * @param index The index of the whitespace.
     * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.
     */getWhitespacesAccumulatedHeight(index){this._checkPendingChanges(),index|=0;let startIndex=Math.max(0,this._prefixSumValidIndex+1);0===startIndex&&(this._arr[0].prefixSum=this._arr[0].height,startIndex++);for(let i=startIndex;i<=index;i++)this._arr[i].prefixSum=this._arr[i-1].prefixSum+this._arr[i].height;return this._prefixSumValidIndex=Math.max(this._prefixSumValidIndex,index),this._arr[index].prefixSum}
/**
     * Get the sum of heights for all objects.
     *
     * @return The sum of heights for all objects.
     */getLinesTotalHeight(){this._checkPendingChanges();const linesHeight=this._lineHeight*this._lineCount,whitespacesHeight=this.getWhitespacesTotalHeight();return linesHeight+whitespacesHeight+this._paddingTop+this._paddingBottom}
/**
     * Returns the accumulated height of whitespaces before the given line number.
     *
     * @param lineNumber The line number
     */getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber){this._checkPendingChanges(),lineNumber|=0;const lastWhitespaceBeforeLineNumber=this._findLastWhitespaceBeforeLineNumber(lineNumber);return-1===lastWhitespaceBeforeLineNumber?0:this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber)}_findLastWhitespaceBeforeLineNumber(lineNumber){lineNumber|=0;
// Find the whitespace before line number
const arr=this._arr;let low=0,high=arr.length-1;while(low<=high){const delta=high-low|0,halfDelta=delta/2|0,mid=low+halfDelta|0;if(arr[mid].afterLineNumber<lineNumber){if(mid+1>=arr.length||arr[mid+1].afterLineNumber>=lineNumber)return mid;low=mid+1|0}else high=mid-1|0}return-1}_findFirstWhitespaceAfterLineNumber(lineNumber){lineNumber|=0;const lastWhitespaceBeforeLineNumber=this._findLastWhitespaceBeforeLineNumber(lineNumber),firstWhitespaceAfterLineNumber=lastWhitespaceBeforeLineNumber+1;return firstWhitespaceAfterLineNumber<this._arr.length?firstWhitespaceAfterLineNumber:-1}
/**
     * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.
     * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.
     */getFirstWhitespaceIndexAfterLineNumber(lineNumber){return this._checkPendingChanges(),lineNumber|=0,this._findFirstWhitespaceAfterLineNumber(lineNumber)}
/**
     * Get the vertical offset (the sum of heights for all objects above) a certain line number.
     *
     * @param lineNumber The line number
     * @return The sum of heights for all objects above `lineNumber`.
     */getVerticalOffsetForLineNumber(lineNumber){let previousLinesHeight;this._checkPendingChanges(),lineNumber|=0,previousLinesHeight=lineNumber>1?this._lineHeight*(lineNumber-1):0;const previousWhitespacesHeight=this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber);return previousLinesHeight+previousWhitespacesHeight+this._paddingTop}
/**
     * The maximum min width for all whitespaces.
     */getWhitespaceMinWidth(){if(this._checkPendingChanges(),-1===this._minWidth){let minWidth=0;for(let i=0,len=this._arr.length;i<len;i++)minWidth=Math.max(minWidth,this._arr[i].minWidth);this._minWidth=minWidth}return this._minWidth}
/**
     * Check if `verticalOffset` is below all lines.
     */isAfterLines(verticalOffset){this._checkPendingChanges();const totalHeight=this.getLinesTotalHeight();return verticalOffset>totalHeight}isInTopPadding(verticalOffset){return 0!==this._paddingTop&&(this._checkPendingChanges(),verticalOffset<this._paddingTop)}isInBottomPadding(verticalOffset){if(0===this._paddingBottom)return!1;this._checkPendingChanges();const totalHeight=this.getLinesTotalHeight();return verticalOffset>=totalHeight-this._paddingBottom}
/**
     * Find the first line number that is at or after vertical offset `verticalOffset`.
     * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then
     * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.
     *
     * @param verticalOffset The vertical offset to search at.
     * @return The line number at or after vertical offset `verticalOffset`.
     */getLineNumberAtOrAfterVerticalOffset(verticalOffset){if(this._checkPendingChanges(),verticalOffset|=0,verticalOffset<0)return 1;const linesCount=0|this._lineCount,lineHeight=this._lineHeight;let minLineNumber=1,maxLineNumber=linesCount;while(minLineNumber<maxLineNumber){const midLineNumber=(minLineNumber+maxLineNumber)/2|0,midLineNumberVerticalOffset=0|this.getVerticalOffsetForLineNumber(midLineNumber);if(verticalOffset>=midLineNumberVerticalOffset+lineHeight)
// vertical offset is after mid line number
minLineNumber=midLineNumber+1;else{if(verticalOffset>=midLineNumberVerticalOffset)
// Hit
return midLineNumber;
// vertical offset is before mid line number, but mid line number could still be what we're searching for
maxLineNumber=midLineNumber}}return minLineNumber>linesCount?linesCount:minLineNumber}
/**
     * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.
     *
     * @param verticalOffset1 The beginning of the viewport.
     * @param verticalOffset2 The end of the viewport.
     * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.
     */getLinesViewportData(verticalOffset1,verticalOffset2){this._checkPendingChanges(),verticalOffset1|=0,verticalOffset2|=0;const lineHeight=this._lineHeight,startLineNumber=0|this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1),startLineNumberVerticalOffset=0|this.getVerticalOffsetForLineNumber(startLineNumber);
// Find first line number
// We don't live in a perfect world, so the line number might start before or after verticalOffset1
let endLineNumber=0|this._lineCount,whitespaceIndex=0|this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber);
// Also keep track of what whitespace we've got
const whitespaceCount=0|this.getWhitespacesCount();let currentWhitespaceHeight,currentWhitespaceAfterLineNumber;-1===whitespaceIndex?(whitespaceIndex=whitespaceCount,currentWhitespaceAfterLineNumber=endLineNumber+1,currentWhitespaceHeight=0):(currentWhitespaceAfterLineNumber=0|this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex),currentWhitespaceHeight=0|this.getHeightForWhitespaceIndex(whitespaceIndex));let currentVerticalOffset=startLineNumberVerticalOffset,currentLineRelativeOffset=currentVerticalOffset;
// IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down
const STEP_SIZE=5e5;let bigNumbersDelta=0;startLineNumberVerticalOffset>=STEP_SIZE&&(
// Compute a delta that guarantees that lines are positioned at `lineHeight` increments
bigNumbersDelta=Math.floor(startLineNumberVerticalOffset/STEP_SIZE)*STEP_SIZE,bigNumbersDelta=Math.floor(bigNumbersDelta/lineHeight)*lineHeight,currentLineRelativeOffset-=bigNumbersDelta);const linesOffsets=[],verticalCenter=verticalOffset1+(verticalOffset2-verticalOffset1)/2;let centeredLineNumber=-1;
// Figure out how far the lines go
for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){if(-1===centeredLineNumber){const currentLineTop=currentVerticalOffset,currentLineBottom=currentVerticalOffset+lineHeight;(currentLineTop<=verticalCenter&&verticalCenter<currentLineBottom||currentLineTop>verticalCenter)&&(centeredLineNumber=lineNumber)}
// Count current line height in the vertical offsets
currentVerticalOffset+=lineHeight,linesOffsets[lineNumber-startLineNumber]=currentLineRelativeOffset,
// Next line starts immediately after this one
currentLineRelativeOffset+=lineHeight;while(currentWhitespaceAfterLineNumber===lineNumber)
// Push down next line with the height of the current whitespace
currentLineRelativeOffset+=currentWhitespaceHeight,
// Count current whitespace in the vertical offsets
currentVerticalOffset+=currentWhitespaceHeight,whitespaceIndex++,whitespaceIndex>=whitespaceCount?currentWhitespaceAfterLineNumber=endLineNumber+1:(currentWhitespaceAfterLineNumber=0|this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex),currentWhitespaceHeight=0|this.getHeightForWhitespaceIndex(whitespaceIndex));if(currentVerticalOffset>=verticalOffset2){
// We have covered the entire viewport area, time to stop
endLineNumber=lineNumber;break}}-1===centeredLineNumber&&(centeredLineNumber=endLineNumber);const endLineNumberVerticalOffset=0|this.getVerticalOffsetForLineNumber(endLineNumber);let completelyVisibleStartLineNumber=startLineNumber,completelyVisibleEndLineNumber=endLineNumber;return completelyVisibleStartLineNumber<completelyVisibleEndLineNumber&&startLineNumberVerticalOffset<verticalOffset1&&completelyVisibleStartLineNumber++,completelyVisibleStartLineNumber<completelyVisibleEndLineNumber&&endLineNumberVerticalOffset+lineHeight>verticalOffset2&&completelyVisibleEndLineNumber--,{bigNumbersDelta:bigNumbersDelta,startLineNumber:startLineNumber,endLineNumber:endLineNumber,relativeVerticalOffset:linesOffsets,centeredLineNumber:centeredLineNumber,completelyVisibleStartLineNumber:completelyVisibleStartLineNumber,completelyVisibleEndLineNumber:completelyVisibleEndLineNumber}}getVerticalOffsetForWhitespaceIndex(whitespaceIndex){this._checkPendingChanges(),whitespaceIndex|=0;const afterLineNumber=this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);let previousLinesHeight,previousWhitespacesHeight;return previousLinesHeight=afterLineNumber>=1?this._lineHeight*afterLineNumber:0,previousWhitespacesHeight=whitespaceIndex>0?this.getWhitespacesAccumulatedHeight(whitespaceIndex-1):0,previousLinesHeight+previousWhitespacesHeight+this._paddingTop}getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset){this._checkPendingChanges(),verticalOffset|=0;let minWhitespaceIndex=0,maxWhitespaceIndex=this.getWhitespacesCount()-1;if(maxWhitespaceIndex<0)return-1;
// Special case: nothing to be found
const maxWhitespaceVerticalOffset=this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex),maxWhitespaceHeight=this.getHeightForWhitespaceIndex(maxWhitespaceIndex);if(verticalOffset>=maxWhitespaceVerticalOffset+maxWhitespaceHeight)return-1;while(minWhitespaceIndex<maxWhitespaceIndex){const midWhitespaceIndex=Math.floor((minWhitespaceIndex+maxWhitespaceIndex)/2),midWhitespaceVerticalOffset=this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex),midWhitespaceHeight=this.getHeightForWhitespaceIndex(midWhitespaceIndex);if(verticalOffset>=midWhitespaceVerticalOffset+midWhitespaceHeight)
// vertical offset is after whitespace
minWhitespaceIndex=midWhitespaceIndex+1;else{if(verticalOffset>=midWhitespaceVerticalOffset)
// Hit
return midWhitespaceIndex;
// vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for
maxWhitespaceIndex=midWhitespaceIndex}}return minWhitespaceIndex}
/**
     * Get exactly the whitespace that is layouted at `verticalOffset`.
     *
     * @param verticalOffset The vertical offset.
     * @return Precisely the whitespace that is layouted at `verticaloffset` or null.
     */getWhitespaceAtVerticalOffset(verticalOffset){this._checkPendingChanges(),verticalOffset|=0;const candidateIndex=this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);if(candidateIndex<0)return null;if(candidateIndex>=this.getWhitespacesCount())return null;const candidateTop=this.getVerticalOffsetForWhitespaceIndex(candidateIndex);if(candidateTop>verticalOffset)return null;const candidateHeight=this.getHeightForWhitespaceIndex(candidateIndex),candidateId=this.getIdForWhitespaceIndex(candidateIndex),candidateAfterLineNumber=this.getAfterLineNumberForWhitespaceIndex(candidateIndex);return{id:candidateId,afterLineNumber:candidateAfterLineNumber,verticalOffset:candidateTop,height:candidateHeight}}
/**
     * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.
     *
     * @param verticalOffset1 The beginning of the viewport.
     * @param verticalOffset2 The end of the viewport.
     * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.
     */getWhitespaceViewportData(verticalOffset1,verticalOffset2){this._checkPendingChanges(),verticalOffset1|=0,verticalOffset2|=0;const startIndex=this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1),endIndex=this.getWhitespacesCount()-1;if(startIndex<0)return[];let result=[];for(let i=startIndex;i<=endIndex;i++){const top=this.getVerticalOffsetForWhitespaceIndex(i),height=this.getHeightForWhitespaceIndex(i);if(top>=verticalOffset2)break;result.push({id:this.getIdForWhitespaceIndex(i),afterLineNumber:this.getAfterLineNumberForWhitespaceIndex(i),verticalOffset:top,height:height})}return result}
/**
     * Get all whitespaces.
     */getWhitespaces(){return this._checkPendingChanges(),this._arr.slice(0)}
/**
     * The number of whitespaces.
     */getWhitespacesCount(){return this._checkPendingChanges(),this._arr.length}
/**
     * Get the `id` for whitespace at index `index`.
     *
     * @param index The index of the whitespace.
     * @return `id` of whitespace at `index`.
     */getIdForWhitespaceIndex(index){return this._checkPendingChanges(),index|=0,this._arr[index].id}
/**
     * Get the `afterLineNumber` for whitespace at index `index`.
     *
     * @param index The index of the whitespace.
     * @return `afterLineNumber` of whitespace at `index`.
     */getAfterLineNumberForWhitespaceIndex(index){return this._checkPendingChanges(),index|=0,this._arr[index].afterLineNumber}
/**
     * Get the `height` for whitespace at index `index`.
     *
     * @param index The index of the whitespace.
     * @return `height` of whitespace at `index`.
     */getHeightForWhitespaceIndex(index){return this._checkPendingChanges(),index|=0,this._arr[index].height}}LinesLayout.INSTANCE_COUNT=0;
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModel.js
var viewModel=__webpack_require__(513824),viewModelEventDispatcher=__webpack_require__(969903);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelEventDispatcher.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const SMOOTH_SCROLLING_TIME=125;class EditorScrollDimensions{constructor(width,contentWidth,height,contentHeight){width|=0,contentWidth|=0,height|=0,contentHeight|=0,width<0&&(width=0),contentWidth<0&&(contentWidth=0),height<0&&(height=0),contentHeight<0&&(contentHeight=0),this.width=width,this.contentWidth=contentWidth,this.scrollWidth=Math.max(width,contentWidth),this.height=height,this.contentHeight=contentHeight,this.scrollHeight=Math.max(height,contentHeight)}equals(other){return this.width===other.width&&this.contentWidth===other.contentWidth&&this.height===other.height&&this.contentHeight===other.contentHeight}}class EditorScrollable extends lifecycle/* Disposable */.JT{constructor(smoothScrollDuration,scheduleAtNextAnimationFrame){super(),this._onDidContentSizeChange=this._register(new common_event/* Emitter */.Q5),this.onDidContentSizeChange=this._onDidContentSizeChange.event,this._dimensions=new EditorScrollDimensions(0,0,0,0),this._scrollable=this._register(new scrollable/* Scrollable */.Rm(smoothScrollDuration,scheduleAtNextAnimationFrame)),this.onDidScroll=this._scrollable.onScroll}getScrollable(){return this._scrollable}setSmoothScrollDuration(smoothScrollDuration){this._scrollable.setSmoothScrollDuration(smoothScrollDuration)}validateScrollPosition(scrollPosition){return this._scrollable.validateScrollPosition(scrollPosition)}getScrollDimensions(){return this._dimensions}setScrollDimensions(dimensions){if(this._dimensions.equals(dimensions))return;const oldDimensions=this._dimensions;this._dimensions=dimensions,this._scrollable.setScrollDimensions({width:dimensions.width,scrollWidth:dimensions.scrollWidth,height:dimensions.height,scrollHeight:dimensions.scrollHeight},!0);const contentWidthChanged=oldDimensions.contentWidth!==dimensions.contentWidth,contentHeightChanged=oldDimensions.contentHeight!==dimensions.contentHeight;(contentWidthChanged||contentHeightChanged)&&this._onDidContentSizeChange.fire(new viewModelEventDispatcher/* ContentSizeChangedEvent */.zf(oldDimensions.contentWidth,oldDimensions.contentHeight,dimensions.contentWidth,dimensions.contentHeight))}getFutureScrollPosition(){return this._scrollable.getFutureScrollPosition()}getCurrentScrollPosition(){return this._scrollable.getCurrentScrollPosition()}setScrollPositionNow(update){this._scrollable.setScrollPositionNow(update)}setScrollPositionSmooth(update){this._scrollable.setScrollPositionSmooth(update)}}class ViewLayout extends lifecycle/* Disposable */.JT{constructor(configuration,lineCount,scheduleAtNextAnimationFrame){super(),this._configuration=configuration;const options=this._configuration.options,layoutInfo=options.get(129/* layoutInfo */),padding=options.get(74/* padding */);this._linesLayout=new LinesLayout(lineCount,options.get(58/* lineHeight */),padding.top,padding.bottom),this._scrollable=this._register(new EditorScrollable(0,scheduleAtNextAnimationFrame)),this._configureSmoothScrollDuration(),this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth,0,layoutInfo.height,0)),this.onDidScroll=this._scrollable.onDidScroll,this.onDidContentSizeChange=this._scrollable.onDidContentSizeChange,this._updateHeight()}dispose(){super.dispose()}getScrollable(){return this._scrollable.getScrollable()}onHeightMaybeChanged(){this._updateHeight()}_configureSmoothScrollDuration(){this._scrollable.setSmoothScrollDuration(this._configuration.options.get(102/* smoothScrolling */)?SMOOTH_SCROLLING_TIME:0)}
// ---- begin view event handlers
onConfigurationChanged(e){const options=this._configuration.options;if(e.hasChanged(58/* lineHeight */)&&this._linesLayout.setLineHeight(options.get(58/* lineHeight */)),e.hasChanged(74/* padding */)){const padding=options.get(74/* padding */);this._linesLayout.setPadding(padding.top,padding.bottom)}if(e.hasChanged(129/* layoutInfo */)){const layoutInfo=options.get(129/* layoutInfo */),width=layoutInfo.contentWidth,height=layoutInfo.height,scrollDimensions=this._scrollable.getScrollDimensions(),contentWidth=scrollDimensions.contentWidth;this._scrollable.setScrollDimensions(new EditorScrollDimensions(width,scrollDimensions.contentWidth,height,this._getContentHeight(width,height,contentWidth)))}else this._updateHeight();e.hasChanged(102/* smoothScrolling */)&&this._configureSmoothScrollDuration()}onFlushed(lineCount){this._linesLayout.onFlushed(lineCount)}onLinesDeleted(fromLineNumber,toLineNumber){this._linesLayout.onLinesDeleted(fromLineNumber,toLineNumber)}onLinesInserted(fromLineNumber,toLineNumber){this._linesLayout.onLinesInserted(fromLineNumber,toLineNumber)}
// ---- end view event handlers
_getHorizontalScrollbarHeight(width,scrollWidth){const options=this._configuration.options,scrollbar=options.get(91/* scrollbar */);return 2/* Hidden */===scrollbar.horizontal||width>=scrollWidth?0:scrollbar.horizontalScrollbarSize}_getContentHeight(width,height,contentWidth){const options=this._configuration.options;let result=this._linesLayout.getLinesTotalHeight();return options.get(93/* scrollBeyondLastLine */)?result+=Math.max(0,height-options.get(58/* lineHeight */)-options.get(74/* padding */).bottom):result+=this._getHorizontalScrollbarHeight(width,contentWidth),result}_updateHeight(){const scrollDimensions=this._scrollable.getScrollDimensions(),width=scrollDimensions.width,height=scrollDimensions.height,contentWidth=scrollDimensions.contentWidth;this._scrollable.setScrollDimensions(new EditorScrollDimensions(width,scrollDimensions.contentWidth,height,this._getContentHeight(width,height,contentWidth)))}
// ---- Layouting logic
getCurrentViewport(){const scrollDimensions=this._scrollable.getScrollDimensions(),currentScrollPosition=this._scrollable.getCurrentScrollPosition();return new viewModel/* Viewport */.l_(currentScrollPosition.scrollTop,currentScrollPosition.scrollLeft,scrollDimensions.width,scrollDimensions.height)}getFutureViewport(){const scrollDimensions=this._scrollable.getScrollDimensions(),currentScrollPosition=this._scrollable.getFutureScrollPosition();return new viewModel/* Viewport */.l_(currentScrollPosition.scrollTop,currentScrollPosition.scrollLeft,scrollDimensions.width,scrollDimensions.height)}_computeContentWidth(maxLineWidth){const options=this._configuration.options,wrappingInfo=options.get(130/* wrappingInfo */),fontInfo=options.get(43/* fontInfo */);if(wrappingInfo.isViewportWrapping){const layoutInfo=options.get(129/* layoutInfo */),minimap=options.get(64/* minimap */);return maxLineWidth>layoutInfo.contentWidth+fontInfo.typicalHalfwidthCharacterWidth&&minimap.enabled&&"right"===minimap.side?maxLineWidth+layoutInfo.verticalScrollbarWidth:maxLineWidth}{const extraHorizontalSpace=options.get(92/* scrollBeyondLastColumn */)*fontInfo.typicalHalfwidthCharacterWidth,whitespaceMinWidth=this._linesLayout.getWhitespaceMinWidth();return Math.max(maxLineWidth+extraHorizontalSpace,whitespaceMinWidth)}}setMaxLineWidth(maxLineWidth){const scrollDimensions=this._scrollable.getScrollDimensions();
// const newScrollWidth = ;
this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width,this._computeContentWidth(maxLineWidth),scrollDimensions.height,scrollDimensions.contentHeight)),
// The height might depend on the fact that there is a horizontal scrollbar or not
this._updateHeight()}
// ---- view state
saveState(){const currentScrollPosition=this._scrollable.getFutureScrollPosition();let scrollTop=currentScrollPosition.scrollTop,firstLineNumberInViewport=this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop),whitespaceAboveFirstLine=this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);return{scrollTop:scrollTop,scrollTopWithoutViewZones:scrollTop-whitespaceAboveFirstLine,scrollLeft:currentScrollPosition.scrollLeft}}
// ---- IVerticalLayoutProvider
changeWhitespace(callback){const hadAChange=this._linesLayout.changeWhitespace(callback);return hadAChange&&this.onHeightMaybeChanged(),hadAChange}getVerticalOffsetForLineNumber(lineNumber){return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber)}isAfterLines(verticalOffset){return this._linesLayout.isAfterLines(verticalOffset)}isInTopPadding(verticalOffset){return this._linesLayout.isInTopPadding(verticalOffset)}isInBottomPadding(verticalOffset){return this._linesLayout.isInBottomPadding(verticalOffset)}getLineNumberAtVerticalOffset(verticalOffset){return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset)}getWhitespaceAtVerticalOffset(verticalOffset){return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset)}getLinesViewportData(){const visibleBox=this.getCurrentViewport();return this._linesLayout.getLinesViewportData(visibleBox.top,visibleBox.top+visibleBox.height)}getLinesViewportDataAtScrollTop(scrollTop){
// do some minimal validations on scrollTop
const scrollDimensions=this._scrollable.getScrollDimensions();return scrollTop+scrollDimensions.height>scrollDimensions.scrollHeight&&(scrollTop=scrollDimensions.scrollHeight-scrollDimensions.height),scrollTop<0&&(scrollTop=0),this._linesLayout.getLinesViewportData(scrollTop,scrollTop+scrollDimensions.height)}getWhitespaceViewportData(){const visibleBox=this.getCurrentViewport();return this._linesLayout.getWhitespaceViewportData(visibleBox.top,visibleBox.top+visibleBox.height)}getWhitespaces(){return this._linesLayout.getWhitespaces()}
// ---- IScrollingProvider
getContentWidth(){const scrollDimensions=this._scrollable.getScrollDimensions();return scrollDimensions.contentWidth}getScrollWidth(){const scrollDimensions=this._scrollable.getScrollDimensions();return scrollDimensions.scrollWidth}getContentHeight(){const scrollDimensions=this._scrollable.getScrollDimensions();return scrollDimensions.contentHeight}getScrollHeight(){const scrollDimensions=this._scrollable.getScrollDimensions();return scrollDimensions.scrollHeight}getCurrentScrollLeft(){const currentScrollPosition=this._scrollable.getCurrentScrollPosition();return currentScrollPosition.scrollLeft}getCurrentScrollTop(){const currentScrollPosition=this._scrollable.getCurrentScrollPosition();return currentScrollPosition.scrollTop}validateScrollPosition(scrollPosition){return this._scrollable.validateScrollPosition(scrollPosition)}setScrollPosition(position,type){1/* Immediate */===type?this._scrollable.setScrollPositionNow(position):this._scrollable.setScrollPositionSmooth(position)}deltaScrollNow(deltaScrollLeft,deltaScrollTop){const currentScrollPosition=this._scrollable.getCurrentScrollPosition();this._scrollable.setScrollPositionNow({scrollLeft:currentScrollPosition.scrollLeft+deltaScrollLeft,scrollTop:currentScrollPosition.scrollTop+deltaScrollTop})}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/arrays.js
var arrays=__webpack_require__(609488),core_lineTokens=__webpack_require__(878411),model=__webpack_require__(984973),textModel=__webpack_require__(724979),prefixSumComputer=__webpack_require__(403544);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/core/lineTokens.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/viewModel/splitLinesCollection.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class CoordinatesConverter{constructor(lines){this._lines=lines}
// View -> Model conversion and related methods
convertViewPositionToModelPosition(viewPosition){return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber,viewPosition.column)}convertViewRangeToModelRange(viewRange){return this._lines.convertViewRangeToModelRange(viewRange)}validateViewPosition(viewPosition,expectedModelPosition){return this._lines.validateViewPosition(viewPosition.lineNumber,viewPosition.column,expectedModelPosition)}validateViewRange(viewRange,expectedModelRange){return this._lines.validateViewRange(viewRange,expectedModelRange)}
// Model -> View conversion and related methods
convertModelPositionToViewPosition(modelPosition,affinity){return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber,modelPosition.column,affinity)}convertModelRangeToViewRange(modelRange,affinity){return this._lines.convertModelRangeToViewRange(modelRange,affinity)}modelPositionIsVisible(modelPosition){return this._lines.modelPositionIsVisible(modelPosition.lineNumber,modelPosition.column)}getModelLineViewLineCount(modelLineNumber){return this._lines.getModelLineViewLineCount(modelLineNumber)}getViewLineNumberOfModelPosition(modelLineNumber,modelColumn){return this._lines.getViewLineNumberOfModelPosition(modelLineNumber,modelColumn)}}class LineNumberMapper{constructor(viewLineCounts){this._counts=viewLineCounts,this._isValid=!1,this._validEndIndex=-1,this._modelToView=[],this._viewToModel=[]}_invalidate(index){this._isValid=!1,this._validEndIndex=Math.min(this._validEndIndex,index-1)}_ensureValid(){if(!this._isValid){for(let i=this._validEndIndex+1,len=this._counts.length;i<len;i++){const viewLineCount=this._counts[i],viewLinesAbove=i>0?this._modelToView[i-1]:0;this._modelToView[i]=viewLinesAbove+viewLineCount;for(let j=0;j<viewLineCount;j++)this._viewToModel[viewLinesAbove+j]=i}
// trim things
this._modelToView.length=this._counts.length,this._viewToModel.length=this._modelToView[this._modelToView.length-1],
// mark as valid
this._isValid=!0,this._validEndIndex=this._counts.length-1}}changeValue(index,value){this._counts[index]!==value&&(this._counts[index]=value,this._invalidate(index))}removeValues(start,deleteCount){this._counts.splice(start,deleteCount),this._invalidate(start)}insertValues(insertIndex,insertArr){this._counts=arrays/* arrayInsert */.Zv(this._counts,insertIndex,insertArr),this._invalidate(insertIndex)}getTotalValue(){return this._ensureValid(),this._viewToModel.length}getAccumulatedValue(index){return this._ensureValid(),this._modelToView[index]}getIndexOf(accumulatedValue){this._ensureValid();const modelLineIndex=this._viewToModel[accumulatedValue],viewLinesAbove=modelLineIndex>0?this._modelToView[modelLineIndex-1]:0;return new prefixSumComputer/* PrefixSumIndexOfResult */.T(modelLineIndex,accumulatedValue-viewLinesAbove)}}class SplitLinesCollection{constructor(editorId,model,domLineBreaksComputerFactory,monospaceLineBreaksComputerFactory,fontInfo,tabSize,wrappingStrategy,wrappingColumn,wrappingIndent){this._editorId=editorId,this.model=model,this._validModelVersionId=-1,this._domLineBreaksComputerFactory=domLineBreaksComputerFactory,this._monospaceLineBreaksComputerFactory=monospaceLineBreaksComputerFactory,this.fontInfo=fontInfo,this.tabSize=tabSize,this.wrappingStrategy=wrappingStrategy,this.wrappingColumn=wrappingColumn,this.wrappingIndent=wrappingIndent,this._constructLines(/*resetHiddenAreas*/!0,null)}dispose(){this.hiddenAreasIds=this.model.deltaDecorations(this.hiddenAreasIds,[])}createCoordinatesConverter(){return new CoordinatesConverter(this)}_constructLines(resetHiddenAreas,previousLineBreaks){this.lines=[],resetHiddenAreas&&(this.hiddenAreasIds=[]);const linesContent=this.model.getLinesContent(),injectedTextDecorations=this.model.getInjectedTextDecorations(this._editorId),lineCount=linesContent.length,lineBreaksComputer=this.createLineBreaksComputer(),injectedTextQueue=new arrays/* ArrayQueue */.H9(textModelEvents/* LineInjectedText */.gk.fromDecorations(injectedTextDecorations));for(let i=0;i<lineCount;i++){const lineInjectedText=injectedTextQueue.takeWhile((t=>t.lineNumber===i+1));lineBreaksComputer.addRequest(linesContent[i],lineInjectedText,previousLineBreaks?previousLineBreaks[i]:null)}const linesBreaks=lineBreaksComputer.finalize();let values=[],hiddenAreas=this.hiddenAreasIds.map((areaId=>this.model.getDecorationRange(areaId))).sort(core_range/* Range */.e.compareRangesUsingStarts),hiddenAreaStart=1,hiddenAreaEnd=0,hiddenAreaIdx=-1,nextLineNumberToUpdateHiddenArea=hiddenAreaIdx+1<hiddenAreas.length?hiddenAreaEnd+1:lineCount+2;for(let i=0;i<lineCount;i++){let lineNumber=i+1;lineNumber===nextLineNumberToUpdateHiddenArea&&(hiddenAreaIdx++,hiddenAreaStart=hiddenAreas[hiddenAreaIdx].startLineNumber,hiddenAreaEnd=hiddenAreas[hiddenAreaIdx].endLineNumber,nextLineNumberToUpdateHiddenArea=hiddenAreaIdx+1<hiddenAreas.length?hiddenAreaEnd+1:lineCount+2);let isInHiddenArea=lineNumber>=hiddenAreaStart&&lineNumber<=hiddenAreaEnd,line=createSplitLine(linesBreaks[i],!isInHiddenArea);values[i]=line.getViewLineCount(),this.lines[i]=line}this._validModelVersionId=this.model.getVersionId(),this.prefixSumComputer=new LineNumberMapper(values)}getHiddenAreas(){return this.hiddenAreasIds.map((decId=>this.model.getDecorationRange(decId)))}_reduceRanges(_ranges){if(0===_ranges.length)return[];let ranges=_ranges.map((r=>this.model.validateRange(r))).sort(core_range/* Range */.e.compareRangesUsingStarts),result=[],currentRangeStart=ranges[0].startLineNumber,currentRangeEnd=ranges[0].endLineNumber;for(let i=1,len=ranges.length;i<len;i++){let range=ranges[i];range.startLineNumber>currentRangeEnd+1?(result.push(new core_range/* Range */.e(currentRangeStart,1,currentRangeEnd,1)),currentRangeStart=range.startLineNumber,currentRangeEnd=range.endLineNumber):range.endLineNumber>currentRangeEnd&&(currentRangeEnd=range.endLineNumber)}return result.push(new core_range/* Range */.e(currentRangeStart,1,currentRangeEnd,1)),result}setHiddenAreas(_ranges){let newRanges=this._reduceRanges(_ranges),oldRanges=this.hiddenAreasIds.map((areaId=>this.model.getDecorationRange(areaId))).sort(core_range/* Range */.e.compareRangesUsingStarts);
// BEGIN TODO@Martin: Please stop calling this method on each model change!
if(newRanges.length===oldRanges.length){let hasDifference=!1;for(let i=0;i<newRanges.length;i++)if(!newRanges[i].equalsRange(oldRanges[i])){hasDifference=!0;break}if(!hasDifference)return!1}
// END TODO@Martin: Please stop calling this method on each model change!
let newDecorations=[];for(const newRange of newRanges)newDecorations.push({range:newRange,options:textModel/* ModelDecorationOptions */.qx.EMPTY});this.hiddenAreasIds=this.model.deltaDecorations(this.hiddenAreasIds,newDecorations);let hiddenAreas=newRanges,hiddenAreaStart=1,hiddenAreaEnd=0,hiddenAreaIdx=-1,nextLineNumberToUpdateHiddenArea=hiddenAreaIdx+1<hiddenAreas.length?hiddenAreaEnd+1:this.lines.length+2,hasVisibleLine=!1;for(let i=0;i<this.lines.length;i++){let lineNumber=i+1;lineNumber===nextLineNumberToUpdateHiddenArea&&(hiddenAreaIdx++,hiddenAreaStart=hiddenAreas[hiddenAreaIdx].startLineNumber,hiddenAreaEnd=hiddenAreas[hiddenAreaIdx].endLineNumber,nextLineNumberToUpdateHiddenArea=hiddenAreaIdx+1<hiddenAreas.length?hiddenAreaEnd+1:this.lines.length+2);let lineChanged=!1;if(lineNumber>=hiddenAreaStart&&lineNumber<=hiddenAreaEnd?
// Line should be hidden
this.lines[i].isVisible()&&(this.lines[i]=this.lines[i].setVisible(!1),lineChanged=!0):(hasVisibleLine=!0,
// Line should be visible
this.lines[i].isVisible()||(this.lines[i]=this.lines[i].setVisible(!0),lineChanged=!0)),lineChanged){let newOutputLineCount=this.lines[i].getViewLineCount();this.prefixSumComputer.changeValue(i,newOutputLineCount)}}return hasVisibleLine||
// Cannot have everything be hidden => reveal everything!
this.setHiddenAreas([]),!0}modelPositionIsVisible(modelLineNumber,_modelColumn){return!(modelLineNumber<1||modelLineNumber>this.lines.length)&&this.lines[modelLineNumber-1].isVisible()}getModelLineViewLineCount(modelLineNumber){return modelLineNumber<1||modelLineNumber>this.lines.length?1:this.lines[modelLineNumber-1].getViewLineCount()}setTabSize(newTabSize){return this.tabSize!==newTabSize&&(this.tabSize=newTabSize,this._constructLines(/*resetHiddenAreas*/!1,null),!0)}setWrappingSettings(fontInfo,wrappingStrategy,wrappingColumn,wrappingIndent){const equalFontInfo=this.fontInfo.equals(fontInfo),equalWrappingStrategy=this.wrappingStrategy===wrappingStrategy,equalWrappingColumn=this.wrappingColumn===wrappingColumn,equalWrappingIndent=this.wrappingIndent===wrappingIndent;if(equalFontInfo&&equalWrappingStrategy&&equalWrappingColumn&&equalWrappingIndent)return!1;const onlyWrappingColumnChanged=equalFontInfo&&equalWrappingStrategy&&!equalWrappingColumn&&equalWrappingIndent;this.fontInfo=fontInfo,this.wrappingStrategy=wrappingStrategy,this.wrappingColumn=wrappingColumn,this.wrappingIndent=wrappingIndent;let previousLineBreaks=null;if(onlyWrappingColumnChanged){previousLineBreaks=[];for(let i=0,len=this.lines.length;i<len;i++)previousLineBreaks[i]=this.lines[i].getLineBreakData()}return this._constructLines(/*resetHiddenAreas*/!1,previousLineBreaks),!0}createLineBreaksComputer(){const lineBreaksComputerFactory="advanced"===this.wrappingStrategy?this._domLineBreaksComputerFactory:this._monospaceLineBreaksComputerFactory;return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo,this.tabSize,this.wrappingColumn,this.wrappingIndent)}onModelFlushed(){this._constructLines(/*resetHiddenAreas*/!0,null)}onModelLinesDeleted(versionId,fromLineNumber,toLineNumber){if(!versionId||versionId<=this._validModelVersionId)
// Here we check for versionId in case the lines were reconstructed in the meantime.
// We don't want to apply stale change events on top of a newer read model state.
return null;let outputFromLineNumber=1===fromLineNumber?1:this.prefixSumComputer.getAccumulatedValue(fromLineNumber-2)+1,outputToLineNumber=this.prefixSumComputer.getAccumulatedValue(toLineNumber-1);return this.lines.splice(fromLineNumber-1,toLineNumber-fromLineNumber+1),this.prefixSumComputer.removeValues(fromLineNumber-1,toLineNumber-fromLineNumber+1),new viewEvents/* ViewLinesDeletedEvent */.vk(outputFromLineNumber,outputToLineNumber)}onModelLinesInserted(versionId,fromLineNumber,_toLineNumber,lineBreaks){if(!versionId||versionId<=this._validModelVersionId)
// Here we check for versionId in case the lines were reconstructed in the meantime.
// We don't want to apply stale change events on top of a newer read model state.
return null;
// cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change
const isInHiddenArea=fromLineNumber>2&&!this.lines[fromLineNumber-2].isVisible();let outputFromLineNumber=1===fromLineNumber?1:this.prefixSumComputer.getAccumulatedValue(fromLineNumber-2)+1,totalOutputLineCount=0,insertLines=[],insertPrefixSumValues=[];for(let i=0,len=lineBreaks.length;i<len;i++){let line=createSplitLine(lineBreaks[i],!isInHiddenArea);insertLines.push(line);let outputLineCount=line.getViewLineCount();totalOutputLineCount+=outputLineCount,insertPrefixSumValues[i]=outputLineCount}
// TODO@Alex: use arrays.arrayInsert
return this.lines=this.lines.slice(0,fromLineNumber-1).concat(insertLines).concat(this.lines.slice(fromLineNumber-1)),this.prefixSumComputer.insertValues(fromLineNumber-1,insertPrefixSumValues),new viewEvents/* ViewLinesInsertedEvent */.K9(outputFromLineNumber,outputFromLineNumber+totalOutputLineCount-1)}onModelLineChanged(versionId,lineNumber,lineBreakData){if(null!==versionId&&versionId<=this._validModelVersionId)
// Here we check for versionId in case the lines were reconstructed in the meantime.
// We don't want to apply stale change events on top of a newer read model state.
return[!1,null,null,null];let lineIndex=lineNumber-1,oldOutputLineCount=this.lines[lineIndex].getViewLineCount(),isVisible=this.lines[lineIndex].isVisible(),line=createSplitLine(lineBreakData,isVisible);this.lines[lineIndex]=line;let newOutputLineCount=this.lines[lineIndex].getViewLineCount(),lineMappingChanged=!1,changeFrom=0,changeTo=-1,insertFrom=0,insertTo=-1,deleteFrom=0,deleteTo=-1;oldOutputLineCount>newOutputLineCount?(changeFrom=1===lineNumber?1:this.prefixSumComputer.getAccumulatedValue(lineNumber-2)+1,changeTo=changeFrom+newOutputLineCount-1,deleteFrom=changeTo+1,deleteTo=deleteFrom+(oldOutputLineCount-newOutputLineCount)-1,lineMappingChanged=!0):oldOutputLineCount<newOutputLineCount?(changeFrom=1===lineNumber?1:this.prefixSumComputer.getAccumulatedValue(lineNumber-2)+1,changeTo=changeFrom+oldOutputLineCount-1,insertFrom=changeTo+1,insertTo=insertFrom+(newOutputLineCount-oldOutputLineCount)-1,lineMappingChanged=!0):(changeFrom=1===lineNumber?1:this.prefixSumComputer.getAccumulatedValue(lineNumber-2)+1,changeTo=changeFrom+newOutputLineCount-1),this.prefixSumComputer.changeValue(lineIndex,newOutputLineCount);const viewLinesChangedEvent=changeFrom<=changeTo?new viewEvents/* ViewLinesChangedEvent */.il(changeFrom,changeTo):null,viewLinesInsertedEvent=insertFrom<=insertTo?new viewEvents/* ViewLinesInsertedEvent */.K9(insertFrom,insertTo):null,viewLinesDeletedEvent=deleteFrom<=deleteTo?new viewEvents/* ViewLinesDeletedEvent */.vk(deleteFrom,deleteTo):null;return[lineMappingChanged,viewLinesChangedEvent,viewLinesInsertedEvent,viewLinesDeletedEvent]}acceptVersionId(versionId){this._validModelVersionId=versionId,1!==this.lines.length||this.lines[0].isVisible()||
// At least one line must be visible => reset hidden areas
this.setHiddenAreas([])}getViewLineCount(){return this.prefixSumComputer.getTotalValue()}_toValidViewLineNumber(viewLineNumber){if(viewLineNumber<1)return 1;const viewLineCount=this.getViewLineCount();return viewLineNumber>viewLineCount?viewLineCount:0|viewLineNumber}getActiveIndentGuide(viewLineNumber,minLineNumber,maxLineNumber){viewLineNumber=this._toValidViewLineNumber(viewLineNumber),minLineNumber=this._toValidViewLineNumber(minLineNumber),maxLineNumber=this._toValidViewLineNumber(maxLineNumber);const modelPosition=this.convertViewPositionToModelPosition(viewLineNumber,this.getViewLineMinColumn(viewLineNumber)),modelMinPosition=this.convertViewPositionToModelPosition(minLineNumber,this.getViewLineMinColumn(minLineNumber)),modelMaxPosition=this.convertViewPositionToModelPosition(maxLineNumber,this.getViewLineMinColumn(maxLineNumber)),result=this.model.getActiveIndentGuide(modelPosition.lineNumber,modelMinPosition.lineNumber,modelMaxPosition.lineNumber),viewStartPosition=this.convertModelPositionToViewPosition(result.startLineNumber,1),viewEndPosition=this.convertModelPositionToViewPosition(result.endLineNumber,this.model.getLineMaxColumn(result.endLineNumber));return{startLineNumber:viewStartPosition.lineNumber,endLineNumber:viewEndPosition.lineNumber,indent:result.indent}}
// #region ViewLineInfo
getViewLineInfo(viewLineNumber){viewLineNumber=this._toValidViewLineNumber(viewLineNumber);let r=this.prefixSumComputer.getIndexOf(viewLineNumber-1),lineIndex=r.index,remainder=r.remainder;return new ViewLineInfo(lineIndex+1,remainder)}getMinColumnOfViewLine(viewLineInfo){return this.lines[viewLineInfo.modelLineNumber-1].getViewLineMinColumn(this.model,viewLineInfo.modelLineNumber,viewLineInfo.modelLineWrappedLineIdx)}getModelStartPositionOfViewLine(viewLineInfo){const line=this.lines[viewLineInfo.modelLineNumber-1],minViewColumn=line.getViewLineMinColumn(this.model,viewLineInfo.modelLineNumber,viewLineInfo.modelLineWrappedLineIdx),column=line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx,minViewColumn);return new core_position/* Position */.L(viewLineInfo.modelLineNumber,column)}getModelEndPositionOfViewLine(viewLineInfo){const line=this.lines[viewLineInfo.modelLineNumber-1],maxViewColumn=line.getViewLineMaxColumn(this.model,viewLineInfo.modelLineNumber,viewLineInfo.modelLineWrappedLineIdx),column=line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx,maxViewColumn);return new core_position/* Position */.L(viewLineInfo.modelLineNumber,column)}getViewLineInfosGroupedByModelRanges(viewStartLineNumber,viewEndLineNumber){const startViewLine=this.getViewLineInfo(viewStartLineNumber),endViewLine=this.getViewLineInfo(viewEndLineNumber),result=new Array;let lastVisibleModelPos=this.getModelStartPositionOfViewLine(startViewLine),viewLines=new Array;for(let curModelLine=startViewLine.modelLineNumber;curModelLine<=endViewLine.modelLineNumber;curModelLine++){const line=this.lines[curModelLine-1];if(line.isVisible()){let startOffset=curModelLine===startViewLine.modelLineNumber?startViewLine.modelLineWrappedLineIdx:0,endOffset=curModelLine===endViewLine.modelLineNumber?endViewLine.modelLineWrappedLineIdx+1:line.getViewLineCount();for(let i=startOffset;i<endOffset;i++)viewLines.push(new ViewLineInfo(curModelLine,i))}if(!line.isVisible()&&lastVisibleModelPos){const lastVisibleModelPos2=new core_position/* Position */.L(curModelLine-1,this.model.getLineMaxColumn(curModelLine-1)+1),modelRange=core_range/* Range */.e.fromPositions(lastVisibleModelPos,lastVisibleModelPos2);result.push(new ViewLineInfoGroupedByModelRange(modelRange,viewLines)),viewLines=[],lastVisibleModelPos=null}else line.isVisible()&&!lastVisibleModelPos&&(lastVisibleModelPos=new core_position/* Position */.L(curModelLine,1))}if(lastVisibleModelPos){const modelRange=core_range/* Range */.e.fromPositions(lastVisibleModelPos,this.getModelEndPositionOfViewLine(endViewLine));result.push(new ViewLineInfoGroupedByModelRange(modelRange,viewLines))}return result}
// #endregion
getViewLinesBracketGuides(viewStartLineNumber,viewEndLineNumber,activeViewPosition,options){const modelActivePosition=activeViewPosition?this.convertViewPositionToModelPosition(activeViewPosition.lineNumber,activeViewPosition.column):null,resultPerViewLine=[];for(const group of this.getViewLineInfosGroupedByModelRanges(viewStartLineNumber,viewEndLineNumber)){const modelRangeStartLineNumber=group.modelRange.startLineNumber,bracketGuidesPerModelLine=this.model.getLinesBracketGuides(modelRangeStartLineNumber,group.modelRange.endLineNumber,modelActivePosition,options);for(const viewLineInfo of group.viewLines)if(viewLineInfo.isWrappedLineContinuation&&1===this.getMinColumnOfViewLine(viewLineInfo))
// Don't add indent guides when the wrapped line continuation has no wrapping-indentation.
resultPerViewLine.push([]);else{let bracketGuides=bracketGuidesPerModelLine[viewLineInfo.modelLineNumber-modelRangeStartLineNumber];
// visibleColumns stay as they are (this is a bug and needs to be fixed, but it is not a regression)
// model-columns must be converted to view-model columns.
bracketGuides=bracketGuides.map((g=>g.horizontalLine?new model/* IndentGuide */.UO(g.visibleColumn,g.className,new model/* IndentGuideHorizontalLine */.vW(g.horizontalLine.top,this.convertModelPositionToViewPosition(viewLineInfo.modelLineNumber,g.horizontalLine.endColumn).column)):g)),resultPerViewLine.push(bracketGuides)}}return resultPerViewLine}getViewLinesIndentGuides(viewStartLineNumber,viewEndLineNumber){
// TODO: Use the same code as in `getViewLinesBracketGuides`.
// Future TODO: Merge with `getViewLinesBracketGuides`.
// However, this requires more refactoring of indent guides.
viewStartLineNumber=this._toValidViewLineNumber(viewStartLineNumber),viewEndLineNumber=this._toValidViewLineNumber(viewEndLineNumber);const modelStart=this.convertViewPositionToModelPosition(viewStartLineNumber,this.getViewLineMinColumn(viewStartLineNumber)),modelEnd=this.convertViewPositionToModelPosition(viewEndLineNumber,this.getViewLineMaxColumn(viewEndLineNumber));let result=[],resultRepeatCount=[],resultRepeatOption=[];const modelStartLineIndex=modelStart.lineNumber-1,modelEndLineIndex=modelEnd.lineNumber-1;let reqStart=null;for(let modelLineIndex=modelStartLineIndex;modelLineIndex<=modelEndLineIndex;modelLineIndex++){const line=this.lines[modelLineIndex];if(line.isVisible()){let viewLineStartIndex=line.getViewLineNumberOfModelPosition(0,modelLineIndex===modelStartLineIndex?modelStart.column:1),viewLineEndIndex=line.getViewLineNumberOfModelPosition(0,this.model.getLineMaxColumn(modelLineIndex+1)),count=viewLineEndIndex-viewLineStartIndex+1,option=0/* BlockNone */;count>1&&1===line.getViewLineMinColumn(this.model,modelLineIndex+1,viewLineEndIndex)&&(
// wrapped lines should block indent guides
option=0===viewLineStartIndex?1/* BlockSubsequent */:2/* BlockAll */),resultRepeatCount.push(count),resultRepeatOption.push(option),
// merge into previous request
null===reqStart&&(reqStart=new core_position/* Position */.L(modelLineIndex+1,0))}else
// hit invisible line => flush request
null!==reqStart&&(result=result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber,modelLineIndex)),reqStart=null)}null!==reqStart&&(result=result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber,modelEnd.lineNumber)),reqStart=null);const viewLineCount=viewEndLineNumber-viewStartLineNumber+1;let viewIndents=new Array(viewLineCount),currIndex=0;for(let i=0,len=result.length;i<len;i++){let blockAtIndex,value=result[i],count=Math.min(viewLineCount-currIndex,resultRepeatCount[i]),option=resultRepeatOption[i];blockAtIndex=2/* BlockAll */===option?0:1/* BlockSubsequent */===option?1:count;for(let j=0;j<count;j++)j===blockAtIndex&&(value=0),viewIndents[currIndex++]=value}return viewIndents}getViewLineContent(viewLineNumber){viewLineNumber=this._toValidViewLineNumber(viewLineNumber);let r=this.prefixSumComputer.getIndexOf(viewLineNumber-1),lineIndex=r.index,remainder=r.remainder;return this.lines[lineIndex].getViewLineContent(this.model,lineIndex+1,remainder)}getViewLineLength(viewLineNumber){viewLineNumber=this._toValidViewLineNumber(viewLineNumber);let r=this.prefixSumComputer.getIndexOf(viewLineNumber-1),lineIndex=r.index,remainder=r.remainder;return this.lines[lineIndex].getViewLineLength(this.model,lineIndex+1,remainder)}getViewLineMinColumn(viewLineNumber){viewLineNumber=this._toValidViewLineNumber(viewLineNumber);let r=this.prefixSumComputer.getIndexOf(viewLineNumber-1),lineIndex=r.index,remainder=r.remainder;return this.lines[lineIndex].getViewLineMinColumn(this.model,lineIndex+1,remainder)}getViewLineMaxColumn(viewLineNumber){viewLineNumber=this._toValidViewLineNumber(viewLineNumber);let r=this.prefixSumComputer.getIndexOf(viewLineNumber-1),lineIndex=r.index,remainder=r.remainder;return this.lines[lineIndex].getViewLineMaxColumn(this.model,lineIndex+1,remainder)}getViewLineData(viewLineNumber){viewLineNumber=this._toValidViewLineNumber(viewLineNumber);let r=this.prefixSumComputer.getIndexOf(viewLineNumber-1),lineIndex=r.index,remainder=r.remainder;return this.lines[lineIndex].getViewLineData(this.model,lineIndex+1,remainder)}getViewLinesData(viewStartLineNumber,viewEndLineNumber,needed){viewStartLineNumber=this._toValidViewLineNumber(viewStartLineNumber),viewEndLineNumber=this._toValidViewLineNumber(viewEndLineNumber);let start=this.prefixSumComputer.getIndexOf(viewStartLineNumber-1),viewLineNumber=viewStartLineNumber,startModelLineIndex=start.index,startRemainder=start.remainder,result=[];for(let modelLineIndex=startModelLineIndex,len=this.model.getLineCount();modelLineIndex<len;modelLineIndex++){let line=this.lines[modelLineIndex];if(!line.isVisible())continue;let fromViewLineIndex=modelLineIndex===startModelLineIndex?startRemainder:0,remainingViewLineCount=line.getViewLineCount()-fromViewLineIndex,lastLine=!1;viewLineNumber+remainingViewLineCount>viewEndLineNumber&&(lastLine=!0,remainingViewLineCount=viewEndLineNumber-viewLineNumber+1);let toViewLineIndex=fromViewLineIndex+remainingViewLineCount;if(line.getViewLinesData(this.model,modelLineIndex+1,fromViewLineIndex,toViewLineIndex,viewLineNumber-viewStartLineNumber,needed,result),viewLineNumber+=remainingViewLineCount,lastLine)break}return result}validateViewPosition(viewLineNumber,viewColumn,expectedModelPosition){viewLineNumber=this._toValidViewLineNumber(viewLineNumber);let r=this.prefixSumComputer.getIndexOf(viewLineNumber-1),lineIndex=r.index,remainder=r.remainder,line=this.lines[lineIndex],minColumn=line.getViewLineMinColumn(this.model,lineIndex+1,remainder),maxColumn=line.getViewLineMaxColumn(this.model,lineIndex+1,remainder);viewColumn<minColumn&&(viewColumn=minColumn),viewColumn>maxColumn&&(viewColumn=maxColumn);let computedModelColumn=line.getModelColumnOfViewPosition(remainder,viewColumn),computedModelPosition=this.model.validatePosition(new core_position/* Position */.L(lineIndex+1,computedModelColumn));return computedModelPosition.equals(expectedModelPosition)?new core_position/* Position */.L(viewLineNumber,viewColumn):this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber,expectedModelPosition.column)}validateViewRange(viewRange,expectedModelRange){const validViewStart=this.validateViewPosition(viewRange.startLineNumber,viewRange.startColumn,expectedModelRange.getStartPosition()),validViewEnd=this.validateViewPosition(viewRange.endLineNumber,viewRange.endColumn,expectedModelRange.getEndPosition());return new core_range/* Range */.e(validViewStart.lineNumber,validViewStart.column,validViewEnd.lineNumber,validViewEnd.column)}convertViewPositionToModelPosition(viewLineNumber,viewColumn){viewLineNumber=this._toValidViewLineNumber(viewLineNumber);let r=this.prefixSumComputer.getIndexOf(viewLineNumber-1),lineIndex=r.index,remainder=r.remainder,inputColumn=this.lines[lineIndex].getModelColumnOfViewPosition(remainder,viewColumn);
// console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);
return this.model.validatePosition(new core_position/* Position */.L(lineIndex+1,inputColumn))}convertViewRangeToModelRange(viewRange){const start=this.convertViewPositionToModelPosition(viewRange.startLineNumber,viewRange.startColumn),end=this.convertViewPositionToModelPosition(viewRange.endLineNumber,viewRange.endColumn);return new core_range/* Range */.e(start.lineNumber,start.column,end.lineNumber,end.column)}convertModelPositionToViewPosition(_modelLineNumber,_modelColumn,affinity=2/* None */){const validPosition=this.model.validatePosition(new core_position/* Position */.L(_modelLineNumber,_modelColumn)),inputLineNumber=validPosition.lineNumber,inputColumn=validPosition.column;let lineIndex=inputLineNumber-1,lineIndexChanged=!1;while(lineIndex>0&&!this.lines[lineIndex].isVisible())lineIndex--,lineIndexChanged=!0;if(0===lineIndex&&!this.lines[lineIndex].isVisible())
// Could not reach a real line
// console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);
return new core_position/* Position */.L(1,1);const deltaLineNumber=1+(0===lineIndex?0:this.prefixSumComputer.getAccumulatedValue(lineIndex-1));let r;
// console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);
return r=lineIndexChanged?this.lines[lineIndex].getViewPositionOfModelPosition(deltaLineNumber,this.model.getLineMaxColumn(lineIndex+1),affinity):this.lines[inputLineNumber-1].getViewPositionOfModelPosition(deltaLineNumber,inputColumn,affinity),r}
/**
     * @param affinity The affinity in case of an empty range. Has no effect for non-empty ranges.
    */convertModelRangeToViewRange(modelRange,affinity=0/* Left */){if(modelRange.isEmpty()){const start=this.convertModelPositionToViewPosition(modelRange.startLineNumber,modelRange.startColumn,affinity);return core_range/* Range */.e.fromPositions(start)}{const start=this.convertModelPositionToViewPosition(modelRange.startLineNumber,modelRange.startColumn,1/* Right */),end=this.convertModelPositionToViewPosition(modelRange.endLineNumber,modelRange.endColumn,0/* Left */);return new core_range/* Range */.e(start.lineNumber,start.column,end.lineNumber,end.column)}}getViewLineNumberOfModelPosition(inputLineNumber,inputColumn){let lineIndex=inputLineNumber-1;if(this.lines[lineIndex].isVisible()){
// this model line is visible
const deltaLineNumber=1+(0===lineIndex?0:this.prefixSumComputer.getAccumulatedValue(lineIndex-1));return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber,inputColumn)}
// this model line is not visible
while(lineIndex>0&&!this.lines[lineIndex].isVisible())lineIndex--;if(0===lineIndex&&!this.lines[lineIndex].isVisible())
// Could not reach a real line
return 1;const deltaLineNumber=1+(0===lineIndex?0:this.prefixSumComputer.getAccumulatedValue(lineIndex-1));return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber,this.model.getLineMaxColumn(lineIndex+1))}getDecorationsInRange(range,ownerId,filterOutValidation){const modelStart=this.convertViewPositionToModelPosition(range.startLineNumber,range.startColumn),modelEnd=this.convertViewPositionToModelPosition(range.endLineNumber,range.endColumn);if(modelEnd.lineNumber-modelStart.lineNumber<=range.endLineNumber-range.startLineNumber)
// most likely there are no hidden lines => fast path
// fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1
return this.model.getDecorationsInRange(new core_range/* Range */.e(modelStart.lineNumber,1,modelEnd.lineNumber,modelEnd.column),ownerId,filterOutValidation);let result=[];const modelStartLineIndex=modelStart.lineNumber-1,modelEndLineIndex=modelEnd.lineNumber-1;let reqStart=null;for(let modelLineIndex=modelStartLineIndex;modelLineIndex<=modelEndLineIndex;modelLineIndex++){const line=this.lines[modelLineIndex];if(line.isVisible())
// merge into previous request
null===reqStart&&(reqStart=new core_position/* Position */.L(modelLineIndex+1,modelLineIndex===modelStartLineIndex?modelStart.column:1));else
// hit invisible line => flush request
if(null!==reqStart){const maxLineColumn=this.model.getLineMaxColumn(modelLineIndex);result=result.concat(this.model.getDecorationsInRange(new core_range/* Range */.e(reqStart.lineNumber,reqStart.column,modelLineIndex,maxLineColumn),ownerId,filterOutValidation)),reqStart=null}}null!==reqStart&&(result=result.concat(this.model.getDecorationsInRange(new core_range/* Range */.e(reqStart.lineNumber,reqStart.column,modelEnd.lineNumber,modelEnd.column),ownerId,filterOutValidation)),reqStart=null),result.sort(((a,b)=>{const res=core_range/* Range */.e.compareRangesUsingStarts(a.range,b.range);return 0===res?a.id<b.id?-1:a.id>b.id?1:0:res}));
// Eliminate duplicate decorations that might have intersected our visible ranges multiple times
let finalResult=[],finalResultLen=0,prevDecId=null;for(const dec of result){const decId=dec.id;prevDecId!==decId&&(prevDecId=decId,finalResult[finalResultLen++]=dec)}return finalResult}getInjectedTextAt(position){const viewLineNumber=this._toValidViewLineNumber(position.lineNumber),r=this.prefixSumComputer.getIndexOf(viewLineNumber-1),lineIndex=r.index,remainder=r.remainder;return this.lines[lineIndex].getInjectedTextAt(remainder,position.column)}normalizePosition(position,affinity){const viewLineNumber=this._toValidViewLineNumber(position.lineNumber),r=this.prefixSumComputer.getIndexOf(viewLineNumber-1),lineIndex=r.index,remainder=r.remainder;return this.lines[lineIndex].normalizePosition(this.model,lineIndex+1,remainder,position,affinity)}getLineIndentColumn(lineNumber){const viewLineNumber=this._toValidViewLineNumber(lineNumber),r=this.prefixSumComputer.getIndexOf(viewLineNumber-1),lineIndex=r.index,remainder=r.remainder;return 0===remainder?this.model.getLineIndentColumn(lineIndex+1):0;
// wrapped lines have no indentation.
// We deliberately don't handle the case that indentation is wrapped
// to avoid two view lines reporting indentation for the very same model line.
}}
/**
 * Represents a view line. Can be used to efficiently query more information about it.
 */class ViewLineInfo{constructor(modelLineNumber,modelLineWrappedLineIdx){this.modelLineNumber=modelLineNumber,this.modelLineWrappedLineIdx=modelLineWrappedLineIdx}get isWrappedLineContinuation(){return this.modelLineWrappedLineIdx>0}}
/**
 * A list of view lines that have a contiguous span in the model.
*/class ViewLineInfoGroupedByModelRange{constructor(modelRange,viewLines){this.modelRange=modelRange,this.viewLines=viewLines}}class VisibleIdentitySplitLine{constructor(){}isVisible(){return!0}setVisible(isVisible){return isVisible?this:InvisibleIdentitySplitLine.INSTANCE}getLineBreakData(){return null}getViewLineCount(){return 1}getViewLineContent(model,modelLineNumber,_outputLineIndex){return model.getLineContent(modelLineNumber)}getViewLineLength(model,modelLineNumber,_outputLineIndex){return model.getLineLength(modelLineNumber)}getViewLineMinColumn(model,modelLineNumber,_outputLineIndex){return model.getLineMinColumn(modelLineNumber)}getViewLineMaxColumn(model,modelLineNumber,_outputLineIndex){return model.getLineMaxColumn(modelLineNumber)}getViewLineData(model,modelLineNumber,_outputLineIndex){let lineTokens=model.getLineTokens(modelLineNumber),lineContent=lineTokens.getLineContent();return new viewModel/* ViewLineData */.IP(lineContent,!1,1,lineContent.length+1,0,lineTokens.inflate(),null)}getViewLinesData(model,modelLineNumber,_fromOuputLineIndex,_toOutputLineIndex,globalStartIndex,needed,result){needed[globalStartIndex]?result[globalStartIndex]=this.getViewLineData(model,modelLineNumber,0):result[globalStartIndex]=null}getModelColumnOfViewPosition(_outputLineIndex,outputColumn){return outputColumn}getViewPositionOfModelPosition(deltaLineNumber,inputColumn){return new core_position/* Position */.L(deltaLineNumber,inputColumn)}getViewLineNumberOfModelPosition(deltaLineNumber,_inputColumn){return deltaLineNumber}normalizePosition(model,modelLineNumber,outputLineIndex,outputPosition,affinity){return outputPosition}getInjectedTextAt(_outputLineIndex,_outputColumn){return null}}VisibleIdentitySplitLine.INSTANCE=new VisibleIdentitySplitLine;class InvisibleIdentitySplitLine{constructor(){}isVisible(){return!1}setVisible(isVisible){return isVisible?VisibleIdentitySplitLine.INSTANCE:this}getLineBreakData(){return null}getViewLineCount(){return 0}getViewLineContent(_model,_modelLineNumber,_outputLineIndex){throw new Error("Not supported")}getViewLineLength(_model,_modelLineNumber,_outputLineIndex){throw new Error("Not supported")}getViewLineMinColumn(_model,_modelLineNumber,_outputLineIndex){throw new Error("Not supported")}getViewLineMaxColumn(_model,_modelLineNumber,_outputLineIndex){throw new Error("Not supported")}getViewLineData(_model,_modelLineNumber,_outputLineIndex){throw new Error("Not supported")}getViewLinesData(_model,_modelLineNumber,_fromOuputLineIndex,_toOutputLineIndex,_globalStartIndex,_needed,_result){throw new Error("Not supported")}getModelColumnOfViewPosition(_outputLineIndex,_outputColumn){throw new Error("Not supported")}getViewPositionOfModelPosition(_deltaLineNumber,_inputColumn){throw new Error("Not supported")}getViewLineNumberOfModelPosition(_deltaLineNumber,_inputColumn){throw new Error("Not supported")}normalizePosition(model,modelLineNumber,outputLineIndex,outputPosition,affinity){throw new Error("Not supported")}getInjectedTextAt(_outputLineIndex,_outputColumn){throw new Error("Not supported")}}InvisibleIdentitySplitLine.INSTANCE=new InvisibleIdentitySplitLine;class SplitLine{constructor(lineBreakData,isVisible){this._lineBreakData=lineBreakData,this._isVisible=isVisible}isVisible(){return this._isVisible}setVisible(isVisible){return this._isVisible=isVisible,this}getLineBreakData(){return this._lineBreakData}getViewLineCount(){return this._isVisible?this._lineBreakData.breakOffsets.length:0}getInputStartOffsetOfOutputLineIndex(outputLineIndex){return this._lineBreakData.getInputOffsetOfOutputPosition(outputLineIndex,0)}getInputEndOffsetOfOutputLineIndex(model,modelLineNumber,outputLineIndex){return outputLineIndex+1===this._lineBreakData.breakOffsets.length?model.getLineMaxColumn(modelLineNumber)-1:this._lineBreakData.getInputOffsetOfOutputPosition(outputLineIndex+1,0)}getViewLineContent(model,modelLineNumber,outputLineIndex){if(!this._isVisible)throw new Error("Not supported");
// These offsets refer to model text with injected text.
const startOffset=outputLineIndex>0?this._lineBreakData.breakOffsets[outputLineIndex-1]:0,endOffset=outputLineIndex<this._lineBreakData.breakOffsets.length?this._lineBreakData.breakOffsets[outputLineIndex]:this._lineBreakData.breakOffsets[this._lineBreakData.breakOffsets.length-1];let r;if(null!==this._lineBreakData.injectionOffsets){const injectedTexts=this._lineBreakData.injectionOffsets.map(((offset,idx)=>new textModelEvents/* LineInjectedText */.gk(0,0,offset+1,this._lineBreakData.injectionOptions[idx],0)));r=textModelEvents/* LineInjectedText */.gk.applyInjectedText(model.getLineContent(modelLineNumber),injectedTexts).substring(startOffset,endOffset)}else r=model.getValueInRange({startLineNumber:modelLineNumber,startColumn:startOffset+1,endLineNumber:modelLineNumber,endColumn:endOffset+1});return outputLineIndex>0&&(r=spaces(this._lineBreakData.wrappedTextIndentLength)+r),r}getViewLineLength(model,modelLineNumber,outputLineIndex){
// TODO @hediet make this method a member of LineBreakData.
if(!this._isVisible)throw new Error("Not supported");
// These offsets refer to model text with injected text.
const startOffset=outputLineIndex>0?this._lineBreakData.breakOffsets[outputLineIndex-1]:0,endOffset=outputLineIndex<this._lineBreakData.breakOffsets.length?this._lineBreakData.breakOffsets[outputLineIndex]:this._lineBreakData.breakOffsets[this._lineBreakData.breakOffsets.length-1];let r=endOffset-startOffset;return outputLineIndex>0&&(r=this._lineBreakData.wrappedTextIndentLength+r),r}getViewLineMinColumn(_model,_modelLineNumber,outputLineIndex){if(!this._isVisible)throw new Error("Not supported");return this._getViewLineMinColumn(outputLineIndex)}_getViewLineMinColumn(outputLineIndex){return outputLineIndex>0?this._lineBreakData.wrappedTextIndentLength+1:1}getViewLineMaxColumn(model,modelLineNumber,outputLineIndex){if(!this._isVisible)throw new Error("Not supported");return this.getViewLineLength(model,modelLineNumber,outputLineIndex)+1}getViewLineData(model,modelLineNumber,outputLineIndex){if(!this._isVisible)throw new Error("Not supported");const lineBreakData=this._lineBreakData,deltaStartIndex=outputLineIndex>0?lineBreakData.wrappedTextIndentLength:0,injectionOffsets=lineBreakData.injectionOffsets,injectionOptions=lineBreakData.injectionOptions;let lineContent,tokens,inlineDecorations;if(injectionOffsets){const lineTokens=model.getLineTokens(modelLineNumber).withInserted(injectionOffsets.map(((offset,idx)=>({offset:offset,text:injectionOptions[idx].content,tokenMetadata:core_lineTokens/* LineTokens */.A.defaultTokenMetadata})))),lineStartOffsetInUnwrappedLine=outputLineIndex>0?lineBreakData.breakOffsets[outputLineIndex-1]:0,lineEndOffsetInUnwrappedLine=lineBreakData.breakOffsets[outputLineIndex];lineContent=lineTokens.getLineContent().substring(lineStartOffsetInUnwrappedLine,lineEndOffsetInUnwrappedLine),tokens=lineTokens.sliceAndInflate(lineStartOffsetInUnwrappedLine,lineEndOffsetInUnwrappedLine,deltaStartIndex),inlineDecorations=new Array;let totalInjectedTextLengthBefore=0;for(let i=0;i<injectionOffsets.length;i++){const length=injectionOptions[i].content.length,injectedTextStartOffsetInUnwrappedLine=injectionOffsets[i]+totalInjectedTextLengthBefore,injectedTextEndOffsetInUnwrappedLine=injectionOffsets[i]+totalInjectedTextLengthBefore+length;if(injectedTextStartOffsetInUnwrappedLine>lineEndOffsetInUnwrappedLine)
// Injected text only starts in later wrapped lines.
break;if(lineStartOffsetInUnwrappedLine<injectedTextEndOffsetInUnwrappedLine){
// Injected text ends after or in this line (but also starts in or before this line).
const options=injectionOptions[i];if(options.inlineClassName){const offset=outputLineIndex>0?lineBreakData.wrappedTextIndentLength:0,start=offset+Math.max(injectedTextStartOffsetInUnwrappedLine-lineStartOffsetInUnwrappedLine,0),end=offset+Math.min(injectedTextEndOffsetInUnwrappedLine-lineStartOffsetInUnwrappedLine,lineEndOffsetInUnwrappedLine);start!==end&&inlineDecorations.push(new viewModel/* SingleLineInlineDecoration */.Wx(start,end,options.inlineClassName,options.inlineClassNameAffectsLetterSpacing))}}totalInjectedTextLengthBefore+=length}}else{const startOffset=this.getInputStartOffsetOfOutputLineIndex(outputLineIndex),endOffset=this.getInputEndOffsetOfOutputLineIndex(model,modelLineNumber,outputLineIndex),lineTokens=model.getLineTokens(modelLineNumber);lineContent=model.getValueInRange({startLineNumber:modelLineNumber,startColumn:startOffset+1,endLineNumber:modelLineNumber,endColumn:endOffset+1}),tokens=lineTokens.sliceAndInflate(startOffset,endOffset,deltaStartIndex),inlineDecorations=null}outputLineIndex>0&&(lineContent=spaces(lineBreakData.wrappedTextIndentLength)+lineContent);const minColumn=outputLineIndex>0?lineBreakData.wrappedTextIndentLength+1:1,maxColumn=lineContent.length+1,continuesWithWrappedLine=outputLineIndex+1<this.getViewLineCount(),startVisibleColumn=0===outputLineIndex?0:lineBreakData.breakOffsetsVisibleColumn[outputLineIndex-1];return new viewModel/* ViewLineData */.IP(lineContent,continuesWithWrappedLine,minColumn,maxColumn,startVisibleColumn,tokens,inlineDecorations)}getViewLinesData(model,modelLineNumber,fromOuputLineIndex,toOutputLineIndex,globalStartIndex,needed,result){if(!this._isVisible)throw new Error("Not supported");for(let outputLineIndex=fromOuputLineIndex;outputLineIndex<toOutputLineIndex;outputLineIndex++){let globalIndex=globalStartIndex+outputLineIndex-fromOuputLineIndex;needed[globalIndex]?result[globalIndex]=this.getViewLineData(model,modelLineNumber,outputLineIndex):result[globalIndex]=null}}getModelColumnOfViewPosition(outputLineIndex,outputColumn){if(!this._isVisible)throw new Error("Not supported");let adjustedColumn=outputColumn-1;return outputLineIndex>0&&(adjustedColumn<this._lineBreakData.wrappedTextIndentLength?adjustedColumn=0:adjustedColumn-=this._lineBreakData.wrappedTextIndentLength),this._lineBreakData.getInputOffsetOfOutputPosition(outputLineIndex,adjustedColumn)+1}getViewPositionOfModelPosition(deltaLineNumber,inputColumn,affinity=2/* None */){if(!this._isVisible)throw new Error("Not supported");let r=this._lineBreakData.getOutputPositionOfInputOffset(inputColumn-1,affinity),outputLineIndex=r.outputLineIndex,outputColumn=r.outputOffset+1;
//		console.log('in -> out ' + deltaLineNumber + ',' + inputColumn + ' ===> ' + (deltaLineNumber+outputLineIndex) + ',' + outputColumn);
return outputLineIndex>0&&(outputColumn+=this._lineBreakData.wrappedTextIndentLength),new core_position/* Position */.L(deltaLineNumber+outputLineIndex,outputColumn)}getViewLineNumberOfModelPosition(deltaLineNumber,inputColumn){if(!this._isVisible)throw new Error("Not supported");const r=this._lineBreakData.getOutputPositionOfInputOffset(inputColumn-1);return deltaLineNumber+r.outputLineIndex}normalizePosition(model,modelLineNumber,outputLineIndex,outputPosition,affinity){if(null!==this._lineBreakData.injectionOffsets){const baseViewLineNumber=outputPosition.lineNumber-outputLineIndex,offsetInUnwrappedLine=this._lineBreakData.outputPositionToOffsetInUnwrappedLine(outputLineIndex,outputPosition.column-1),normalizedOffsetInUnwrappedLine=this._lineBreakData.normalizeOffsetAroundInjections(offsetInUnwrappedLine,affinity);if(normalizedOffsetInUnwrappedLine!==offsetInUnwrappedLine)
// injected text caused a change
return this._lineBreakData.getOutputPositionOfOffsetInUnwrappedLine(normalizedOffsetInUnwrappedLine,affinity).toPosition(baseViewLineNumber,this._lineBreakData.wrappedTextIndentLength)}if(0/* Left */===affinity){if(outputLineIndex>0&&outputPosition.column===this._getViewLineMinColumn(outputLineIndex))return new core_position/* Position */.L(outputPosition.lineNumber-1,this.getViewLineMaxColumn(model,modelLineNumber,outputLineIndex-1))}else if(1/* Right */===affinity){const maxOutputLineIndex=this.getViewLineCount()-1;if(outputLineIndex<maxOutputLineIndex&&outputPosition.column===this.getViewLineMaxColumn(model,modelLineNumber,outputLineIndex))return new core_position/* Position */.L(outputPosition.lineNumber+1,this._getViewLineMinColumn(outputLineIndex+1))}return outputPosition}getInjectedTextAt(outputLineIndex,outputColumn){return this._lineBreakData.getInjectedText(outputLineIndex,outputColumn-1)}}let _spaces=[""];function spaces(count){if(count>=_spaces.length)for(let i=1;i<=count;i++)_spaces[i]=_makeSpaces(i);return _spaces[count]}function _makeSpaces(count){return new Array(count+1).join(" ")}function createSplitLine(lineBreakData,isVisible){return null===lineBreakData?
// No mapping needed
isVisible?VisibleIdentitySplitLine.INSTANCE:InvisibleIdentitySplitLine.INSTANCE:new SplitLine(lineBreakData,isVisible)}class IdentityCoordinatesConverter{constructor(lines){this._lines=lines}_validPosition(pos){return this._lines.model.validatePosition(pos)}_validRange(range){return this._lines.model.validateRange(range)}
// View -> Model conversion and related methods
convertViewPositionToModelPosition(viewPosition){return this._validPosition(viewPosition)}convertViewRangeToModelRange(viewRange){return this._validRange(viewRange)}validateViewPosition(_viewPosition,expectedModelPosition){return this._validPosition(expectedModelPosition)}validateViewRange(_viewRange,expectedModelRange){return this._validRange(expectedModelRange)}
// Model -> View conversion and related methods
convertModelPositionToViewPosition(modelPosition){return this._validPosition(modelPosition)}convertModelRangeToViewRange(modelRange){return this._validRange(modelRange)}modelPositionIsVisible(modelPosition){const lineCount=this._lines.model.getLineCount();return!(modelPosition.lineNumber<1||modelPosition.lineNumber>lineCount)}getModelLineViewLineCount(modelLineNumber){return 1}getViewLineNumberOfModelPosition(modelLineNumber,modelColumn){return modelLineNumber}}class IdentityLinesCollection{constructor(model){this.model=model}dispose(){}createCoordinatesConverter(){return new IdentityCoordinatesConverter(this)}getHiddenAreas(){return[]}setHiddenAreas(_ranges){return!1}setTabSize(_newTabSize){return!1}setWrappingSettings(_fontInfo,_wrappingStrategy,_wrappingColumn,_wrappingIndent){return!1}createLineBreaksComputer(){let result=[];return{addRequest:(lineText,injectedText,previousLineBreakData)=>{result.push(null)},finalize:()=>result}}onModelFlushed(){}onModelLinesDeleted(_versionId,fromLineNumber,toLineNumber){return new viewEvents/* ViewLinesDeletedEvent */.vk(fromLineNumber,toLineNumber)}onModelLinesInserted(_versionId,fromLineNumber,toLineNumber,lineBreaks){return new viewEvents/* ViewLinesInsertedEvent */.K9(fromLineNumber,toLineNumber)}onModelLineChanged(_versionId,lineNumber,lineBreakData){return[!1,new viewEvents/* ViewLinesChangedEvent */.il(lineNumber,lineNumber),null,null]}acceptVersionId(_versionId){}getViewLineCount(){return this.model.getLineCount()}getActiveIndentGuide(viewLineNumber,_minLineNumber,_maxLineNumber){return{startLineNumber:viewLineNumber,endLineNumber:viewLineNumber,indent:0}}getViewLinesBracketGuides(startLineNumber,endLineNumber,activePosition){return new Array(endLineNumber-startLineNumber+1).fill([])}getViewLinesIndentGuides(viewStartLineNumber,viewEndLineNumber){const viewLineCount=viewEndLineNumber-viewStartLineNumber+1;let result=new Array(viewLineCount);for(let i=0;i<viewLineCount;i++)result[i]=0;return result}getViewLineContent(viewLineNumber){return this.model.getLineContent(viewLineNumber)}getViewLineLength(viewLineNumber){return this.model.getLineLength(viewLineNumber)}getViewLineMinColumn(viewLineNumber){return this.model.getLineMinColumn(viewLineNumber)}getViewLineMaxColumn(viewLineNumber){return this.model.getLineMaxColumn(viewLineNumber)}getViewLineData(viewLineNumber){let lineTokens=this.model.getLineTokens(viewLineNumber),lineContent=lineTokens.getLineContent();return new viewModel/* ViewLineData */.IP(lineContent,!1,1,lineContent.length+1,0,lineTokens.inflate(),null)}getViewLinesData(viewStartLineNumber,viewEndLineNumber,needed){const lineCount=this.model.getLineCount();viewStartLineNumber=Math.min(Math.max(1,viewStartLineNumber),lineCount),viewEndLineNumber=Math.min(Math.max(1,viewEndLineNumber),lineCount);let result=[];for(let lineNumber=viewStartLineNumber;lineNumber<=viewEndLineNumber;lineNumber++){let idx=lineNumber-viewStartLineNumber;needed[idx]||(result[idx]=null),result[idx]=this.getViewLineData(lineNumber)}return result}getDecorationsInRange(range,ownerId,filterOutValidation){return this.model.getDecorationsInRange(range,ownerId,filterOutValidation)}normalizePosition(position,affinity){return this.model.normalizePosition(position,affinity)}getLineIndentColumn(lineNumber){return this.model.getLineIndentColumn(lineNumber)}getInjectedTextAt(position){
// Identity lines collection does not support injected text.
return null}}// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class ViewModelDecorations{constructor(editorId,model,configuration,linesCollection,coordinatesConverter){this.editorId=editorId,this.model=model,this.configuration=configuration,this._linesCollection=linesCollection,this._coordinatesConverter=coordinatesConverter,this._decorationsCache=Object.create(null),this._cachedModelDecorationsResolver=null,this._cachedModelDecorationsResolverViewRange=null}_clearCachedModelDecorationsResolver(){this._cachedModelDecorationsResolver=null,this._cachedModelDecorationsResolverViewRange=null}dispose(){this._decorationsCache=Object.create(null),this._clearCachedModelDecorationsResolver()}reset(){this._decorationsCache=Object.create(null),this._clearCachedModelDecorationsResolver()}onModelDecorationsChanged(){this._decorationsCache=Object.create(null),this._clearCachedModelDecorationsResolver()}onLineMappingChanged(){this._decorationsCache=Object.create(null),this._clearCachedModelDecorationsResolver()}_getOrCreateViewModelDecoration(modelDecoration){const id=modelDecoration.id;let r=this._decorationsCache[id];if(!r){const modelRange=modelDecoration.range,options=modelDecoration.options;let viewRange;if(options.isWholeLine){const start=this._coordinatesConverter.convertModelPositionToViewPosition(new core_position/* Position */.L(modelRange.startLineNumber,1),0/* Left */),end=this._coordinatesConverter.convertModelPositionToViewPosition(new core_position/* Position */.L(modelRange.endLineNumber,this.model.getLineMaxColumn(modelRange.endLineNumber)),1/* Right */);viewRange=new core_range/* Range */.e(start.lineNumber,start.column,end.lineNumber,end.column)}else
// For backwards compatibility reasons, we want injected text before any decoration.
// Thus, move decorations to the right.
viewRange=this._coordinatesConverter.convertModelRangeToViewRange(modelRange,1/* Right */);r=new viewModel/* ViewModelDecoration */.$l(viewRange,options),this._decorationsCache[id]=r}return r}getDecorationsViewportData(viewRange){let cacheIsValid=null!==this._cachedModelDecorationsResolver;return cacheIsValid=cacheIsValid&&viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange),cacheIsValid||(this._cachedModelDecorationsResolver=this._getDecorationsViewportData(viewRange),this._cachedModelDecorationsResolverViewRange=viewRange),this._cachedModelDecorationsResolver}_getDecorationsViewportData(viewportRange){const modelDecorations=this._linesCollection.getDecorationsInRange(viewportRange,this.editorId,(0,editorOptions/* filterValidationDecorations */.$J)(this.configuration.options)),startLineNumber=viewportRange.startLineNumber,endLineNumber=viewportRange.endLineNumber;let decorationsInViewport=[],decorationsInViewportLen=0,inlineDecorations=[];for(let j=startLineNumber;j<=endLineNumber;j++)inlineDecorations[j-startLineNumber]=[];for(let i=0,len=modelDecorations.length;i<len;i++){let modelDecoration=modelDecorations[i],decorationOptions=modelDecoration.options,viewModelDecoration=this._getOrCreateViewModelDecoration(modelDecoration),viewRange=viewModelDecoration.range;if(decorationsInViewport[decorationsInViewportLen++]=viewModelDecoration,decorationOptions.inlineClassName){let inlineDecoration=new viewModel/* InlineDecoration */.$t(viewRange,decorationOptions.inlineClassName,decorationOptions.inlineClassNameAffectsLetterSpacing?3/* RegularAffectingLetterSpacing */:0/* Regular */),intersectedStartLineNumber=Math.max(startLineNumber,viewRange.startLineNumber),intersectedEndLineNumber=Math.min(endLineNumber,viewRange.endLineNumber);for(let j=intersectedStartLineNumber;j<=intersectedEndLineNumber;j++)inlineDecorations[j-startLineNumber].push(inlineDecoration)}if(decorationOptions.beforeContentClassName&&startLineNumber<=viewRange.startLineNumber&&viewRange.startLineNumber<=endLineNumber){let inlineDecoration=new viewModel/* InlineDecoration */.$t(new core_range/* Range */.e(viewRange.startLineNumber,viewRange.startColumn,viewRange.startLineNumber,viewRange.startColumn),decorationOptions.beforeContentClassName,1/* Before */);inlineDecorations[viewRange.startLineNumber-startLineNumber].push(inlineDecoration)}if(decorationOptions.afterContentClassName&&startLineNumber<=viewRange.endLineNumber&&viewRange.endLineNumber<=endLineNumber){let inlineDecoration=new viewModel/* InlineDecoration */.$t(new core_range/* Range */.e(viewRange.endLineNumber,viewRange.endColumn,viewRange.endLineNumber,viewRange.endColumn),decorationOptions.afterContentClassName,2/* After */);inlineDecorations[viewRange.endLineNumber-startLineNumber].push(inlineDecoration)}}return{decorations:decorationsInViewport,inlineDecorations:inlineDecorations}}}
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/async.js
var common_async=__webpack_require__(715393),platform=__webpack_require__(901432),cursor=__webpack_require__(926653),cursorCommon=__webpack_require__(533181),modesRegistry=__webpack_require__(571144);
// EXTERNAL MODULE: ./node_modules/monaco-editor/esm/vs/base/common/platform.js
// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const USE_IDENTITY_LINES_COLLECTION=!0;class ViewModel extends lifecycle/* Disposable */.JT{constructor(editorId,configuration,model,domLineBreaksComputerFactory,monospaceLineBreaksComputerFactory,scheduleAtNextAnimationFrame){if(super(),this._editorId=editorId,this._configuration=configuration,this.model=model,this._eventDispatcher=new viewModelEventDispatcher/* ViewModelEventDispatcher */.nu,this.onEvent=this._eventDispatcher.onEvent,this.cursorConfig=new cursorCommon/* CursorConfiguration */.LM(this.model.getLanguageId(),this.model.getOptions(),this._configuration),this._tokenizeViewportSoon=this._register(new common_async/* RunOnceScheduler */.pY((()=>this.tokenizeViewport()),50)),this._updateConfigurationViewLineCount=this._register(new common_async/* RunOnceScheduler */.pY((()=>this._updateConfigurationViewLineCountNow()),0)),this._hasFocus=!1,this._viewportStartLine=-1,this._viewportStartLineTrackedRange=null,this._viewportStartLineDelta=0,USE_IDENTITY_LINES_COLLECTION&&this.model.isTooLargeForTokenization())this._lines=new IdentityLinesCollection(this.model);else{const options=this._configuration.options,fontInfo=options.get(43/* fontInfo */),wrappingStrategy=options.get(123/* wrappingStrategy */),wrappingInfo=options.get(130/* wrappingInfo */),wrappingIndent=options.get(122/* wrappingIndent */);this._lines=new SplitLinesCollection(this._editorId,this.model,domLineBreaksComputerFactory,monospaceLineBreaksComputerFactory,fontInfo,this.model.getOptions().tabSize,wrappingStrategy,wrappingInfo.wrappingColumn,wrappingIndent)}this.coordinatesConverter=this._lines.createCoordinatesConverter(),this._cursor=this._register(new cursor/* CursorsController */.U(model,this,this.coordinatesConverter,this.cursorConfig)),this.viewLayout=this._register(new ViewLayout(this._configuration,this.getLineCount(),scheduleAtNextAnimationFrame)),this._register(this.viewLayout.onDidScroll((e=>{e.scrollTopChanged&&this._tokenizeViewportSoon.schedule(),this._eventDispatcher.emitSingleViewEvent(new viewEvents/* ViewScrollChangedEvent */.Ay(e)),this._eventDispatcher.emitOutgoingEvent(new viewModelEventDispatcher/* ScrollChangedEvent */.Pt(e.oldScrollWidth,e.oldScrollLeft,e.oldScrollHeight,e.oldScrollTop,e.scrollWidth,e.scrollLeft,e.scrollHeight,e.scrollTop))}))),this._register(this.viewLayout.onDidContentSizeChange((e=>{this._eventDispatcher.emitOutgoingEvent(e)}))),this._decorations=new ViewModelDecorations(this._editorId,this.model,this._configuration,this._lines,this.coordinatesConverter),this._registerModelEvents(),this._register(this._configuration.onDidChangeFast((e=>{try{const eventsCollector=this._eventDispatcher.beginEmitViewEvents();this._onConfigurationChanged(eventsCollector,e)}finally{this._eventDispatcher.endEmitViewEvents()}}))),this._register(minimapTokensColorTracker/* MinimapTokensColorTracker */.E.getInstance().onDidChange((()=>{this._eventDispatcher.emitSingleViewEvent(new viewEvents/* ViewTokensColorsChangedEvent */.uc)}))),this._updateConfigurationViewLineCountNow()}dispose(){
// First remove listeners, as disposing the lines might end up sending
// model decoration changed events ... and we no longer care about them ...
super.dispose(),this._decorations.dispose(),this._lines.dispose(),this.invalidateMinimapColorCache(),this._viewportStartLineTrackedRange=this.model._setTrackedRange(this._viewportStartLineTrackedRange,null,1/* NeverGrowsWhenTypingAtEdges */),this._eventDispatcher.dispose()}createLineBreaksComputer(){return this._lines.createLineBreaksComputer()}addViewEventHandler(eventHandler){this._eventDispatcher.addViewEventHandler(eventHandler)}removeViewEventHandler(eventHandler){this._eventDispatcher.removeViewEventHandler(eventHandler)}_updateConfigurationViewLineCountNow(){this._configuration.setViewLineCount(this._lines.getViewLineCount())}tokenizeViewport(){const linesViewportData=this.viewLayout.getLinesViewportData(),viewVisibleRange=new core_range/* Range */.e(linesViewportData.startLineNumber,this.getLineMinColumn(linesViewportData.startLineNumber),linesViewportData.endLineNumber,this.getLineMaxColumn(linesViewportData.endLineNumber)),modelVisibleRanges=this._toModelVisibleRanges(viewVisibleRange);for(const modelVisibleRange of modelVisibleRanges)this.model.tokenizeViewport(modelVisibleRange.startLineNumber,modelVisibleRange.endLineNumber)}setHasFocus(hasFocus){this._hasFocus=hasFocus,this._cursor.setHasFocus(hasFocus),this._eventDispatcher.emitSingleViewEvent(new viewEvents/* ViewFocusChangedEvent */.SJ(hasFocus)),this._eventDispatcher.emitOutgoingEvent(new viewModelEventDispatcher/* FocusChangedEvent */.Zw(!hasFocus,hasFocus))}onCompositionStart(){this._eventDispatcher.emitSingleViewEvent(new viewEvents/* ViewCompositionStartEvent */.JP)}onCompositionEnd(){this._eventDispatcher.emitSingleViewEvent(new viewEvents/* ViewCompositionEndEvent */.IN)}onDidColorThemeChange(){this._eventDispatcher.emitSingleViewEvent(new viewEvents/* ViewThemeChangedEvent */.Hf)}_onConfigurationChanged(eventsCollector,e){
// We might need to restore the current centered view range, so save it (if available)
let previousViewportStartModelPosition=null;if(-1!==this._viewportStartLine){let previousViewportStartViewPosition=new core_position/* Position */.L(this._viewportStartLine,this.getLineMinColumn(this._viewportStartLine));previousViewportStartModelPosition=this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition)}let restorePreviousViewportStart=!1;const options=this._configuration.options,fontInfo=options.get(43/* fontInfo */),wrappingStrategy=options.get(123/* wrappingStrategy */),wrappingInfo=options.get(130/* wrappingInfo */),wrappingIndent=options.get(122/* wrappingIndent */);if(this._lines.setWrappingSettings(fontInfo,wrappingStrategy,wrappingInfo.wrappingColumn,wrappingIndent)&&(eventsCollector.emitViewEvent(new viewEvents/* ViewFlushedEvent */.CL),eventsCollector.emitViewEvent(new viewEvents/* ViewLineMappingChangedEvent */.d8),eventsCollector.emitViewEvent(new viewEvents/* ViewDecorationsChangedEvent */.vA(null)),this._cursor.onLineMappingChanged(eventsCollector),this._decorations.onLineMappingChanged(),this.viewLayout.onFlushed(this.getLineCount()),0!==this.viewLayout.getCurrentScrollTop()&&(
// Never change the scroll position from 0 to something else...
restorePreviousViewportStart=!0),this._updateConfigurationViewLineCount.schedule()),e.hasChanged(80/* readOnly */)&&(
// Must read again all decorations due to readOnly filtering
this._decorations.reset(),eventsCollector.emitViewEvent(new viewEvents/* ViewDecorationsChangedEvent */.vA(null))),eventsCollector.emitViewEvent(new viewEvents/* ViewConfigurationChangedEvent */.x4(e)),this.viewLayout.onConfigurationChanged(e),restorePreviousViewportStart&&previousViewportStartModelPosition){const viewPosition=this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition),viewPositionTop=this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);this.viewLayout.setScrollPosition({scrollTop:viewPositionTop+this._viewportStartLineDelta},1/* Immediate */)}cursorCommon/* CursorConfiguration */.LM.shouldRecreate(e)&&(this.cursorConfig=new cursorCommon/* CursorConfiguration */.LM(this.model.getLanguageId(),this.model.getOptions(),this._configuration),this._cursor.updateConfiguration(this.cursorConfig))}_registerModelEvents(){this._register(this.model.onDidChangeContentOrInjectedText((e=>{try{const eventsCollector=this._eventDispatcher.beginEmitViewEvents();let hadOtherModelChange=!1,hadModelLineChangeThatChangedLineMapping=!1;const changes=e.changes,versionId=e instanceof textModelEvents/* ModelRawContentChangedEvent */.dQ?e.versionId:null,lineBreaksComputer=this._lines.createLineBreaksComputer();for(const change of changes)switch(change.changeType){case 4/* LinesInserted */:for(let lineIdx=0;lineIdx<change.detail.length;lineIdx++){const line=change.detail[lineIdx];let injectedText=change.injectedTexts[lineIdx];injectedText&&(injectedText=injectedText.filter((element=>!element.ownerId||element.ownerId===this._editorId))),lineBreaksComputer.addRequest(line,injectedText,null)}break;case 2/* LineChanged */:{let injectedText=null;change.injectedText&&(injectedText=change.injectedText.filter((element=>!element.ownerId||element.ownerId===this._editorId))),lineBreaksComputer.addRequest(change.detail,injectedText,null);break}}const lineBreaks=lineBreaksComputer.finalize();let lineBreaksOffset=0;for(const change of changes)switch(change.changeType){case 1/* Flush */:this._lines.onModelFlushed(),eventsCollector.emitViewEvent(new viewEvents/* ViewFlushedEvent */.CL),this._decorations.reset(),this.viewLayout.onFlushed(this.getLineCount()),hadOtherModelChange=!0;break;case 3/* LinesDeleted */:{const linesDeletedEvent=this._lines.onModelLinesDeleted(versionId,change.fromLineNumber,change.toLineNumber);null!==linesDeletedEvent&&(eventsCollector.emitViewEvent(linesDeletedEvent),this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber,linesDeletedEvent.toLineNumber)),hadOtherModelChange=!0;break}case 4/* LinesInserted */:{const insertedLineBreaks=lineBreaks.slice(lineBreaksOffset,lineBreaksOffset+change.detail.length);lineBreaksOffset+=change.detail.length;const linesInsertedEvent=this._lines.onModelLinesInserted(versionId,change.fromLineNumber,change.toLineNumber,insertedLineBreaks);null!==linesInsertedEvent&&(eventsCollector.emitViewEvent(linesInsertedEvent),this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber,linesInsertedEvent.toLineNumber)),hadOtherModelChange=!0;break}case 2/* LineChanged */:{const changedLineBreakData=lineBreaks[lineBreaksOffset];lineBreaksOffset++;const[lineMappingChanged,linesChangedEvent,linesInsertedEvent,linesDeletedEvent]=this._lines.onModelLineChanged(versionId,change.lineNumber,changedLineBreakData);hadModelLineChangeThatChangedLineMapping=lineMappingChanged,linesChangedEvent&&eventsCollector.emitViewEvent(linesChangedEvent),linesInsertedEvent&&(eventsCollector.emitViewEvent(linesInsertedEvent),this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber,linesInsertedEvent.toLineNumber)),linesDeletedEvent&&(eventsCollector.emitViewEvent(linesDeletedEvent),this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber,linesDeletedEvent.toLineNumber));break}case 5/* EOLChanged */:
// Nothing to do. The new version will be accepted below
break}null!==versionId&&this._lines.acceptVersionId(versionId),this.viewLayout.onHeightMaybeChanged(),!hadOtherModelChange&&hadModelLineChangeThatChangedLineMapping&&(eventsCollector.emitViewEvent(new viewEvents/* ViewLineMappingChangedEvent */.d8),eventsCollector.emitViewEvent(new viewEvents/* ViewDecorationsChangedEvent */.vA(null)),this._cursor.onLineMappingChanged(eventsCollector),this._decorations.onLineMappingChanged())}finally{this._eventDispatcher.endEmitViewEvents()}
// Update the configuration and reset the centered view line
// Recover viewport
if(this._viewportStartLine=-1,this._configuration.setMaxLineNumber(this.model.getLineCount()),this._updateConfigurationViewLineCountNow(),!this._hasFocus&&this.model.getAttachedEditorCount()>=2&&this._viewportStartLineTrackedRange){const modelRange=this.model._getTrackedRange(this._viewportStartLineTrackedRange);if(modelRange){const viewPosition=this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition()),viewPositionTop=this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);this.viewLayout.setScrollPosition({scrollTop:viewPositionTop+this._viewportStartLineDelta},1/* Immediate */)}}try{const eventsCollector=this._eventDispatcher.beginEmitViewEvents();this._cursor.onModelContentChanged(eventsCollector,e)}finally{this._eventDispatcher.endEmitViewEvents()}}))),this._register(this.model.onDidChangeTokens((e=>{let viewRanges=[];for(let j=0,lenJ=e.ranges.length;j<lenJ;j++){const modelRange=e.ranges[j],viewStartLineNumber=this.coordinatesConverter.convertModelPositionToViewPosition(new core_position/* Position */.L(modelRange.fromLineNumber,1)).lineNumber,viewEndLineNumber=this.coordinatesConverter.convertModelPositionToViewPosition(new core_position/* Position */.L(modelRange.toLineNumber,this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;viewRanges[j]={fromLineNumber:viewStartLineNumber,toLineNumber:viewEndLineNumber}}this._eventDispatcher.emitSingleViewEvent(new viewEvents/* ViewTokensChangedEvent */.H9(viewRanges)),e.tokenizationSupportChanged&&this._tokenizeViewportSoon.schedule()}))),this._register(this.model.onDidChangeLanguageConfiguration((e=>{this._eventDispatcher.emitSingleViewEvent(new viewEvents/* ViewLanguageConfigurationEvent */._0),this.cursorConfig=new cursorCommon/* CursorConfiguration */.LM(this.model.getLanguageId(),this.model.getOptions(),this._configuration),this._cursor.updateConfiguration(this.cursorConfig)}))),this._register(this.model.onDidChangeLanguage((e=>{this.cursorConfig=new cursorCommon/* CursorConfiguration */.LM(this.model.getLanguageId(),this.model.getOptions(),this._configuration),this._cursor.updateConfiguration(this.cursorConfig)}))),this._register(this.model.onDidChangeOptions((e=>{
// A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here
if(this._lines.setTabSize(this.model.getOptions().tabSize)){try{const eventsCollector=this._eventDispatcher.beginEmitViewEvents();eventsCollector.emitViewEvent(new viewEvents/* ViewFlushedEvent */.CL),eventsCollector.emitViewEvent(new viewEvents/* ViewLineMappingChangedEvent */.d8),eventsCollector.emitViewEvent(new viewEvents/* ViewDecorationsChangedEvent */.vA(null)),this._cursor.onLineMappingChanged(eventsCollector),this._decorations.onLineMappingChanged(),this.viewLayout.onFlushed(this.getLineCount())}finally{this._eventDispatcher.endEmitViewEvents()}this._updateConfigurationViewLineCount.schedule()}this.cursorConfig=new cursorCommon/* CursorConfiguration */.LM(this.model.getLanguageId(),this.model.getOptions(),this._configuration),this._cursor.updateConfiguration(this.cursorConfig)}))),this._register(this.model.onDidChangeDecorations((e=>{this._decorations.onModelDecorationsChanged(),this._eventDispatcher.emitSingleViewEvent(new viewEvents/* ViewDecorationsChangedEvent */.vA(e))})))}setHiddenAreas(ranges){let lineMappingChanged=!1;try{const eventsCollector=this._eventDispatcher.beginEmitViewEvents();lineMappingChanged=this._lines.setHiddenAreas(ranges),lineMappingChanged&&(eventsCollector.emitViewEvent(new viewEvents/* ViewFlushedEvent */.CL),eventsCollector.emitViewEvent(new viewEvents/* ViewLineMappingChangedEvent */.d8),eventsCollector.emitViewEvent(new viewEvents/* ViewDecorationsChangedEvent */.vA(null)),this._cursor.onLineMappingChanged(eventsCollector),this._decorations.onLineMappingChanged(),this.viewLayout.onFlushed(this.getLineCount()),this.viewLayout.onHeightMaybeChanged())}finally{this._eventDispatcher.endEmitViewEvents()}this._updateConfigurationViewLineCount.schedule(),lineMappingChanged&&this._eventDispatcher.emitOutgoingEvent(new viewModelEventDispatcher/* ViewZonesChangedEvent */.Ic)}getVisibleRangesPlusViewportAboveBelow(){const layoutInfo=this._configuration.options.get(129/* layoutInfo */),lineHeight=this._configuration.options.get(58/* lineHeight */),linesAround=Math.max(20,Math.round(layoutInfo.height/lineHeight)),partialData=this.viewLayout.getLinesViewportData(),startViewLineNumber=Math.max(1,partialData.completelyVisibleStartLineNumber-linesAround),endViewLineNumber=Math.min(this.getLineCount(),partialData.completelyVisibleEndLineNumber+linesAround);return this._toModelVisibleRanges(new core_range/* Range */.e(startViewLineNumber,this.getLineMinColumn(startViewLineNumber),endViewLineNumber,this.getLineMaxColumn(endViewLineNumber)))}getVisibleRanges(){const visibleViewRange=this.getCompletelyVisibleViewRange();return this._toModelVisibleRanges(visibleViewRange)}_toModelVisibleRanges(visibleViewRange){const visibleRange=this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange),hiddenAreas=this._lines.getHiddenAreas();if(0===hiddenAreas.length)return[visibleRange];let result=[],resultLen=0,startLineNumber=visibleRange.startLineNumber,startColumn=visibleRange.startColumn,endLineNumber=visibleRange.endLineNumber,endColumn=visibleRange.endColumn;for(let i=0,len=hiddenAreas.length;i<len;i++){const hiddenStartLineNumber=hiddenAreas[i].startLineNumber,hiddenEndLineNumber=hiddenAreas[i].endLineNumber;hiddenEndLineNumber<startLineNumber||(hiddenStartLineNumber>endLineNumber||(startLineNumber<hiddenStartLineNumber&&(result[resultLen++]=new core_range/* Range */.e(startLineNumber,startColumn,hiddenStartLineNumber-1,this.model.getLineMaxColumn(hiddenStartLineNumber-1))),startLineNumber=hiddenEndLineNumber+1,startColumn=1))}return(startLineNumber<endLineNumber||startLineNumber===endLineNumber&&startColumn<endColumn)&&(result[resultLen++]=new core_range/* Range */.e(startLineNumber,startColumn,endLineNumber,endColumn)),result}getCompletelyVisibleViewRange(){const partialData=this.viewLayout.getLinesViewportData(),startViewLineNumber=partialData.completelyVisibleStartLineNumber,endViewLineNumber=partialData.completelyVisibleEndLineNumber;return new core_range/* Range */.e(startViewLineNumber,this.getLineMinColumn(startViewLineNumber),endViewLineNumber,this.getLineMaxColumn(endViewLineNumber))}getCompletelyVisibleViewRangeAtScrollTop(scrollTop){const partialData=this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop),startViewLineNumber=partialData.completelyVisibleStartLineNumber,endViewLineNumber=partialData.completelyVisibleEndLineNumber;return new core_range/* Range */.e(startViewLineNumber,this.getLineMinColumn(startViewLineNumber),endViewLineNumber,this.getLineMaxColumn(endViewLineNumber))}saveState(){const compatViewState=this.viewLayout.saveState(),scrollTop=compatViewState.scrollTop,firstViewLineNumber=this.viewLayout.getLineNumberAtVerticalOffset(scrollTop),firstPosition=this.coordinatesConverter.convertViewPositionToModelPosition(new core_position/* Position */.L(firstViewLineNumber,this.getLineMinColumn(firstViewLineNumber))),firstPositionDeltaTop=this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber)-scrollTop;return{scrollLeft:compatViewState.scrollLeft,firstPosition:firstPosition,firstPositionDeltaTop:firstPositionDeltaTop}}reduceRestoreState(state){if("undefined"===typeof state.firstPosition)
// This is a view state serialized by an older version
return this._reduceRestoreStateCompatibility(state);const modelPosition=this.model.validatePosition(state.firstPosition),viewPosition=this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition),scrollTop=this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber)-state.firstPositionDeltaTop;return{scrollLeft:state.scrollLeft,scrollTop:scrollTop}}_reduceRestoreStateCompatibility(state){return{scrollLeft:state.scrollLeft,scrollTop:state.scrollTopWithoutViewZones}}getTabSize(){return this.model.getOptions().tabSize}getTextModelOptions(){return this.model.getOptions()}getLineCount(){return this._lines.getViewLineCount()}
/**
     * Gives a hint that a lot of requests are about to come in for these line numbers.
     */setViewport(startLineNumber,endLineNumber,centeredLineNumber){this._viewportStartLine=startLineNumber;let position=this.coordinatesConverter.convertViewPositionToModelPosition(new core_position/* Position */.L(startLineNumber,this.getLineMinColumn(startLineNumber)));this._viewportStartLineTrackedRange=this.model._setTrackedRange(this._viewportStartLineTrackedRange,new core_range/* Range */.e(position.lineNumber,position.column,position.lineNumber,position.column),1/* NeverGrowsWhenTypingAtEdges */);const viewportStartLineTop=this.viewLayout.getVerticalOffsetForLineNumber(startLineNumber),scrollTop=this.viewLayout.getCurrentScrollTop();this._viewportStartLineDelta=scrollTop-viewportStartLineTop}getActiveIndentGuide(lineNumber,minLineNumber,maxLineNumber){return this._lines.getActiveIndentGuide(lineNumber,minLineNumber,maxLineNumber)}getLinesIndentGuides(startLineNumber,endLineNumber){return this._lines.getViewLinesIndentGuides(startLineNumber,endLineNumber)}getBracketGuidesInRangeByLine(startLineNumber,endLineNumber,activePosition,options){return this._lines.getViewLinesBracketGuides(startLineNumber,endLineNumber,activePosition,options)}getLineContent(lineNumber){return this._lines.getViewLineContent(lineNumber)}getLineLength(lineNumber){return this._lines.getViewLineLength(lineNumber)}getLineMinColumn(lineNumber){return this._lines.getViewLineMinColumn(lineNumber)}getLineMaxColumn(lineNumber){return this._lines.getViewLineMaxColumn(lineNumber)}getLineFirstNonWhitespaceColumn(lineNumber){const result=strings/* firstNonWhitespaceIndex */.LC(this.getLineContent(lineNumber));return-1===result?0:result+1}getLineLastNonWhitespaceColumn(lineNumber){const result=strings/* lastNonWhitespaceIndex */.ow(this.getLineContent(lineNumber));return-1===result?0:result+2}getDecorationsInViewport(visibleRange){return this._decorations.getDecorationsViewportData(visibleRange).decorations}getInjectedTextAt(viewPosition){return this._lines.getInjectedTextAt(viewPosition)}getViewLineRenderingData(visibleRange,lineNumber){let mightContainRTL=this.model.mightContainRTL(),mightContainNonBasicASCII=this.model.mightContainNonBasicASCII(),tabSize=this.getTabSize(),lineData=this._lines.getViewLineData(lineNumber),allInlineDecorations=this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations,inlineDecorations=allInlineDecorations[lineNumber-visibleRange.startLineNumber];return lineData.inlineDecorations&&(inlineDecorations=[...inlineDecorations,...lineData.inlineDecorations.map((d=>d.toInlineDecoration(lineNumber)))]),new viewModel/* ViewLineRenderingData */.wA(lineData.minColumn,lineData.maxColumn,lineData.content,lineData.continuesWithWrappedLine,mightContainRTL,mightContainNonBasicASCII,lineData.tokens,inlineDecorations,tabSize,lineData.startVisibleColumn)}getViewLineData(lineNumber){return this._lines.getViewLineData(lineNumber)}getMinimapLinesRenderingData(startLineNumber,endLineNumber,needed){let result=this._lines.getViewLinesData(startLineNumber,endLineNumber,needed);return new viewModel/* MinimapLinesRenderingData */.ud(this.getTabSize(),result)}getAllOverviewRulerDecorations(theme){const decorations=this.model.getOverviewRulerDecorations(this._editorId,(0,editorOptions/* filterValidationDecorations */.$J)(this._configuration.options)),result=new OverviewRulerDecorations;for(const decoration of decorations){const decorationOptions=decoration.options,opts=decorationOptions.overviewRuler;if(!opts)continue;const lane=opts.position;if(0===lane)continue;const color=opts.getColor(theme),viewStartLineNumber=this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber,decoration.range.startColumn),viewEndLineNumber=this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber,decoration.range.endColumn);result.accept(color,decorationOptions.zIndex,viewStartLineNumber,viewEndLineNumber,lane)}return result.asArray}invalidateOverviewRulerColorCache(){const decorations=this.model.getOverviewRulerDecorations();for(const decoration of decorations){const opts=decoration.options.overviewRuler;opts&&opts.invalidateCachedColor()}}invalidateMinimapColorCache(){const decorations=this.model.getAllDecorations();for(const decoration of decorations){const opts=decoration.options.minimap;opts&&opts.invalidateCachedColor()}}getValueInRange(range,eol){const modelRange=this.coordinatesConverter.convertViewRangeToModelRange(range);return this.model.getValueInRange(modelRange,eol)}getModelLineMaxColumn(modelLineNumber){return this.model.getLineMaxColumn(modelLineNumber)}validateModelPosition(position){return this.model.validatePosition(position)}validateModelRange(range){return this.model.validateRange(range)}deduceModelPositionRelativeToViewPosition(viewAnchorPosition,deltaOffset,lineFeedCnt){const modelAnchor=this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);2===this.model.getEOL().length&&(
// This model uses CRLF, so the delta must take that into account
deltaOffset<0?deltaOffset-=lineFeedCnt:deltaOffset+=lineFeedCnt);const modelAnchorOffset=this.model.getOffsetAt(modelAnchor),resultOffset=modelAnchorOffset+deltaOffset;return this.model.getPositionAt(resultOffset)}getEOL(){return this.model.getEOL()}getPlainTextToCopy(modelRanges,emptySelectionClipboard,forceCRLF){const newLineCharacter=forceCRLF?"\r\n":this.model.getEOL();modelRanges=modelRanges.slice(0),modelRanges.sort(core_range/* Range */.e.compareRangesUsingStarts);let hasEmptyRange=!1,hasNonEmptyRange=!1;for(const range of modelRanges)range.isEmpty()?hasEmptyRange=!0:hasNonEmptyRange=!0;if(!hasNonEmptyRange){
// all ranges are empty
if(!emptySelectionClipboard)return"";const modelLineNumbers=modelRanges.map((r=>r.startLineNumber));let result="";for(let i=0;i<modelLineNumbers.length;i++)i>0&&modelLineNumbers[i-1]===modelLineNumbers[i]||(result+=this.model.getLineContent(modelLineNumbers[i])+newLineCharacter);return result}if(hasEmptyRange&&emptySelectionClipboard){
// mixed empty selections and non-empty selections
let result=[],prevModelLineNumber=0;for(const modelRange of modelRanges){const modelLineNumber=modelRange.startLineNumber;modelRange.isEmpty()?modelLineNumber!==prevModelLineNumber&&result.push(this.model.getLineContent(modelLineNumber)):result.push(this.model.getValueInRange(modelRange,forceCRLF?2/* CRLF */:0/* TextDefined */)),prevModelLineNumber=modelLineNumber}return 1===result.length?result[0]:result}let result=[];for(const modelRange of modelRanges)modelRange.isEmpty()||result.push(this.model.getValueInRange(modelRange,forceCRLF?2/* CRLF */:0/* TextDefined */));return 1===result.length?result[0]:result}getRichTextToCopy(modelRanges,emptySelectionClipboard){const languageId=this.model.getLanguageId();if(languageId===modesRegistry/* PLAINTEXT_MODE_ID */.XT)return null;if(1!==modelRanges.length)
// no multiple selection support at this time
return null;let range=modelRanges[0];if(range.isEmpty()){if(!emptySelectionClipboard)
// nothing to copy
return null;const lineNumber=range.startLineNumber;range=new core_range/* Range */.e(lineNumber,this.model.getLineMinColumn(lineNumber),lineNumber,this.model.getLineMaxColumn(lineNumber))}const fontInfo=this._configuration.options.get(43/* fontInfo */),colorMap=this._getColorMap(),hasBadChars=/[:;\\\/<>]/.test(fontInfo.fontFamily),useDefaultFontFamily=hasBadChars||fontInfo.fontFamily===editorOptions/* EDITOR_FONT_DEFAULTS */.hL.fontFamily;let fontFamily;if(useDefaultFontFamily)fontFamily=editorOptions/* EDITOR_FONT_DEFAULTS */.hL.fontFamily;else{fontFamily=fontInfo.fontFamily,fontFamily=fontFamily.replace(/"/g,"'");const hasQuotesOrIsList=/[,']/.test(fontFamily);if(!hasQuotesOrIsList){const needsQuotes=/[+ ]/.test(fontFamily);needsQuotes&&(fontFamily=`'${fontFamily}'`)}fontFamily=`${fontFamily}, ${editorOptions/* EDITOR_FONT_DEFAULTS */.hL.fontFamily}`}return{mode:languageId,html:`<div style="color: ${colorMap[1/* DefaultForeground */]};background-color: ${colorMap[2/* DefaultBackground */]};font-family: ${fontFamily};font-weight: ${fontInfo.fontWeight};font-size: ${fontInfo.fontSize}px;line-height: ${fontInfo.lineHeight}px;white-space: pre;">`+this._getHTMLToCopy(range,colorMap)+"</div>"}}_getHTMLToCopy(modelRange,colorMap){const startLineNumber=modelRange.startLineNumber,startColumn=modelRange.startColumn,endLineNumber=modelRange.endLineNumber,endColumn=modelRange.endColumn,tabSize=this.getTabSize();let result="";for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){const lineTokens=this.model.getLineTokens(lineNumber),lineContent=lineTokens.getLineContent(),startOffset=lineNumber===startLineNumber?startColumn-1:0,endOffset=lineNumber===endLineNumber?endColumn-1:lineContent.length;result+=""===lineContent?"<br>":(0,textToHtmlTokenizer/* tokenizeLineToHTML */.F)(lineContent,lineTokens.inflate(),colorMap,startOffset,endOffset,tabSize,platform/* isWindows */.ED)}return result}_getColorMap(){let colorMap=modes/* TokenizationRegistry */.RW.getColorMap(),result=["#000000"];if(colorMap)for(let i=1,len=colorMap.length;i<len;i++)result[i]=color/* Color */.Il.Format.CSS.formatHex(colorMap[i]);return result}
//#region model
pushStackElement(){this.model.pushStackElement()}
//#endregion
//#region cursor operations
getPrimaryCursorState(){return this._cursor.getPrimaryCursorState()}getLastAddedCursorIndex(){return this._cursor.getLastAddedCursorIndex()}getCursorStates(){return this._cursor.getCursorStates()}setCursorStates(source,reason,states){this._withViewEventsCollector((eventsCollector=>this._cursor.setStates(eventsCollector,source,reason,states)))}getCursorColumnSelectData(){return this._cursor.getCursorColumnSelectData()}getCursorAutoClosedCharacters(){return this._cursor.getAutoClosedCharacters()}setCursorColumnSelectData(columnSelectData){this._cursor.setCursorColumnSelectData(columnSelectData)}getPrevEditOperationType(){return this._cursor.getPrevEditOperationType()}setPrevEditOperationType(type){this._cursor.setPrevEditOperationType(type)}getSelection(){return this._cursor.getSelection()}getSelections(){return this._cursor.getSelections()}getPosition(){return this._cursor.getPrimaryCursorState().modelState.position}setSelections(source,selections,reason=0/* NotSet */){this._withViewEventsCollector((eventsCollector=>this._cursor.setSelections(eventsCollector,source,selections,reason)))}saveCursorState(){return this._cursor.saveState()}restoreCursorState(states){this._withViewEventsCollector((eventsCollector=>this._cursor.restoreState(eventsCollector,states)))}_executeCursorEdit(callback){this._cursor.context.cursorConfig.readOnly?
// we cannot edit when read only...
this._eventDispatcher.emitOutgoingEvent(new viewModelEventDispatcher/* ReadOnlyEditAttemptEvent */.Ki):this._withViewEventsCollector(callback)}executeEdits(source,edits,cursorStateComputer){this._executeCursorEdit((eventsCollector=>this._cursor.executeEdits(eventsCollector,source,edits,cursorStateComputer)))}startComposition(){this._cursor.setIsDoingComposition(!0),this._executeCursorEdit((eventsCollector=>this._cursor.startComposition(eventsCollector)))}endComposition(source){this._cursor.setIsDoingComposition(!1),this._executeCursorEdit((eventsCollector=>this._cursor.endComposition(eventsCollector,source)))}type(text,source){this._executeCursorEdit((eventsCollector=>this._cursor.type(eventsCollector,text,source)))}compositionType(text,replacePrevCharCnt,replaceNextCharCnt,positionDelta,source){this._executeCursorEdit((eventsCollector=>this._cursor.compositionType(eventsCollector,text,replacePrevCharCnt,replaceNextCharCnt,positionDelta,source)))}paste(text,pasteOnNewLine,multicursorText,source){this._executeCursorEdit((eventsCollector=>this._cursor.paste(eventsCollector,text,pasteOnNewLine,multicursorText,source)))}cut(source){this._executeCursorEdit((eventsCollector=>this._cursor.cut(eventsCollector,source)))}executeCommand(command,source){this._executeCursorEdit((eventsCollector=>this._cursor.executeCommand(eventsCollector,command,source)))}executeCommands(commands,source){this._executeCursorEdit((eventsCollector=>this._cursor.executeCommands(eventsCollector,commands,source)))}revealPrimaryCursor(source,revealHorizontal){this._withViewEventsCollector((eventsCollector=>this._cursor.revealPrimary(eventsCollector,source,revealHorizontal,0/* Smooth */)))}revealTopMostCursor(source){const viewPosition=this._cursor.getTopMostViewPosition(),viewRange=new core_range/* Range */.e(viewPosition.lineNumber,viewPosition.column,viewPosition.lineNumber,viewPosition.column);this._withViewEventsCollector((eventsCollector=>eventsCollector.emitViewEvent(new viewEvents/* ViewRevealRangeRequestEvent */.Qb(source,viewRange,null,0/* Simple */,!0,0/* Smooth */))))}revealBottomMostCursor(source){const viewPosition=this._cursor.getBottomMostViewPosition(),viewRange=new core_range/* Range */.e(viewPosition.lineNumber,viewPosition.column,viewPosition.lineNumber,viewPosition.column);this._withViewEventsCollector((eventsCollector=>eventsCollector.emitViewEvent(new viewEvents/* ViewRevealRangeRequestEvent */.Qb(source,viewRange,null,0/* Simple */,!0,0/* Smooth */))))}revealRange(source,revealHorizontal,viewRange,verticalType,scrollType){this._withViewEventsCollector((eventsCollector=>eventsCollector.emitViewEvent(new viewEvents/* ViewRevealRangeRequestEvent */.Qb(source,viewRange,null,verticalType,revealHorizontal,scrollType))))}
//#endregion
//#region viewLayout
getVerticalOffsetForLineNumber(viewLineNumber){return this.viewLayout.getVerticalOffsetForLineNumber(viewLineNumber)}getScrollTop(){return this.viewLayout.getCurrentScrollTop()}setScrollTop(newScrollTop,scrollType){this.viewLayout.setScrollPosition({scrollTop:newScrollTop},scrollType)}setScrollPosition(position,type){this.viewLayout.setScrollPosition(position,type)}deltaScrollNow(deltaScrollLeft,deltaScrollTop){this.viewLayout.deltaScrollNow(deltaScrollLeft,deltaScrollTop)}changeWhitespace(callback){const hadAChange=this.viewLayout.changeWhitespace(callback);hadAChange&&(this._eventDispatcher.emitSingleViewEvent(new viewEvents/* ViewZonesChangedEvent */.Ic),this._eventDispatcher.emitOutgoingEvent(new viewModelEventDispatcher/* ViewZonesChangedEvent */.Ic))}setMaxLineWidth(maxLineWidth){this.viewLayout.setMaxLineWidth(maxLineWidth)}
//#endregion
_withViewEventsCollector(callback){try{const eventsCollector=this._eventDispatcher.beginEmitViewEvents();callback(eventsCollector)}finally{this._eventDispatcher.endEmitViewEvents()}}normalizePosition(position,affinity){return this._lines.normalizePosition(position,affinity)}
/**
     * Gets the column at which indentation stops at a given line.
     * @internal
    */getLineIndentColumn(lineNumber){return this._lines.getLineIndentColumn(lineNumber)}}class OverviewRulerDecorations{constructor(){this._asMap=Object.create(null),this.asArray=[]}accept(color,zIndex,startLineNumber,endLineNumber,lane){const prevGroup=this._asMap[color];if(prevGroup){const prevData=prevGroup.data,prevLane=prevData[prevData.length-3],prevEndLineNumber=prevData[prevData.length-1];if(prevLane===lane&&prevEndLineNumber+1>=startLineNumber)
// merge into prev
return void(endLineNumber>prevEndLineNumber&&(prevData[prevData.length-1]=endLineNumber));
// push
prevData.push(lane,startLineNumber,endLineNumber)}else{const group=new viewModel/* OverviewRulerDecorationsGroup */.SQ(color,zIndex,[lane,startLineNumber,endLineNumber]);this._asMap[color]=group,this.asArray.push(group)}}}
/***/}}]);
//# sourceMappingURL=http://localhost:5050/sourcemaps/js/chunk-common-85301f8b.js.map
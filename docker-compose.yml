version: "3.8"

networks:
  bms:
    name: bms
    driver: bridge

services:

  #*********************************************    MYSQL  SERVICE    ************************************************************#
  bms-db:
    platform: "${PLATFORM}"
    image: mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_DATABASE=bmslocal
    volumes:
      - ~/data/mysql:/var/lib/mysql
    networks:
      - bms

  #*********************************************    KAFKA  SERVICES    ************************************************************#
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - '2181'
    volumes:
      - ~/data/zookeeper:/bitnami/zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - bms

  kafka1:
    image: bitnami/kafka:latest
    container_name: kafka1
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka1:9093,EXTERNAL://localhost:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - ~/data/kafka:/bitnami/kafka
    ports:
      - '9092:9092'
      - '9093:9093'
    depends_on:
      - zookeeper
    networks:
      - bms

  akhq: #Kafka Frontend
    image: tchiotludo/akhq:latest
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka1:9093"
    ports:
      - "8000:8080"
    depends_on:
      - kafka1
    networks:
      - bms


  #*********************************************    OPEN TELEMETRY SERVICES    ************************************************************#
  # NOTE : To run these services clone "https://github.com/SigNoz/signoz.git" to your local machine
  # and set env variable CLICKHOUSE_SETUP=<local-signoz-repo>/deploy/docker/clickhouse-setup

  clickhouse:
    image: altinity/clickhouse-server:21.12.3.32.altinitydev.arm
    ports:
      - '9000'
    #   - "8123:8123"
    volumes:
      - ${CLICKHOUSE_SETUP}/clickhouse-config.xml:/etc/clickhouse-server/config.xml
      - ${CLICKHOUSE_SETUP}/data/clickhouse/:/var/lib/clickhouse/
    restart: on-failure
    logging:
      options:
        max-size: 50m
        max-file: "3"
    healthcheck:
      # "clickhouse", "client", "-u ${CLICKHOUSE_USER}", "--password ${CLICKHOUSE_PASSWORD}", "-q 'SELECT 1'"
      test: [ "CMD", "wget", "--spider", "-q", "localhost:8123/ping" ]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - bms

  alertmanager:
    image: signoz/alertmanager:0.23.0-0.1
    volumes:
      - ${CLICKHOUSE_SETUP}/data/alertmanager:/data
    depends_on:
      - query-service
    restart: on-failure
    command:
      - --queryService.url=http://query-service:8080
      - --storage.path=/data
    networks:
      - bms

  query-service:
    image: signoz/query-service:0.8.0
    container_name: query-service
    command: [ "-config=/root/config/prometheus.yml" ]
    ports:
      - '6060'     # pprof port
      - '80'     # query-service port
    volumes:
      - ${CLICKHOUSE_SETUP}/prometheus.yml:/root/config/prometheus.yml
      - ${CLICKHOUSE_SETUP}/../dashboards:/root/config/dashboards
      - ${CLICKHOUSE_SETUP}/data/signoz/:/var/lib/signoz/
    environment:
      - ClickHouseUrl=tcp://clickhouse:9000/?database=signoz_traces
      - STORAGE=clickhouse
      - GODEBUG=netdns=go
      - TELEMETRY_ENABLED=true
      - DEPLOYMENT_TYPE=docker-standalone-arm

    restart: on-failure
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "localhost:8080/api/v1/version" ]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      - clickhouse
    networks:
      - bms

  signoz-frontend:
    image: signoz/frontend:0.8.0
    container_name: frontend
    restart: on-failure
    depends_on:
      - alertmanager
      - query-service
    ports:
      - "3302:3301"
    volumes:
      - ${CLICKHOUSE_SETUP}/../common/nginx-config.conf:/etc/nginx/conf.d/default.conf
    networks:
      - bms

  otel-collector:
    image: signoz/otelcontribcol:0.43.0-0.1
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ${CLICKHOUSE_SETUP}/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - '4317'     # OTLP gRPC receiver
      - '4318'     # OTLP HTTP receiver
      # - "8889:8889"     # Prometheus metrics exposed by the agent
      # - "13133:13133"   # health_check
      # - "14268:14268"   # Jaeger receiver
      # - "55678:55678"   # OpenCensus receiver
      # - "55679:55679"   # zpages extension
      # - "55680:55680"   # OTLP gRPC legacy receiver
      # - "55681:55681"   # OTLP HTTP legacy receiver
    restart: on-failure
    depends_on:
      - clickhouse
    networks:
      - bms

  otel-collector-metrics:
    image: signoz/otelcontribcol:0.43.0-0.1
    command: [ "--config=/etc/otel-collector-metrics-config.yaml" ]
    volumes:
      - .${CLICKHOUSE_SETUP}/otel-collector-metrics-config.yaml:/etc/otel-collector-metrics-config.yaml
    restart: on-failure
    depends_on:
      - clickhouse
    networks:
      - bms


  #*********************************************    BMS CONSOLE    ************************************************************#
  bms-app-1:
    environment:
      - CATALINA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -javaagent:/usr/local/tomcat/opentelemetry-javaagent.jar
      - OTEL_RESOURCE_ATTRIBUTES=service.name=facilio-bms-app-1
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_TRACES_EXPORTER=otlp
    build: .
    ports:
      - "8080:8080"
      - "5005:5005"
    depends_on:
      - kafka1
      - bms-db
      - otel-collector
    networks:
      - bms

  bms-app-2:
    environment:
      - CATALINA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -javaagent:/usr/local/tomcat/opentelemetry-javaagent.jar
      - OTEL_RESOURCE_ATTRIBUTES=service.name=facilio-bms-app-1
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_TRACES_EXPORTER=otlp
    build: .
    ports:
      - "8081:8080"
      - "5006:5005"
    depends_on:
      - kafka1
      - bms-db
    networks:
      - bms
